### YamlMime:UniversalReference
items:
  - uid: Api.Js.SxcJs.Log
    name: Log
    fullName: Log
    children:
      - Api.Js.SxcJs.Log.add
      - Api.Js.SxcJs.Log.entries
      - Api.Js.SxcJs.Log.maxEntries
      - Api.Js.SxcJs.Log.name
    langs:
      - typeScript
    type: class
    summary: A log object which will collect log entries for another ojbect
    package: Api.Js.SxcJs
  - uid: Api.Js.SxcJs.Log.add
    name: 'add(() => string | string, unknown)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a simple message to the log
    syntax:
      content: 'function add(message: () => string | string, data?: unknown)'
      parameters:
        - id: message
          type:
            - () => string | string
          description: >


            preferred usage is with string parameter:

            log.add(`description ${ parameter }`);


            in case that we experience error with normal string parameter, we
            can use arrow function to enclose parameter like this () =>
            parameter

            but use it very rarely, because there is certainly a performance
            implication!

            log.add(`description ${() => parameter}`);
        - id: data
          type:
            - unknown
          description: ''
          optional: true
      return:
        type:
          - string
        description: ''
    package: Api.Js.SxcJs
  - uid: Api.Js.SxcJs.Log.entries
    name: entries
    fullName: entries
    children: []
    langs:
      - typeScript
    type: property
    summary: List of all entries added to this log
    syntax:
      content: 'entries: LogEntry[]'
      return:
        type:
          - 'Api.Js.SxcJs.LogEntry[]'
        description: ''
    package: Api.Js.SxcJs
  - uid: Api.Js.SxcJs.Log.maxEntries
    name: maxEntries
    fullName: maxEntries
    children: []
    langs:
      - typeScript
    type: property
    summary: Maximum amount of entries to add - to prevent memory hoging
    syntax:
      content: 'maxEntries: number'
      return:
        type:
          - number
        description: ''
    package: Api.Js.SxcJs
  - uid: Api.Js.SxcJs.Log.name
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: 'The name of this log, for scenarios where multiple loggers are mixed'
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: Api.Js.SxcJs
references:
  - uid: 'Api.Js.SxcJs.LogEntry[]'
    name: 'LogEntry[]'
    spec.typeScript:
      - name: LogEntry
        fullName: LogEntry
        uid: Api.Js.SxcJs.LogEntry
      - name: '[]'
        fullName: '[]'
