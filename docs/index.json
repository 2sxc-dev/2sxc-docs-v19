{
  "abyss/_abyss-info.html": {
    "href": "abyss/_abyss-info.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Important This is probably not for you. Most of the things in the Abyss are not relevant for developers of App, Razor or JavaScript. It focuses on information of how things work internally, integrations with platforms and more."
  },
  "abyss/advanced.html": {
    "href": "abyss/advanced.html",
    "title": "Advanced Stuff in the Abyss | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Advanced Stuff in the Abyss These are some really advanced things you may want to know about. INFO: this page doesn't do much, removed from menu 2024-02-10"
  },
  "abyss/architecture/controllers.html": {
    "href": "abyss/architecture/controllers.html",
    "title": "EAV / 2sxc Controllers (System Endpoints) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "EAV / 2sxc Controllers (System Endpoints) This is a reference of all Controllers (System WebApi Endpoints) in 2sxc/eav. Warning This in not meant for public use, it's here so you understand how things work. It's also here to help people integrating 2sxc/eav with their solution List of System WebApi Controllers All controllers are implemented using the proxy/real system, except those were specifically noted. Part Route In Controller Purpose & Notes Adam app/[name]/data note1 Sxc Adam REST for ADAM Assets Adam Oqt AppAssets Oqtane only, without proxy/real concept Admin Sxc ApiExplorer Analyse App-Level WebApi Controllers Admin Sxc App Admin the App itself Admin Sxc AppFiles Get files for Code Editor Admin Eav AppParts Export/Import of parts of the App Admin Sxc Dialog Get settings of dialogs Admin Sxc Entity Admin of Entities Admin Eav Features Features to the Features-Management dialogs Admin Sxc Field Admin of Fields - like get all, create new etc. Admin Eav Metadata Admin: Metadata - like get all for a specific target Admin Sxc Query Admin: Query - like create new, import/export etc. Admin Sxc Type Admin: Content Types Admin Sxc View Admin: Views Admin Eav Zone Admin: Zone - information about the current Zone (site) App Oqt AppAssets Oqtane only, without proxy/real concept App app/[name]/data note1 Sxc AppData REST for App Data/Entities App app/[name]/query note1 Sxc AppQuery REST for App Queries Cms Sxc Block Manage Modules on a page Cms Sxc ContentGroup Manage Content-Blocks on a page Cms cms/edit Sxc Edit Edit: Edit data / entities (load/save) Cms cms/history Sxc History Edit: History of an item incl. restore of a previous version Cms cms/list Sxc List In-Page editing of lists Sys sys/insights Eav Insights Insights debugging Sys sys/install Sxc Install Installation of 2sxc on the current system Sys sys/license Eav License License / extensions information Sys sys/log Eav Log Special logging settings Note App Data Some things have a virtual REST route. This includes Adam files Data / Entities The route is basically made of multiple parts [api-root]/app/[app-identifier]/[topic]/[optional-details] We'll document this more in future. History Documented for v13.03 (March 2022)"
  },
  "abyss/architecture/index.html": {
    "href": "abyss/architecture/index.html",
    "title": "EAV / 2sxc / Dnn Architecture | 2sxc 19 for Dnn and Oqtane",
    "keywords": "EAV / 2sxc / Dnn Architecture 2sxc is simple to use, but to enable that, it's pretty sophisticated on the inside. We'll give you an overview here, so you can better understand what you are using. Overall Architecture The Storage Systems This is fairly straight forward - data can be stored in SQL (spread across tables or using JSON) and the File System (stored as JSON). Note that assets like images are not handled here, but in the EAV-Apps layer (see below). The EAV Layer The data management system underneath everything is called the EAV - which stands for Entity, Attribute, Value. Anything in that namespace is about internal data models, reading/saving data etc. So anything inside the ToSic.Eav.Data is all about the internals, which you only need in special scenarios. The same applies to ToSic.Eav.Apps which is the sub-system responsible for combining data into virtual bundles called Apps. You can usually ignore this. The SXC Layer On top of the EAV layer we have the Sxc layer. It's responsible for Content Management on top of the App model provided by the EAV. The Sxc layer provides things like IDynamicEntity to let you code like @Content.Title. This is usually more interesting for you, but still fairly generic, because 2sxc is also meant to work with other platforms like NopCommerce, Orchard or Oqtane, but it hasn't been implemented yet. The Dnn Layer On top of the Sxc layer we have the Dnn layer. It connects 2sxc with Dnn. Usually when you're writing code and want to know about the API, you'll typically start here, and drill down to the other APIs as needed. Architecture of the EAV Layer Inside the EAV you'll find a whole ecosystem of parts which make the magic happen. Infrastructure This is very internal stuff, to make sure everything happens. You will usually not go here. Most if it is also not public API. Areas of interest may be the ToSic.Lib.Logging or ToSic.Eav.LookUp. Core Data Models This is more interesting and relevant to you, when you want to dive deep into the data model. Again you should note that this is advanced stuff. You'll find it in ToSic.Eav.Data - the most common bit you may care about is IEntity and IContentType. Data Processing This is where things get relevant for you. Check out the ToSic.Eav.DataSources to find all the bits and pieces used to process, filter and cache data. Storage This is still more an internal bit, and as of now you shouldn't use it. App System and Assets Another part that you may want to know more about. Here is where data is clustered together into virtual containers called Apps. These contain all the content-types and items of an App. It also has view-definitions, Content-Blocks (the logical unit usually called a Module in Dnn) and way more. You'll find it in ToSic.Eav.Apps. The assets - usually using ADAM - are found in ToSic.Eav.Apps.Assets. Web API This is ATM an internal section, mainly for connecting Dnn WebAPIs to the EAV. Not documented as of now. The Fine Line Between Eav.Apps and Sxc.* To keep the architecture clean, it's important to draw a clear line between Apps and what Sxc does. Basically it's this: Eav.Apps are virtual containers bundling things together. This means content-types, data, queries, settings, etc. Sxc is all about (Web) Content Management. So anything related to views, templates, assets, content-blocks is in Sxc. Specifically, these things may not be in Apps, and must be in Sxc Templates Rendering Engines like Token/Razor Content-Blocks Custom WebApi (which is also kind of a dynamic rendering engine)"
  },
  "abyss/cdn/index.html": {
    "href": "abyss/cdn/index.html",
    "title": "2sxc CDNs (Content Delivery Networks) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc CDNs (Content Delivery Networks) CDNs (Content Delivery Networks) are the backbone of the internet. They are usually used to get common files from all over the universe such as: Fonts (icons, ...) JavaScripts (galleries, ...) CSS (bootstrap, ...) But they have a major problem: It's unclear which CDNs track users. This can cause major GDPR issues. For example, many fonts are provided by Google Fonts, which can get you into legal trouble with the EU. Here's a summary of the problems: Some CDNs are not GDPR compliant - or you simply don't know If you use CSP (Content Security Policy) you may have to whitelist many CDNs How 2sxc uses CDNs 2sxc is simple to install, use and customize. Part of this comfort is possible thanks to CDNs. For example, let's say you have multiple 2sxc Apps which use FancyBox (a cool JavaScript lightbox). 2sxc allows these Apps to just say \"I need Fancybox5\" using Kit.Page.Activate(\"Fancybox5\") and 2sxc will automatically get it from a CDN. The reason this is important, is because all parts of the page should use the same version of fancybox. Otherwise two Apps on the same page could break each other. So 2sxc has a list of standardized resources which are retrieved on demand when needed. These are loaded from CDNs by default - to keep the installation small. An admin can always modify this list to point to other locations, but it's hard work, and it's easy to miss something. In addition, the Edit UI and some Admin/Dev-UIs use CDNs to load large resources. The code editor uses Monaco (Visual Studio Code) which can be 20+ MB to download. Divide and Conquer the Problem To solve this, we had to figure out solutions for: efficiently get all the dependencies to create an own CDN create a 2sxc CDN with all important resources which is under our control allow others to use the resources to create their own CDN allow admins to point specific resources to their preferred location create global settings to automatically use a predefined CDN for everything (Patrons only) The 2sxc Resources Git Repo We created / scripted a Git Repository which contains all the resources we need. You can find it on https://cdn.2sxc.org/. You can use this as a starting point in case you yourself wish to create a CDN. As of now (v16.00 2023-05) it contains all the resources for public JavaScripts, css and fonts provided as Resources in 2sxc icons and fonts used in the Edit UI In future, we plan to extend it with resources used by other Admin UIs such as the code editor. cdn.2sxc.org Using the Git Repo, we created a CDN which is under our control. It's published as GitHub Pages on https://cdn.2sxc.org/. GitHub uses CloudFlare to distribute the pages, so it's fast and reliable. \uD83D\uDCA1 You can simply use this CDN for your own projects - we don't collect any data Create your own Custom CDN If you want to create your own CDN, you can simply fork the Git Repo and publish it on your own. You can also just keep the parts you need and copy them to your site, eg. to /cdn/. Quick-Configure Resources for Custom CDN The easiest way to do it is by using a simple setting in the UI like this: This is a Patrons Sentinel only feature. So if you want it fast, simple and fire/forget, just become a patron \uD83E\uDDB8\uD83C\uDFFD‍♀️. Manually Configure Resources for Custom CDN If you want to do it manually, you can do it like this: Go to the resources management Select each resource you want to change and enter a different HTML block for these resources History Developed in 2sxc 15.04 for the public resources and Edit UI Released in 2sxc 16.00 LTS Shortlink: https://go.2sxc.org/cdn"
  },
  "abyss/contribute/build.html": {
    "href": "abyss/contribute/build.html",
    "title": "Build / Compile 2sxc / EAV / JS Parts | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Build / Compile 2sxc / EAV / JS Parts Important: If you only want to USE 2sxc / EAV, then you do NOT need this. This is meant for people who want to contribute to the source code of 2sxc and EAV. Tip This is very new documentation and applies to 2sxc 16.06+ Concept 2sxc has a few git repositories, each with their own build process. But in general they all follow the same principles: When you compile a project, it will first compile the standard way, into the dist (JS) or bin (C#) folder The build process (WebPack or MSBuild) will then check the current folder and all parent folders for a file 2sxc-build.config.json to determine places which it should copy things to... If not found, it will use 2sxc-build-fallback.config.json which is located in the root of each repository - this is basically empty but should reference these docs. Use Cases Use Case 1: Build a Part and Copy Manually Let's assume you just got started and want to try something in partial project. You can just pull the repo, npm-ci everything and build. As a result you'll have the compiled JS in the dist folder and can manually copy it to folder of any DNN/Oqtane as you wish. Use Case 2: Build a JS Library and Copy to DNN/Oqtane Automatically In this scenario you would do the same as above, but in addition to that, create a 2sxc-build.config.json file in the repo folder with the specs. Use Case 3: Build Everything Automatically This is the scenario that the 2sxc team uses to build everything automatically. This is our folder structure: C:\\Projects\\2sxc the root folder C:\\Projects\\2sxc\\2sxc-build.config.json - The config file in our root c:\\Projects\\2sxc\\2sxc-dnn961.dnndev.me\\Website - our main DNN installation for verifying DNN 9.6.1 C:\\Projects\\2sxc\\Oqtane\\oqtane.framework\\Oqtane.Server - our main Oqtane installation for verifying Oqtane 4.x C:\\Projects\\2sxc\\2sxc - the main 2sxc C# repo C:\\Projects\\2sxc\\2sxc-ui - the 2sxc JS repo C:\\Projects\\2sxc\\eav-server - the eav C# repo C:\\Projects\\2sxc\\eav-ui - the EAV JS parts repo C:\\Projects\\2sxc\\InstallPackages the location where the final ZIP and NuGets are created And this is the 2sxc-build.config.json mentioned above: { \"JsTargets\": [ \"C:/Projects/2sxc/2sxc-dnn/Website/DesktopModules/ToSIC_SexyContent\", \"C:/Projects/2sxc/Oqtane/oqtane.framework/Oqtane.Server/wwwroot/Modules/ToSic.Sxc.Oqtane\", ], \"DnnTargets\": [ \"C:/Projects/2sxc/2sxc-dnn961.dnndev.me/Website\", ], \"OqtaneTargets\": [ \"C:/Projects/2sxc/oqtane/oqtane.framework/Oqtane.Server\", ], \"Sources\": [ \"C:/Projects/2sxc/2sxc-sources/_latest\", ], \"DnnInstallPackage\": \"C:/Projects/2sxc/InstallPackages/Dnn-Installer\", \"OqtaneInstallPackage\": \"C:/Projects/2sxc/InstallPackages/OqtaneModule\" } History New in 2023-09 v16.06 Shortlink: https://go.2sxc.org/build"
  },
  "abyss/contribute/code.html": {
    "href": "abyss/contribute/code.html",
    "title": "Contribute to 2sxc / EAV - Setup | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Contribute to 2sxc / EAV - Setup Important: If you only want to USE 2sxc / EAV, then you do NOT need this. This is meant for people who want to contribute to the source code of 2sxc and EAV. Pre-Requisites Visual Studio 2019 MSBuild Community Tasks 1.4 or newer (required for automatic module packaging if you want to create dnn-module packages of 2sxc to distribute to another dnn) https://github.com/loresoft/msbuildtasks or chec https://www.microsoft.com/en-in/download/details.aspx?id=19372 SQL Server 2017 or newer You have a working DNN 7.4.2 or higher with 2sxc already installed as a module, ideally in c:\\projects\\2sxc-dnn742\\ or something similar Basics The full solution pulls together 4 Github projects, some responsible for server-code, some for UI, some for in-page JS. We separated these to make it easier to contribute to a specific part without worrying about the rest. If you only want to contribute to something small - like the languages / translations - then you only need to download that repository. In the complex scenarios each project can build into the other target, so if you want to work full-stack and use all of the automation, you will want to put everything in C:\\Projects\\2sxc\\. Contribute with Pull-Requests After you have made changes, you cannot just push the code back to our repo, since you probably won't have write permissions on the main repo. The correct procedure then is to fork the main repo into yours, and push into your own online repo. Then start a pull request, which we can then process. Setup Git Repos to use Use this checklist: GIT Branches We use the git-flow convention, and you should familiarize yourself with this, to properly work with the branches. As of now, the development-branch is called dev but we'll rename it to develop within the next few days. The EAV / 2sxc Server Solution Basically if you open the solution in the eav-server folder, it will open all the EAV server (C#) code and 2sxc code in Visual Studio. This is very important, because if you build anything extensive and rename anything, it guarantees that everything is correctly updated. The 2sxc UI This extends the EAV-UI with more field types, adds configuration and also adds a lot of other JS. if you run the gulp develop it too will auto-build and copy to the live Dnn / 2sxc site."
  },
  "abyss/contribute/dev-env-changes/19.01.html": {
    "href": "abyss/contribute/dev-env-changes/19.01.html",
    "title": "Changes to the Dev Environment in v19.01 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Changes to the Dev Environment in v19.01 In v19.01 we changed System.Text.Json to use .net 9. Because of this, the web.config must in DNN change. When people install 2sxc, this happens automatically, but not in a dev-environment. These are the new values you need - make sure you comment out the old versions: <dependentAssembly> <assemblyIdentity name=\"System.Collections.Immutable\" publicKeyToken=\"B03F5F7F11D50A3A\" culture=\"neutral\"/> <bindingRedirect oldVersion=\"0.0.0.0-9.0.0.0\" newVersion=\"9.0.0.0\"/> </dependentAssembly> <dependentAssembly> <assemblyIdentity name=\"Microsoft.Bcl.AsyncInterfaces\" publicKeyToken=\"CC7B13FFCD2DDD51\" culture=\"neutral\"/> <bindingRedirect oldVersion=\"0.0.0.0-9.0.0.0\" newVersion=\"9.0.0.0\"/> </dependentAssembly> <dependentAssembly> <assemblyIdentity name=\"System.Text.Encodings.Web\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" /> <bindingRedirect oldVersion=\"0.0.0.0-9.0.0.0\" newVersion=\"9.0.0.0\" /> </dependentAssembly> <dependentAssembly> <assemblyIdentity name=\"System.Text.Json\" culture=\"neutral\" publicKeyToken=\"cc7b13ffcd2ddd51\" /> <bindingRedirect oldVersion=\"0.0.0.0-9.0.0.0\" newVersion=\"9.0.0.0\" /> </dependentAssembly> History Changed in 2025-01-17 v19.00.01"
  },
  "abyss/contribute/docs/_docs-for-many-projects.html": {
    "href": "abyss/contribute/docs/_docs-for-many-projects.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live"
  },
  "abyss/contribute/docs/build/docs-and-code.html": {
    "href": "abyss/contribute/docs/build/docs-and-code.html",
    "title": "Build the Docs with Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Build the Docs with Code Tip This expands on the initial Build Docs Only guide, to include the code. So make sure that works, before you continue here. Setup Everything For the Code + Docs build the code must be in the correct location near the docs project. This is because the C# code is compiled and the XML-comments are extracted from the compiled code. As this documentation-guide is for multiple projects, each one is explained separately. Setup Code / Docs for the Solutions \uD83C\uDF34 2sxc \uD83E\uDE78 Oqtane ♾️ cre8magic Ensure that you have set up the complete 2sxc/EAV development environment. This environment should be configured and functional for the development of C# and JavaScript code. ➡️ For more information refer to the Code documentation. Ensure that you have set up the complete Oqtane development environment. ➡️ See Oqtane Docs Setup TODO: Build and Test Locally Depending on your preferred toolchain, you can use VS Code (recommended ⭐) Visual Studio 2022 (not recommended) VS Code ⭐ Visual Studio Building and previewing everything with VS Code is the recommended ⭐ way. Open the *.code-workspace workspace and build the same way as with the docs-only scenario... ...except that we want to run docfx: build. In the output you should then see a bunch of stuff - ending with Build Succeeded It is generated into the root /docs folder. Test Locally Recommended \uD83C\uDF1F: Use the Live Server extension to serve the /docs folder on http://localhost:5500` using Alt + L, Alt + O. Alternative: Set up IIS to publish the /docs folder on a domain such as docs.oqtane.me (not recommended as unnecessarily complex). Building and previewing everything with Visual Studio 2022 is not recommended because it's way slower, more difficult and doesn't provide a great experience. Open the *.sln solution located in the /docs-src folder. Rebuild the entire solution. It is generated into the root /docs folder. Test Locally Just run IIS Express with F5 Alternatively: Set up IIS to publish the /docs folder on a domain such as docs.oqtane.me (not recommended as unnecessarily complex). How it Works The documentation development takes place in this 2sxc-docs GitHub repository. The documentation is generated from *.yml and *.md files and 2sxc/EAV's C# and JavaScript source code. Troubleshooting Before you do any of this troubleshooting, make sure you already did the Build Docs Only Troubleshooting steps. Issue with Code-Docs being Out-of-Date To see your updates in the locally hosted IIS website, make sure to use the Rebuild Solution option. Verify the Code Build If docfx encounters an error when building a .NET project, you can manually attempt to build the project. This allows you to get more information about the error and address it. You can do this with the following commands: cd c:\\[your-path]\\2sxc\\Src\\Dnn\\ToSic.Sxc.Dnn dotnet build Upon successful execution, you should see the message: Build succeeded."
  },
  "abyss/contribute/docs/build/docs-only.html": {
    "href": "abyss/contribute/docs/build/docs-only.html",
    "title": "Build the Documentation Only | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Build the Documentation Only All of these projects come with a setup to only build the documentation, without the need to compile the C# code. This is much faster and easier, and is the recommended way to work on the documentation. This page explains how to do this. Make sure you have already done the steps in Run Locally using VS-Code. Prerequisite: Install DocFX The documentation tool we use is docfx, which needs to be installed on your development machine. You can install it using the following command: dotnet tool install -g docfx Build and Test Locally Depending on your preferred toolchain, you can use VS Code (recommended ⭐) Visual Studio 2022 (not recommended) VS Code ⭐ Visual Studio Building and previewing everything with VS Code is the recommended ⭐ way. Open the *.code-workspace workspace in the docs-src in VS Code. for \uD83C\uDF34 2sxc it's the /2sxc Docs Generator/2sxc Docs.code-workspace for \uD83E\uDE78 Oqtane it's the /src/Oqtane.Docs.code-workspace for ♾️ cre8magic it's the /docs-src/cre8magic.code-workspace Hit Ctrl + Alt + B to see the build-commands. You can also use Ctrl + Shift + P and selecting \"Run Task\" ...and then \"Build\" For now, we only want to run docfx: build docs (skip building API, faster for documentation). In the output you should then see a bunch of stuff - ending with Build Succeeded It is generated into the root /docs folder. Tip This is much faster than the full build, as it doesn't compile the C# code, so it also doesn't need the source code to be available in the correct location. After build, you can preview the documentation in your browser using the Live Server extension. Building and previewing everything with Visual Studio 2022 is not recommended because it's way slower, more difficult and doesn't provide a great experience. Open the *.Docs.sln solution located in the /src folder. Rebuild the entire solution. It is generated into the root /docs folder. Test Locally Just run IIS Express with F5 Alternatively: Set up IIS to publish the /docs folder on a domain such as docs.oqtane.me (not recommended as unnecessarily complex). How it Works The documentation development takes place in this docs repository. The documentation is generated from *.yml and *.md files and previously generated *.yml files from the C# and JavaScript source code. TODO:! Troubleshooting Build Error because Files are In-Use Sometimes the build will fail, because the Live Server accessed them while docfx tried to write the files. In such a situation, just run the build again. If that doesn't help, stop the Live Server and try again. Issue Locked dotnet-tools.json If you encounter build errors like shown below: Try to execute the following commands in terminal: Unblock-File -Path .\\.config\\dotnet-tools.json dotnet tool restore` After running these commands, the build errors should be resolved. Verify Docfx Works To verify whether docfx can successfully build the documentation, use the following command in the VS-Code terminal: docfx The successful execution of this command should display the message: Build succeeded."
  },
  "abyss/contribute/docs/build/index.html": {
    "href": "abyss/contribute/docs/build/index.html",
    "title": "Build the Documentation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Build the Documentation Start with Visual Studio Code ➡️ Make sure you already did the steps in Run Locally using VS-Code. Install DocFX The documentation tool we use is docfx, which needs to be installed on your development machine. You can install it using the following command: dotnet tool install -g docfx Two Build Processes: Docs and Docs+Code We've configured the most important build commands in VS-Code so you can just get started. They are located in .vscode/tasks.json. Hit Ctrl + Alt + B to see the build-commands. These two are of interest: docfx: build docs (skip building API, faster for documentation) will only build the markdown files, which is much faster if you're only working on the docs. Note that this should work, even if the C# code doesn't compile. docfx build will compile the real source code, generate the docs from the XML-comments and merge them with this project's markdown files. Basic Build: Docs Only ➡️ Build Docs Only Advanced Build: Code + Docs ➡️ Build Docs and Code"
  },
  "abyss/contribute/docs/build/oqtane/index.html": {
    "href": "abyss/contribute/docs/build/oqtane/index.html",
    "title": "Setup to Build Oqtane Docs + Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Setup to Build Oqtane Docs + Code To set everything up, clone the oqtane.docs and the oqtane.framework repositories in the same parent folder (e.g., c:\\projects\\oqtane), creating a structure like: c:\\projects\\oqtane (example) oqtane.docs cloned from oqtane.docs oqtane.framework cloned from oqtane.framework some-root\\ ├── oqtane.docs ├── oqtane.framework That will look like this: Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/conventions.html": {
    "href": "abyss/contribute/docs/conventions.html",
    "title": "Documentation Conventions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Documentation Conventions The following conventions should help all docs contributors work together. Images / Files / Assets When using files, especially images, please follow these conventions. 1. Remember: Case Sensitive when Hosted Be aware that the final docs will be hosted on github, which is case-sensitive. So MyImage.png and myimage.png are different files This is important when you're linking to files Always use lower-case file names Note If you accidentally get this wrong (eg. MyImage.png), and linking myimage.png it will work on your IIS/Windows, but not when finally hosted on Github. 2. Put Files Close to Where They Are Used Put all files in the assets folder below the page where they are used. This makes it easier to find the files when you're editing the page. It also makes it easier to move the page to a different location. This also helps to \"see\" when files are not used any more. Only use files in the \"own\" asset folder. Don't use files from far-away asset folders. 3. Use Relative Paths ./assets/myimage.png or assets/myimage.png Rarely ../assets/myimage.png (only if you're in a sub-folder), but the file is still part of the same topic and should be reused Documentation Tags If you find such tags in a documentation, this means that whatever you are reading is marked because it's not done, needs more documentation or whatever (or that we forgot to remove the marker). wip - This tag means Work-In-Progress. todoc - This means that the feature exists, but needs documentation - you could help contribute :). todo - This means that something should be done some time. Creativity and Contribution There's no hard and fast rule about how you create or edit images and videos. Any contribution is welcome. Feel free to use tools that you're comfortable with. For instance, Windows Screen Snippet is a fast and easy tool for creating and saving files. Remember, the goal is to make the documentation as clear and helpful as possible. Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/deploy/index.html": {
    "href": "abyss/contribute/docs/deploy/index.html",
    "title": "Deploy the Docs to GitHub | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Deploy the Docs to GitHub This documentation is static HTML which can be hosted on any web server. As of now it's hosted an GitHub Pages, which automatically hosts the /docs folder of this repository. Push the result back to the repository. GitHub will automatically publish the updated documentation to: \uD83C\uDF34 2sxc: https://docs.2sxc.org \uD83E\uDE78 Oqtane: https://docs.oqtane.org ♾️ cre8magic: https://cre8magic.blazor-cms.org/ How it Works For this to work, the GitHub repository must be configured to host GitHub pages. After every push, GitHub will review the /docs folder and publish it to the configured URL. This can take between 1 and 10 minutes. Warning Github allows us to use our own domain name (otherwise it would be https://2sic.github.io/2sxc-docs or something). But this is a bit fragile, a file called CNAME must be in the /docs folder with the domain name in it. If it is deleted, the domain will stop working and a repo-admin will need to configure the domain anew. Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/edit/attribution.html": {
    "href": "abyss/contribute/docs/edit/attribution.html",
    "title": "Authors and Attribution | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Authors and Attribution In the documentation, we want to give credit to the authors of the content. This is done by adding a small attribution at the end of each page. Here is an example: [!include[](~/shared/authors/iJungleboy/_main-author.md)] This will render as: Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy How it Works All authors which want attribution should create a page in a subfolder of the shared/authors/ folder. Please follow the existing conventions for the _main-author.md file and also for the image which is to be used in the assets subfolder. Note that the _main-author.md should be the main author of the page, and other authors may be added later, with a smaller attribution (not specified yet). History New ca. 2024-11"
  },
  "abyss/contribute/docs/edit/docfx-toc.html": {
    "href": "abyss/contribute/docs/edit/docfx-toc.html",
    "title": "Table of Contents in DocFx | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Table of Contents in DocFx DocFx uses YAML files called toc.yml for the table of contents. Typically these will be small files located in various folders, which define the structure of the documentation. Here's an example: - name: Introduction href: index.md items: - name: What is 2sxc href: what-is-2sxc.md - name: Why 2sxc href: why-2sxc.md There are a few important things to know: Sections in the Table of Contents Each entry looks a bit like this: - name: Introduction thing1: someValue thing2: anotherValue thing3: yetAnotherValue items: - name: This is a Sub Section href: sub-section.md - name: This is another Sub Section href: another-sub-section.md As you can see, it expects a - name prefixed by a dash + space. The following lines which belong to this name must be indented by 2 spaces. Tip YAML uses indentation to define the structure. The items key is a special key which contains a list of sub-sections. Anything below that is again indented. Note that we rarely use items, since we usually just reference other TOC files (explained below). Linking to Files & Websites Typically we'll reference another file like this: - name: Introduction href: index.md - name: What is 2sxc href: what-is-2sxc.md - name: Something in a subfolder href: subfolder/some-file.md - name: Something in a parent folder href: ../some-file.md You can also create links to external websites like this: - name: Introduction href: https://www.2sxc.org Linking with Permalinks (UIDs) For more robust linking we usually use UIDs. In this scenario, pages have a small header like this: --- uid: Abyss.Contribute.Docs.Edit.Toc --- The toc.yml can then reference it like this: - name: Edit Table of Contents uid: Abyss.Contribute.Docs.Edit.Toc Tip This is very powerful because it allows us to move pages around without breaking links. So for extensive documentations, we always use UIDs. Linking to Namespaces and Objects The same UID concept applies to namespaces and objects. Their UIDs are automatically generated by DocFx, and match the full namespaces of the C# objects. - name: Namespace uid: ToSic.Eav.Data - name: Class uid: ToSic.Eav.Data.IEntity - name: Property uid: ToSic.Eav.Data.IEntity.Title Adding a few Sub-Nodes in the TOC If you want to add a few sub-nodes to a TOC, you can add them directly below items reference another TOC file Here's how you would add a few sub-nodes directly, which open when the Introduction page is visited: - name: Introduction href: index.md items: - name: What is 2sxc href: what-is-2sxc.md - name: Why 2sxc href: why-2sxc.md You can also do the same without a real Introduction page, so that the Introduction title is shown, but clicking it will only unfold the menu: - name: Introduction items: - name: What is 2sxc href: what-is-2sxc.md - name: Why 2sxc href: why-2sxc.md If you want to reference another TOC file, continue below... Structuring - Loose vs. Tight The TOC can be structured in a loose or tight way. Loose Structure The loose way assumes that there is no real hierarchy, and that the TOC is just a list of links. When docfx shows a page, it will find all toc.yml files which reference it and pick \"the best\" TOC to show. In this scenario, there is no overall structure. To explain this, let's assume we have 3 files: The root toc.yml which links to various pages including the /abyss/index.md - name: Home href: index.md - name: Abyss href: abyss/index.md - name: Guides items: - name: Guide 1 href: guide1.md - name: Guide 2 href: guide2.md The abyss/toc.yml which also links the /abyss/index.md - name: Abyss href: index.md - name: Something in the Abyss href: something.md The /abyss/index.md file not shown here. The resulting output will do this: When the user is on the root, he will see the Home and Abyss links. These will not have sub-links! - Home - Abyss # note: no (+) to unfold + Guides # note: (+) to unfold as it's a true hierarchy When the user is on the /abyss/index.md page, the initial TOC will not be shown any more, as it's not relevant. The TOC will now show the Abyss TOC, which will show the Abyss link - Abyss - Something in the Abyss Tip We call this loosely structured, because the TOCs don't really have a hierarchy. Tip This is not the recommended way for most scenarios, but there are cases where this is a good choice. An example is the main menu, where we don't want to have dropdowns for every sub-item. Tight Structure The tight way assumes that there is a clear hierarchy, and that the TOC is a tree. In this scenario, the root toc.yml will reference all sub-TOCs, and each sub-TOC will reference its sub-TOCs. To explain this, let's assume we have 3 files: The root toc.yml which links to the /abyss/toc.yml - name: Home href: index.md - name: Abyss href: abyss/toc.yml The abyss/toc.yml which links the /abyss/index.md - name: Abyss href: index.md - name: Something in the Abyss href: something.md The /abyss/index.md file not shown here. The resulting output will do this: When the user is on the root, he will see the Home and Abyss links. These will have sub-links! - Home + Abyss # note: (+) to unfold When the user is on the /abyss/index.md page, the initial TOC will still be shown. The TOC will now also show the Abyss TOC, which will show the Abyss link. - Home + Abyss # note: (+) to unfold - Abyss - Something in the Abyss Combine href and uid You can combine href and uid like this: - name: Abyss uid: Abyss.Contribute.Docs.Edit.Toc href: abyss/toc.yml This makes the word Abyss be a link to Abyss.Contribute.Docs.Edit.Toc, and also connects the hierarchy. So the output & behavior will be: + Abyss # note: (+) to unfold You can now click on the Abyss link to go to the Abyss.Contribute.Docs.Edit.Toc page. You can also click on the + to unfold the Abyss TOC. Tip This is usually our recommended way to structure the TOC. It allows you to make the parent-node the \"overview\" page, and the child-nodes the details. Edge Cases Combine href for link and href for sub-TOC In a rare case you may have a TOC which is both a non-UID link and a sub-TOC. - name: Abyss href: abyss/toc.yml topicHref: something.md See also DocFx TOC documentation Interesting TOC-Schema discussion"
  },
  "abyss/contribute/docs/edit/galleries.html": {
    "href": "abyss/contribute/docs/edit/galleries.html",
    "title": "Image Galleries | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Image Galleries All images automatically get a Lightbox attached, but you can also create galleries. Galleries are made by placing a <div gallery=\"name\"> around a set of images. This has 2 effects: All images will automatically be sized much smaller, so they appear as thumbnails. The javascript which attaches the lightbox will know that these images belong together. Here's an example: <div gallery=\"gallery4\"> <img src=\"./assets/existing-inherit-01.jpg\"> <img src=\"./assets/existing-inherit-02.jpg\"> <img src=\"./assets/existing-inherit-03.jpg\"> </div> Implementation Details The mechanics behind this are a combination of Fancybox (a lightbox library) and a custom script which will automatically attach the lightbox to all images and group them together. History Gallery feature implemented 2024-11"
  },
  "abyss/contribute/docs/edit/images.html": {
    "href": "abyss/contribute/docs/edit/images.html",
    "title": "Working with Images & Lightboxes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Working with Images & Lightboxes Location for Normal Files This applies to screenshots and other illustrations such as diagrams, etc. The principle is that images should be placed near the content which references them. This makes it easier to understand the context and also makes it easier to maintain the documentation. Tip Images should usually be placed in a subfolder called ./assets/ near the markdown file which references them. Location for Re-Used Logos Use the /assets root folder and stick to the structure there: /assets (contains all the assets) logos (contains various logos, for re-use in various versions) features (feature logos used in page headers) If you have any other image/file needs which need different structure, please discuss with Daniel @iJungleboy. File Naming Use lower case, kebab-case file names for images, like my-image.png. Original Images Always keep the original images in the repository, in the same folder as the final image. For example, we have a lot of .snagx files (SnagIt) which would allow us to make adjustments like correct arrows etc. Insert Images (Markdown vs. HTML) Images can be added it two ways - using markdown, or the HTML counterpart. We recommend to always place images in an assets folder below the markdown file you're using the image on. Use the Markdown syntax ![alt-text](/assets/path/file.ext) Use the HTML syntax which allows to to set class and more. <img src=\"/assets/path/file.ext\" alt=\"alt-text\"> We usually prefer the <img> syntax, because we often need to add classes or other attributes. Lightboxes These docs were crafted to include Fancybox lightboxes for images. Images will automatically get a lightbox attached when running in the browser. This happens automatically because the technical implementation has a special JS file which will automatically attach the lightbox to all images. This happens in the /templates/2sxc/src/images.ts file. Note that it only applies this to images which are not logos or other special images. History Lightbox feature implemented ca. 2018 Gallery feature implemented 2024-11"
  },
  "abyss/contribute/docs/edit/markdown-code.html": {
    "href": "abyss/contribute/docs/edit/markdown-code.html",
    "title": "Markdown to Show Code Snippets | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Markdown to Show Code Snippets Inline Code Inline code starts and ends with a backtick ` character - like `code` - it will then look like code Multi-Line Code Blocks Multi-line code blocks start with three of these, like ``` var x = 17; // a comment ``` resulting in var x = 17; // a comment Syntax Highlighting Multi-line code with syntax highlighting needs you to specify the language c#: ```c# var x = 17; // a comment ``` resulting in var x = 17; // a comment Supported Languages DocFX supports many languages for syntax highlighting, including: c# / cs / csharp js / javascript / ts / typescript html xml json yml / yaml css / scss / less sql text bash / shell / powershell markdown Because of changes we applied to highlightjs, we can now also support: razor"
  },
  "abyss/contribute/docs/edit/markdown.html": {
    "href": "abyss/contribute/docs/edit/markdown.html",
    "title": "Markdown Basics | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Markdown Basics If you're new to wikis or github comments / documentation, you may be a bit lost when it comes to markdown. Markdown is a simple way to format text, and it's used in many places on the internet. It's easy to learn and use, and it's a great way to format text for the web. Here's an example: # This is a header This is some text. You can make text **bold** or _italic_. * This is a list * With some items Refer to Markdown for how to write markdown files. Here the most important tips for people working with this: Use Markdown Linting To make sure your markdown is well-formatted, you can use a linter. A linter is a tool that checks your code for errors and formatting issues. For our setup, we recommend the the Markdown Lint extension. \uD83D\uDCA1 The linter should already be installed if you followed the basic setup instructions. Markdown for Text I think the most important things you need to know are these. Headers have 1-6 hashes in front, like ## Header 2 bold uses two * chars around the text, _italic_ uses one _ char escape chars with the \\ slash (so any character right after a \\ is shown and doesn't format) Linking has many options, better read the manuals Lists have many options, better read the manuals Images use a ![alt-text](/assets/path/file.ext) syntax Note that line-breaks usually don't cause a line-break in the result (except in code-samples). You can enforce a simple line break by adding two spaces at the end of a line like \"check out: \" (two spaces after the \":\") Markdown Links Link to a website [website](https://www.oqtane.org/) Link to another page [page](./galleries.md) Link to some namespace [](xref:ToSxc.Eav.Data) - will automatically pick the name of the target Link to a class [](xref:ToSxc.Eav.Data.IEntity) Markdown Checklists (IFrame) If you want to add checklists like this example, just use this checklist \uD83D\uDE0E Markdown Videos Todo Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/edit/mermaid.html": {
    "href": "abyss/contribute/docs/edit/mermaid.html",
    "title": "Mermaid Diagrams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Mermaid Diagrams DocFx supports Mermaid diagrams, which are a simple way to create diagrams in markdown. Here is an example: ```mermaid graph TD; A-->B; A-->C; B-->D; C-->D; ``` This will render as: graph TD; A-->B; A-->C; B-->D; C-->D; More Examples Flowchart Sequence Diagram Gantt Chart Class Diagram Pie Chart State Diagram flowchart TD %% Nodes A(\"fab:fa-youtube Starter Guide\") B(\"fab:fa-youtube Make Flowchart\") n1@{ icon: \"fa:gem\", pos: \"b\", h: 24} C(\"fa:fa-book-open Learn More\") D{\"Use the editor\"} n2(Many shapes)@{ shape: delay} E(fa:fa-shapes Visual Editor) F(\"fa:fa-chevron-up Add node in toolbar\") G(\"fa:fa-comment-dots AI chat\") H(\"fa:fa-arrow-left Open AI in side menu\") I(\"fa:fa-code Text\") J(fa:fa-arrow-left Type Mermaid syntax) %% Edge connections between nodes A --> B --> C --> n1 & D & n2 D -- Build and Design --> E --> F D -- Use AI --> G --> H D -- Mermaid js --> I --> J %% Individual node styling. Try the visual editor toolbar for easier styling! style E color:#FFFFFF, fill:#AA00FF, stroke:#AA00FF style G color:#FFFFFF, stroke:#00C853, fill:#00C853 style I color:#FFFFFF, stroke:#2962FF, fill:#2962FF %% You can add notes with two \"%\" signs in a row! sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts <br/>prevail... John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! gantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2022-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2022-01-12 , 12d another task : 24d classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal Fish : +int fins Fish : +int scales Zebra : +bool is_wild Zebra : +bool is_striped pie title Key elements in Product X \"Calcium\" : 42 \"Potassium\" : 21 \"Magnesium\" : 12 \"Iron\" : 9 stateDiagram [*] --> Still Still --> [*] Still --> Moving Moving --> Still Moving --> Crash Crash --> [*] To create your own diagrams, you can use the Mermaid free Playground or the older Mermaid Live Editor. Mermaid has so many features, so if you love it, best check out the official docs. History Supported since ca. 2022"
  },
  "abyss/contribute/docs/edit/preview-markdown.html": {
    "href": "abyss/contribute/docs/edit/preview-markdown.html",
    "title": "Preview Markdown in Visual Studio Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Preview Markdown in Visual Studio Code VS-Code has a nice preview built in. Just open a markdown file and click the Open Preview to the Side button in the top right corner of the editor. But the improved Markdown Preview Enhanced extension is even better, as it even supports Mermaid. To use the better preview, make sure you previously followed the setup instructions to install the recommended extensions."
  },
  "abyss/contribute/docs/edit/show-code.html": {
    "href": "abyss/contribute/docs/edit/show-code.html",
    "title": "Markdown to Show Code from Source Files | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Markdown to Show Code from Source Files Sometimes it's best to just show some code from an existing source file. This ensures that the docs are always up to date. DocFx has a few ways of doing this, best check out the docs - fairly sparse though code which is used to extract regions the unit tests which show demos Basic Concept It always starts with a [!code-csharp[](...)] tag, where the ... is the path to the file. You can also specify other languages like [!code-xml[](...)] or [!code-js[](...)]. You can also specify that you only want part of the like, like using #L10-L21 to show lines 10 to 21. You can also specify other ways to use ranges - see below. You can also highlight parts of the file ?highlight=2,5-7,9-. There are even more features but they are not well documented, such as ?range=... or ?dedent=.... Show Entire File To show an entire file, you can use the following syntax: [!code-csharp[](../../../../../../eav-server/ToSic.Lib.DI.Tests/SwitchableServices/VerifySwitchableService.cs)] Show Specific Lines When using range selectors such as #L10-L21, basically any language works. To show specific lines, you can use the following syntax: [!code-csharp[](../../../../../../eav-server/ToSic.Lib.DI.Tests/SwitchableServices/VerifySwitchableService.cs#L10-L21)] Show Specific Lines with Highlighting To show specific lines with highlighting, you can use the following syntax: [!code-csharp[](../../../../../../eav-server/ToSic.Lib.DI.Tests/SwitchableServices/VerifySwitchableService.cs?highlight=2,5-7,9-#L10-L21)] Show Specific Lines with Highlighting and Dedent To show specific lines with highlighting and dedent, you can use the following syntax: [!code-csharp[](../../../../../../eav-server/ToSic.Lib.DI.Tests/SwitchableServices/VerifySwitchableService.cs?highlight=2,5-7,9-#L10-L21&dedent=2)] Show Specific Regions Regions are marked in different ways in different languages. In C# you can use #region and #endregion. To show a specific region, you can use the following syntax: [!code-csharp[](../../../../../../eav-server/ToSic.Lib.DI.Tests/SwitchableServices/VerifySwitchableService.cs?#MyRegion)] Based on our experience and the code shown in the range detectors if you want Razor extracts we recommend using !code-xml and <!--<IdentityTag>--> as the region marker. <div>stuff we don't show</div> <!--<IdentityTag>--> <div>stuff we show</div> <!--</IdentityTag>--> And the markdown would be: [!code-xml[](../SomeFile.razor?#IdentityTag)]"
  },
  "abyss/contribute/docs/implementation/configuration.html": {
    "href": "abyss/contribute/docs/implementation/configuration.html",
    "title": "Implementation: Configuration | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Implementation: Configuration The initial configuration starts with the docfx.json file. Basically this says what code it should pick up, where the .md files are and where to put the output. We've tried to make it very clear where we made relevant changes and smuggled comment-nodes into the file for clarity. Important to know: docfx.json is the main configuration file filterConfig.yml is used to decide what C# code to include/exclude xrefmap.yml is used to manage short-links **/toc.yml files are used to manage the table of contents Main Configuration docfx.json The docfx.json file is the configuration file for DocFX. It specifies how to generate documentation from your code and Markdown files. Our docfx.json file is configured to generate documentation from C# project files and pre-parsed JavaScript files, build documentation pages from Markdown and YAML files, copy resource files to the output directory, use overwrite files to provide additional metadata, and use multiple templates to define the layout of the documentation pages. The built documentation is saved to the ../docs directory. Here's a breakdown of our docfx.json file: \"metadata\": This section is used to configure the metadata extraction process. It specifies the source files to extract metadata from, the destination to save the extracted metadata, and other options that are necessary to compile cs projects using MSBuildWorkspace. \"build\": This section is used to configure the documentation build process. It specifies the source files to build documentation from, the destination to save the built documentation, and other options. \"content\": This subsection specifies the source files to build documentation from. Each item in the array specifies a set of files and options for those files. \"resource\": This subsection specifies the resource files to copy to the output directory. Resource files are typically non-documentation files that are used by the documentation, such as images. \"xref\": specifies the cross reference map files to use. Cross reference map files provide information about how to link to items in other projects. we always use an xrefmap.yml file to manage our own short-links it's possible to add more such files, incl. from other websites using http-links \"overwrite\": specifies where to find files which will be merged with C# auto-generated docs. We usually put it in the api-docs folder. \"dest\": specifies the destination directory for the built documentation. We use ../docs \"template\": This key specifies the templates to use for building the documentation. Templates define the layout of the documentation pages. \"cleanupCacheHistory\": This key specifies whether to clean up the cache history. \"disableGitFeatures\": This key specifies whether to disable Git features. \"globalMetadata\": This subsection specifies global metadata that is available to all documentation pages. Code Filtering filterConfig.yml For various reasons we filter out certain namespaces and classes. This is done in the /filterConfig.yml file. Typical examples are: Microsoft.* and System.* namespaces [Project].Test.* namespaces _Imports classes (Blazor imports) Classes / Methods marked with [PrivateApi] attributes"
  },
  "abyss/contribute/docs/implementation/csharp-code.html": {
    "href": "abyss/contribute/docs/implementation/csharp-code.html",
    "title": "C# Code Docs Generation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live C# Code Docs Generation Warning This is a technical documentation about how the documentation system works. It helps the core team understand how to maintain and enhance the documentation system. It's not meant for most contributors, as it's too technical. C# Code Generation and Merging This process is configured in docfx.json. It is quite tricky as small changes can have big effects. Important to know: All /pages/**/*.md will be normal output pages All C# code from the specified .csproj projects will be converted to markdown in the git-excluded /api-generated folder... ...and then merged with the /api-docs folder which is manually maintained. This is needed because auto-generated code cannot have namespace descriptions, and sometimes we need much more complex docs for a specific class (which is also in the /api-docs folder). The exact behavior is configured in the docfx.json file. Note that trivial changes can have big effects, so be careful. Example: a section { \"src\": \"api\", \"files\": [\"**.yml\"] } will create a different result than... a section { \"files\": [\"api/**.yml\"] }. Such details can cost you a lot of time. We filter out _*.yml files as they should not create a page, but are instead used for !include statements."
  },
  "abyss/contribute/docs/implementation/docfx-templates.html": {
    "href": "abyss/contribute/docs/implementation/docfx-templates.html",
    "title": "Implementation: DocFx Templates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Implementation: DocFx Templates DocFX uses templates to transform the structured data model into the final static website. It is configured in /docfx.json in the build/template section: \"template\": [ \"default\", \"modern\", \"templates/2sxc\", // or \"Oqtane\" / \"cre8magic\" ], It basically uses \"stacked\" system of settings, HTML, CSS and JavaScript which is used to generate the final documentation. The idea is that a base template default provides a lot of defaults, modern will add Bootstrap 5 and then the project-specific template will add all the customizations, custom logos etc. This is the basic structure: default is the base template to generate everything. It's not in the code, docfx keeps its own copy. modern is a standard Bootstrap 5 template which builds on the default /templates/2sxc/ contains all the customizations The default and modern templates are provided by DocFX, while the 2sxc template is custom-made for 2sxc. We won't explain the built-in templates here, but focus on the custom template. Tip Sometimes when debugging it's useful to find out what the default templates do, so you can understand what's happening. You can tell docfx to output the generated HTML files to a folder by running docfx template export modern, so you can inspect them. You can also find the raw source code for the templates in GitHub. The /templates/[project] Folder If you ever need to do anything here, this is what you need to know: .../build-toc has our custom scripts to enhance the C# API TOC (explained later) .../layout contains the HTML Mustache layout files, but only the ones we customized .../public contains the CSS and JavaScript files which are published by docfx. Do not work in the public folder, as we generate the files from the src folder. .../src contains the TypeScript files which are compiled to the public folder .../toc.json.js is a special script which enhances the C# API TOC (explained later) .../build-toc-specs.js is a special script which enhances the C# API TOC (explained later) More info: Introduction to the DocFX Template System. How-to: Create A Custom Template Custom Template in this Docs Projects We try to customize as little as possible, to make updates easier. These are the things we usually customize: Some changes to the layout - usually in .../layout/_master_.tmpl Some magic changes to the C# Namespace TOC - usually in .../toc.json.js Some changes to CSS, in .../src/styles/*.scss Some additional JS, in .../src/*.ts Note that the CSS/JS changes are compiled using WebPack (explained later) and copied to two locations at the same time: /templates/[project]/public - where docfx will get them on every build /docs/public - where the docs are, so we can dev/refresh without running docfx We try to avoid customizing anything else, as it will make updates harder. Specifically ATM we don't use DocFx Transformers DocFx Renderers DocFx Partials The /templates/2sxc/toc.json.js is run by docfx to customize the C# API TOC The /templates/2sxc/src folder contains the TypeScript which is compiled with WebPack to the /public folder the /main.ts file is the main entry point ... with a special export for docfx Which will reconfigure highlightjs to support Razor syntax ... and an on-Load watcher Which will add a lightbox to all images using Fancybox (installed through NPM) ...and gallery functionality it will add a version switcher it will add a permalink XREF system it will add blinking architecture illustrations NPM / WebPack are used to make things better Template Customizations Special JavaScripts and WebPack We have some special TypeScript code which enhances the documentation, like the lightbox feature for images. This is in the /2sxc Docs Generator/templates/2sxc/main.ts file. It is built with WebPack and must be started manually to compile. Note that you can run WebPack and make ongoing changes without rebuilding the whole documentation. Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/implementation/index.html": {
    "href": "abyss/contribute/docs/implementation/index.html",
    "title": "Docs: Technical Implementation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Docs: Technical Implementation Warning This is a technical documentation about how the documentation system works. It helps the core team understand how to maintain and enhance the documentation system. It's not meant for most contributors, as it's too technical. Basics The documentation is built with DocFX. When compiling, it will take the C# code and the markdown files and merge them together... ...and create a static HTML documentation which can be hosted anywhere - often on GitHub pages. The Parts that Make it Work Since this is a large documentation it needs a bit more than just the standard DocFX setup. Here is an overview as to what is really implemented: DocFX will build everything based on the configuration in docfx.json, filterConfig.yml and xrefmap.yml ➡️ Configuration C# Code Docs generation and Merging with additional docs is very sophisticated. ➡️ C# Code Docs JavaScript Code Docs generation and Merging with additional docs is a beast! ➡️ JavaScript Code Docs The Templates generate everything, add JS and much more ➡️ Templates We have some custom magic to improve the C# API TOC ➡️ TOC Customizations The /templates/[project]/src has TypeScript and SASS which is compiled with WebPack to the /public folder ➡️ see TypeScript, CSS, WebPack Customizations We also have a neat trick to inline SVGs in the HTML TODO: @iJungleboy (explain, needs 'svg' class, etc.) We implemented a special find Permalink-System for linking to deep docs ➡️ Find Permalink System Most projects also support version-switching, so you can switch between versions of the documentation TODO: @iJungleboy History of this Docs Setup 2024 Note: we only started documenting this in 2024-12, so it's incomplete. Reduced Time-To-Redirect on XREF to 1 Second Previously the time to redirect was 3 seconds. We reduced it to 1 second. /templates/shared-global/src/scripts/xref/xref.ts Changed: 2024-12-12, @iJungleboy Made API-Docs TOC Sidebar not Wrap Added the api-toc-sidebar-menus.scss to prevent the API-Docs TOC from wrapping. /templates/shared-global/src/styles/api-toc-sidebar-menu.scss /templates/shared-global/src/styles/_index.scss Changed: 2024-12-12, @iJungleboy Added SVG helpers for colored logos Added some JavaScripts to inline SVGs on img tags with the class svg. This helps for both the logo and images added like this, so that they will be inlined and behave according to the CSS. It's especially useful when the SVG uses currentColor in it's own CSS. /templates/shared-global/src/scripts/svgs/svg-importer.ts Changed: 2024-12-10, @iJungleboy Created Attribution System We created an attribution system to show who wrote which part of the documentation. Changed: ca. 2024-12-05, @iJungleboy Standardized Entire Setup We put all customizations and docs-instructions in the 2sxc docs only, to consolidate everything from 2sxc, Oqtane, RazorBlade and cre8magic. Implementation: Everything shared is now in /templates/shared-global The /templates/[project]/src is now the only place for project-specific customizations Changed: 2024-12-05, @iJungleboy, @tvatavuk Added Gallery Feature We created the <div gallery=\"name\"><!-- img list --></div> feature to create galleries with previews etc. Changed: ca. 2024-12-01, @iJungleboy Added Lightbox with Fancybox We added the Fancybox lightbox to the system, so that images can be opened in a lightbox. Changed: ca. 2024-11, @iJungleboy Added Razor/Blazor Syntax Coloring We added the Razor/Blazor syntax coloring to the system, so that code can be colored. Changed: ca. 2024-06, @tvatavuk"
  },
  "abyss/contribute/docs/implementation/javascript-code.html": {
    "href": "abyss/contribute/docs/implementation/javascript-code.html",
    "title": "JavaScript Code Docs Generation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live JavaScript Code Docs Generation Warning This is a technical documentation about how the documentation system works. It helps the core team understand how to maintain and enhance the documentation system. It's not meant for most contributors, as it's too technical. 2sxc has some JavaScript APIs such as: $2sxc on the page for doing things such as data access or opening dialogs formula APIs for working with formulas in the edit UI These are published in the docs under JS & TS API. This is one of the most challenging parts of the system. Reason is that DocFx doesn't really have a good way to merge JavaScript code with the documentation. Overall Process Warning We haven't done this in a while, so the following steps / docs are possibly outdated. Please check with the core team before proceeding. In each JS project, there are some special commands to run from the package.json which will generate the necessary files. This usually happens in 2-3 steps such as: Generate standalone type files (like 2sxc.d.ts) which contain only the documentation Generate YAML files into the docs-folder which contain the actual documentation. This usually goes to /import/api.js.sxcjs/docfx or similar. When DocFx builds, these folders are also included... ...and merged with ??? (not sure, check with core team) when building the documentation. Import $2sxc JavaScript Types and Docs The npm task import is an optional step, used only when there is a need to prepare JavaScript-related files for inclusion in the documentation. To execute this task, navigate to the 2sxc Docs Generator directory and run the import task with npm. Here are the necessary commands: cd \"C:\\Projects\\2sxc\\2sxc-docs\\2sxc Docs Generator\" npm run import This command will execute the import task defined in your package.json file, preparing your 2sxc JavaScript related files for documentation generation."
  },
  "abyss/contribute/docs/implementation/permalink.html": {
    "href": "abyss/contribute/docs/implementation/permalink.html",
    "title": "Docs: Find Permalink Implementation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Docs: Find Permalink Implementation Warning This is a technical documentation about how the documentation system works. It helps the core team understand how to maintain and enhance the documentation system. It's not meant for most contributors, as it's too technical. Goals We want to be able to link to docs easily from external places These links should not break when the docs change ...so we need the ability to update the target if the docs ever do change The link should be obvious where it goes, if ever something more dramatic is changed Most links will link to code, such as namespaces etc. The links should be obvious where they should go, in case things still change - so no cryptic /xy920f The Parts that Make it Work DocFx uses the concept of XREF links, which are either API references, or documentation pages having a uid. Inside DocFx this is used extensively, and to make sure the docs don't change, are also maintained. On each compile of the docs, a xrefmap.yml is created in the dist, which maps all uid to the actual URL. We can also introduce custom redirects for older XREFS which changed, in the xrefmap.yml in the source. Now all we need is A JavaScript which loads the final/latest xrefmap.yml and can resolve the uid to the URL A page which runs this JS, takes the xref= parameter from the URL and redirects to the target URL Some minor options to cancel the redirect etc. for better debugging. Implementation The xrefmap.yml is loaded by the xref.ts script in the shared-global template The xref.ts script is loaded on all pages, so it's always available ...but it checks if it's on the special find.html page, and only runs there The xref.ts script will parse the URL, look for xref= and then redirect to the target URL If the target URL is not found, it will show a message and not redirect If the target URL is found, it will redirect after 1 second In addition, there is a bit more magic on the fid.html page (which comes from the find.md markdown file): The find.html page has some named HTML elements where the JS will place the values for better understanding and debugging. It also has instructions so the user could - for 1 second - see what's happening and could cancel the redirect. It also has a hidden element which will be shown if the user cancels the redirect. History of the Find Permalink System ca. 2022 introduced it as /xref.html and the shortlink go.2sxc.org/xref17 (as we initially thought we want the 2sxc version in there) 2024-12-12 reduced the time to redirect to 1 second 2025-02-15 changed to use find.html, enhanced instructions and updated the redirects 2025-02-15 changed the main redirect to be https://go.2sxc.org/find instead of xref and without the version number 2025-02-15 updated the documentation for clarity and accuracy 2025-02-15 added more detail on the handling of uid in xref.ts"
  },
  "abyss/contribute/docs/implementation/toc-customizations.html": {
    "href": "abyss/contribute/docs/implementation/toc-customizations.html",
    "title": "TOC Customizations | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live TOC Customizations Normal Navigation / Structure Most of the TOCs (Table of Contents) are automatically generated by DocFX based on the structure of the markdown files. This is a bit tricky, but works as expected. API Navigation The TOC for the C# APIs are fairly challenging because the default only offers 2 options: Generate a deep tree structure, where every namespace behaves like a folder (nested) Generate a flat list of all namespaces Both variants are not very user-friendly, so we've created a special script which enhances the TOC. Our Goals: Most root namespaces are \"flattened\" so that the initial menu has most of the namespaces visible. Important namespaces are highlighted with emojis. This is done as follows: The script /templates/[project]/toc.json.js is run by docfx when building the API documentation. We customized it to do the following... Retrieve the build-toc-specs.js which is a project specific \"database\" for what we want to customized in this specific project. Run scripts inside the /templates/[project]/build-toc folder (these scripts are identical in all projects \uD83C\uDF34/\uD83E\uDE78/♾️) to make the following adjustments Flatten the namespaces we think are important, so they appear in the initial menu Highlight important namespaces with emojis Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/implementation/troubleshooting.html": {
    "href": "abyss/contribute/docs/implementation/troubleshooting.html",
    "title": "Troubleshooting | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Troubleshooting Problems with MSBuild or .net SDK DocFX runs MSBuild to compile the projects it finds. This can easily cause trouble if your Dev-PC has been through various versions of Visual-Studio. If you need to troubleshoot this, best contact iJungleboy on GitHub. Problems with Old / Unexpected Results MSBuild will compile everything into the obj folder of this docs-project. This is used as a cache for the next builds. If you run into unexpected results, always clean out the obj folder first. Problems with Github links DocFX automatically links all the auto-generated docs with the git-repo. So make sure that the main code-project is pulled from the official location - otherwise the links will point to another repo."
  },
  "abyss/contribute/docs/implementation/ts-css-webpack.html": {
    "href": "abyss/contribute/docs/implementation/ts-css-webpack.html",
    "title": "Docs: TypeScript, CSS, WebPack Customizations | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Docs: TypeScript, CSS, WebPack Customizations Warning This is a technical documentation about how the documentation system works. It helps the core team understand how to maintain and enhance the documentation system. It's not meant for most contributors, as it's too technical. To make the docs more interactive and user-friendly, we use TypeScript and SASS which is compiled with WebPack. We provide additional features such as: Lightbox feature for images - with Fancybox Image Galleries - with Fancybox Razor / Blazor Code Highlighting - with highlightjs Version switcher - to access older archives of the docs Permalink system - to easily share links to specific sections Blinking architecture illustrations - to explain context of specific sections Normally you don't need to build them, as they are already included in the repo. But in some cases you may want to make changes, so you should understand how to build them. Parts that Make it Work The parts that make it work are NPM manages the packages and scripts WebPack compiles the TypeScript and SCSS TypeScript is used to write the JavaScript SCSS is used to write the CSS Fancybox is used for the lightbox HighlightJS is used for syntax highlighting /templates/[project]/src/ contains the TypeScript and SCSS files /src/styles/ contains the SCSS files which are project specific /src/styles/shared/ contains files which are shared across all docs-projects /src/scripts/* are project specific TypeScript files /src/scripts/versions/* are shared TypeScript files for the version switcher /src/scripts/shared/utils/* are shared TypeScript files /src/scripts/shared/xref/* are shared TypeScript files for the Permalink system /src/scripts/shared/@types/* are shared TypeScript files for the HighlightJS configuration Everything shared is in /src/scripts/shared/... so it's easier to copy 1:1 into other projects. How it Works This documentation system leverages modern web development tools to enhance user experience and maintainability. Here's how the different components work together: package.json The package.json file is the core of the helper Node.js project setup that we need for: build and development of documentation theme by building TypeScript and SCSS assets in /templates/[project]/src/ It specifies the project’s dependencies and scripts. In scripts are defined commands like build and dev to automate tasks. It has additional configuration properties: \"templateName\": \"2sxc\", \"version\": \"18.05.01\", \"enableDebug\": false, Get Started Make sure you have node/npm installed. Then let NPM install all dependencies using continuous-integration. Run this in the docs-src folder (ideally just from the VS-Code terminal): npm ci This command: Installs all dependencies specified in package-lock.json. Ensures a clean installation by removing existing node_modules. Provides a reproducible environment for builds. Build To compile TypeScript and build SCSS assets in /templates/[project]/src/ that are used by documentation HTML templates, run this in the docs-src folder (ideally just from the VS-Code terminal): Production For production webpack is building optimized and minimized assets. npm run build This triggers the build script defined in package.json, which runs Webpack to process the assets. ...or use ctrl+shift+b and select build ...or right-click on the build task in the VS-Code task-runner. Development To stremline development webpack will watch source files in /templates/[project]/src/ and autobuild assets. Also it will generate maps files for debuging. npm run dev What Happens During Compilation Webpack Processes Assets: TypeScript (.ts files): Transpiled into JavaScript, enabling the use of modern JavaScript features and type checking. SCSS (.scss files): Compiled into CSS, allowing for modular and maintainable stylesheets. Asset Bundling: Combines scripts and styles into bundles for efficient loading. Generates Source Maps for easier debugging. Optimization: Minifies JavaScript and CSS to reduce file sizes. Removes unused code through tree shaking. Output Generation: Compiled files are placed in the output folder. Outputs include: main.js: The bundled JavaScript file for documentation HTML templates. main.css: The compiled CSS file for documentation HTML templates. Integration with the Documentation Scripts and Styles Inclusion: The generated main.js and main.css are linked in the documentation HTML templates. Enhances interactivity with features like lightboxes and syntax highlighting. Feature Enhancements: Fancybox: Enables image lightbox functionality for a better viewing experience. Highlight: Provides syntax highlighting for code snippets. Version Switcher: Allows users to switch between different documentation versions seamlessly. Permalinks: Facilitates easy sharing of specific sections within the documentation. Compilation Output Location: Compiled assets are output to a /docs-src/templates/[project]/public/. This directory is configured in /docs-src/templates/shared-global/webpack.config.js. Serving Assets in Development The documentation site serves these static assets to users from docs folder. in docs-src folder, run docfx to build whole documentation to docs folder use npm run dev to build documentation theme assets use live-server to monitor and test documentation in local browser Ensures that all interactive features and styles are properly loaded. By understanding this build process, contributors can effectively maintain and enhance the documentation system. How to Repeat this Setup on another Project Step 1: Set Up Project Folder When referencing /docs-src/templates/[project]/src, replace [project] with your actual project folder name. Ensure the /docs-src/templates/shared-global folder exists. Step 2: Adjust Configuration Files in docs-src In package.json: Update templateName with your project folder name. Update version to match the version of the source code you are documenting. Add \"enableDebug\": false if it's not already present. Under scripts, keep build and dev. You may delete unnecessary import* scripts. By following these steps, you can set up a documentation system for your project that mirrors the structure and functionality of the original setup. This allows for integrated documentation that includes both manually authored content and auto-generated documentation from your source code. History Updated 2024-12-04 v18.04"
  },
  "abyss/contribute/docs/index.html": {
    "href": "abyss/contribute/docs/index.html",
    "title": "Contribute to Documentation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Contribute to Documentation First of all: Thank you \uD83D\uDE4F\uD83C\uDFFD for considering to contribute to the documentation \uD83C\uDF89. We really appreciate it. These are the things you can do, in order of complexity. You should really start with the first one, and only move on if you're comfortable with it. Just get the docs and view locally Improve existing content Add new content, link around and add tables of Contents Create/improve docs to the C# source-code Create/improve docs to the JavaScript source-code Create/improve the build process Level 1: Get the Docs and View Locally Download the docs to your PC and figure out the VS-Code setup, so you can work locally and preview the result. ➡️ Setup & Preview Docs Locally using VS-Code Run the docs-build to see if everything works. ➡️ Build the Documentation Level 2: Improve Existing Content Content is written using Markdown. This is a common format used for Wikipedia, GitHub and many other places. Enable the preview in VS-Code to see your changes live. ➡️ Enable Preview in VS-Code Remember to re-run the docs-build to see if everything works. ➡️ Build the Documentation Once you've grown comfortable with Basic Markdown, you can also learn about Images, Lightboxes and then move on to Galleries, flowcharts and more. Level 3: Create New Pages and TOCs After graduating from Level 2, you can start creating new content and linking it together. This includes things like: Create new markdown pages *.md Link to them from other pages Create and modify tables of Contents Learn about Permalinks (UIDs) to ensure links don't break Level 4: Docs to C# Source-Code Here things can get a bit more challenging, which is why we saved this for Level 4. Basically we'll use the XML-comments in the C# code to generate documentation. Read about documenting source code and namespaces Then Build Docs and Code. As you get better, we suggest reading the Technical Implementation of the Docs to understand how everything works. Level 5 & 6 ...not explained in detail, but you'll find everything you need in the TOC to the left. Note about Copyright All docs are licensed as CC-BY. By contributing you agree that your work can be used in this way. Questions For further discussions, feedback, or questions, head over to GitHub Discussions or GitHub Issues."
  },
  "abyss/contribute/docs/introduction.html": {
    "href": "abyss/contribute/docs/introduction.html",
    "title": "Introduction to Documentation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Introduction to Documentation Here we'll explain how the documentation works, with all the magic in it. The Basics Tip These docs project generates the documentation using docfx. So for the most part, you'll want to read the docfx documentation to understand how it works. The Source Code This project has a src folder containing... markdown files in /pages for standalone docs pages markdown files in /apidoc for merging with XML-docs in the source of Oqtane various YAML files (.yml) which describe the navigation structure Solution (.sln) and project (.csproj) files to build the documentation docfx configurations (docfx.json and filterConfig.yml) various json configs so it also works in VS-Code It also requires the Oqtane.Framework project to be in a sibling folder (see setup) The Build Process flowchart TD CS[\"C# Source <br><code>../some-project</code>\"] -->|⚙️Compiler| XD XD[\"Xml Docs<br>(temp)\"] --> MD[\"Merged API Docs<br>(temp)\"] DM[Docs Mixins<br>~/apidocs] --> MD CONTENT[Content/Articles<br>~/pages] --> Docs[Docs HTML<br>../docs/] ASS[Assets/Images<br>**/assets] --> Docs MD --> Docs TOC[\"TOC Files<br>**/toc.yml\"] --> TOCG Docs -->|generate| TOCG[\"Various TOCs<br>(Tables of Contents)\"] When you build this project, it will Compile the Source Code Extract the XML documentation from the XmlDocs and generate YAML and markdown files Merge the generated files with the ones in this project Generate a ../docs folder with static HTML files that can be hosted anywhere Note To test the generated docs locally, you'll need to host the ../docs folder on a web server. This is because there are some absolute paths used in some JavaScripts for the TOC (table of contents) and search functionality. Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/project/structure.html": {
    "href": "abyss/contribute/docs/project/structure.html",
    "title": "Structure of the Docs Projects | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Structure of the Docs Projects All the projects using this convention have the following folders / structure: api-docs/ - manually created docs for C# namespaces api-generated/ - autogenerated docs from the C# code XmlDocs assets/ - global / reused assets such as the favicon and main logos logos/ v##/ - logos for specific versions vcurrrent/ - logos for the current version, used in layout etc. favicon.ico - favicon for the site pages/ - where all the content is created api/ - the index page for the API documentation some-topic/ - a topic with sub-pages assets/ - assets used in this topic some-sub-topic - a sub-topic assets/ - assets used in this sub-topic more-topics/...... (lots of topics here) shared/ - shared content like authors, images, etc. authors/ - author information for attribution .../ - shared/reusable snippets for !include statements templates/ [project-name] - custom html / js / css for this project Tip This structure is quite flexible and can be adapted to our needs. This setup has proven solid and should not be changed without consulting with @iJungleboy."
  },
  "abyss/contribute/docs/setup/index.html": {
    "href": "abyss/contribute/docs/setup/index.html",
    "title": "Setup & Preview Docs Locally using VS-Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Setup & Preview Docs Locally using VS-Code We always use VS Code to work in the docs. VS Code is much lighter and faster than visual studio. It also has some neat features which will help, like: Markdown preview Markdown linting Live Server to see the built docs without having to setup IIS Install VS-Code and Pull the Docs Repo Install VS-Code from https://code.visualstudio.com Pull the docs repo into a folder beside the main code repo(s) Open the Workspace and Install Extensions Please open the [project-name].code-workspace Workspace in VS Code. The VS Code docs project has recommended extensions which will help you be more productive. If you open the project the first time, it will ask you to install them. Tip Opening the workspace in VS-Code will ask you to install the recommended extensions. You should really do this, as it makes life much easier and includes a simple web-server to test the docs. It will ask you to install these extensions: DavidAnson.vscode-markdownlint a great markdown linting tool shd101wyy.markdown-preview-enhanced a great markdown preview tool, also supports Mermaid diagrams ritwickdey.LiveServer a simple web-server to test the docs Install Recommended Extensions Manually If you accidentally skipped the installation of the recommended extensions, you can install them manually. To install them later, go to the extensions tab and find the \"Show Recommended Extensions\". Last Update: 2024-12-05 by @iJungleboy"
  },
  "abyss/contribute/docs/setup/preview.html": {
    "href": "abyss/contribute/docs/setup/preview.html",
    "title": "Preview Docs Locally | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Tip The docs as explained here are used in multiple projects, but documented only once for better maintenance. When applying this to other projects, remember that some things such as the name, repository, or paths are a bit different. \uD83C\uDF34 2sxc: Docs Repo, Docs Live \uD83E\uDE78 Oqtane: Docs Repo, Docs Live ♾️ cre8magic: Docs Repo, Docs Live Preview Docs Locally Using VS-Code and Live Server The Live Server VS-Code extension lets you see the built docs without having to setup IIS. It also automatically refreshes the browser on every change, making it super-comfy. Once you've installed all the plugins, you can see the Go Live button in the bottom right corner of VS-Code. When you click it (or use Alt + L, Alt + O), a web server will be started hosting the /docs folder: Troubleshooting the Live Server If you have trouble with the preview, here some background how it works. The preview is a simple web-server which hosts the /docs folder. It runs using the ritwickdey.LiveServer. The configuration for this is in the [project-name].code-workspace file, in the section liveServer.settings.mount. Run Docs in IIS Locally (not recommended) Tip This is not recommended, as it's much slower and more complex than using the Live Server. The generated docs are static pages and contain various JavaScripts to provide menu and search functionality. These do not work, if you just open the index.html in a browser. So you need to run it in a local IIS to fully test it. This is how you can set it up: Warning Warning about Caching in IIS The navigation / menus in docfx use JavaScript, so you'll sometimes see an old cached menu on your local system. Just activate F12 and disable cache to ensure that you're always viewing the latest build. Last Update: 2024-12-05 by @iJungleboy"
  },
  "abyss/contribute/docs/source-code/index.html": {
    "href": "abyss/contribute/docs/source-code/index.html",
    "title": "Document Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Document Code Basic Documentation Add normal documentation with /// <summary> tags to your code, like this: /// <summary> /// Constructor which does xyz /// </summary> /// <param name=\"id\">the id</param> public MyMethod(int id) { } All this is automatically picked up and converted to documentation. Referencing Other Classes If you want to reference other classes, you can use the <see cref=\"...\"/> tag: /// <summary> /// This method uses the <see cref=\"Oqtane.Example.MyClass\"/> to do something. /// </summary> public void MyMethod() { } Referencing Other Methods You can also reference other methods: /// <summary> /// This method uses the <see cref=\"MyMethod\"/> to do something. /// </summary> public void MyMethod() { } Referencing Other Docs If you want to reference other docs, you can use the [xxx](xref:UID) tag: /// <summary> /// This method uses the [Xyz Conventions](xref:Pages.Conventions.Xyz) to do something. /// </summary> public void MyMethod() { } Using Markdown in C# Docs You can also use markdown in your C# docs, like this: /// <summary> /// This method is **great** for `null`. /// /// Here is a list: /// 1. Do this /// 1. Then that /// </summary> public void MyMethod() { } Adding Extensive Documentation Let's assume you have a class Oqtane.Example.MyClass and you would like to add images and a lot of markdown to explain what it does. This is your code: namespace Oqtane.Example; public class MyClass { } Now go to the documentation project Oqtane.Docs in the solution and open the apidoc\\Example folder (create it, if it doesn't exist yet'). In this, create a MyClass.md file which contains this --- uid: Oqtane.Example.MyClass --- Here is some **great** additional [Information](https://oqtane.org). 1. Do this 1. Then that Because you have the uid: ... header in your file, docfx will now combine these documentations in the output. You can also add images, html, or whatever you need. You can also find examples of this merge in the apidoc\\Documentation\\PublicApi.md file. Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/docs/source-code/namespaces.html": {
    "href": "abyss/contribute/docs/source-code/namespaces.html",
    "title": "Document Code Namespaces | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Document Code Namespaces It's usually very helpful to document what a namespace does. Using the same mechanism with the uid: you can create markdown files which will show extensive instructions. Check out the apidoc\\Documentation\\index.md file for an example. Main Author Daniel Mettler, @iJungleboy [MS MVP, Oqtane Core Team] Content Management Expert, Chief Architect of 2sxc and cre8magic. Forged in the jungles of Indonesia, lives in Switzerland , loves Oqtane \uD83E\uDE78 & 2sxc \uD83D\uDC9C. LinkedIn | Discord: @iJungleboy | Twitter: @iJungleboy | Github: @iJungleboy"
  },
  "abyss/contribute/tests/dependency-injection.html": {
    "href": "abyss/contribute/tests/dependency-injection.html",
    "title": "Dependency Injection in xUnit Tests | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dependency Injection in xUnit Tests Important: If you only want to USE 2sxc / EAV, then you do NOT need this. This is meant for people who want to contribute to the source code of 2sxc and EAV. Unit Tests which Don't use Dependency Injection These unit tests are the simplest, and don't need any special setup. Example: public void ManualListOfFunctions() { var result = new FunFactString(null, [ (\"\", _ => \"Hello\"), (\"\", s => s + \" World\"), (\"\", s => s + \"!\") ]) .CreateResult(); Equal(\"Hello World!\", result); } Unit Tests which need Basic Dependency Injection by Namespace These tests need DI to be setup, but don't need any configuration (such as Database connections). First we need a startup class which does all the DI setup - in a Folder, so everything under it will use this: using Microsoft.Extensions.DependencyInjection; using ToSic.Lib.DI.SwitchableServices.Services; namespace ToSic.Lib.DI.SwitchableServices; public class Startup { public void ConfigureServices(IServiceCollection services) => services .AddTransient<ITestSwitchableService, TestSwitchableFallback>() .AddTransient<ITestSwitchableService, TestSwitchableKeep>() .AddTransient<ITestSwitchableService, TestSwitchableSkip>() .AddLibCore(); } The tests in this folder and sub folders will automatically pick up the DI configuration from this startup class. This happens through the namespace, not through the physical folders. This setup allows you to quickly reuse a setup, and specify it to be very specific to all the tests in the same namespace. In will then be available as a service in the test. using ToSic.Lib.DI.SwitchableServices.Services; namespace ToSic.Lib.DI.SwitchableServices; public class VerifySwitchableService(ServiceSwitcher<ITestSwitchableService> switcher) { [Fact] public void FindKeepService() => Equal(TestSwitchableKeep.Name, switcher.Value.NameId); [Fact] public void Has3Services() => Equal(3, switcher.AllServices.Count); [Fact] public void NotCreateBeforeButCreatedAfter() { False(switcher.IsValueCreated, \"shouldn't be created at first\"); var x = switcher.Value; True(switcher.IsValueCreated, \"should be created afterwards\"); } [Fact] public void FindFallbackByName() => Equal(TestSwitchableFallback.Name, switcher.ByNameId(TestSwitchableFallback.Name).NameId); } Unit Tests with Basic Dependency Injection by Attribute Every test class can also specify a specific DI setup by using an attribute. This is the preferred method, the syntax is like this: [Startup(typeof(StartupTestsEavCore))] public class LookUpEngineTests(DataBuilder dataBuilder) { // ... } Unit Tests with Dependency Injection and Startup with Scenario In various cases you may need to setup a specific DI configuration for a test. For example, to specify a path or a DB connection. In xUnit this is done with Fixtures. We also have a concept of TestScenarios which describe what DB and folders to use. This is run as a fixture with the DoFixtureStartup class. [Startup(typeof(StartupTestFullWithDb))] public class AccessItemsInAppState(IAppReaderFactory appReaderFactory, ITestOutputHelper output): IClassFixture<DoFixtureStartup<ScenarioBasic>> { // Add any specific setup or tests related to TestScenarios here. } Tip Where possible, the startup and fixture class should be a in a ...TestHelper."
  },
  "abyss/contribute/tests/index.html": {
    "href": "abyss/contribute/tests/index.html",
    "title": "Contribute to 2sxc / EAV Tests | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Contribute to 2sxc / EAV Tests Important: If you only want to USE 2sxc / EAV, then you do NOT need this. This is meant for people who want to contribute to the source code of 2sxc and EAV. 2sxc has about 3'500 unit tests and growing. This is a guide to help you understand how to run them, and how to contribute to them. Pre-Requisites all the pre-requisites for building 2sxc Background On 2sxc and the EAV project we strive to have many unit tests, but as always it's hard to keep up. One of the challenges is also that some of the tests were written when we were less experienced, so we would do it better today. So if you do review some tests, note that they may not use the latest best practices. Desired Setup and Conventions As of 2025-03 we want to use xUnit for all our unit tests. But only a small fraction of the tests have been migrated. Other tests still use the old MSTest framework. This is especially apparent in the setup of the tests, which require dependency injection to be properly setup for complex tests. This is how we want it to be: Every project has one or more separate Tests project. Advanced scenarios need own projects, simple scenarios can share a project. Example: ToSic.Lib.Core has ToSic.Lib.Core.Tests - general tests ToSic.Lib.DI.Tests - specific tests which require a DI setup If necessary, some projects also have a ...TestHelper project containing shared test code for this project and other projects which build on it. Example: ToSic.Eav.DataSources has a ToSic.Eav.DataSource.TestHelpers project which is not a unit-test project. Test helpers can contain TestAccessors which are static methods matching the original method but ending in ...Tac (for Test Accessor). These methods are used to access internal methods for testing. We need them to reduce the method-access count, as otherwise methods which are not in use any more have a large access count. Standard xUnit CSProj Here's a standard xUnit project file: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFrameworks>net9.0;net472</TargetFrameworks> <ImplicitUsings>enable</ImplicitUsings> <LangVersion>preview</LangVersion> <Nullable>enable</Nullable> <IsPackable>false</IsPackable> <!-- <RootNamespace>ToSic.Eav.Data</RootNamespace> --> </PropertyGroup> <!-- specific stuff --> </Project> Test projects should set nullable to <Nullable>enable</Nullable> Test projects should use c# latest <LangVersion>preview</LangVersion> Test projects should set <ImplicitUsings>enable</ImplicitUsings> See implicit usings Tracing / Logging Test Data In some cases you want to log more information to the output. In the old days this was done using Trace.WriteLine(...), but this doesn't work in xUnit which runs processes in parallel. So for this, inject the ITestOutputHelper output and use it to log messages. public class CompressorTests(ITestOutputHelper output) { [Fact] public void Compress() { output.WriteLine(\"Starting compression test\"); // do something } } Note: older code which was converted to xUnit may still have Trace.WriteLine statements, but they will not appear in the output and should be updated as you find them. Differences in .net 472 and .net Core Some tests need different values depending on the .net framework. Use #if statements for this. public class CompressorTests(ITestOutputHelper output) { // Compression sizes differ between .NET Framework and .NET Core #if NETCOREAPP private const int SizeDeflate = 14980; private const int SizeGZip = 14998; #else private const int SizeDeflate = 14898; private const int SizeGZip = 14916; #endif } Asserting Types Types should use IsType instead of IsInstanceOfType. But often it should use IsAssignableFrom. There are also IsNot... variations. // Example usage Assert.IsType<ExpectedType>(actualValue); // Correct usage Assert.IsAssignableFrom<ExpectedBaseType>(actualValue); // Alternative usage See also https://xunit.net/xunit.analyzers/rules/xUnit2018. Asserting Errors When you want to assert that a method throws an exception, you should use Assert.Throws. // Example usage Assert.Throws<Exception>(() => { throw new Exception(); }); see also assert exceptions Conversion to xUnit - Progress ✅ ToSic.Lib - 100% ✅ ToSic.Lib.Core.Tests ✅ ToSic.Lib.DI.Tests ✅ ToSic.Eav.Core - 100% ✅ ToSic.Eav.Core.TestHelpers (Startup and Test-Accessors) ✅ ToSic.Eav.TokenEngine.Tests ✅ ToSic.Eav.Core.TestsBasic (basic tests) ✅ ToSic.Eav.Data.Tests (data tests) ✅ ToSic.Eav.StartupTests (full tests) ✅ ToSic.Eav.DataSources - 100% ✅ ToSic.Eav.DataSource.TestHelpers ✅ ToSic.Eav.DataSource.Tests (unit tests) ✅ ToSic.Eav.DataSource.DbTests (system tests)"
  },
  "abyss/contribute/tests/system-tests-with-db.html": {
    "href": "abyss/contribute/tests/system-tests-with-db.html",
    "title": "Run Unit Tests in .net | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Run Unit Tests in .net Important: If you only want to USE 2sxc / EAV, then you do NOT need this. This is meant for people who want to contribute to the source code of 2sxc and EAV. 2sxc and EAV have more than 1'000 Unit tests which require a DB to run. This is explained here. Pre-Requisites 2sxc server projects have been downloaded and placed as recommended in the checklists. Compatibility Level 130 (SQL Server 2016) is required for the eav-testing database. This is to ensure that EF features of .net 9 work properly. Setup Tests Follow this checklist:"
  },
  "abyss/contribute/tests/test-accessors.html": {
    "href": "abyss/contribute/tests/test-accessors.html",
    "title": "Test Accessors and Test Constructors | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Test Accessors and Test Constructors While working with the normal code we often see that a method is used x-times. Unfortunately the counter counts all calls including test-calls, so the number can be very misleading. It's even possible that a method is never used in production, but is called 1000 times in tests. To avoid this problem, tests should prefer to use Test Accessors and Test Constructors where applicable to ensure clarity and reduce the access count. As a rule of thumb, if a method is used more than 3 times in tests, it should be considered for a Test Accessor, because then the counter cannot easily be used to determine if the method is still in use. The way this should be implemented is as follows: In some cases, a simple method on the test class like GetThing(...) or ThingTac(...) is enough, especially if this method is only used in this test class. In most cases, create static extension methods ending with Tac - so IThing.Get(...) becomes a static GetTac(this IThing parent, ...) method. These can be in the test project where it is used ... or in a TestHelper project if it's used in multiple test projects Examples follow. Simple Test Constructor in the Class This shows a method on the class (for use there only) to create a specific class. It will help to keep the access-count on the constructor low. /// Empty Test Constructor /// </summary> private static CacheItemPolicyMaker EmptyTco() => new() { Log = new Log(\"Tst.CacSpx\") }; Static Class with Test Accessor This is a static class with a test accessor method, inside the test-project where it is used. using System.Runtime.Caching; namespace ToSic.Eav.Caching; internal static class TestAccessors { internal static CacheItemPolicy CreateResultTac(this IPolicyMaker policyMaker) => policyMaker.CreateResult(); } Static Class with Test Accessor in a TestHelper Project using System.Collections.Immutable; namespace ToSic.Eav.Data.Build; public static class ValueBuilderTestAccessors { /// <summary> /// Test accessor to reduce use-count of the real code /// </summary> /// <returns></returns> public static IValue BuildTac(this ValueBuilder vBuilder, ValueTypes type, object value, IList<ILanguage> languages) => vBuilder.Build(type, value, languages?.ToImmutableList()); public static IValue BuildTac(this ValueBuilder vBuilder, ValueTypes type, object value, IImmutableList<ILanguage> languages) => vBuilder.Build(type, value, languages); }"
  },
  "abyss/contribute/tests/tests-with-files.html": {
    "href": "abyss/contribute/tests/tests-with-files.html",
    "title": "xUnit Theory Tests - Using Files | 2sxc 19 for Dnn and Oqtane",
    "keywords": "xUnit Theory Tests - Using Files Important: If you only want to USE 2sxc / EAV, then you do NOT need this. This is meant for people who want to contribute to the source code of 2sxc and EAV. Using Files in Tests In some situations we need to read files to setup a test. This is how you can do it, in most scenarios. Place the files in a folder that is accessible by the test runner. Use the appropriate methods to read these files during the test setup. Ensure that your tests clean up any resources after execution. Example The project ToSic.Eav.StartupTests has a folder ScenarioData that contains various test files for different scenarios. The csproj file has a configuration to copy these files into the bin folder when compiling, like this: <ItemGroup> <!-- Copy ScenarioData to bin folder for reviewing during tests --> <None Include=\"ScenarioData\\**\" CopyToOutputDirectory=\"PreserveNewest\" LinkBase=\"ScenarioData\\\" /> </ItemGroup> Note: it's not sure what the LinkBase does - it can probably be removed. We have a helper class called TestFiles which helps us find the bin folder and attach the full folder path to the file name. using System.Reflection; namespace ToSic.Eav.Testing; public static class TestFiles { public static string GetTestPath(string relativePath) { #if NETFRAMEWORK var codeBaseUrl = new Uri(uriString: Assembly.GetExecutingAssembly().CodeBase); #else var codeBaseUrl = new Uri(uriString: Assembly.GetExecutingAssembly().Location); #endif var codeBasePath = Uri.UnescapeDataString(codeBaseUrl.AbsolutePath); var dirPath = Path.GetDirectoryName(codeBasePath); return Path.Combine(dirPath, relativePath); } } We can then use this to load the files as needed and do our work with them. The following example uses this folder to create a TestScenario with this folder: using ToSic.Eav.Testing; using ToSic.Eav.Testing.Scenarios; namespace ToSic.Eav.ConfigurationOverride; /// <summary> /// Special scenario which has a configuration to override the Fancybox3 Web Resources /// </summary> public record ScenarioOverrideFancybox3 : ScenarioBasic { public override string GlobalDataCustomFolder => TestFiles.GetTestPath(\"ScenarioData\\\\OverrideFancybox3\") + $\"\\\\{ScenarioConstants.DevMaterialsEnd}\"; }"
  },
  "abyss/contribute/tests/theory.html": {
    "href": "abyss/contribute/tests/theory.html",
    "title": "xUnit Theory Tests - Data-Driven | 2sxc 19 for Dnn and Oqtane",
    "keywords": "xUnit Theory Tests - Data-Driven Important: If you only want to USE 2sxc / EAV, then you do NOT need this. This is meant for people who want to contribute to the source code of 2sxc and EAV. Theory for Data-Driven Tests Note that data-driven simply means that objects / lists of tests are run. We are basically using the recommendations from https://andrewlock.net/creating-parameterised-tests-in-xunit-with-inlinedata-classdata-and-memberdata/ Example with InlineData [Theory] [InlineData(1, 2, 3)] [InlineData(2, 3, 5)] [InlineData(3, 4, 7)] public void ShouldCalculateCorrectly(int a, int b, int expected) { var result = a + b; Equal(expected, result); } Example with MemberData This example uses [MemberData] to provide the data for the test. using ToSic.Eav.Apps; using ToSic.Eav.Testing; namespace ToSic.Eav.ConfigurationOverride; // TODO: These tests seem to not have worked for a long time // Probably the setup isn't happening first. // It appears that there should be some override settings which should be used as well, which are not applied here // Needs some time to restore functionality [Startup(typeof(StartupTestsApps))] public class GlobalConfigurationOverride(IAppReaderFactory appReaderFactory) // the fixture will also load the resources : IClassFixture<DoFixtureStartup<ScenarioOverrideFancybox3>> { public record TestData(string Name, Guid Guid, bool Expected); public static TheoryData<TestData> GenerateTests => [ new(\"Fancybox4\", new(\"3356ad17-91ce-4814-83c1-9f527697391a\"), false), new(\"Fancybox3\", new(\"4b9ef331-480a-4a38-86f1-a580f8345677\"), true) ]; private const string HtmlField = \"Html\"; private const string TestStringInOverrideFancybox3 = \"test-is-override\"; [Theory] [MemberData(nameof(GenerateTests))] public void ResourceExistsOnce(TestData specs) => Single(GetEntitiesOfGuid(specs.Guid)); // TODO: @STV - this seems to fail, it appears that the normal data isn't loaded, only system-custom ? /// <summary> /// This is quite a complex test /// - There is an entity in App_Data/system-custom with the same guid as the fancybox3 WebResource /// - It has an additional string containing \"test-is-override\" /// - On load, it should _replace_ the original item /// - and make sure it's used instead /// </summary> [Theory] [MemberData(nameof(GenerateTests))] public void ResourceHtmlContainsText(TestData specs) { var html = GetEntitiesOfGuid(specs.Guid).First().GetTac<string>(HtmlField); Equal(specs.Expected, html.Contains(TestStringInOverrideFancybox3)); } private List<IEntity> GetEntitiesOfGuid(Guid resourceGuid) { var primaryApp = appReaderFactory.GetSystemPresetTac(); // Verify there is only one with this guid var entities = primaryApp.List .Where(e => e.EntityGuid == resourceGuid) .ToList(); return entities; } }"
  },
  "abyss/contribute/translations/index.html": {
    "href": "abyss/contribute/translations/index.html",
    "title": "Contribute to 2sxc - Translations | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Contribute to 2sxc - Translations This is a guide to help you understand how to contribute to the translations of 2sxc and EAV. Note Translating 2sxc into any language takes less than an hour. So we're asking you to help us go beyond the 5 languages we have so far. Please help \uD83D\uDE4F Background 2sxc and EAV are used in many countries and languages, and we want to make sure that the system is available in as many languages as possible. Since almost all the UIs are built in JavaScript, most of the translations are in JSON files. Here is a list of things that could be translated: Nothing to translate The core $2sxc JS library doesn't contain any texts to translate What you can Contribute easily \uD83C\uDF1F The inpage edit UI contains labels on toolbars and various messages the editor should see The Edit UI dialog contains texts like button labels or WYSIWYG labels Translation not expected The server projects contains various texts which only the system-admin should see, and for now we assume this person understands english The Admin UI is currently english only, and we don't plan to change this in the near future Standard Apps can be translated, but it's a bit more difficult Each App can be multi-language - the main one to localize is usually the Content App Tip If you're interested in translating and need help, just contact us on info-2sxc-org. Contribute Translations to Toolbars and Inpage UIs In general, you can just make the changes and use pull-request to submit them. If you are not familiar with pull-requests, you can also just send us the file to info-2sxc-org and we will add it to the system. The files are located in /projects/inpage/i18n The files are in JSON format The files are named like en.json for english, de.json for german, etc. For a language to work, it must also be added to the translations array here If a key is missing in a language, the system will automatically use the english fallback Contribute a New Language Copy the en.json file and rename it to your language, like id.json (Indonesian) Translate it and use a pull-request, or send it to info 2sxc org We will add it to the system and activate the language code Update an Existing Language Best do this using a pull-request. If you don't know what this means or don't know how to do it, then just download the file, translate it and send it to info 2sxc org. Contribute Translations to the Edit UI Dialogs The files are located in /projects/eav-ui/src/app/edit/assets/i18n The files are in JSON format The files are named like en.json for english, de.json for german, etc. Basically adding the json file will make the system use it - if the UI is in that language If a language is missing OR a key is missing in a language, the system will use the english version automatically Contribute a New Language Copy the en.json file and rename it to your language, like id.json (Indonesian) Translate it and use a pull-request, or send it to info 2sxc org We will add it to the system and activate the language code Update an Existing Language Best do this using a pull-request. If you don't know what this means or don't know how to do it, then just download the file, translate it and send it to info 2sxc org. Contribute App Translations (eg. the Content App) This is a bit more difficult, as it requires you to work in the template the App itself. If you're interested in this, please contact us on info-2sxc-org."
  },
  "abyss/data-formats/index.html": {
    "href": "abyss/data-formats/index.html",
    "title": "Data Formats in 2sxc (technical) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data Formats in 2sxc (technical) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } This is very technical information, you usually won't need this. 2sxc has the following data formats ZIP for entire Apps XML for editing tables of items in Excel (export/import & mass editing) XML for App-Data for app-export / import JSON for Headless WebAPI use internal JSON format for Entity (export, import, history) single item VisualQuery configuration View Specs (includes the template) Content Type"
  },
  "abyss/data-formats/json-v01/assets.html": {
    "href": "abyss/data-formats/json-v01/assets.html",
    "title": "JSON Assets V1 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JSON Assets V1 JSON Data can include Assets. This is currently only used for export/import of Views Assets The Assets is optional on the Entity node. It looks like this: Assets array, optional asset object 1 Storage: \"app\" Name: \"some file name\" Folder: \"DefaultTemplates\" (location in the storage) File: \"string containing the file\" asset object 2 ... Note that in a view, typically it will export both the template file and the icon used. Example of an Exported View with Template file { \"_\": { \"V\": 1 }, \"Entity\": { \"Id\": 3770, \"Version\": 1, \"Guid\": \"56104398-8301-4d67-9d14-168639cc7dc8\", \"Type\": { \"Name\": \"2SexyContent-Template\", \"Id\": \"2SexyContent-Template\" }, \"Attributes\": { \"String\": { \"ContentTypeStaticName\": { \"*\": \"e2351b42-87f2-427e-9566-ff271e3e5a9f\" }, \"ListContentTypeStaticName\": { \"*\": \"\" }, \"ListPresentationTypeStaticName\": { \"*\": \"\" }, \"Location\": { \"*\": \"Host File System\" }, \"Name\": { \"*\": \"Branding\" }, \"Path\": { \"*\": \"DefaultTemplates\\\\_Branding.cshtml\" }, \"PresentationTypeStaticName\": { \"*\": \"\" }, \"StreamsToPublish\": { \"*\": \"\" }, \"Type\": { \"*\": \"C# Razor\" }, \"ViewNameInUrl\": { \"*\": \"\" } }, \"Entity\": { \"ContentDemoEntity\": { \"*\": [\"9d49e41c-1f4f-448d-88c6-df6ab4064d0b\"] }, \"ListContentDemoEntity\": { \"*\": [] }, \"ListPresentationDemoEntity\": { \"*\": [] }, \"Pipeline\": { \"*\": [] }, \"PresentationDemoEntity\": { \"*\": [] } }, \"Boolean\": { \"IsHidden\": { \"*\": false }, \"PublishData\": { \"*\": false }, \"UseForList\": { \"*\": false } } }, \"Assets\": [ { \"Storage\": \"app\", \"Name\": \"_Branding.cshtml\", \"Folder\": \"DefaultTemplates\", \"File\": \"<div class=\\\"sc-element\\\">\\r\\n@Html.Raw(Content.Toolbar)\\r\\n<div id=\\\"Branding\\\">@Content.Title</div>\\r\\n<div id=\\\"Slogan\\\">@Html.Raw(Content.Slogan)</div>\\r\\n</div>\" } ] } } Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc v11.10"
  },
  "abyss/data-formats/json-v01/content-type.html": {
    "href": "abyss/data-formats/json-v01/content-type.html",
    "title": "JSON Content-Type V1 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JSON Content-Type V1 JSON based content-types are type-definitions which are stored as JSON. As of now we're using it to provide system-level types to the application (see Concepts - file provided content-types) and for various automated testing. Description As of now, it's using a envolope to package everything and includes a minimal header to ensure we know it's V1. It then contains a ContentType node containing various identification and description optional Content-Type Metadata attributes (array) - often with attribute Metadata note that the attribute order is relevant Example This example is an extract of the Config Content-Type to manage the SqlDataSource (will be releasen in 2sxc 9.8 with more help-text etc.): { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Name\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Scope\": \"System\", \"Description\": \"todo\", \"Attributes\": [ { \"Name\": \"Title\", \"Type\": \"String\", \"IsTitle\": true, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"Sql Query\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, { \"Name\": \"ConnectionGroup\", \"Type\": \"Empty\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"\" }, \"InputType\": { \"*\": \"empty-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, { \"Name\": \"ConnectionStringName\", \"Type\": \"String\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"SiteSqlServer\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, ... { \"Name\": \"SelectCommand\", \"Type\": \"String\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"/****** Script for SelectTopNRows command from SSMS ******/\\r\\nSELECT TOP (1000) PortalId as EntityId, HomeDirectory as EntityTitle\\r\\n ,[PortalID]\\r\\n ,[ExpiryDate]\\r\\n ,[AdministratorRoleId]\\r\\n ,[GUID]\\r\\n ,[DefaultLanguage]\\r\\n ,[HomeDirectory]\\r\\n ,[CreatedOnDate]\\r\\n ,[PortalGroupID]\\r\\n FROM [Portals]\\r\\n Where ExpiryDate is null\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } }, { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@string-default\", \"Id\": \"@string-default\" }, \"Attributes\": { \"Number\": { \"RowCount\": { \"*\": 10.0 } } } } ] } ... ], \"Metadata\": [] } } Details about the Format The format is currently in version 1, and looks like this: _ this is the header - containing the version, in case we introduce breaking changes in the future - see also format v1 ContentType - this is the content-type Id - internal identifier, also known as the static name - often a GUID Name - a nicer name Scope - a term which groups types together; mainly for hiding types the user should normally not see Description - a short description for internal use Attributes [array] [item] Name - the field-name Type - the primary type, like string, number, etc. Description - a short description IsTitle - is this the title field (there must always be one title field) Metadata [array] with more information about this field/attribute - see Metadata Metadata [array] with more information about the content-type - see Metadata Specials about the JSON Content-Types ID is not always a GUID The ID is usually a GUID, but for special system types it is not. This is mostly historic, as all new content-types will have GUIDs, but old types still exist in the system which have a nice name, but that's not ideal for various use cases. This corresponds to the StaticName in the C# API. Scope is Like a Virtual Group The Scope is a name - usually System or something like that. It's primarily used to group types together, so that the editor doesn't have to see the ca. 50 types in the background which make the solution work. See Content-Type Scopes Content Types Have Metadata Content-types can have a lot of metadata - also mostly for the UI. An example is the help-text which is shown. This too is stored as normal JSON. See JSON Metadata V1. Attributes Have Metadata Each attribute - let's say a field \"Color\" has more information which is needed for scenarios like the edit-UI. These items are standard Metadata. Content Type Attributes must preserve Sort Order This is important, as it's relevant to the UI. Limitations As of now (2sxc 9.7) the system will pick up the content-types stored there and everything works. BUT there is no built-in mechanism to edit these. We (2sic) can easily create content-types in a normal 2sxc and export them to json for this purpose, but as of now there is no GUI to do so. This should not affect you, as it's not meant to be managed by anybody else than us as of now. Read also JSON Format V1 File-Stored Content-Types Blog post about json content-type definitions History Added in 2sxc 9.7"
  },
  "abyss/data-formats/json-v01/entity.html": {
    "href": "abyss/data-formats/json-v01/entity.html",
    "title": "JSON Entity V1 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JSON Entity V1 JSON based entities are items which are stored as JSON. This is used in the history, in dynamic-entities in the DB and more. Description As of now, it's using a envolope to package everything and includes a minimal header to ensure we know it's V1. It then contains an Entity node containing various identification and description attributes / properties optional Entity Metadata optional Assets Example This example is an extract of the Config Content-Type to manage the SqlDataSource (will be releasen in 2sxc 9.8 with more help-text etc.): { \"_\": { \"V\": 1 }, \"Entity\": { \"Id\": 42900, \"Version\": 6, \"Guid\": \"e8a702d2-eccd-4b0f-83bd-600d8a8449d9\", \"Type\": { \"Name\": \"DataPipeline\", \"Id\": \"DataPipeline\" }, \"Attributes\": { \"String\": { \"Description\": { \"*\": \"Retrieve full list of all zones\" }, \"Name\": { \"*\": \"Zones\" }, \"StreamsOut\": { \"*\": \"ListContent,Default\" }, \"StreamWiring\": { \"*\": \"3cef3168-5fe8-4417-8ee0-c47642181a1e:Default>Out:Default\" }, \"TestParameters\": { \"*\": \"[Module:ModuleID]=6936\" } }, \"Boolean\": { \"AllowEdit\": { \"*\": true } } }, \"Owner\": \"dnn:userid=1\", \"Metadata\": [ ] } } Format Explained _ (header) mainly storing the version, in case we have to introduce a breaking change - see also format v1 Entity - this marks an entity - at the moment a json package should only have 1, but later it could contain more Id - the identity as a number Guid - the identity guid as a string Type - type information object Name - the type name Id - the type identity (Static Name) as a string. It's usually a guid, but special types can also use a specific string Attributes - the values of this entity String - all the string values; optional, only exists if there are string values [the field name] - an object containing languages/values, see JSON Values [more fields / languages / values] Boolean - all the boolean values; optional, only exists if there are boelean values Number - all numbers; optional, only exists if there are number values [more types] Owner a special string identifying the owner of this item Metadata (optional, array of more entities) - a list of Entities which further describe this Entity - see JSON Metadata V1 [item 1] Id Guid [more properties] [next items] For object optional, metadata target reference - see JSON Metadata V1 Assets object optional for including template files in View-exports - see JSON Assets V1 All Attributes are Grouped by Type Because JSON is itself a very loose data-format, and certain types like dates are not auto-detectable, we decided to have the type-specification as a first-class citizen in the format. This allows for automatic, reliable type-checking when materializing objects. Values and Languages \uD83D\uDC49 JSON Value (Multilanguage) V1 Metadata \uD83D\uDC49 JSON Metadata V1 Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc 9.4 Extended to support attachments so Views can include templates and icons in 2sxc ca. v11.10"
  },
  "abyss/data-formats/json-v01/index.html": {
    "href": "abyss/data-formats/json-v01/index.html",
    "title": "JSON Format V1 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JSON Format V1 JSON based data storage is used to persist data into a text (JSON) format. In 2sxc 9.4 we introduced it to store entities in the history (for version rollback). Since then it has found many new applications. JSON Package The Json format has a minimal header like this: { \"_\": { \"V\": 1 } } which just contains the version. Future non-breaking enhancements will leave the version on 1 and optionally add more header information. In addition to that, the basic package can contain ContentType node an Entity node a Query - which is actually also an Entity with lots of Metadata a View - which is an Entity with Metadata and Assets This could then look like this: { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Name\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", ... } } Special Stuff about the JSON Format All values have language information As we're usually working with real-life content-items, multi-language is always a concern. Because of this, every value is multi-language by default. If the language code is *, that means that this value is the default/fallback value for all languages. See JSON Value (Multilanguage) V1 Metadata is a Recursive List of Entities 2sxc and the EAV is all about real-life content-management. As such, many pieces of information have more information attached, called Metadata. Metadata-items could themselves have their own Metadata, which is then of course attached as well. See JSON Metadata V1 Limitations As of now (2sxc 9.7) such a package can only contain 1 root item (a content-type or an entity). Future versions may enhance this. Read also Format: Json V1 Content-types Concepts: file provided content-types History Added in v9.4 Enhanced with Content-Types in v9.7 Extended to support attachments so Views can include templates and icons in 2sxc ca. v11.10"
  },
  "abyss/data-formats/json-v01/metadata.html": {
    "href": "abyss/data-formats/json-v01/metadata.html",
    "title": "JSON Metadata V1 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JSON Metadata V1 JSON Data can be Metadata for something. The target reference is stored in the For object. have Metadata which is stored in the Metadata object. \uD83D\uDC49 Read more about Metadata. For Information The For is optional and is only specified if this entity is Metadata for something. It gives it the target Reference. This is the structure of the For object For object optional, metadata target reference Target - string name describing the target type as the name is specified in the DB. We don't use the number but the string, in case the number is different on another system Number - the number key optional, only if the key is a number String - the string key optional, only if the key is a string Guid - the guid key optional, only if the key is a guid Example of a Field-Metadata { \"_\": { \"V\": 1 }, \"Entity\": { \"Id\": 423, \"Version\": 1, \"Guid\": \"82bdcdc9-ff37-40e5-8a5c-340a7864c325\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"Name\": { \"*\": \"Street\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } } }, \"For\": { \"Target\": \"EAV Field Properties\", \"Number\": 244 } } } Metadata Items If something has Metadata, it will be included in the Metadata object. This is an array. The Metadata items are built just like an Entity except that it cannot have a For - since the target is already defined. Example - Extract of a Content-Type with Fields having Metadata { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"3de8e971-9e76-4d77-beda-f754e7b056bd\", \"Name\": \"Content with Preview\", \"Scope\": \"2SexyContent\", \"Description\": \"Content with Preview\", \"Attributes\": [ { \"Name\": \"Title\", \"Type\": \"String\", \"InputType\": \"string-default\", \"IsTitle\": true, \"Metadata\": [ { \"Id\": 447, \"Version\": 1, \"Guid\": \"859745e4-6064-45f1-b96e-35226f6505e9\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"Name\": { \"*\": \"Title\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } } } } ] }, { \"Name\": \"Body\", \"Type\": \"String\", \"InputType\": \"string-wysiwyg\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 448, \"Version\": 1, \"Guid\": \"f887914e-371b-4c2c-862d-1ad572a9ce5a\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"<p> </p>\" }, \"Name\": { \"*\": \"Body\" }, \"Notes\": { \"*\": \"\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } }, \"Boolean\": { \"Required\": { \"*\": false }, \"VisibleInEditUI\": { \"*\": true } } } }, { \"Id\": 449, \"Version\": 1, \"Guid\": \"6a01df48-483e-471e-a4a9-3b7c760bbe44\", \"Type\": { \"Name\": \"@String\", \"Id\": \"@String\" }, \"Attributes\": { \"String\": { \"DropdownValues\": { \"*\": \"\" }, \"InputType\": { \"*\": \"wysiwyg\" } }, \"Number\": { \"RowCount\": { \"*\": 1.0 } } } } ] }, ], \"Metadata\": [] } } Special note about Target In all long-term uses of Metadata (like for export/import or in item history) the target is a string. In short-term use like simple WebAPI calls the Target can be the number. Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc 9.4"
  },
  "abyss/data-formats/json-v01/value.html": {
    "href": "abyss/data-formats/json-v01/value.html",
    "title": "JSON Value (Multilanguage) V1 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JSON Value (Multilanguage) V1 JSON based entities are items which are stored as JSON. This is used in the history, in dynamic-entities in the DB and more. Attributes/Properties have one or move values depending on how they are translated, so the Value is always an Dictionary (object of keys/values). Example This example is showing part of a JSON. Most of it has been removed to just focus on the values: { \"_\": { \"V\": 1 }, \"Entity\": { \"//1\": \"Stuff skipped in this example\", \"Attributes\": { \"String\": { \"Description\": { \"*\": \"Retrieve full list of all zones\" }, \"Name\": { \"en-US\": \"Zones\", \"de-DE\": \"Zonen\" }, }, \"//2\": \"More stuff skipped for this example\" } } Value Format Explained _ (header) mainly storing the version, in case we have to introduce a breaking change - see also format v1 Entity - this marks an entity - at the moment a json package should only have 1, but later it could contain more Attributes - the values of this entity String - all the string values; optional, only exists if there are string values [the field name] [the languages this value applies to] [the value] [more languages / values] [more fields / languages / values] [next type] - all the boolean values; optional, only exists if there are boelean values Language Codes The keys of the dictionary determine what language is used and how. if the key is * then this value applies to all languages if the key is a culture code like en-us (always lower case) it applies to that language if the value is shared with multiple languages you'll see keys like en-us,de-de if the value is shared but read-only in some languages the read-only-languages are prefixed with a ~ so you'll see en-us,~de-de This can of course extend over many languages, so keys like en-us,de-de,de-ch,~ar-ae are valid. Entity Relationship Fields Note that entity-relationship fields cannot be multi-language, so it's always mapped to * and contains an array of references: { \"_\": { \"V\": 1 }, \"Entity\": { \"//1\": \"Stuff skipped in this example\", \"Attributes\": { \"String\": { \"Name\": { \"en-us\": \"Street\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } } }, \"//2\": \"More stuff skipped for this example\" } } Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc 9.4"
  },
  "abyss/data-formats/json/sys-settings/index.html": {
    "href": "abyss/data-formats/json/sys-settings/index.html",
    "title": "SysSettings JSON Data Formats - WIP! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "SysSettings JSON Data Formats - WIP! you are here (click to zoom) - discover the stack .context-box-summary .format-json-headless { visibility: visible; } Internally there are a few cases where an object needs some special configuration which are called SysSettings. Examples: The App object has a SysSettings which is used to control sharing across sites Attributes (Fields/Properties) are planned to have SysSettings to control sharing their configuration WIP App SysSettings This is not documented ATM, you'll need to check the code Attribute SysSettings WIP This is based on new features we're working on as of 2023-10 - it's really not final! Purpose Our goal is to enable central attribute definitions. This will allow a content-type to specify all attributes incl. configuration and help texts. Other ContentTypes can then have fields which share the definition of the original. Challenges Sharing Mark attributes which are meant for sharing (to ensure only these are shared) Restrict how far the sharing goes - to better restrict what is possible and to avoid unwanted side-effects (eg. current App only) Possibly restrict what parts are shared / can be inherited Probably minimal setup for sharing: { \"Share\": true } Future: Probably advanced setup for sharing outside of current App { \"Share\": true, // required for sharing // The following are currently not implemented \"ShareRestriction\": \"Site\", // optional, restrict sharing to this level, optional, defaults to \"Scope\" = \"Current App, Current Scope\" \"ShareOnly\": \"Metadata\", // optional, by default everything that can be shared is shared, this would restrict it to only share the metadata } Inheriting Mark Attributes to indicate that their identity is the the same as another field Mark Attributes to indicate they inherit something (eg. the Metadata) Possibly exact control over what is inherited (eg. all specs, only certain specs etc.) Possibly inherit from multiple attributes (eg. MyField inherits label from MyFieldBase and Formulas from MyFieldBase2) Inherit Metadata / Configuration of another Field Most common version of inherit (inherits all metadata of a shared field, nothing else) { \"InheritMetadataOf\": \"0fc6d925-77df-4ccc-80dd-5d9ddaf003c9\", // inherit all metadata from this field } WIP - Preserve minimal features of own Metadata Prototyping... { \"InheritMetadataOf\": \"00000000-0000-0000-0000-000000000000/@All/Name,0fc6d925-77df-4ccc-80dd-5d9ddaf003c9\", } Future: Complex Metadata inheritance { \"InheritMetadataOf\": \"0fc6d925-77df-4ccc-80dd-5d9ddaf003c9,0fc6d925-77df-4ccc-80dd-5d9ddaf003c9/@UiFormulas,0fc6d925-77df-4ccc-80dd-5d9ddaf003c9/@All,0fc6d925-77df-4ccc-80dd-5d9ddaf003c9/-@All\", } Note WIP - the long string on inheritMetadataOf is a string version of the following rules. Reason we're just using a string is to keep things simple in the final format. 0fc6d925-77df-4ccc-80dd-5d9ddaf003c9 - inherit all metadata from this field 0fc6d925-77df-4ccc-80dd-5d9ddaf003c9/@UiFormulas - inherit the @UiFormulas metadata from this field 0fc6d925-77df-4ccc-80dd-5d9ddaf003c9/@All - inherit the @All metadata from this field 0fc6d925-77df-4ccc-80dd-5d9ddaf003c9/-@All - inherit the metadata except @All from this field Future: Other Inheritance in Consideration { \"Inherit\": \"0fc6d925-77df-4ccc-80dd-5d9ddaf003c9\", // inherit identity and from the field with this guid \"InheritName\": true, // would enforce the name to match the original in code/APIs no matter what name is manually set \"InheritMetadata\": true, // inherit all metadata from this field } History Initial experiments v16.07.01 2023-10-27"
  },
  "abyss/data-formats/json/web-api/index.html": {
    "href": "abyss/data-formats/json/web-api/index.html",
    "title": "JSON Data Format used in WebAPI calls (technical) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JSON Data Format used in WebAPI calls (technical) you are here (click to zoom) - discover the stack .context-box-summary .format-json-headless { visibility: visible; } When reading or writing data to/from the Headless WebAPI the data format used is JSON. Here are the basics: Read Single Item is Super-Simple JSON Here's an example of a BusinessUnit item: { \"Name\": \"Web\", \"Description\": \"<p>We create websites!</p>\", \"Id\": 19403, \"Guid\": \"1252c52c-30e4-4c9f-8d45-e094160ca251\", \"Title\": \"Web\", \"Modified\": \"2021-02-25T20:32:52.94Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" } Some notes All the value fields have their real names, usually uppercase as that's how the fields are typically named A few internal fields are also included Id (int) Title (string) Modified (date) Created (date) Guid (string with GUID) - this is only supplied on queries or if the REST API requests includes a ?includeGuid=true Dates are transferred as strings, using the international ISO format Html strings contain the real html Read Lists: Arrays of Items [ { \"Name\": \"Web\", \"Description\": \"<p>We create websites!</p>\", \"Id\": 19403, \"Guid\": \"1252c52c-30e4-4c9f-8d45-e094160ca251\", \"Title\": \"Web\", \"Modified\": \"2021-02-25T20:32:52.94Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" }, { \"Name\": \"Dev\", \"Description\": \"<p>Our development unit</p>\", \"Id\": 19404, \"Guid\": \"c89cb53b-0f7b-441a-9e6c-5467dd9322e9\", \"Title\": \"Dev\", \"Modified\": \"2021-02-25T18:02:52.327Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" }, { \"Name\": \"Eff\", \"Description\": \"<p>Everything regarding efficiency - like <a href=\\\"https://sphosting.ch\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">SharePoint</a>, Word &amp; Excel automation, <a href=\\\"https://azing.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">azing.org</a></p>\", \"Id\": 19405, \"Guid\": \"fa4a1de9-adf5-4e1d-ab70-63281b3e797b\", \"Title\": \"Eff\", \"Modified\": \"2021-02-25T18:03:12.84Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" } ] Write / PUT has the Same Data Format To create data or update it, use the identical format. Some notes: When creating, the ID must be blank (otherwise an update is assumed) When creating, the Guid is usually blank and will be generated automatically (see special notes below) Special System Properties when Saving When creating or updating data, there are some system properties you can also set, which affect how things are saved EntityGuid on Create (ca. v8) You can provide an EntityGuid if necessary, for example when other code needs to know the Guid before creating. This would then be saved and returned on the Guid property on the next call. PublishState Controls Publishing (v13.03) If you set the property PublishState it can have these values and effects: null or \"\" will save new as is preset by permissions; on update it will leave the existing state unchanged true, \"true\", 1 will always set the published to true (if permissions allow) false, \"false\", 0 will alwyays set published to false \"draft\" will set published to false; if it's an update and there was a published one before, that will remain published For Determines Metadata-Target (ca. v11) For can contain metadata headers to anchor this item to another thing. Will only affect new data, and be ignored on updates. This is the schema of this object { TargetType: int; // one of known target types Number?: number; // Key if it's a number key String?: string; // Key if it's a string ey Guid?: string; // Guid if it's a GUID key } Note that you must provide one of the keys, othewise it will fail. See also Metadata Target Types See also SxcData ParentRelationship Adds Item to a Parent (v13.03) If your data has a property ParentRelationship with these fields: Parent - a GUID to the parent Field - the name of the field it should be added to (must be an entity-field) Index - the location it should be added to in that field which is a list of items Then upon creating the new item, it will also be added to that parent and it's list of items. Read / Write Multi-Language Data This does not exist yet as a simple REST API but is a planned feature for 2022. For now, create your own WebApi if you need this. History REST API added ca. v7 on the path /app/content Ability to also set EntityGuid added ca. v8 For feature added ca. v11 primary path changed to /app/data/ PublishState added v13.03 ParentRelationship added v13.03"
  },
  "abyss/data-formats/xml/app-data/index.html": {
    "href": "abyss/data-formats/xml/app-data/index.html",
    "title": "App.xml Data Format in 2sxc (technical) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App.xml Data Format in 2sxc (technical) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Apps can store their entire state as an XML file, for 2 use cases To include in an App-ZIP export For Git versioning The format of this file is not documented as of now."
  },
  "abyss/data-formats/xml/table/index.html": {
    "href": "abyss/data-formats/xml/table/index.html",
    "title": "Table Data Format in 2sxc (technical) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Table Data Format in 2sxc (technical) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } You can export/import lists of data for mass-editing in Excel. Read about \uD83D\uDC49 Data Export / Import \uD83D\uDC49 App Export / Import - Overview Example <SexyContentData> <Entity Type=\"Categories\"> <Guid>9e751a94-4335-48fa-b1f8-44ca97a06ab8</Guid> <Language>en-US</Language> <Name>AHV de</Name> <SortOrder>30</SortOrder> <SharepointId>5543</SharepointId> <CategoryLanguage>de</CategoryLanguage> <GroupName>AHV</GroupName> </Entity> <Entity Type=\"Categories\"> <Guid>9e751a94-4335-48fa-b1f8-44ca97a06ab8</Guid> <Language>fr-FR</Language> <Name>AVS de</Name> <SortOrder>[]</SortOrder> <SharepointId>[]</SharepointId> <CategoryLanguage>[]</CategoryLanguage> <GroupName>AVS</GroupName> </Entity> <Entity Type=\"Categories\"> <Guid>9e751a94-4335-48fa-b1f8-44ca97a06ab8</Guid> <Language>it-IT</Language> <Name>AVS de</Name> <SortOrder>[]</SortOrder> <SharepointId>[]</SharepointId> <CategoryLanguage>[]</CategoryLanguage> <GroupName>AVS</GroupName> </Entity> <SexyContentData> This format works well to open in Excel and save again. Special notes Each language will have an own row - but each with the same GUID as the other languages of the same item Special translation scenarios have special placeholders so a re-import will preserve that state Known Issues If you have a field called <Body> Excel seems to cause trouble. In that case we recommend you temporarily change all the XML nodes in a text-editor with Search-Replace, then edit in Excel and replace back when done."
  },
  "abyss/data-formats/zip/index.html": {
    "href": "abyss/data-formats/zip/index.html",
    "title": "ZIP App Data Format in 2sxc (technical) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "ZIP App Data Format in 2sxc (technical) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } When Apps are exported, they result in a ZIP file which can be easily re-imported. Info-Files in the Root Folder The root folder contains some files which are not important, but they should help in case someone tries to install the App in Dnn, because it would then show some messages that it's not a Dnn Package. Structure of the ZIP various info files Apps [AppName] (like Accordion3) app.xml - all the data in the App as XML 2sexy folder containing all the files in your app PortalFiles folder (optional) adam folder (optional) - would contain all the adam files [AppName] (like Accordion3) all folders / files in the site root, which were referenced by data Multi-App Package not Supported The file structure would support the ability to bundle many apps into one package, but the export/import system does not support this use case as of now."
  },
  "abyss/enterprise-development/_1-export-everything.html": {
    "href": "abyss/enterprise-development/_1-export-everything.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Note that the app is only complete if you also export the App-State in the Admin UI. Ideally you would export it together with all the content-assets (if there are any)."
  },
  "abyss/enterprise-development/app-sync-deploy.html": {
    "href": "abyss/enterprise-development/app-sync-deploy.html",
    "title": "Sync Apps from Dev ➡️ Production - Deploy App with Git-Sync | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Sync Apps from Dev ➡️ Production - Deploy App with Git-Sync 2sxc 15 introduces the ability to import an entire App from the file system. This is ideal when your code is on a versioning server such as Github. It allows you to push your changes to the git-server, and then pull it into a folder in the 2sxc. You can then just go to the UI and import the app directly. Tip This process also allows you to later sync changes the same way, if you can sync the entire App. \uD83E\uDDB8\uD83C\uDFFE‍♂️ Requires Patron feature AppSyncWithSiteFiles Step 1: Export Everything to File System Note that the app is only complete if you also export the App-State in the Admin UI. Ideally you would export it together with all the content-assets (if there are any). Step 2: Sync with Git / Versioning Typically you will have your App in git-versioning. So after saving the entire state, you will want to commit and push. In the new location, go to the site specific 2sxc folder. Then git-clone the repo to a subfolder of your choice. We recommend that it has the same name as the subfolder you used in development. Step 3: Import Directly from File System You can now go to the Apps-Management and import the App directly from the file system."
  },
  "abyss/enterprise-development/app-sync-resync.html": {
    "href": "abyss/enterprise-development/app-sync-resync.html",
    "title": "Sync Apps from Dev ➡️ Production - Sync Entire App | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Sync Apps from Dev ➡️ Production - Sync Entire App In this scenario the App already exists on the production environment and you made changes on dev. This scenario makes sense when you can fully reset the production environment to the same state as dev. Warning This will reset everything on production, including data and assets added by the editor. Step 1: Re-Export Everything to File System Note that the app is only complete if you also export the App-State in the Admin UI. Ideally you would export it together with all the content-assets (if there are any). Step 2: Re-Sync with Git / Versioning Typically you will have your App in git-versioning. So after saving the entire state, you will want to commit and push. In the new location, go to the target folder. Then git-pull the repo. Step 3: Re-Import / Reset App on Production Now got to the App settings on the Production site and import everything. Warning Make sure you verify you're importing on the correct system. It's easy to accidentally be on the wrong system (dev instead of production). \uD83E\uDDB8\uD83C\uDFFE‍♂️ If you want to sync the ADAM assets as well, you need the Patron feature AppSyncWithSiteFiles History Export / Import of Apps introduced ca. 2sxc v4 App-state export with content-assets 2sxc v15 App-import from file system 2sxc v15"
  },
  "abyss/enterprise-development/app-sync.html": {
    "href": "abyss/enterprise-development/app-sync.html",
    "title": "Sync Apps from Development to Production | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Sync Apps from Development to Production In enterprise scenarios you will have dedicated dev environments. But the challenge will be how to synchronise changes to the production environment. It's important to remember that Apps contain a lot of things: Templates and assets - usually Razor files, css, javascript etc. Schema - the ContentTypes Content - usually added by editors on the production Data - the text, numbers etc. Assets - the images, documents etc. WebAPIs - C# web controllers Queries Settings and Resources Tip Depending on your scenario you will want to sync all of this from dev to live, and sometimes just parts of it. Scenario 1: Deploy Entire App When you want to deploy the entire app to a system which doesn't have the App yet, you have two options: Export Import of App This is the simplest option - just export the App from the admin UI and import it on the new location. Import-Sync Through Git / File-System \uD83D\uDC49\uD83C\uDFFE See Sync Apps from Dev ➡️ Production - Deploy App with Git-Sync Scenario 2: Sync Entire App \uD83D\uDC49\uD83C\uDFFE See Sync Apps from Dev ➡️ Production - Sync Entire App Scenario 3: Sync Parts of an App This makes sense when the production system has changes which you don't want to overwrite. Example: you may just want to sync some files or a query. TODO: NOT FULLY DOCUMENTED YET, but easy to discover Scenario 4: Sync Lists of Data This is what you do when you only changed data (entities) and need to re-sync an entire table. Example: You just want to sync a list of categories. TODO: NOT FULLY DOCUMENTED YET, but easy to discover History Export / Import of Apps introduced ca. 2sxc v4 App-state export with content-assets 2sxc v15 App-import from file system 2sxc v15"
  },
  "abyss/enterprise-development/index.html": {
    "href": "abyss/enterprise-development/index.html",
    "title": "Enterprise Dev Workflows | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enterprise Dev Workflows It's really easy to build Apps in 2sxc. For really advanced scenarios, here some guidance how to make it brilliant. Sync Apps from Development to Production In enterprise scenarios you will have dedicated dev environments. But the challenge will be how to synchronise changes to the production environment. \uD83D\uDC49\uD83C\uDFFE See Sync Apps from Dev to Production Work in Staging-Environment on the Production Server 2sxc has a special feature called Polymorphism. This allows you to prepare and review changes on the production server, without affecting the users. \uD83D\uDC49\uD83C\uDFFE See Polymorphism Re-Use App Parts Across Apps & Sites In multi-site / multi-portal environments, you may have the scenario where the same App functionality is needed across many sites. You can Share Content-Types across many different Apps Share Content-Types in the same App in many Sites Share Razor Templates and Assets in the same App in many Sites Share the entire App on many sites This isn't fully documented yet WIP."
  },
  "abyss/index.html": {
    "href": "abyss/index.html",
    "title": "2sxc & EAV Abyss - The Deep Stuff | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc & EAV Abyss - The Deep Stuff Here you will find things about the internals and depths (aka Abyss) of the system."
  },
  "abyss/infrastructure/index.html": {
    "href": "abyss/infrastructure/index.html",
    "title": "2sxc Infrastructure | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Infrastructure Infrastructure TODO: DOCUMENT MORE ABOUT THE INFRASTRUCTURE Patron Infrastructure If you care about your infrastructure and especially about performance, storage size and reduced cost, please consider becoming a patron. Our Patron Infrastructure bundle will give you special enhancements. As of now, you get: Compression on Data Timeline which can reduce your Sql DB by 20 to 80% (new v15)"
  },
  "abyss/infrastructure/sql-data-timeline-compression.html": {
    "href": "abyss/infrastructure/sql-data-timeline-compression.html",
    "title": "2sxc Patron Infrastructure - Sql Data Timeline Compression | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Patron Infrastructure - Sql Data Timeline Compression Every change in 2sxc is logged to a table called DataTimeline. The purpose is to allow editors to roll back changes and restore entities to a previous state. Websites with a lot of content editing can grow this table until it becomes the largest 2sxc table. With the feature SqlDataTimelineCompression all history-data will be stored as ZIP compressed JSON. This can easily save you hundreds, if not thousands of MB in DB storage. Activate the feature Do this using the standard mechanisms to become a patron. If you activate Patron Infrastructure, this feature is automatically enabled. Compress Previous Data Older data is not modified by the change, but you can run the following SQL to compress it: -- Will Compress everything and remove the data from the json column UPDATE [dbo].[ToSIC_EAV_DataTimeline] SET [CJson] = COMPRESS(CAST([Json] AS VARCHAR(MAX))), [Json] = NULL WHERE [Json] IS NOT NULL Alternative (for analysis) - should result in 60-80% reduction -- Will compress, but leave the old data there UPDATE [dbo].[ToSIC_EAV_DataTimeline] SET [CJson] = COMPRESS(CAST([Json] AS VARCHAR(MAX))) WHERE [Json] IS NOT NULL -- Compare sizes Select Sum(DATALENGTH([CJSON])) as CompressedSize, Sum(DATALENGTH([Json])) as JsonSize From [dbo].[ToSIC_EAV_DataTimeline] Decompress Previous Data If you were using this feature before and must opt-out, you can decompress the history data with the following SQL: UPDATE [dbo].[ToSIC_EAV_DataTimeline] SET [Json] = CAST(CAST(DECOMPRESS([CJson]) AS VARCHAR(MAX)) AS NVARCHAR(MAX)), [CJson] = NULL WHERE [CJson] IS NOT NULL Query the Json From Compressed If you need to see the json in SQL for debugging purposes, you can start with the following sample. This is just a sample, you'll probably want to add a WHERE clause to limit the results: SELECT TOP (1000) *, CAST(CAST(DECOMPRESS([CJson]) AS VARCHAR(MAX)) AS NVARCHAR(MAX)) as Decompressed FROM [dbo].[ToSIC_EAV_DataTimeline] order by id desc History Added in v15"
  },
  "abyss/integration/index.html": {
    "href": "abyss/integration/index.html",
    "title": "Integration into Your Custom Platform (WIP Docs) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Integration into Your Custom Platform (WIP Docs) EAV and 2sxc can be included as part of your own custom platform or application. You may want to do this for things such as: Access existing EAV data which was created in Dnn or Oqtane Use dynamic data to extend the data of your application Use it to extend the functionality of your application Warning There docs are work in progress. Integration Overview Start with Scenario 1 - Read EAV Data Then expand to Scenario 2 - Edit EAV Data Then continue with Admin Razor ... TODO: Provide custom core services as needed Necessary for More Complex Scenarios Depending on your needs, you will activate more functionality in your application: Use Apps with Queries Use Razor Templates to render data Editing in your Web-UI Multi-Site / Tenant implementation Import/Export of data App level WebApi support Image Resizer Global / shared apps History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 final docs in v13.03"
  },
  "abyss/integration/scenario-01.html": {
    "href": "abyss/integration/scenario-01.html",
    "title": "Your Custom Platform - Scenario #1 - Read EAV Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Your Custom Platform - Scenario #1 - Read EAV Data This is part of the Integration Guide for integrating EAV or 2sxc into your own solution. Tip You can find this fully implemented in the Integration\\BasicEav01 project. Search for #2sxcIntegration in the code to find all the things that were adjusted to get it to work. Scope of Scenario #1 - Read EAV Data In Scenario #1 we will setup a basic system. This is the foundation for more enhanced scenarios. Functionality Can read / get EAV Data from an existing Dnn or Oqtane Database Has a dummy IUser implementation which says the user is always a SystemAdmin Can see Insights to see what's happening internally and to verify everything is ok Integration Overview for Basic Read-From-Existing-DB Scenarios To Integrate EAV and 2sxc into your system, these are the core things you must do: Add necessary DLLs Copy all relevant files core files like App_Data Integrate into your Dependency Injection Do StartUp configuration as needed Test / Verify you can Read Data 1. Add Minimal DLLs For the first scenario, we need the main ToSic.Eav.* DLLs (no 2sxc DLLs needed): Apps Core DataSources ImportExport Persistence.Efc Repository.Efc You can add these manually, reference them or whatever. 2. Copy Important Data to Your Target The EAV loads important data from the file system when it starts. This data contains Content-Types and basic configuration which is necessary to work. In the basic implementation, you need the App_Data folder to be copied to the right location, which must be available at runtime. Tip The App_Data folder does not need to be accessible from outside. You may copy the App_Data manually, or automate it on build. The following script is used in the BasicEav01 project on build (adjust it to your needs): @Echo Configuration='$(Configuration)' @Echo StartWith ='$(Configuration.StartsWith('Debug'))' @Echo Platform ='$(Platform)' @Echo ProjectDir '$(ProjectDir)' @SET BuildTarget=$(ProjectDir)sys-2sxc @Echo BuildTarget '%BuildTarget%' @REM Copy the data folders robocopy /mir \"$(ProjectDir)..\\..\\Data\\.data\\ \" \"%BuildTarget%\\.data\\ \" 3. Integrate into your Dependency Injection The EAV and 2sxc need Dependency Injection to work. As of now (2022-02) we use the .net Standard 2.1 DI. Note The example below also registers the IntUser which is the Integration-implementation of the IUser. To see the code of that, just check out the example code in the project. 3.1 General Principles The general principle is as follows: At StartUp you'll either use the existing IServiceCollection like in the Oqtane examples or create a new ServiceCollection() like in the Dnn examples You'll later have custom services for your platform only, these should be added in an own method like AddSxcYourPlatform in your own static class Once you need these objects, you'll get a IServiceProvider from the framework or create your own, sometimes creating an own scope This would be a minimal StartUp taken from BasicEav01: /// <summary> /// This method gets called by the runtime. Use this method to add services to the container. /// </summary> public void ConfigureServices(IServiceCollection services) { // #2sxcIntegration // Register our Always-Super-User (to allow Insights to be used) services.TryAddTransient<IUser, IntUser>(); // Enable all of EAV services.AddEav(); // RazorPages - standard .net core MVC feature services.AddRazorPages(); } 3.2 Various DI Scenarios Your project may already use DI, or it may not. Here are the common scenarios you will probably have: 3.2.1 DI Scenario #1 - No Dependency Injection This scenario is common in classic .net Framework and WebForms projects which are a bit older. We assume nobody will actually be needing this much, so we won't explain this in detail. Your work will basically consist of At Startup, create a new DI and store it somewhere (see DNN samples to see how this can be done) When you use it, make sure you get the IServiceProvider - probably in an own Scope per request and module 3.2.2 DI Scenario #2 - .net Core Dependency Injection This scenario is common in new Asp.net Core projects. It already has Dependency Injection setup, and all you need to do is use the existing one. For this scenario, best see how it's done in Oqtane 4. Do StartUp Configuration Some aspects of EAV & 2sxc are super important that they are configured before anything starts. These are the required ones as of 2022-02: The database ConnectionString required to connect to the EAV DB GlobalFolder of the distributed 2sxc files containing things like the App_Data subfolder - required to load initial configurations and initial data Call StartUp on the SystemLoader which you must get from DI This is the working code taken from BasicEav01: /// <summary> /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline. /// </summary> public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ----- Start EAV stuff #2sxcIntegration ----- var serviceProvider = app.ApplicationServices; // Set Connection String serviceProvider.Build<IDbConfiguration>().ConnectionString = _connStringFromConfig; // Set global path where it will find the .data folder var globalConfig = serviceProvider.Build<IGlobalConfiguration>(); globalConfig.GlobalFolder = Path.Combine(env.ContentRootPath, \"sys-2sxc\"); // Trigger start where the data etc. will be loaded & initialized serviceProvider.Build<SystemLoader>().StartUp(); // ----- End EAV stuff #2sxcIntegration ----- // ... } 5. Test and Verify If you did everything right, you can now run your code and access data from the App Cache using code like this (see demo on the ShowEavData.cshtml): @page @using ToSic.Eav.Apps @inject IAppStates AppStates @{ ViewData[\"Title\"] = \"First Read Data from EAV\"; // Adjust these values to your testing environment var zoneId = 2; var appId = 78; var appState = AppStates.Get(new AppIdentity(zoneId, appId)); var firstItem = appState.List.FirstOrDefault(); } Common Problems If the folder to the App_Data isn't quite correct, you will have a long loading time and then a stack overflow 5. Get Insights WebApi to Work The Insights will help you figure out what parts you need to implement. It will show you what services were requested which are not implemented yet, and will show you what code was used. Create your minimal InsightsController as you see in the demo project Register the routes using whatever system you have ATM (.net core, ASP.net Framework) Test the routes to see things are coming out Minimal InsightsController You can review the code of the InsightsController in the Controllers folder in the project. It's basically just a simple controller with one Details(...) action. Activate it in the StartUp.cs public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ... app.UseEndpoints(endpoints => { endpoints.MapRazorPages(); // #2sxcIntegration - enable insights controllers endpoints.MapControllers(); }); } Test by calling https://localhost:44384/api/sxc/sys/Insights/Help - replace the base path as needed. Tip Once the insights work, you can also see what objects were used in a fallback/unknown implementation. History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 Updated docs for basic Scenario for v13.03"
  },
  "abyss/integration/scenario-02.html": {
    "href": "abyss/integration/scenario-02.html",
    "title": "Your Custom Platform - Scenario #2 - Edit Data + ADAM | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Your Custom Platform - Scenario #2 - Edit Data + ADAM This is part of the Integration Guide for integrating EAV or 2sxc into your own solution. Tip You can find this fully implemented in the Integration\\SxcEdit01 project Search for #2sxcIntegration in the code to find all the things that were adjusted to get it to work. Warning These docs are still WIP. Scope of Scenario #2 - Edit EAV Data Functionality A link on a page can open the edit dialog Users can edit texts Users can save the result Users can see the history of an item and restore it to a previous state ADAM Users can upload assets in the edit-dialog - which is stored in this new web (not in the original Dnn/Oqtane) Users can see previously uploaded assets Users can delete and rename assets in the edit-dialog Assets are referenced using their path, not an ID (which would be the default in Dnn/Oqtane) Adam files of an entity can be shown on a page All API Controllers log what they do Not implemented Security checks are fake, it always returns that edit etc. is allowed Integration Overview for Basic Edit + ADAM To Integrate EAV and 2sxc into your system, these are the core things you must do: Add more necessary DLLs Copy additional relevant files - specifically the js/css files to be used in the dialogs Implement core objects which are different in your system Implement APIs for edit, probably also for delivering files etc. Test / Verify you can edit data 1. Add Minimal DLLs For this scenario you need to add just about all of the DLLs except for Razor helpers. You can add these manually, reference them or whatever. 2. 2sxc Web Files (JS, CSS) 2.1 Copy Important Web Files to Your Target All the dialogs are JS based, so you must get these JS files in a place where they can be loaded. Tip The dist, js folders etc. must be accessible from outside. For reference, check out the build script on the SxcEdit01 project. 2.2 Make sure in page 2sxc JSs are loaded For the page to be able to trigger edit dialogs, it needs at least these two files to be loaded on the page when a user should be able to edit: [2sxc public files root]/js/2sxc.api.min.js - note that the location could change in a future version [2sxc public files root]/dist/inpage/inpage.min.js - note that the location could change in a future version Optional: Load the CSS [2sxc public files root]/dist/inpage/inpage.min.css for Toolbars to work 2sxc does this automatically in a full implementation like in Dnn and Oqtane. The logic to do that and ensure it's part of the final output is sophisticated. So for this minimal implementation, best do it yourself, and choose yourself if you give it to all users or just admins. 2.3 Give the JS Environment Variables The JS needs to know a few global things for it to work. At the minimum it's the location of the WebAPI root as well as the location of the UI files. For this you either need a _jsApi meta header or add this to the page after the $2sxc-js has been loaded: $2sxc.env.load({ // optional pageId: 0, rvt: '@IntegrationConstants.EnvRvt', api: '@IntegrationConstants.EnvApiRoot', uiRoot: `@IntegrationConstants.EnvUiRoot`, }); The previous code was taken from the _Layout.cshtml in the example. 3. Implement Core Objects which are Necessary Specifically Implement Context\\ISite is needed to have information about the ContentPath Context\\IUser is needed to pretend it's a super-user and allow editing Adam\\IAdamPaths - our test-case assumes it's in wwwroot, for which there is already a prepared AdamPathsWwwroot object Register these replacements in the StartUp - in the demo project it's in the StartupEavAndSxc.AddImplementations(...) 4. Implement and Activate WebApis Implement a base class to assist in various aspects Add the request to the insights logs Ensure timing of the request to better spot issues Make sure your controllers are just proxies calling the Real controller Make some minor corrections to HTTP responses, so empty ones really return an HTTP 204 Implement WebApis to answer on the appropriate endpoints (see examples) DialogController is required to get general information for dialogs to work EditController is reponsible for loading and saving data from the dialog AdamController helps with file uploads etc. Register / activate Depending on the framework, registration is different. For .net core, check out the example AddControllersAndConfigureJson(...) or the Oqtane registration examples. Remember that it must also be configured - see the UseEndpoints(...) or the Startup.cs 5. Provide index-raw.html On the / new v14 The 2sxc dialogs (quick-dialog and eav-edit) both create an index-raw.html. These are incomplete - they need some placeholders to be replaced at runtime based on the page they are opened from. Linking to these UIs happens through these targets: [2sxc public files root]/dist/quickDialog/?pageId=123&sxcver=14... [2sxc public files root]/dist/ng-edit/?pageId=123&sxcver=14... You must ensure that these URLs deliver the corresponding index-raw.html with the placeholders fixed. For this, either create a real page (like a default.aspx in DNN) which responds to the request and renders the index-raw.html with the placeholders replaced. Or you can create a route/endpoint (like in Oqtane) which does the same thing. Best check the code how it's done in Dnn/Oqtane. The placeholders which are currently set are: @base - for the base-tag containing the page-id so that refreshes preserve this @jsapi - the meta-header containing context information @sxcver - for the version of 2sxc extended with the server-start timestamp, mainly for cache-break purposes <!--@customheaders--> - custom headers - ATM not used but you may need it <!--@custombody--> - custom body - ATM used by Oqtane to provide the Request Verification Token These are replaced automatically for you when you use the ToSic.Sxc.Web.HmlDialog helpers. 6. Expand StartUp Configuration Do the same as TODO: Some aspects of EAV & 2sxc are super important that they are configured before anything starts. These are the required ones as of 2022-02: The database ConnectionString required to connect to the EAV DB GlobalFolder of the distributed 2sxc files containing things like the App_Data subfolder - required to load initial configurations and initial data Call StartUp on the SystemLoader which you must get from DI This is the working code taken from BasicEav01: /// <summary> /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline. /// </summary> public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ----- Start EAV stuff #2sxcIntegration ----- var serviceProvider = app.ApplicationServices; // Set Connection String serviceProvider.Build<IDbConfiguration>().ConnectionString = _connStringFromConfig; // Set global path where it will find the App_Data folder var globalConfig = serviceProvider.Build<IGlobalConfiguration>(); globalConfig.GlobalFolder = Path.Combine(env.ContentRootPath, \"sys-2sxc\"); // Trigger start where the data etc. will be loaded & initialized serviceProvider.Build<SystemLoader>().StartUp(); // ----- End EAV stuff #2sxcIntegration ----- // ... } 5. Test and Verify If you did everything right, you can now run your code and access data from the App Cache using code like this (see demo on the ShowEavData.cshtml): @page @using ToSic.Eav.Apps @inject IAppStates AppStates @{ ViewData[\"Title\"] = \"First Read Data from EAV\"; // Adjust these values to your testing environment var zoneId = 2; var appId = 78; var appState = AppStates.Get(new AppIdentity(zoneId, appId)); var firstItem = appState.List.FirstOrDefault(); } Common Problems If the folder to the App_Data isn't quite correct, you will have a long loading time and then a stack overflow History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 Updated docs for basic Scenario for v13.03 Updated for dialog-integration with index-raw in v14.02"
  },
  "abyss/integration/scenario-future-wip.html": {
    "href": "abyss/integration/scenario-future-wip.html",
    "title": "Your Custom Platform - Scenario XX Notes to maybe use later | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Your Custom Platform - Scenario XX Notes to maybe use later TODO: REMOVE The more complete code for the StartUp looks a bit like this (taken from the OqStartUp): public void ConfigureServices(IServiceCollection services) { // 1. Initial code to do things not related to EAV/2sxc // ... // 2. Register all 2sxc services services .AddSxcOqtane() // Always first add your override services .AddSxcRazor() // this is the .net core Razor compiler .AddAdamWebApi<int, int>() // This is used to enable ADAM WebAPIs .AddSxcWebApi<IActionResult>() // This adds all the standard backend services for WebAPIs to work .AddSxcCore() // Core 2sxc services .AddEav() // Core EAV services .AddOqtWebApis() // Oqtane App WebAPI stuff .AddRazorBlade(); // RazorBlade helpers for Razor in the edition used by Oqtane // 3. Other stuff in your Configure Services // ... } Note that you don't need all of this. For example, if you don't use razor, you won't need two of the lines above, etc. In general you should probably leave most of this disabled, and then activate each line as you need it. The code for registering your own services looks a bit like this (taken from Oqtane): namespace ToSic.Sxc.Oqt.Server.StartUp { internal static partial class OqtRegisterServices { public static IServiceCollection AddSxcOqtane(this IServiceCollection services) { // You'll probably have lots of these: services.AddScoped<I..., ...>(); services.TryAddTransient<I..., ...>(); return services; } } } TODO: REMOVE The following are optional, depending on the features you will be using The Global Assets base url - so links to in that global location work. ATM only used for the image of the Primary App The SharedAppsFolder which contains Razor or Token templates that are shared across sites History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 final docs WIP"
  },
  "abyss/lightspeed/index.html": {
    "href": "abyss/lightspeed/index.html",
    "title": "2sxc LightSpeed Output Cache | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc LightSpeed Output Cache 2sxc LightSpeed is an output cache that remembers the output of any module and reuses it when the same module is called again. This can reduce module rendering time by up to 99% and reduce page load time by 50-90%. How it Works Basic Principles of 2sxc LightSpeed Internally every module is rendered into a package containing the final HTML as well as changes to the page, such a title adjustments, CSP headers to add etc. When LightSpeed is enabled, this package will be cached. But it a very smart way: The cache is by user, so logged in users would always get their own cache. Anonymous users all get the same cache. Depending on LightSpeed settings on the app, the cache can vary by URL parameter, and optionally be case-sensitive. Since we cache both the final HTML as well as page changes like headers, we can reliably reproduce everything on future requests. This setup covers 99% of all use cases. For further optimizations, please contact us so we can enhance the API. Cache Flushing and Invalidation The cache will automatically flush if any of these things happen: any data is edited on an app any file in the app-folder is changed In these two cases all modules of that app are flushed. This ensures that no matter what you do, the cache is always up to date. How to Enable 2sxc LightSpeed Enable the 2sxc LightSpeed Feature Important: You must be a 2sxc Patron with the Patron Perfectionist package to use this feature. This is what you would probably see if your system is not yet registered: Make sure you have 2sxc 13.10+ installed Register your site and activate the Patron Perfectionist package Activate the license on your site so the package is available This is what you should see once you are ready. This will activate LightSpeed but nothing will be cached yet, unless you have Apps which already have a LightSpeed configuration. You can use the toggle to turn LightSpeed off in case something causes trouble. Configure 2sxc LightSpeed for your App To start caching, you must configure it in each app. This happens in the App Metadata. If you don't see the menu shown on arrow #2, then you have not activated the feature yet. This is what each setting does: Enable: you can change this for each app, espcecially while testing Duration: this is the normal duration for anonymous users Duration...: other durations for other users - we suggest that you only set it for anonymous users and admins URL Parameter: if not set, the cache stays the same even if url parameters change for Content and other simple things which don't have logic, this is recommended, but for list/details setups you need to enable this Case Sensitive: if set, url changes will be case sensitive Tip We suggest you also activate this for Site-Admins and System-Admins, as these will enjoy editing the site more. Since the cache will be flushed on every edit, this should not be a problem. After saving you should see something like this: We've made sure that the title contains a summary of all settings, so it's easy to see the configuration. LightSpeed Configuration Overview At the Apps-Management dialog you can see the status for each app. You can see if it's enabled or not You can also see the details if you hover on the icon You can also click on the ⚡ to quickly make some changes Verify It Works Verify LightSpeed Works in Chrome We suggest you use an anonymous browser (not logged in) to verify it works. In a separate logged-in browser you can enable/disable LightSpeed. If you refresh the page, you should see a much faster response time if LightSpeed is enabled: Verify LightSpeed Works in 2sxc Insights You can also review module loading time in 2sxc Insights. Here is an example showing the first load time and cached load times: Important Module load time is just for one module. The page can contain many modules and will also need 50-100ms for DNN / Oqtane work. Common Issues Here are some things that can cause trouble when activating the Lightspeed feature: Details Pages all Show the Same Content Details pages usually have a ?id=xxx or similar parameter to identify the item to show. The cache must know that each url must be cached separately so you must configure this in the App Metadata. Details Pages show the List of Items This is usually cause by not setting the URL Parameter in the App Metadata. Easy to fix. Page Headers are not Set on Cached Requests If you have older apps, especially the old blog which may set page headers using the RazorBlade HtmlPage object, you may get unexpected results. The reason is that this sets headers directly when the code is executed. So once the data is cached, the code doesn't run any more. Solution Change your code to use the IPageService instead. It will queue the page changes and this queue will also be processed in cached situations. History Created in 2sxc 13.10 Shortlink: https://go.2sxc.org/lightspeed"
  },
  "abyss/parts/look-up/engine.html": {
    "href": "abyss/parts/look-up/engine.html",
    "title": "LookUp Engine | 2sxc 19 for Dnn and Oqtane",
    "keywords": "LookUp Engine you are here (click to zoom) - discover the stack .context-box-summary .lookup-engine { visibility: visible; } The LookUp Engine is responsible for getting values. It will use LookUp sources to resolve the values. The LookUp System is in the ToSic.Eav.LookUp namespace The LookUp Engine is an ILookUpEngine Warning This is very technical stuff, you usually don't need to know this. We're just including it for completeness sake. LookUpEngine LookUp Engines will collect a set of LookUp objects and use these to resolve strings like Module:ModuleId. For this, they will check which LookUp has the right name (in this case Module) and will ask it if it can provide the value (in this case the ModuleId). Notes Usually LookUp Engines will receive a long list (Dictionary) of things to look up, and resolve these in one quick call. This is because often they are attached to a DataSource which requires many configuration values - so they will prepare the list of parameters, pass it to the LookUpEngine and then work with the results as needed. Tip LookUp Engines can also perform default-fallbacks - so if a LookUp source can't provide the answer needed, the engine may use a static value instead: [QueryString:PageSize||10] Tip LookUp Engines can also perform lookup-fallbacks if the source can't provide an answer. In this case it may ask another LookUp if it has the answer. This happens when the Token looks like this: [QueryString:PageSize||[App:Settings:PageSize]] C# and Dependency Injection LookUp Engines all implement the ILookUpEngine interface and should inherit the LookUpEngine object. LookUpEngine objects are provided with DependencyInjection. The system that gets the currently valid LookUpEngine inherits the ILookUpEngineResolver. Also Read LookUp System LookUp Tokens Explained DataSource Configuration: Configuration.Parse() ToSic.Eav.LookUp ToSic.Sxc.LookUp ToSic.Sxc.Dnn.LookUp History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "abyss/parts/look-up/index.html": {
    "href": "abyss/parts/look-up/index.html",
    "title": "LookUp System | 2sxc 19 for Dnn and Oqtane",
    "keywords": "LookUp System you are here (click to zoom) - discover the stack .context-box-summary .lookup { visibility: visible; } Many things in the EAV and 2sxc require it to look up parameters. Examples could be: The current Page ID to then find metadata for this page The current Date to filter out news items which should be published in future An Id from the URL Parameters to show details about this id This is done using Tokens which look like [QueryString:Id]. To achieve this 2sxc has three parts: Tokens which parses the placeholders The LookUpEngine which will get the values... ...using LookUp Sources to really resolve the values. Tip The LookUp System is used in Queries and Token Templates. But since Token-Templates are fairly trivial, we recommand that you only use Tokens for Queries and instead create your Templates using Razor. Example Without LookUp Imagine a Query which has an EntityId Filter which expects an ID. This could be hardwired like this: What happens now is as follows: The EntityId-Filter will pass all the settings to be parsed by the LookUp-Engine The LookUp-Engine will detect that it's a simple value (not a Token) and just return the 38654 The EntityId-Filter will then do it's job and retrieve this item Example With LookUp But it would make more sense if the ID were to be dynamic, maybe from the URL like this: What happens now is as follows: The EntityId-Filter will pass all the settings to be parsed by the LookUp-Engine The LookUp-Engine will detect the Token and parse it Since the first part in the token says QueryString the LookUp-Engine will check if it has a LookUp-Source by that name Since it has a LookUp which answers to QueryString, it will ask this source if it can resolve id Assuming that the page has ?id=38654 then the LookUp will say yes! it's 38654 The EntityId-Filter will then do it's job and retrieve this item Discover More The Token Syntax and all the features LookUp Engine LookUp Sources Query LookUps Token Template LookUps For example, when a Query is created, it may need to know the current PortalId or the current time, to properly filter/sort something. This is achieved through 2 special object types, the ToSic.Eav.LookUp.ILookUp and ToSic.Eav.LookUp.ILookUpEngine, both in the ToSic.Eav.LookUp namespace. Also Read LookUp Tokens Explained DataSource Configuration: Configuration.Parse() ToSic.Eav.LookUp ToSic.Sxc.LookUp ToSic.Sxc.Dnn.LookUp History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "abyss/parts/look-up/lookup-app.html": {
    "href": "abyss/parts/look-up/lookup-app.html",
    "title": "App LookUps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App LookUps you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The App has three Sources which can be used in LookUps App - for app properties App:Settings - for settings of the App App:Resources - for i18n resources in the App App Tokens The following tokens are related to App-Information and Resources. Dnn/DotNetNuke does have these, you can only access them when in a 2sxc-App. Token Description Result [App:Path] /App-Demos/2sxc/Tutorial Tokens [App:PhysicalPath] \\\\nasw2\\P\\2sxc 2019b\\Web\\App-Demos\\2sxc\\Tutorial Tokens App:Settings Tokens Token Description Result [App:Settings:<Property>] App Settings which the App-designer defined. - [App:Settings:UseLightbox] All the information (multi-lingual) true App:Resources Tokens Token Description Result [App:Resources:<Property>] All the information (multi-lingual) - [App:Resources:GreetingText] All the information (multi-lingual) Hello there Token-Learner History Params added in 2sxc ca. v2 Enhanced with Settings/Resources ca. v4"
  },
  "abyss/parts/look-up/lookup-cms.html": {
    "href": "abyss/parts/look-up/lookup-cms.html",
    "title": "Cms LookUps for Dnn ☢️ and Oqtane \uD83E\uDE78 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Cms LookUps for Dnn ☢️ and Oqtane \uD83E\uDE78 you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The following lookups are new in v12 and work across platforms for both Dnn ☢️ and Oqtane \uD83E\uDE78: Site Tokens (new in v12 ☢️\uD83E\uDE78) Token Dnn Oqtane Description Result [Site:Id] ✅ ✅ [Site:Guid] ? ✅ Page Tokens (new in v12 ☢️\uD83E\uDE78) Token Dnn Oqtane Description Result [Page:Id] ✅ ✅ [Page:Guid] ? ? tbd Module Tokens Note: these are the module tokens which work in both Dnn & Oqtane. In Dnn the Module tokens will provide more options - check out Dnn Module Tokens. History Params added in 2sxc v12"
  },
  "abyss/parts/look-up/lookup-datetime.html": {
    "href": "abyss/parts/look-up/lookup-datetime.html",
    "title": "DateTime LookUps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DateTime LookUps you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } There is one DateTime Source which can be used in LookUps: DateTime Tokens Token Description Result [DateTime:Now] Current Date and Time 12/2/2019 3:05 AM [DateTime:System] Current Date and Time of the System 12/2/2019 3:05 AM [DateTime:UTC] Current Date and Time on UTC 12/2/2019 3:05 AM [Ticks:Now] CPU Tick Count for Current Second 637108851369920459 [Ticks:Today] CPU Tick Count since Midnight 637108416000000000 [Ticks:TicksPerDay] CPU Ticks per Day (for calculations) 864000000000 For Date/Time and numeric values, you can also append a string defined by the .NET framework, for example: [DateTime:Now|] current Date/Time formatted according to , e.g. [DateTime:Now|f] displays current date in short format (does not apply to Calculated Column expressions) or [DateTime:Now|dd.MM.yyyy] in German date format. Text items may be formatted using {0}, e.g. [User:Displayname|Hello {0}]. You can also add alternative text that gets returned if the requested value is Null or empty: [Token:Property|Format|Alternative] e.g. [User:Displayname|Welcome Back,{0}|Hello Guest] History Params added in 2sxc ca. v2 Enhanced with Settings/Resources ca. v4"
  },
  "abyss/parts/look-up/lookup-dnn.html": {
    "href": "abyss/parts/look-up/lookup-dnn.html",
    "title": "Dnn Specific LookUps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dnn Specific LookUps you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } Dnn has various LookUps built in, which won't be available on Oqtane: Portal - Everything about the current Portal Tab - information about the current Page Module - information about the current Module Portal Tokens Note: Dnn ☢️ only The following tokens are common Dnn/DotNetNuke tokens which should work everywhere tokens are in use. Some very common extensions are in the other view Extended Tokens. Token Description Result [Portal:Currency] Currency String USD [Portal:Description] Portal Description [Portal:Email] Portal Admin Email the.admin@2sxc.org [Portal:FooterText] Portal Copyright Text Copyright 2019 by DotNetNuke Corporation [Portal:HomeDirectory] Portal Path (relative) of Home Directory /App-Demos/ [Portal:LogoFile] Portal Path to Logo File [Portal:PortalName] Portal Name Dnn / DotNetNuke App Demos [Portal:PortalAlias] Portal URL [Portal:TimeZoneOffset] Difference in Minutes between Portal Default Time and UTC Token Description Result [Profile:<property>] Use any default or custom Profile Property as listed in Profile Property Definition section of Manage User Accounts. Use non-localized Property Name only. - Tab Tokens Note: Dnn ☢️ only Token Description Result [Tab:Description] Page Description Text for Search Engine [Tab:EndDate] Page Display Until Date ******* [Tab:FullUrl] Page Full URL https://2sxc.org/dnn-app-demos/en/Apps/Tutorial-Tokens [Tab:IconFile] Page Relative Path to Icon File [Tab:KeyWords] Page Keywords for Search Engine [Tab:PageHeadText] Page Header Text ******* [Tab:StartDate] Page Display from Date ******* [Tab:TabName] Page Name Tutorial - Tokens [Tab:TabPath] Page Relative Path //Apps//Tutorial-Tokens [Tab:Title] Page Title (Window Title) [Tab:URL] Page URL Module Tokens Note: Dnn ☢️ only Token Description Result [Module:Description] Module Definition Description 2sxc App is an extension that allows to install and use a 2sxc app. [Module:EndDate] Module Display Until Date ******* [Module:Footer] Module Footer Text [Module:FriendlyName] Module Definition Name App [Module:Header] Module Header Text [Module:HelpURL] Module Help URL [Module:IconFile] Module Path to Icon File [Module:ModuleTitle] Module Title App [Module:PaneName] Module Name of Pane (where the module resides) ContentPane [Module:StartDate] Module Display from Date ******* Other Dnn Token Sources Note that according to the Dnn source code there are a total of 11 sources per 2015. The ones not mentioned here are: Culture Host History Params added in 2sxc ca. v2"
  },
  "abyss/parts/look-up/lookup-in.html": {
    "href": "abyss/parts/look-up/lookup-in.html",
    "title": "In LookUp in Query Parameters | 2sxc 19 for Dnn and Oqtane",
    "keywords": "In LookUp in Query Parameters you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } Data Sources in a query can retrieve values from another data-source which is a source. Use the [In:source-name:attribute-name] syntax. So if you have a Value DataSource which has the Default-in with the data to filter, and a Module-in comes from the Module Settings, you would write [In:Module:Category] to filter by the the category as selected in the module settings. Here's an example with the SQL DataSource: The SqlDataSource has a SQL statement with a [In:Mod:PortalId] token It's important that the connection containing the data is called Mod for this to work The data handed to it will contain the PortalId 1 And another example showing the older UI with the ValueSort DataSource: Read also VisualQuery Parameters VisualQuery: In Streams CmsBlock Parameters for the DataSources and the Query History In added in 2sxc 07.00"
  },
  "abyss/parts/look-up/lookup-params.html": {
    "href": "abyss/parts/look-up/lookup-params.html",
    "title": "Params LookUp in Query Parameters | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Params LookUp in Query Parameters you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } 2sxc 10.22 introduced a new parameter source called Params. With this you can write things like [Params:Sort]. The query now has a special LookUp for the source Params. This should help you make nicer, more flexible queries and also allow you to set these query parameters from C# code. Configure in VisualQuery This shows how to use Params in VisualQuery: Here's what you see in the image An Item ID Filter is being configured and it could directly use [QueryString:Id] but instead it uses the [Params:EntityId] The Query Parameters are configured to resolve EntityId as [QueryString:Id] For testing purposes the Test Parameters have a test-value for this When this is run during testing, it will use the test-parameters, and at runtime it will use the ?Id=... from the url. Note Your queries can also use params that you didn't configure - but they will return nothing unless you would set them in your C# code before you run the query. Tip We recommend to always use the Params for everything as it's simpler to see all the parameters your query depends on. So if you have a ValueFilter expecting a value from the url, we recommend that you Create a param FilterLastName=[QueryString:LastName] In your data-source configuration, use [Params:FilterLastName] Read also VisualQuery Parameters History Params added in 2sxc 10.22"
  },
  "abyss/parts/look-up/lookup-settings.html": {
    "href": "abyss/parts/look-up/lookup-settings.html",
    "title": "MyConfiguration LookUp in DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "MyConfiguration LookUp in DataSources you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The MyConfiguration LookUp is special because it's only used in C# on DataSources. The VisualQuery Designer can show the user a unique edit-dialog for each data source. The data itself is then stored as an Entity, and when the DataSource is being built in the Query engine, the Settings for that data-source are made available on the MyConfiguration LookUp. Note: You will usually never use this source, as it's only used internally by the code. So avoid using the MyConfiguration in your code, the name could change in future. Read also VisualQuery Parameters History In added in 2sxc 07.00 Renamed from Settings to MyConfiguration in 2sxc 15"
  },
  "abyss/parts/look-up/lookup-user.html": {
    "href": "abyss/parts/look-up/lookup-user.html",
    "title": "User Information LookUps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "User Information LookUps you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } Dnn has various LookUps built in, which won't be available on Oqtane: User - current user information Membership - ASP.net user information Profile - user profile (values not in the normal User object) User Tokens Token Description Result [User:DisplayName] User’s Display Name [User:Email] User’s Email Address [User:FirstName] User’s First Name [User:FullName] (deprecated) [User:LastName] User’s Last Name [User:Username] User’s Login User Name Membership Tokens Token Description Result [Membership:Approved] Is User Approved? [Membership:CreatedOnDate] User Signup Date [Membership:IsOnline] Is User Currently Online? User Profile Tokens Token Description Result [Profile:<property>] Use any default or custom Profile Property as listed in Profile Property Definition section of Manage User Accounts. Use non-localized Property Name only. - Other Dnn Token Sources Note that according to the Dnn-Source-Code there are a total of 11 sources (status 2015-05-05). The ones not mentioned here but are relevant to the User are: Culture History Params added in 2sxc ca. v2"
  },
  "abyss/parts/look-up/lookup-web.html": {
    "href": "abyss/parts/look-up/lookup-web.html",
    "title": "Web / Server / HTTP LookUps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Web / Server / HTTP LookUps you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } There are three Sources for web parameters which can be used in LookUps: QueryString - for url parameters Form - for fields in the http-post Server - for HTTP Server_... variables QueryString Tokens Extended Standard Tokens The following tokens are still very \"normal\" but not part of the common Dnn tokens. They work in 2sxc - but not in many Dnn-Tools Token Description Result [QueryString:<Url-Param-Name>] String - [QueryString:TabId] String - this demo shows the TabId which is in the QueryString because of the internal URL-Rewrite. 730 [QueryString:Category] String - click here to see effect Form Tokens Form Tokens only exist if the request was a Post. Token Description Result [Form:<Form-Param-Name>] Form post values. Usually not needed, but if you do need it, it's here. - History Params added in 2sxc ca. v2 Enhanced with Settings/Resources ca. v4"
  },
  "abyss/parts/look-up/sources.html": {
    "href": "abyss/parts/look-up/sources.html",
    "title": "LookUp Sources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "LookUp Sources you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The LookUp System will use the LookUp Engine to retrieve values for Queries and more. The LookUp engine will parse tokens like [Module:ModuleId] and then look for a LookUp Source with the matching name, in this case Module. For this to be possible, the Engine has a list of named sources like Module QueryString Params etc. On this page we'll explain how these work, and what special sources exist. LookUp Sources These are the sources which are automatically included in 2sxc App Sources App - the current App, which can give you folders (to link JS files) ☢️\uD83E\uDE78 App:Settings - app settings ☢️\uD83E\uDE78 App:Resources - app resources, translated labels etc. ☢️\uD83E\uDE78 Web Server and System Sources Hybrid These work both on Dnn and Oqtane (2sxc 12+) [Query] ☢️\uD83E\uDE78 Web Server and System Sources QueryString - url parameters ☢️ Form - form post parameters ☢️ DateTime - current date/time information ☢️\uD83E\uDE78 CMS / Dnn Sources [Site] [Page] [Module] Portal - the current Dnn portal Tab - the current Dnn page Module - the current Dnn module User Information Sources User Membership User Profile Token Template Sources In Token Templates we also have 3 special lookups Content - the current content Content:Presentation - presentation settings of the current content, if configured ListContent ? ListContent:Presentation AnyNameYouWant specified in a <repeat> tag Query Sources In Queries we also have the following sources In Params DataSource Settings Source In DataSources code you will usually only work with Settings which contain all the settings that specific DataSource should work with. The Settings source only exists in your C# code, not in the VisualQuery. Settings What is a LookUp Source (technical ⚠) LookUp Sources are ILookUp objects and have a Name like like QueryString, Module, Portal etc. Each one is capable of retrieving values like Id or DefaultPage. So the Engine will ask the specific source for the expected value and the source will try to find it. If it has an answer, it will return that. If it doesn't find anything it will return null and let the Engine take care of fallback options. Tip Everything is lazy, so these objects are only accessed and populated if the parameter is actually needed. This results in great performance. All LookUp objects implement the ILookUp interface and inherit the LookUpBase object. Internal LookUp Objects (technical ⚠) Just to give you an idea of the power of LookUp objects, here are some in use: LookUpInEntity - this resolves entity values. LookUpInNameValueCollection - this resolves from name/value lists like Dictionary or Request.QueryString objects LookUpInLookUps - will look up values in various attached LookUp objects - will look up a value from an In stream of a DataSource ToSic.Sxc.Dnn.LookUp.LookUpInDnnPropertyAccess - will look up stuff in Dnn specific PropertyAccess objects, which are similar to LookUp objects LookUpInEntity - will look up things in an IEntity and also provide more information like Count, IsFirst, etc. for the Token Engine Also Read LookUp System History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "abyss/parts/look-up/tokens.html": {
    "href": "abyss/parts/look-up/tokens.html",
    "title": "LookUp Tokens Explained | 2sxc 19 for Dnn and Oqtane",
    "keywords": "LookUp Tokens Explained you are here (click to zoom) - discover the stack .context-box-summary .query-params, .context-box-summary .lookup { visibility: visible; } Often you need a placeholder which should be resolved at runtime with a real value from elsewhere. In Dnn / 2sxc this is called a Token, and they usually look like [Source:Property]. Simple Example As example could be [DateTime:Now] which would be resolved to the current date/time at runtime. You would use this in a Query to filter out news which should be published in future, so PublicationDate < [DateTime:Now]. Note There is also a TokenEngine which uses the same Token mechanism to generate HTML. What you see here also applies to that, but it's actually a separate topic. Some Token Examples [Portal:PortalId] would return the current portal Id [App:Settings:PageSize] would return the page size as configured in app-settings [QueryString:Id] would retrieve the id-parameter from the url [MyConfiguration:ProductId] would retrieve the id as configured in the UI by the user [MyConfiguration:productId||27] would also try to get the id, but return 27 if not found Token Basics A token is a piece of text that looks like [Source:Property], which will be replaced by an engine so that it will then be a value. For example, [QueryString:Page] is replaced with 2 if the current url has ?page=2 in it. You can research more about tokens in older docs here and in the full list of standard tokens, it's a standard Dnn concept. Internally it uses a LookUp-Engine which itself uses LookUp-Sources - see [](Abyss.Parts.LookUp.Index. Special Token Features in 2sxc/EAV The EAV and 2sxc have enhanced Tokens to a new level with these features: 1. Sub-Tokens A token like [App:Settings:PageSize] will go through a tree of info-objects to find an inner property if it exists. This only works on special object types that are specifically meant to provide sub-data. 2. Fallback A token like [QueryString:page||1] will deliver the url-param, and if that is empty, will deliver 1. Note that you need 2 pipe symbols | because the convention is that after the first pipe you can have a format specifier like #.##. 3. Stacking Stacking with more Tokens: a token like [QueryString:PageSize||[App:Settings:PageSize]] will try the first token, and if it doesn't resolve, try the next one 4. Recursion A token can resolve into a token, which would then be looked up again. So if a token [MyConfiguration:Page||1] is used, and the setting Page is not a number but again a token like [QueryString:Page], then it will... resolve Settings:Page and find Querystring:Page resolve QueryString:Page and maybe find something if that is empty, return the fallback 1 Advanced Token Sources in Special Scenarios Some situations will have token sources beyond the default. For example, when configuring data sources they always have 2 more sources In - used like [In:Default:PageSize] MyConfiguration - used like [MyConfiguration:PageSize] There is another special override-token system which is used for testing Also Read LookUp System IDataStream Guide DataSources - Big Picture DataSource Configuration: Configuration.Parse() History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "abyss/platforms/differences.html": {
    "href": "abyss/platforms/differences.html",
    "title": "Platform Differences | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Platform Differences This is a temporary documentation. We'll try to collect differences in behavior and APIs of all the supported platforms and how to work around limitations of each. App / File Management \uD83D\uDC49\uD83C\uDFFB See Platform Folders for a list of all folders. Razor API Dnn uses ASP.net Framework MVC v.3 which is much older than Oqtane, but 95% is compatible. Feature Dnn Oqtane Compatibility Notes / Alternatives @helper ✅ ⛔ .net 4 create a separate file for each helper and use Html.Partial(...) Dnn object ✅ ⛔ Dnn only Use CmsContext/MyContext, a bit more limited. For Oqtane features use Dependency Injection. Html.Raw(...) ✅ ✅ all .net RenderPage(...) ✅ ⛔ .net 4 Use Html.Partial(...) instead Html.Partial(...) ✅ ✅ .net core Polyfill added to Dnn in 2sxc 12 Request object ✅ ⛔ .net 4 .net core uses a much longer name ViewContext.HttpContext.Request Request.QueryString ✅ ⛔ .net 4 .net core uses a much longer name ViewContext.HttpContext.Request.Query CmsContext.Page.Parameters ✅ ✅ 2sxc 12 Use this for cross-platform QueryString params MyPage.Parameters ✅ ✅ 2sxc 1y requires RazorTyped base class Razor 2sxc API These are 2sxc APIs which are often used in Razor. Feature Dnn Oqtane Compatibility Notes / Alternatives Link.To(...) ✅ ✅ 2sxc 6 works cross-platform CreateInstance(.cs) ✅ ✅ 2sxc 10 works cross-platform CreateInstance(.cshtml) ✅ ⛔ Dnn only Doesn't make sense on .net core, use .cs Code.Something() ✅ ⛔ 2sxc 11 Doesn't make sense on .net core, use .cs GetCode(*.cs) ✅ ✅ 2sxc 16 works cross-platform, req. RazorTyped Sub-View Data Feature Dnn Oqtane Compatibility Notes / Alternatives Model object ⛔ ✅ .net core Use DynamicModel PageData object ✅ ⛔ .net 4.5 Use DynamicModel DynamicModel ✅ ✅ 2sxc 12 Works in old & new MyModel ✅ ✅ 2sxc 16 Works in old & new - req. RazorTyped RazorBlade Extension Feature Dnn Oqtane Compatibility Notes / Alternatives Tag object ✅ ✅ - Tags object ✅ ✅ - Text object ✅ ✅ - HtmlPage object ✅ ⛔ - Use IPageService IPageService ✅ ✅ 2sxc 12.02 see IPageService Koi Extension Feature Dnn Oqtane Compatibility Notes / Alternatives Koi static object ✅ ⛔ Not supported Use Dependency Injection version of Koi 2 Koi ICss Service ✅ ✅ v12.01 New Koi 2. See ICss Koi 2 supports the CSS Information API, but not the class-generating API. We probably won't implement it, as it was too complicated. Not yet Implemented features in Oqtane CustomizeData / CustomizeSearch are not implemented yet, we're not yet sure how we want to implement this WebAPIs We should probably create a list of viable base classes and explain the differences REST APIs No relevant differences, except that the root paths to the APIs are different. This is automatically handled if you use 2sxc, and for external code you can get the exact endpoints in the admin UI. JavaScript Differences No relevant differences, except that Oqtane doesn't include jQuery by default. If you need jQuery, activate it using the IPageService. CSS-Frameworks / HTML Differences No relevant differences. Note that Oqtane by default uses Bootstrap5 so the output may look a bit different. Image Resizing In Oqtane, only ADAM files and App-files can use the ImageResizer. Files from the normal file management cannot use it. History Last update 2021-10-25 with regards to 2sxc 12.06 LTS RazorBlade feature to change page title or set headers etc. - work in v16.05"
  },
  "abyss/platforms/dnn/index.html": {
    "href": "abyss/platforms/dnn/index.html",
    "title": "Dnn Platform | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dnn Platform Dnn is the most popular open-source CMS platform on .net. It's been around since ca. 2001. 2sxc has been running on Dnn since it's inception in 2012. Dnn and 2sxc Version Compatibilities Dnn V. Best Compatible Incompatible Comments 9.6.1+ latest ✅ ca. v9 - latest ⛔ old versions changes to DI and .net 4.8 8.0 - 9.6 13.x LTS ✅ 9.x - 13.x ⛔ 14.00+ 8.x 13.x LTS ✅ 9.x - 13.x ⛔ 14.00+ 7.4.2+ 13.x LTS ✅ 7.x - 13.x ⛔ 14.00+ 7.2+ 09.43 LTS ✅ 6.x - 09.43 ⛔ 10.00+ 7.0 - 7.1 unknown ✅ 3.4 - 6.04 ⛔ 9.43+ very old versions 6.0 unknown ✅ 1.0 - ca. v4 ⛔ v4+ very old versions Upgrade Path We are very focused on making upgrades easy and pain-free. Here's what you need to know: You can upgrade 2sxc by installing the latest version on a system which already has 2sxc installed. If you have a version before 8.12, you must first upgrade to 8.12. In general when updating from v9 to v14 there are no expected problems. Before going to v14 you must be running DNN 9.6.1 or newer. In very rare cases you may be affected by breaking changes Features currently not implemented None, all 2sxc features are available in DNN. History 2sxc v1 was for Dnn 4 in 2012 2sxc v7 - v13 all run on Dnn 7.4.2 up until the latest Dnn 9.x 2sxc v14 requires Dnn 9.6.1 or newer"
  },
  "abyss/platforms/dnn/system-features.html": {
    "href": "abyss/platforms/dnn/system-features.html",
    "title": "Dnn System Features | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dnn System Features Dnn comes with a lot of features pre-installed. Others can be installed later on, as needed. Tip 2sxc 17 requires C# v8. This will be pre-installed in Dnn 10, but for Dnn 9.6.1+ you need to install it manually. For this specific issue, please check https://r.2sxc.org/dnn-roslyn Sometimes you may install an App which requires an additional capability. This page should guide you through installing them if you're stuck. Look for the code you received, such as System-CSharp08 to find the instruction. Additional System Capabilities The following are are capabilities which may or may not be pre-installed. C# v6 to v8 - System-CSharp06 to System-CSharp08 Dnn v.7.x - 9.x all include C# 5, but not C# 6+. C# 6 was once installed by default, but was reset to include but not auto-install because of issues with the hosting provider GoDaddy. Depending on your Dnn version, it has a different CodeDom / CSharp Compiler prepared for you: Dnn 9.6.1 has prepared the CodeDom v2.0.1 containing C# 6 for .net 4.5 Dnn ca. 9.10+ has C# 7.3 and C# 8 (called CodeDom 3.6) Important If you're on Dnn 9.6.1, you can install C# 8 manually. See https://r.2sxc.org/dnn-roslyn Preinstalled System Capabilities The following are always available in every Dnn: System-NetFramework System-Razor System-CSharp05 Optional System Capabilities System-CSharp06 System-CSharp07 System-CSharp08 Unavailable System Capabilities The following are listed just to clarify that they currently don't exist in DNN and probably cannot be added in any feasible way. System-CSharp09 .net 5 (core) System-CSharp10 .net 6 (core) System-CSharp11 .net 7 (core) System-CSharp12 .net 8 (core) System-NetCore Dnn is .net Framework only as of now System-Blazor requires .net Core v3+; works in Oqtane Shortlink: https://go.2sic.org/dnn-syscap"
  },
  "abyss/platforms/evoq/index.html": {
    "href": "abyss/platforms/evoq/index.html",
    "title": "Evoq Platform, Content, Social & Liquid Content | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Evoq Platform, Content, Social & Liquid Content Evoq is the paid version of Dnn. It's been around since ca. 2001. Dnn Evoq History and Liquid Content Evoq originally started as a clone of Dnn in 2012. At that time it didn't have any real Dynamic Data / Dynamic Content features. 2sxc just worked on that version, but at that time was just getting started. To compete with other paid enterprise CMS solutions such as SiteCore, Evoq tried to re-invent the wheel in 2017 and created a system called Liquid Content which was meant to provide similar functionality as 2sxc. Evoq wasn't able to include 2sxc, because that would have made it identical to the free version, so they were forced to brew their own. The Liquid Content is very data-focused (records of data + visualizers) so it doesn't feel like Web Content Management at all. It's more like a data-management + show-the-data-here kind of functionality. It appears that after that, Evoq lost interest in this subject, because Liquid Content never got past v1.0. According to users it misses a lot of very basic features such as multi-language, proper versioning and data-relationships. It also doesn't work with Page-Workflow (2sxc does) and the templating language is so restrictive, that solutions built using Liquid Content are forced to choose inappropriate data structures just to get it to work. Many Evoq customers then switched to 2sxc because they felt that Liquid Content didn't deliver on its promises. Migrate from Liquid Content to 2sxc We've tried various attempts to assist in migrations, but it doesn't make sense in any way. The reason is that any work done in Liquid Content was restricted by missing features in the data models as well as missing features in the home-brew templating language which is is based on Liquid.net. This means that any solution built using Liquid Content isn't made the way such a solution would be built, and any automatic porting would result in a very strange data model which would make life really difficult. So you best process is to simply start over. Sorry \uD83E\uDD37\uD83C\uDFFE. Evoq and 2sxc Version Compatibilities Evoq V. Best Compatible Comments 9.6.1+ latest ✅ ca. v9 - latest changes to DI and .net 4.8 8.0 - 9.6 13.x LTS ✅ 9.x - 13.x 8.x 13.x LTS ✅ 9.x - 13.x 7.4.2+ 13.x LTS ✅ 7.x - 13.x 7.2+ 09.43 LTS ✅ 6.x - 09.43 7.0 - 7.1 unknown ✅ 3.4 - 6.04 Features currently not implemented All 2sxc features are available in Evoq."
  },
  "abyss/platforms/folders.html": {
    "href": "abyss/platforms/folders.html",
    "title": "Platform Folders | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Platform Folders This is where the various folders are located on each platform. App Files App files ☢️ Dnn places App folders in the [PortalRoot]/2sxc/[AppName] eg. /Portals/0/2sxc/Blog5 \uD83E\uDE78 Oqtane places App folders in [WebRoot]/2sxc/[SiteId]/[AppName] eg. /2sxc/1/Blog5 ADAM Files (Automatic Digital Asset Management) ☢️ Dnn places ADAM assets in the [PortalRoot]/adam/[AppName] eg. /Portals/0/adam/[AppName] \uD83E\uDE78 Oqtane places ADAM assets in [WebRoot]/Content/Tenants/[TenantId]/Sites/[SiteId]/adam/[AppName] eg. /Content/Tenants/1/Sites/1/adam/Blog5 Note that for Dnn, [PortalRoot] is usually [WebsiteRoot]/Portals/. System Data Files ☢️ Dnn places system files in the [WebRoot]/DesktopModules/ToSIC_SexyContent/App_Data/ \uD83E\uDE78 Oqtane places system files in [WebRoot]/Content/2sxc/system/App_Data/ Within this folder, you'll typically see the following folders: new-app - these files are used when creating a new app. system - the preset system files containing global content-types and more. These will be replaced on every update system-custom - optional additional overriding files to augment the system files. These will be preserved on updates system-beta - optional only used for the development of 2sxc These will be preserved on updates Note that the system... folders will all have some of the following folders inside them: bundles - contains the bundles of many content-types and entities (new in v15) configurations - contains the configuration files for the system - especially licenses contenttypes - contains the content-types for the system entities - contains data for the system (records/rows/items) Temporary Files ☢️ Dnn places system files in the [WebRoot]/DesktopModules/ToSIC_SexyContent/_/ \uD83E\uDE78 Oqtane places system files in [WebRoot]/Content/2sxc/system/_/ History Changed .data folder to App_Data in v14.08 Enhanced with bundles folder in v15.01"
  },
  "abyss/platforms/index.html": {
    "href": "abyss/platforms/index.html",
    "title": "Platforms | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Platforms 2sxc runs on the following platforms: See Dnn Platform Docs See Oqtane Platform Docs"
  },
  "abyss/platforms/oqtane/index.html": {
    "href": "abyss/platforms/oqtane/index.html",
    "title": "Oqtane Platform | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Oqtane Platform Oqtane is a modern Blazor based platform similar to Dnn. It's inspired by the Dnn model but uses the latest .net core and more. \uD83D\uDC49 As of May 2021 2sxc works great on Oqtane as well. Install Oqtane and 2sxc \uD83D\uDC49 See Install Oqtane and 2sxc Features Not Yet Implemented in Oqtane The QuickE Toolbar is not implemented in Oqtane, adding modules requires you to enter edit mode and use Oqtane dialogs Enterprise Web Farm Cache isn't supported yet (in DNN: it's a paid add-on) CSP implementation works but isn't fully automated, as it has special challenges with the page only loading once Inner content is believed to work, but not fully verified Integration into the theme or container isn't possible yet (new for Dnn in v14) Automatic adding HTTP headers isn't fully tested and may have some issues Adding more HTML tags inside the <head> tag only works for JS/CSS, custom tags are probably not supported yet Global Content Files ADAM works and images uploaded will automatically work. But as of now, you cannot have shared files in a global folder structure for re-use in many places yet. You can of course re-use an entity with files, but not place a file in a global (like Portals) folder for use. Image Resizer won't work on Global Content Files Image Resizer works for app-assets (like the app-icon) and for ADAM assets, but not for files in the \\Tenants\\x\\Sites\\x\\ folder History 2sxc 12 was developed for Oqtane 2.0"
  },
  "abyss/platforms/oqtane/install-issue-build-oqtane-server.html": {
    "href": "abyss/platforms/oqtane/install-issue-build-oqtane-server.html",
    "title": "Issues Building Oqtane.Server.csproj After Installing 2sxc Templates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Issues Building Oqtane.Server.csproj After Installing 2sxc Templates When developing with Oqtane in developer mode, you typically run Oqtane.Server.csproj by pressing F5 in Visual Studio. This action builds the project and its dependencies before launching it on IIS Express (localhost). However, after installing 2sxc Content and App templates, you might encounter build failures when compiling Oqtane.Server.csproj. Problem Overview After adding 2sxc templates to your Oqtane project, the Visual Studio build process may fail with numerous errors—sometimes over 1,000—rendering Oqtane unusable in the development environment. Affected Folders The problematic folder that cause the build issues is 2sxc. These directory contain assets for the 2sxc apps and templates. Solution: Exclude 2sxc Folder from the Build To resolve the build errors, you need to exclude 2sxc folder from the compilation process. This can be done by modifying the Oqtane.Server.csproj file to tell the compiler to ignore these directory. Steps to Exclude Folders Open Oqtane.Server.csproj: Locate the Oqtane.Server.csproj file in your project directory and open it with a text editor or within Visual Studio. Add Exclusion Rules: Insert the following <ItemGroup> section into the project file: <ItemGroup> <!-- Exclude these directories from compilation --> <Compile Remove=\"2sxc\\**\" /> <!-- Exclude content files from the build output --> <Content Remove=\"2sxc\\**\" /> <!-- Exclude files from being embedded as resources --> <EmbeddedResource Remove=\"2sxc\\**\" /> <!-- Exclude miscellaneous files not included elsewhere --> <None Remove=\"2sxc\\**\" /> <!-- Exclude files from the dotnet watch tool --> <Watch Remove=\"2sxc\\**\" /> </ItemGroup> This configuration explicitly tells the build system to ignore all files within the 2sxc directory when compiling, embedding resources, including content files, and monitoring for changes. Save and Rebuild: Save the changes to Oqtane.Server.csproj and rebuild the project by pressing F5 or selecting Build > Rebuild Solution in Visual Studio. Why This Happens The 2sxc templates introduce additional files that are necessary for the application to run but are not meant to be part of the compiled code. Visual Studio automatically includes new files and directories added to the project folder. Including them causes conflicts and compilation errors because the compiler tries to process files that aren't valid C# code or are duplicates. Summary By excluding the 2sxc folder from the build process, you prevent the compiler from processing unnecessary files. This resolves the build errors and allows you to continue developing your Oqtane application with the 2sxc templates installed. Related Problems Installing Apps with Hot Reload Enabled"
  },
  "abyss/platforms/oqtane/install-issue-hot-reload.html": {
    "href": "abyss/platforms/oqtane/install-issue-hot-reload.html",
    "title": "Problems Installing Apps with Hot Reload Enabled | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Problems Installing Apps with Hot Reload Enabled When using Oqtane in developer mode there is a feature called Hot Reload which restarts Oqtane when files change. Warning Installing Content-Templates and Apps with Hot Reload enabled causes problems. This is because the server will restart a few times during installation of the ZIP. Because of this you can only install Apps and Content-Templates if Hot Reload is disabled. Tip After installation you can re-enable Hot-Reload as you see fit. Checklist to Disable Hot Reload Temporarily Background: Hot-Reload Detection Just FYI in case the error is wrong / surprising. We detect Hot-Reload-Enabled by checking that this DLL is loaded in memory: Microsoft.AspNetCore.Watch.BrowserRefresh.dll If you believe that we are checking this incorrectly, please open an issue on Github. Next Step To avoid potential build errors, exclude the 2sxc folder from the Oqtane.Server.csproj. For more details on preventing and resolving these issues, refer to the Build Oqtane Server Issue documentation. Shortlink to here: https://go.2sxc.org/oqt-hr"
  },
  "abyss/platforms/oqtane/install.html": {
    "href": "abyss/platforms/oqtane/install.html",
    "title": "Install Oqtane and 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Install Oqtane and 2sxc Read the blog + video + checklist we created on installing Oqtane and 2sxc. Oqtane and 2sxc Version Compatibilities Tip Oqtane is still being heavily improved and growing with the newest .net core frameworks. Because of this, extensions like 2sxc can quickly become incompatible with the latest enhancements, so here we'll maintain a list of Oqtane / 2sxc versions. Oqtane V. Best Compatible Incompatible Comments 6.1.0 19.03 ✅ 19.00.01+ ⛔ pre 19.00.01 latest Oqtane as of 2025-02 6.0.1 19.03 ✅ 19.00.01+ ⛔ pre 19.00.01 Blazor interactive mode has some bugs 6.0.0 19.01 ✅ 18.04 - 19.01 ⛔ pre 18.04; 19.01+ Blazor interactive mode has some bugs 5.1.2+ 18.03 ✅ 18.00+ ⛔ pre 18.00 Some Render modes supported - see limitation 5.0+ 17.06+ ✅ 16.09+ ⛔ pre 16.09 .net 8 differences in System.Text.Json For older versions, see the older Oqtane and 2sxc Versions section below. Upgrade Existing Installations When upgrading an existing Oqtane/2sxc you should follow these steps: make sure that a compatible 2sxc exists If it is compatible to both old and new (eg v16.09) then install 2sxc first else upgrade Oqtane first - possibly 2sxc then stops working then upgrade 2sxc Older Oqtane and 2sxc Versions This compatibility table is for versions which are probably not in use anymore. Oqtane V. Best Compatible Incompatible Comments 4.0+ 16.09 ✅ 16.02 - 16.09 ⛔ pre 16.02 .net Framework and EF 7 3.4+ unknown ✅ 15.06+ ⛔ pre 15.06 Undo breaking changes in Permissions 3.3+ unknown ✅ 15.05+ ⛔ pre 15.04 Breaking changes in Permissions 3.01.+ 14.12 ✅ 13.06 - 14.12 ⛔ pre 13.06 / 15+ Changes in Oqtane 3.3 3.00.03 13.02 ✅ 13.01+ ⛔ pre 13.01 / 13.06+ ... 3.00.02 13.02 ✅ 13.01+ ⛔ pre 13.01 / 13.06+ ... 3.00.01 13.02 ✅ 13.01+ ⛔ pre 13.01 / 13.06+ Oqtane save/delete module settings 3.0 12.10 ✅ 12.10+ ⛔ pre 12.10 / 13.06+ Changes in .net 6 2.3 12.10 ✅ 12.04+ ⛔ pre 12.04 ... 2.2 12.06 ✅ 12.04+ ⛔ pre 12.04 Changes in Bootstrap / jQuery & Authentication 2.1 12.04 ✅ 12.04 ⛔ 12.05 Changes in Multi-Language 2.0 12.00 ✅ 12.00 - 12.02 ⛔ 12.04 first compatible release Shortlink: https://go.2sxc.org/oqtane-install"
  },
  "abyss/platforms/oqtane/issue-render-512.html": {
    "href": "abyss/platforms/oqtane/issue-render-512.html",
    "title": "Issue with Interactive Render Mode in Oqtane 5.1.2 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Issue with Interactive Render Mode in Oqtane 5.1.2 Oqtane 5.1 changed a lot to support the new .net 8 Server-Side-Rendering (SSR) and Interactive Render Mode. This is a great feature, but at the moment Oqtane 5.1.2 still has various bugs which cause problems - mainly in the combination: Interactive Render Mode together with Server Side Interactivity (Signal-R) Background While implementing the new SSR modes in Oqtane 5.1+, a lot was changed under the hood, resulting in bugs in the Interactive Render Mode. Various pieces of information about the current site are missing at crucial moments, resulting in broken behavior and loss of \"connection\" between the client and server. It appears to be a timing problem, which should be fixed in a future version of Oqtane. The final effect will be that the page will render correctly, but after that most things will fail to work, including normal clicks on a button or link. Workaround 2sxc 18.0 runs on Oqtane 5.1.2 (previous versions of 2sxc don't run at all), but as of now only the Server-Side-Rendering mode is stable enough. So to get 2sxc to run on an Oqtane 5.1.2 site, you must change the Render Mode to either Static (Server-Side Rendering) or to Interactive with Client-Side Rendering (WASM) As of now we believe that for most sites, Static Rendering is the preferred mode anyhow, which is why we decided to release 2sxc with this limitation. Next Steps We strongly hope that Oqtane 5.2 will improve these issues, but as of 2024-07-10 Oqtane 5.2 is still very unstable, so we cannot anticipate how quickly these issues will be resolved. Shortlink to here: https://go.2sxc.org/oqt-512"
  },
  "abyss/platforms/oqtane/system-features.html": {
    "href": "abyss/platforms/oqtane/system-features.html",
    "title": "Oqtane System Capabilities | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Oqtane System Capabilities Oqtane comes with a lot of features pre-installed. Others can be installed later on, as needed. Sometimes you may install an App which requires an additional capability. This page should guide you through installing them if you're stuck. Look for the code you received, such as System-DataSource-SharePoint to find the instruction. Additional System Capabilities The following are are capabilities which may or may not be pre-installed. Note For Oqtane there are currently no special capabilities to install. Preinstalled System Capabilities The following are always available in every Oqtane: System-NetCore System-Razor System-Blazor System-CSharp07 System-CSharp08 System-CSharp09 System-CSharp10 System-CSharp11 .net 7 (core) - Oqtane 4+ System-CSharp12 .net 8 (core) - Oqtane 5+ Unavailable System Capabilities The following are listed just to clarify that they currently don't exist in DNN and probably cannot be added in any feasible way. System-NetFramework Oqtane is .net Core only Shortlink: https://go.2sic.org/oqt-syscap"
  },
  "abyss/platforms/system-features.html": {
    "href": "abyss/platforms/system-features.html",
    "title": "System Features \uD83C\uDF1F | 2sxc 19 for Dnn and Oqtane",
    "keywords": "System Features \uD83C\uDF1F All platforms come with a lot of features pre-installed. Others can be installed later on, as needed. You probably arrived here, because you saw a warning similar to this: To find out how to add features, check the section of your platform: ☢️ DNN \uD83E\uDE78 Oqtane Alternative: Configure Apps to not Request said Features If the feature was only required by the App configuration, you can also disable that warning. You would do this if you can't install it and want to disable the warning to see what you can do about it, we've created a checklist for this: History Introduced in 2sxc 16.8+ Shortlink: https://go.2sic.org/sysfeats"
  },
  "abyss/releases/history/changes-all.html": {
    "href": "abyss/releases/history/changes-all.html",
    "title": "Changes Overview for 2sxc/EAV | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Changes Overview for 2sxc/EAV This page collects all the changes of all versions into one place, making it easier to search for certain keywords. \uD83D\uDC49 if you only care about breaking, please check Breaking Changes Overview for 2sxc/EAV Version 19 2sxc v19.00 (2024-12-21) \uD83C\uDD70️ Update UI to Angular 19 and Angular Material 19 ✅ Finalize Pickers main features Radio Checkboxes Preview Material Icon Preview SVG Preview Image (jpg/png) Configurations: AppAssets, CSS, Entity, Query, CustomList, CSV Preview features Info Link Tooltip ✅ New AppAssets DataSource and System.AppAssets query to get assets for pickers such as all SVGs in a folder. ✅ Double-Encrypt sensitive data on HTTP-Transport ✅ Ability to switch UI languages (not just content-languages) ✅ GPS Picker enhancements with my current location and searching for addresses which were not in the data ✅ Ability to delete a field (column) which had entity-relationships in it (previously SQL stopped you) ✅ New Toolbar.Audience(...) API to show it when needed ✅ Improve UI for creating fields for content-types, better dropdowns, longer etc. Breaking Changes An interface called ToSic.Sxc.DataSources.IBlockInstance was removed since it was identical to ToSic.Eav.DataSource.IDataSource and should not be used anywhere. Bugfixes \uD83D\uDC1E Fix: various issues around the Pickers \uD83D\uDC1E Fix: Public forms called a backend endpoint which was protected, and got errors (though it wasn't necessary) Internal ✅ Refactor toolbar and image/picture objects to use records instead of classes in C# 2sxc v19.01 (2025-01-16) Note: the version was incorrectly released as 19.00.01. ✅ Implemented system to use the As<...> API with interfaces, which will automatically find the right class to instantiate ✅ Created new DataModel system in the Models and Data.Model namespace #3543 ✅ Created data model for IFileModel and IFolderModel which matches the entities returned by the AppAssets DataSource ✅ Created data model for IUserModel and IUserRoleModel which matches entities returned by the Users and UserRoles DataSource ✅ Renamed Roles DataSource to UserRoles (could be breaking change for very few users) ✅ Created data model ISiteModel which matches data returned by the Sites DataSource ✅ created data model IPageModel which matches data returned by Pages DataSource ✅ Finished the ICacheService on Kit.Cache #3536 ✅ Finished the AppAssets Datasource and documented it #3541 ✅ New ToSic.Sxc.Data.Models with ModelWithEntity and ModelWithItem base classes ✅ Changed System.Text.Json to use .net 9 #3547 ✅ Upgraded to Oqtane 6+ so it's only compatible with Oqtane 6.0.1+ now #3548 \uD83C\uDD70️ Update Date/Time picker to use Angular Material Time Picker \uD83E\uDE78 Oqtane: Set minimum version to 06.00.01 and minimum .net to 9 because of security warnings Minor \uD83C\uDD70️ Fix some inconsistencies in the GPS UI \uD83C\uDD70️ Minor update Google Maps API to latest (was using old API before) ✅ Improved Custom DataSource so you can access the List and GetStream(...) #3540 Bugfixes \uD83D\uDC1E Bug: Fix access to global and site settings \uD83D\uDC1E\uD83E\uDE78 Oqtane bugs with JavaScripts due to changes in Oqtane 6.0 and 6.0.1 - affected Interactive mode #3533 \uD83E\uDEB2 Minor bugfixes in new AppAssets DataSource Internal Stuff ✅ Refactor internal Entity, Attribute Values, ContentType to use record ✅ Refactor internal SaveOptions to use record ✅ Refactor internal Entity to be init-only (where were a few set properties left for legacy reasons) \uD83C\uDFC3\uD83C\uDFFC‍➡️ Start architecture for a Task-system to run things #3545 ⚠️ Enhancement in the Pages DataSource - property renames Visible to IsNavigation and Clickable to IsClickable ⚠️ Enhancement to the Roles DataSource - renamed to UserRoles - breaking change! 2sxc v19.02 (2025-01-21) ✅ IUserService on Kit.User #3552 which can get one/all users and all roles of Dnn/Oqtane in the same signature as the Users DataSource ✅ better structure for models in Cms.Users, Cms.Pages etc. ⚠️ Renamed the system query System.Roles to System.UserRoles - breaking change! Minor ✅ Ensure that As<...> API allows the new model interfaces just like AsList<...> #3551 \uD83D\uDC1E Bug: previous release a few days ago had an issue exporting Apps - files in the root folder were missing \uD83D\uDC1E Bug: previous release a few days ago had issues saving hidden items - they were visible \uD83D\uDC1E Bug: App name and version did not show in App Admin UI \uD83D\uDCAA\uD83C\uDFFC Cleanup internal APIs on an internal interface IEntityLight which is not public. Properties: Title, Attributes and this[...] 2sxc v19.03 (2025-01-22) ✅ introduced Custom.Data.CustomModel ✅ Finalizing model base classes in ToSic.Sxc.Data.Models and attributes \uD83D\uDC1E Bugfix editing global and site custom settings Version 18 2sxc v18.00 (2024-07-12) ✅ ITemplateService with MergeSources(...) ✅ Oqtane 5.1 or 5.2 SSR Release There's a lot more! I don't have time to describe it yet, but here's the short list https://github.com/2sic/2sxc/releases/tag/v18.00.00 ...and more. 2sxc v18.01 (2024-09-23) \uD83D\uDD22 Pickers ✅ Improve Picker-UIs ✅ Picker with Radio-Buttons (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Picker with Checkboxes (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Pickers with tooltips, more help, etc. (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) \uD83E\uDDEA Formulas ✅\uD83D\uDD01 Major refactor of internal code structure ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Improve visibility of formulas in the UI for dev-users (always show for developes \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) \uD83D\uDD01 Refactoring / internal ✅\uD83D\uDD01 Edit-UI Drop NgRx ✅\uD83D\uDD01 Edit-UI Switch most code to Signals ✅\uD83D\uDD01 Edit-UI feature to store user settings in the local storage and session ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Create debugging system to log changes in production (developers \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) Internal content types ✅ Use newer picker features for Wysiwyg and other UIs ✅ String-Default (basic field) enable different Text-Wrappings ☢️ DNN Enhancements ✅☢️ Improve startup speed \uD83E\uDE78 Oqtane Enhancements ✅\uD83E\uDE78 Improve DLL clean-up on startup ✅\uD83E\uDE78 Fix compile of AppCode DLLs in inner-content ✅\uD83E\uDE78 Interactive Server bugs closing signalr connections \uD83E\uDDB9\uD83C\uDFFE‍♂️ Patron Features ✅⚡ Optimize data loading for better performance ✅\uD83D\uDD22 Many new picker features for patrons 2sxc v18.02 (2024-10-09) Release notes ✅ Shared Field Configurations / Content-Type Composition ✅ Pickers stable ✅ Picker Source CSV ✅ Picker Source Custom List ✅ Picker Source Entity ✅ Picker Source Query ⌛ Picker Source CSS (BETA) ✅ Picker Data Type: Number now supported as well ✅ Picker Outputs ✅ Radio buttons ✅ Checkboxes ✅ Auto-Inline (which will take radio/checkboxes depending on your settings) ✅ Picker Previews ✅ Font-Icon preview ✅ SVG-Icon preview ⌛ Image preview (BETA) ✅ Finalize Content-Type Composition ✅ Ctrl + S (upper case) now works too ✅ Ctrl + Alt + s now saves and closes ✅ Host user now always sees the developer tool bar, but can unpin it for a while ✅ Edit UI: Update Angular 18, Material 3, and other JS dependencies, refactor to use signals. ✅ Edit UI: Massively improve pickers - ca. 90%, also with Number and CSS / SVG / Image icons ✅ HotBuild: Enhance to use SHA fingerprint for cache-busting 2sxc v18.03 (2024-11-05) ✅ Clean up data model, remove unused table ToSIC_EAV_AttributeGroups (may be breaking) ✅ Pickers - Stabilize most features so final ✅ Tweak API for Image Service Settings, Img, Picture ✅ Tweak API for Typed Items .Img(..., tweak: t => t.Alt(...)...) and .Picture(...) ✅ Ongoing Angular refactoring (switching to signals, deduplicate code, ...) 2sxc v18.04 (2024-11-24) \uD83D\uDC1E Bug with image generator when image was external (http) #3500 \uD83D\uDC1E Bug with LightSpeed #3502 ☢️ Search indexing bug #3498 \uD83E\uDE78 Minor bugfix to ensure it works on Oqtane 6 #3501 2sxc v18.05 (2024-12-06) \uD83E\uDE78 Oqtane / AppCode problems with empty AppCode.dll #3505 \uD83D\uDCD6 Add contributing.md to all repos #3484 \uD83D\uDCD6 Major docs update regarding contributing to docs ✅ Support Ctrl+Click in Admin-UI to open dialogs in new windows/tabs #3496 \uD83D\uDC1E Bug with Visual Query Editor #3513 2sxc v18.06 (2024-12-06) Stabilization release with one big feature: \uD83D\uDE80 Double-Encrypt Forms posted to server, to prevent CDN snooping \uD83D\uDEE1️ #3518 Features ✅ Ctrl + Click and Shift + Click now works in almost all Admin UIs / Lists #3496 ✅ Automatically sort URL parameters provided by MyPage.Parameters #3520 ✅ Ability to prioritize url parameters as needed with .Prioritize(...) #3521 ✅ Ability to flush url parameters and still preserve settings with .Flush() Minor: add contributing.md everywhere #3484 Bugfixes \uD83E\uDE78 Oqtane issues with AppCode compiling when AppCode is empty #3505 \uD83D\uDC1E Bug toolbar opens query-editor sometimes fails #3513 Minor: show better indication when item in Entity-Picker doesn't exist #3504 Version 17 2sxc v17.00 (2023-12-23) ✅ DNN: Require CodeDome C# 7.3 to be installed ✅ Docs infrastructure can now be multi-versioned ✅ Show app icon in admin UI ✅ Ctrl+Click on toolbar buttons to open in new tab ✅ Completely refactor internal APIs to do advanced work and save data ✅ Change UI to use Angular 17 (from Angular 14) ✅ Get intellisense to work in VS Code ✅ Work out best way to do this in VS Code ✅ Work out best way to hide non-public APIs ✅ Work out best way to include docs (xml files, nuget, etc.) ✅ Support C# 7.3 in DNN with warning if not installed ✅ System Capabilities Framework for tagging apps which need certain technologies/features ✅ Crazy new compiled typed shared code /ThisApp/Code - see Hot App Code ✅ New APIs on Typed Code IsPublished Publishing Publishing.HasPublished, Publishing.HasUnpublished, Publishing.HasBoth Publishing.GetPublished(), Publishing.GetUnpublished(), Publishing.GetOpposite() 2sxc v17.01 (2024-01-18) Moved almost all internal APIs in the ToSic.Sxc namespace to hidden locations #3189 Marked a lot of internal APIs so that they won't appear in IntelliSense ♨️ HotBuild: Improved errors in Razor so the user can better find them #3246 ♨️ HotBuild: Improved errors when compiling ThisApp #3247 ♨️ HotBuild: Support Editions such as live and staging with auto-fallback #3248 ♨️ Roslyn: Improve error if @inherits ends in semicolon #3245 ♨️ HotBuild: Show all compiled types in insights ♨️ HotBuild: Minimize exact pre-included namespaces ♨️ HotBuild: Performance Improvements \uD83D\uDFE3 Toolbars: Show hover on layout button after a delay with module-infos #3251 New Features / Important Improvements Kit.PageParameters now has new commands Toggle(...), Remove(...) and Filter(...) see docs #3241 #3242 #3243 \uD83D\uDFE3 Toolbars: Tweak Notes can now delay and linger #3250 docs Create-New File now shows templates for RazorTyped, CodeTyped and ApiTyped ✏️ App-Management UI now uses a left-menu (experimental) ✏️ Edit-UI: Boolean fields can now be toggled by clicking on the label \uD83D\uDDBC️ Resizer: Improve handling of images in virtual-application folders Bugfixes ITypedItem.Equals now works #3213 Old Render APIs were broken, which affected News App 4.1.1 and others #3252 Fix bug with UniqueKey which affected HotSpots App Various minor UI bugfixes related to the entity-picker and dropdowns 2sxc v17.01.04 Minor enhancements and bugfixes Image toolbar now shows resize specs \uD83C\uDF1F #3270 Toolbar notes now support a format = html #3271 Edit inner-content in accordions for non-website-admins #3234 Old Razor base class - PageData didn't always work #3260 HotBuild now respects additional assemblies from web.config #3272 2sxc v17.01.05 minor bugfixes l enhancements including dropdown pills fixed #3269 REST Query API fails when used from \"outside\" #3274 page picker in UI is broken in 17.01.04 #3276 auto-serialized ITypedItem and IEnumerable<ITypedItem> #3277 refactor an internal old API to init app-objects #3275 HotBuild Performance Improvements (locking / caching) HotBuild improve detection when CS files inherit from ThisApp base 1. classes Internal Lookup System Performance Improvements internal work for the new Picker-UI system 2sxc v17.01.06 Upgrade System.Data.SqlClient #3209 TweakButton on dynamic code #3279 Edit menu in Dnn fix #3280 Bug with dropdowns #3281 Export/Import App now includes hidden entities #3282 Export/Import App now includes Attribute SysSettings #3283 2sxc v17.01.07 ajax reload on details-pages eg. blog-post #3287 SQL DataSource can't connect #sql #3285 2sxc v17.02 (2024-02-22) ✅ Improve infos about layout in toolbar ✅ Improve infos about image resizer in toolbar ✅ Improve Create New App Experience ✅ Create new app template ✅ Improve the new app wizard - allow selecting template ✅ Improve create-app code to use the new template ✅ Update Monaco to latest version ✅ Ability to change input config types/metadata - eg. skip @String when never needed ✅ Improve HotBuild ✅ Improve initial list of included assemblies and namespaces @STV ✅ Improve caching of information how to build/compile to improve speed ✅ Add support for sub-folders ✅ Support Editions ✅ Improve error messages on building the ThisCode folder ✅ Improve error messages when building Razor and C# using Roslyn ✅ Improve detection so that build is locking (prevent multiple builds on high-load) ✅ Create system to generate models ✅ Provide special UI to build the code and debug Copilot ✅ Switch to AppCode ThisApp ✅ Provide final place for base type ✅ Custom.Data.CustomItem base class ✅ GPS data ✅ fix/improve date picker ✅ Ability to share field configurations ✅ Custom config inherit from multiple sources for keeping the Label ✅ Preserve config on export/import https://github.com/2sic/2sxc/releases/tag/v17.02.00 2sxc v17.03 (2024-03-04) ✅ New Pickers released with a lot of features, incl. Sources, custom labels, help, tooltips, multi-select and much more! ✅ Ability to install recommended apps in a later step! ✅ New typed razor RazorTyped<TModel> ✅ New typed App using IAppTyped<TSettings, TResources> ✅ Publish As<Type> and AsList<Type> API ✅ Publish App.Data.GetAll<TModel>() and App.Data.GetOne<TModel>(id) APIs ✅ New Custom.Data.CustomItem base class with GPS data, As<Type> and AsList<Type> API ✅ improve App_Data/app.json schema to include editions for Copilot ✅ Add template app Basic and Empty ✅ Intellisense: Find way to link to the official docs from inside the help 2sxc v17.04 (2024-03-11) Improvements MyView.Resources added to complement existing MyView.Settings #3315 ITypedItem.Img(...) added to complement exitsing ITypedItem.Picture(...) #3324 Dnn improve Roslyn build performance in many cases from ca. 2.5 seconds to 0.5 seconds #3322 Query: Improve $select OData parameter REST API - add $select OData Parameter #3319 Razor / Typed Code: add a Customize helper ojbect #3316 Admin UI - Data Scopes now show count Add Razor compile code help for more common problem such as accessing typed-items dynamically Improve razor compile help - show errors before warnings Picker - auto extract additional fields to retrieve based on placeholders in Label / Help texts etc. Generate Data Models Improvements Include Scope name Include content-types in Configuration scope CustomItem - implement == and != operators to use wrapper equality Lots of docs for custom data app.json editions configuration, add isDefault Bugfixes UI Date Picker - fix but with UTC offset #3321 UI Page Picker - fix, was broken in 17.03.00 #3320 Calling Query using JS missed the Id property #3325 Admin: state of the DateTime Show-Time toggle didn't properly get persisted #3318 2sxc v17.05 (2024-03-25) We believe this is stable, but ask the community to do in-depth testing so we can release an LTS Highlights Improved Code-Generator to be in a standalone DLL ToSic.Sxc.Code.Generate Improved Code-Generator to generate Razor, Code and WebApi base classes Enhancements Impove image-resize tooltip #3329 $2sxc JS used in modules which are rendered into Dnn themes #3333 Improve logging of parameters of DataSources (eg. Value-Filter DS) Prepare for Oqtane 5 SSR Improve architecture for generating App-objects in the background Bugs fixed various admin and replace-operations on inner-content #3299 fix quickE when selecting content-blocks #3317 Token templates - fix some toolbars #3328 Fix issue with Oqtane urls Fix issue with Oqtane WebApis which affected Blog RSS feed 2sxc v17.06 LTS (2024-03-28) The first LTS (Long-Term-Stable) Release of 2sxc 17. Easter LTS Release ✅ Prepare for Oqtane SSR (Server-Side Rendering) ✅ Provide Code Generator for Content Types, Razor and Services ✅ Improve discoverability of REST APIs ✅ Document new Pro Typed mode ✅ Document new strong-typed mode ✅ Auto-Install more apps from catalog - even after some have already been installed - ca. 1d ✅ Feature to tell new auto-installer what apps are already installed ✅ App-Auto-Installer UI to add-install apps later on ✅ LTS Bugfixes When accessing an App through another app (eg first going to Apps-Management) it show the data of the original app Opening features in Apps-Management didn't work reliably Edit-UI Picker / Dropdown code was cleaned up Copilot Razor Generator ready to use Copilot Service generator ready to use Copilot WebApi generator ready to use Copilot previously failed if the AppCode folder was missing Fix to a data-caching issue in 17.05 (this was important) 2sxc v17.07 (2024-05-04) published/blogged: ✅/✅ 2sxc 17.07 ✅/✅ 2shine 5.3 (May 4th) ✅/✅ Content App 17.07 (May 6th) ✅/✅ Mobius Form Builder 06.00 for 2sxc 17.07 (May 7th) ✅/✅ Release all apps as typed (May 8th) 2sxc v17.08 (2024-05-16) ✅ WebApi in AppCode ✅ DataSources in AppCode ✅ ITemplateService ✅ Add CmsContext.Block and CmsContext.Module.Block as well as Block.Guid ✅ Cache Service internal ✅ Switch Edition UI ✅ Switch Edition Permissions for non-super users ✅ Update Image Resizer ✅ Re-Release another LTS ca. 17.09 Version 16 2sxc v16.00 LTS (2023-05-04) No relevant changes, just minor bugfixes + our convention to upgrade the main version every 6 months. We mainly finished the docs for various features, so this is what is now done. ✅ improve IConfiguration API - lighten the IDataService API ✅ Document new data sources API ✅ finish Dynamic DataSources ✅ Document CDN / Asset management ✅ Document Formula improvements ✅ IDataService completed ✅...and documented ✅ New WYSIWYG mode completed (and documented) ✅ Toolbars Service Improvements: transport data for use in notes etc. ca. 0.5d 2dm ✅ Data-conversion of entities to json in attribute... - documented 2sxc v16.01 LTS (2023-05-23) Various bugfixes + some enhancements. ✅ New rich WYSIWYG experience ✅ Edit-UI can now be opened to only show a few specified fields (feature API not yet public, but used in the new WYSIWYG feature) #3080 ✅ New ITypedItem and AsTyped(...) API ✅ New Data.Content and Data.Header objects ✅ IDynamicEntity now has methods like String(...), Int(...), Bool(...), Date(...), Decimal(...), Double(...), Long(...), DateTime(...), Float(...) to convert values to the desired type. #3089 ✅ Sort-Items UI was enhanced with remove, add, add-existing #3077 ✅ DynamicDataSource now supports relationships #3078 ✅ DynamicDataSource now shows better errors in Razor on compile issues #3084 ✅ Razor now automatically suggests the insights button on the toolbar if there are errors #3085 ✅ Enhancement: Serializing Entities to JSON now skips empty fields such as messages or ephemeral fields ✅ Clean up Formulas code into better SoC @SDV ✅ Clean up ancient documentation which is probably invalid, but still seen by many :( Dnn / Evoq ✅ Evoq: Better support for list management together with page workflow #3087 ✅ Dnn Skin: Adding module to skin using IRenderService now allows editing entities #3092 Oqtane ✅ Enabled full WASM support for Oqtane #3083 (previously only server-rendering worked) \uD83E\uDEB2 Improvement on how AJAX reloads work, resolves some reload-errors #3081 Minor Bugfixes \uD83E\uDEB2 Two bugfixes related to Formulas v1 - returning date #3088 \uD83E\uDEB2 XML-Data-Export now works with IsContentAdmin permissions (before it required IsSiteAdmin) #3075 \uD83E\uDEB2 View list of data now works with IsContentAdmin permissions (before it required IsSiteAdmin) \uD83E\uDEB2 Fixed issue with GetService<ILogService>() because ILogService had been renamed to ISystemLogService #3082 2sxc v16.02 (2023-07-07) Major Enhancements ✅ ImageFlow upgraded to version 0.10.0 - thereby making sure it works with FIPS enabled #3121 ✅ Brand new typed code Pro mode ITypedItem and ITyped interfaces with properties such as Id, Guid and methods such as .String(name), ... RazorPro, ApiPro, CodePro base classes with completely reworked API such as AsStack(...), MyPage or AllSettings ApiPro now serializes JSON using new defaults which are more common in WebApis (lower-case properties, auto-serialize entities, etc.) Documentation ✅ Upgraded DocFX from 2.48.1 to 2.67.3 with major improvements to the generated docs ✅ Improved Documentation of all Razor and WebApi base classes! Support for Developers ✅ Dramatically improved insights with more details and filtering options ✅ Created system to automatically detect and warn about deprecated code - using buttons in the toolbar ✅ Created CodeHelp system to guide developers when common coding mistakes were made ✅ New Obsolete system collects issues per App and shows them even if the current Razor is not affected ✅ Show CodeHelp warnings if a RazorPage doesn't have @inherits Various bugfixes + some enhancements. ✅ Refactored Razor and WebApi base classes to use Composition over Inheritance ✅ RazorBlade upgrade from v4.2.0 to 4.4.0 (also for .net 7 compatibility) ✅ Feature to not show edit-toolbar buttons on HTML coming from Resources ✅ Improve not showing a metadata-toolbar on images which are coming from demo-items Dnn / Evoq ✅ Downgrade SQL to still work with SQL Server 2012 as people had trouble upgrading #3120 ✅ Since ImageFlow was upgraded, the following DLLs were also upgraded Imageflow, 0.7.24 -> 0.10.0 Imageflow.Net, 0.7.24 -> 0.10.0 Imazen.Common, 0.7.7 -> 0.8.1 Imazen.HybridCache, 0.7.7 -> 0.8.1 Newtonsoft.Json, Version=10.0.0.0 -> 13.0.0.0 ✅ As part of the upgrade we also had to upgrade some MS DLLs Microsoft.Bcl.AsyncInterfaces, Version=6.0.0.0 -> 7.0.0.0 System.Collections.Immutable, Version=6.0.0.0 -> 7.0.0.0 System.Text.Encodings.Web, Version=6.0.0.0 -> 7.0.0.0 System.Text.Json, Version=6.0.0.0 -> 7.0.0.2 System.Memory, Version=4.0.1.1 -> 4.0.1.2 Oqtane ✅ Oqtane 4.0 Support (with .net 7) #3123 ✅ Reworked API Middleware to avoid conflicts with OAuth 2 Minor Bugfixes \uD83E\uDEB2 Fixed issue with Swiper not being able to add slides #3108 #3112 \uD83E\uDEB2 Fixed issue with DatePicker in Edge and also added more cultures #3113 ✅ Changed internal APIs to return RazorBlade IHtmlTag objects instead of previously IHybridHtmlString #3098 2sxc v16.03 (2023-08-21) Enhancements around Typed Code ✅ Typed: rename RazorPro to RazorTyped etc. #3147 ✅ Make all typed objects very strict when checking if fields exist ✅ Add much more helpful info / error when fields not found ✅ Typed: Massively enhanced with strict checks and reduced the possibility of writing code which doesn't do anything ✅ Typed: ITypedItem now has a new .Picture(...) method making the code nicer #3135 ✅ Typed: ITypedItems can now be mocked #3141 to create alternate data in code when no data exists ✅ Typed: New methods ContainsKey(...), Keys(...) #3142 ✅ Typed: New methods IsEmpty(...) and IsNotEmpty(...) #3144 ✅ Typed: method .String(..., scrubHtml) now also accepts a string containing tags to remove #3146 ✅ Typed: If an error occurs, much more information is provided as to how to fix #3143 #3145 ✅ Typed Json: now also supports paths, so you can use Kit.Json.ToTyped(jsonString).Int(\"Root.Child.Id\") ✅ Typed Json: now also strict using propsRequired by default ✅ Typed: the property .Dyn now only exists on ITypedItem (entity-based) and not on other wrappers Other Enhancements ✅ Image Resizer: New Square resize settings #3134 ✅ Image Resizer: ImageService can now also handle IFile objects and get the metadata automatically #3140 ✅ Web Farm Cache: Updated for v16.02+ (enterprise customers only) ✅ Page Parameters: now support ITyped so you can use MyPage.Parameters.Int(\"id\") and similar Support for Developers ✅ Errors now highlight the .cshtml line which caused the error ✅ Errors on mistyped property names now gives very detailed information about it DNN / Evoq ✅ Image Resizer: Upgrade to dnn-imageflow 1.2.1 #3130 ✅ Newtonsoft internal version in DNN Manifest now matches 13.0.3 Oqtane ✅ Oqtane: Better error when Oqtane in installed without sufficient DB permissions #3128 / #3131 ✅ Internal: Code cleanup with warnings new EF-Core #3132 ✅ Internal: EF Core QuerySplittingBehavior #3133 Minor Bugfixes \uD83E\uDEB2 turnOn failed on AJAX reloads during editing #3127 \uD83E\uDEB2 Oqtane: Bugfix importing App Assets #3129 \uD83E\uDEB2 Web Farm Cache: Fix issue which occured on license uploads \uD83E\uDEB2 Licenses: fix issue with multiple licenses / names resulting in an unlicensed message 2sxc v16.04 (2023-09-05) Highlight: UniqueKey ✅ Razor: New UniqueKey property (in Typed mode) #3151 ✅ Razor: New Kit.Keys.UniqueKeyWith(...) for unique IDs and working with JS #3152 Images ✅ Images: Images in rich wysiwyg mode now are shown nicely after import into other site ✅ Images: Dialog-Options to set empty title and not use fallback #3150 ✅ Images: Enable crop/title dialog for public files, with delayed toolbar and warning-hint #3057 ✅ Images: Fix Safari bug with small images #2 ✅ Images: Ability to specify alternate toolbar #3157 ✅ Images: Ability to specify no toolbar #3158 ✅ Images: Ability to use Toolbar outside of main picture/img tag using img.Toolbar() #3156 ✅ Images: Metadata now also has a DescriptionExtended Razor in Typed Mode ✅ MyModel: Improve handling fallback / required #3149 ✅ App.Folder.Url to replace App.Path for clearer APIs ✅ App.GetQuery(...) to replace App.Query[name] ✅ All ITyped objects now behave strict by default ✅ Complete various scenarios for ITyped with unit tests, especially conversion of anonymous and json-based ITyped ✅ All ITyped now have APIs for ContainsKey, IsEmpty and IsNotEmpty ✅ Razor: Errors now highlight the .cshtml file with a \uD83C\uDFAF emoji GetDraft / GetPublished (decided not to implement yet) ✅ Override Equality operations - using ITyped.Equals Oqtane \uD83E\uDE78 Improve indexing in Google #3154 \uD83E\uDE78 Improve pre-render adding JS/CSS \uD83E\uDE78 Improve page header changes (title, metadata) using latest Oqtane 4 APIs Patrons \uD83E\uDDB8\uD83C\uDFFD New feature to better control language fallback sequence (beta) #3159 \uD83E\uDDB8\uD83C\uDFFD Improve showing expired features - important when testing a feature for 24h Bugfixes \uD83E\uDEB2 Languages: Bug in UI: Some labels and dropdown-labels didn't show in current language #3153 \uD83E\uDEB2 lots of minor bugfixes 2sxc v16.06 (2023-09-20) ✅ Tutorials for new Pro mode / Quick-Ref ✅ Optimize build of 2sxc to use local config-files so it's easier for others to contribute @STV ✅ Improve JS build to make it easier for others to contribute ✅ Improve headers handling in Oqtane 4 2sxc v16.07 LTS (2023-09-22) ✅ new TypeItem.Parent(...) - especially. .Parent(current: true) api #3173 ✅ new parameters to the .Picture(...) incl. picClass, imgAttributes and picAttributes ✅ fix bug where presentation data was generated even if not used #3185 Major: Release 16.07 LTS \uD83D\uDE80 2sxc v16.09 (2023-11-22) ✅ TypedItem.Picture(\"Child.Property\") path notation ✅ fix js minification of inpage.min.js ✅ Release all apps in the new typed mode ✅ Blazor .net 8 / Oqtane 5 support ✅ Improve file-upload to prevent files with \"..\" in the name ✅ Improve DataSource Caching and cache-flushing ✅ Add new (beta ⌛) feature for copyright management (Patron AdvancedCMS) to add copyright info to each image ✅ Extend SQL Database to store SysSettings and Guid on Attributes for future features \uD83D\uDC1E Fix minor issue with old .Code for older Razor base classes \uD83D\uDC1E Fix minor issue with edit-dialog in scenarios with multiple portal aliases \uD83D\uDC1E Fix minor issue with IMetadata.Children(...) / ...Child(...) #3217 \uD83D\uDC1E Fix DataSource LanguageModeler #3219 \uD83D\uDC1E Fix DataSource TreeMapper \uD83E\uDE78 Oqtane: Adam backend didn't always serialize all properties #3206 Version 15 2sxc v15.00 (2022-12-23) ✅ Improve logging ✅ Place it in an own library DLL for better reuse ✅ Create ICodeLog for improve logging in Razor and WebApi which ensures compatibility with existing code ✅ Improve automatic connecting logs with helpers so most Init(Log) become obsolete ✅ Update CsvHelper DLL to latest version ✅ Improve install-file names ✅ Update to Razor Blade 4 ✅ Support Oqtane v4 with .net 7 - ATM Oqtane doesn't plan on going to .net 7 ✅ Tutorial App ✅ Improve internal structure ✅ Change how to show code vs results - mostly use tabs ✅ Razor APIs and Services ✅ Improve ImageService to have an imgAltFallback on .Img(), .Picture() and .ImgOrPic() ✅ Improve ImageService to better respect multi-language crop-settings and labels ✅ Improve Page service Parameters.Set(...) to also allow bool, int etc. (not just strings) ✅ Create Kit.HtmlTag ✅ Create ITurnOnService and Kit.Page.TurnOn(...) ✅ Data Sources ✅ Improve ValuFilter Data Source to also allow Contains on numbers ✅ DB Clean-Up ✅ Remove SQL triggers which log XML data to DataTimeline which isn't used any more ✅ Remove XML column NewData in DataTimeline which isn't used any more ✅ Internal APIs ✅ Improve Settings/Resources Stack with various unit tests ✅ Improve Settings/Resources Stack to have internal quick access to deep objects using a path like \"Images.Content.Width\" ✅ Create API DependenciesBase to better handle log attachments to dependencies ✅ TinyMCE upgrade to v6 ✅ Drop _ prefix requirement on cshtml files by protecting them in an another manner ✅ It's not needed on Oqtane, as the files are not accessible ✅ Only needed ATM on DNN because each file could be called from the browser directly ✅ Probably make sure all base classes refuse to render standalone ✅ Ability to use compressed GZIP data for DataTimeline (patrons) ✅ Technical features ✅ Toggle to turn on/off ✅ Rename internal .data folder to App_Data/system and similar as this folder will contain private data in future ✅ Feature to deploy a corporate license in an installation to auto-enable certain features on all sites ✅ Settings: Ability to augment the preset configuration / settings with custom overrides ✅ Provide Google Services API Keys (Maps, Translate) from backend to edit UI ✅ Ability to set own default GPS coordinates for when not set ✅ Ability to configure them in settings ✅ Provide Default maps coordinates from backend to Edit UI ✅ Ability to import apps from folder directly (patrons) ✅ Functionality ✅ Hints / Infos to user ⏳ Documentation ✅ Integration of Google Translate in the Edit UI ✅ Functionality for one field ✅ For many fields ✅ Configure so it only affects string fields ✅ Ability to disable auto-translate on certain fields - eg. name fields ✅ Ability to add custom API key ✅ Clear warning when using the demo key ✅ Make sure the license is respected and easy to spot ⏳ Documentation for this (how the fields are selected, how to activate, etc.) ✅ Release v15 before XMas Breaking Changes in 2sxc 15.00 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: If you have a custom DataSource, you will need to make some minor changes and recompile them If you used special, non-public Logging APIs you would need to update your work If you used any undocumented APIs, you will need to check if everything still works API Changes that may affect you DataSource base class was completely refactored see instructions Old static ToSic.Eav.DataSource was removed (deprecated since v13) Internal logging API ILog was completely refactored see instructions Internal object wrappers were completely refactored see instructions TinyMCE Upgrade to v6 Database changes Minor API changes Breaking Updates which probably don't affect anybody SQL changes - minor updates to the Database Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 2sxc v15.01 (2023-01-31) ✅ Export / Import ✅ Create export bundle configuration to mark content-types and entities for export together ✅ Create json bundle export system ✅ Create json bundle import system ✅ Extend the file-based data loader to also load bundles ✅ Change all pre-loaded data items to be in bundles ✅ New Auto-Installer with search, list-view etc. ✅ Remaining docs for Features released in v15.00 ✅ Finish API and docs for Logging v15.01 ✅ Ability to import apps from folder directly (patrons) ✅ Documentation for google translate (how the fields are selected, how to activate, etc.) ✅ Indicate premium/patron features in UI and explain what it is and how to get it ✅ Visual indicators on buttons ✅ Visual messages in certain places ✅ Details dialog to know more about the feature ✅ Public DB of the feature explaining it in more details, how to activate etc. on https://patrons.2sxc.org/features ✅ Licenses / Features ✅ Ability to license a specific feature only (for enterprise customers) ✅ Feature to generate enterprise license fingerprints for enterprise distribution ✅ Allow parts of the license to expire earlier (for evaluation purpose) ✅ Internal / Data Management ✅ Ability to retrieve Entities for App, parent-App, global-App etc. for certain settings-pickers ✅ System query to retrieve such entities (need for Wysiwyg-functionality) ✅ Oqtane: fix compatibility so it works in Oqtane 3.3+ ✅ FIPS Compliance Note that the image resizer is not yet FIPS compliant, and it may take a while for it to become compliant ✅ Change Secure Data Service to be FIPS compliant ✅ Change System fingerprint to use FIPS compliant SHA256 ✅ Internal - re-org ApiKeys for UI to be in a better place ✅ Enhance Page DataSource with community requests 2sxc v15.02 (2023-02) This was a quick release, no changes to report ATM, they will be reported in v15.03 also done: ✅ Upgrade Blazor-CMS.org to use 2sxc 15.01 for real-life testing ✅ Create blog on Blazor-CMS.org ✅ Publish Tutorial in Blazor-CMS.org ✅ CSP Training at DNN Summit ✅ Image Perfectionist Training at DNN Summit 2sxc v15.03 (2023-02-21) ✅ APIs ✅ EntityId now has a OwnerId property ✅ Kit.Page.Activate(condition: bool, features: \"...\") ✅ move to .net 6 (and drop .net standard 2.0) - almost done, last tests ✅ Bugs ✅ RazorBlade json serialization https://github.com/2sic/2sxc/issues/2998 ✅ Support for use on DNN 404 pages ✅ Date was off in date-picker ✅ FIPS compliance on encryption APIs ✅ DataSources ✅ Pages DataSource ✅ Improve Pages DataSource with LinkTarget ✅ Improve Pages DataSource with internal ability to configure what to get ✅ Improve Pages DataSource to have a UI to configure what to get - @2dm ✅ Users DataSource Massively improved - with Roles and configurable ✅ Roles DataSource improved ✅ Internal - Rework Getting-Started Server to be latest and greatest @2ro ... and more see https://github.com/2sic/2sxc/releases Breaking Changes in 2sxc 15.03 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you An internal user property IUser.IsDesigner was renamed to IUser.IsSiteDeveloper An internal, deprecated user property IUser.IsAdmin was removed An internal, deprecated user property IUser.IsSuperUser was removed An internal property IUser.Guid was changed from Guid? to Guid The Users DataSource had a property called IncludeSystemAdmins which was changed from bool to string to allow for more options The Users DataSource had a property called RoleIds which returned a non-standard string-array. It has been removed, and the new Roles returns standard related entities. Removed static ToSic.Eav.Data.Build.Entity(...) method which was deprecated in v12 API Changes which should really not affect you These are internal APIs which we changed to make everything more immutable. They should never have been in use outside of the internal code. Changed IValue.Languages from IList to IEnumerable and made it immutable Change IEntity.Attributes from Dictionary<string, IAttribute> to IImmutableDictionary<string, IAttribute> as a step to later make it immutable Removed some old, probably never used APIs on IAttribute<T> such as IAttribute<T>[int[] languageIDs] IAttribute<T>[string] IAttribute<T>[string[]] IAttribute[string[] languageKeys] - was always marked as private Changed the type of Attribute.Type from string to ValueTypes to make it more strong-typed Removed the property Attribute.ControlledType which previously contained the ValueType 2sxc v15.04 (2023-03-22) ✅ Oqtane: Compatibility with Oqtane 15.04 ✅ Formula improvements ✅ Get App or global settings for formulas ✅ Better support for promises ✅ Ability to set the value of another field ✅ Intellisense on Formulas ✅ Cdn remapping to other cdn like cdn.2sxc.org or custom CDN ✅ Ability to remap all cdn urls to a different url ✅ New template CDN on https://cdn.2sxc.org ✅ New template repo for anybody that wants to create their own CDN or host on their path https://github.com/2sxc/cdn.2sxc.org New APIs for Data Sources finalized ✅ Public IDataFactory API ✅ Public IDataSourceFactory API ✅ Enhanced IDataSource API ✅ Prototype of live DataSources ✅ Make everything internal immutable ✅ Improve WYSIWYG ✅ Ability to select which \"mode\" the editor is in, affecting toolbars ✅ Allow selected mode to affect other things (like deny image-drop if in text-mode) ✅ Sections to better align images ✅ Use classes to determine size instead of styles ✅ WYSIWYG Images which auto-resize on the server based on size (eg 1/2 of the screen) ✅ New Data Sources and System Queries ✅ New Data Source Scopes ✅ New Query Scopes ✅ New Data Source MetadataTargetTypes ✅ New Query MetadataTargetTypes ✅ New DataSource Licenses - with state ✅ New Query Licenses ✅ New DataSource Features - with state ✅ New Query Features ✅ New DataSource Sites ✅ New Query Sites ✅ Improve data sources for Pages ✅ Query Improvements ✅ Allow edit/new to be done in a query-selector ✅ Get query to know if entity can be edited (based on AppId) ✅ We've renamed the system queries to have a much simpler name such as System.Sites which we'll make available to public use soon. ✅ New LookUp for Settings- and Resources-Stack - to use Settings and Resources ✅ Change internal key for Settings to MyConfiguration to avoid naming conflicts (breaking but probably no impact) ✅ Custom DataSources - breaking ✅ New IDataFactory API ✅ New RawEntity and IRawEntity API ✅ New API for data sources to make data generation easier ✅ Improved custom DataSources API ✅ New base class CustomDataSourceLight ✅ New base class CustomDataSourceAdvanced ✅ Error handling is now simpler / more standardized ✅ Jewels ✅ CmsContext.View now has a Path, PathShared, PhysicalPath and PhysicalPathShared property ✅ Page.Activate(...) now has a condition: true parameter which lets you only activate a feature if a condition is met ✅ Page.Parameters has new Get(name) and Get<type>(name) and Get(name, fallback: 7) APIs to make it easier to work with url parameters ✅ The Toolbar now has a new Info button which is used to show an info-bubble to the user or provide a help-link to somewhere. You'll soon see this in our standard apps to inform users about special cases such as \"why the toolbar isn't available on demo-data\" ✅ Bugs fixes ✅ 2sxc in DNN Skins on 404 pages https://github.com/2sic/2sxc/issues/2986 ✅ Issue with Mobius Forms in v15.03 Breaking Changes in 2sxc 15.06 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you on IEntity These were internal APIs which were not publicly documented, but may have been used by some developers. IEntity.GetDraft() was removed to ensure the entity is immutable IEntity.GetPublished() was removed to ensure the entity is immutable Note: GetDraft() and GetPublished() are still available on DynamicEntity in Razor and WebApi. They were only removed on IEntity. Renamed DataSources These data sources had uncommon names, and were renamed to be more consistent. We believe that they were only used in VisualQuery and not in code, so it should not affect you. CsvDataSource is now Csv SerializationConfiguration is now Serialization Breaking Changes in EAV and 2sxc v14 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V14 did some clean-up of internal APIs, but otherwise there are no known breaking changes. Note that these changes could be seen as a breaking change for certain users: Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08 All Changes V14 14.00 - 14.07.05 (2022-Q2 & 2022-Q3) Q2 ✅ Image-Service/Picture ✅ Image primary area / corner selector ✅ Patron features with licensing & payment system ✅ LightSpeed cache ✅ v14 Release ✅ DNN 9.6.1 only ✅ Formula Boost with many new features #1 ✅ DNN DI integration ✅ Update turnOn to 0.1.2 ✅ CSP for the site (DNN only ATM) ✅ Formula Boost #2 (more context info, features-infos, etc.) ✅ NPM Types updated to latest release ✅ Enterprise Features which will be availabe for bigger sponsors ✅ Patron-System, where sponsors of 2sxc get some extra features ✅ Standardize how to integrate into other systems (non-Dnn/Oqtane) ✅ Service Kits ✅ Deprecation System ✅ Toolbar Services v1 ✅ JS Docs updated to the latest version and auto-generated ✅ Tutorials Formulas ✅ Update all Apps to the lastest/greatest conventions ✅ v14 LTS Q3 ✅ Toolbars Service Improvements ✅ icon-metadata ✅ group C# API - ToolbarBuilder now has Group command ✅ SVG icons - Toolbar Buttons can now use SVGs for icons (usually base64 encoded) ✅ base64 ✅ ui multiple params ✅ bugfixes ✅ params multiple params ✅ array params ✅ Debug-logging on Oqtane client side code, bugfixing ca. 0.5d ✅ Change storage of app.xml to App_Data, change how import works and enable import-from-folder/git ✅ Clean up JS code, latest webpack, packages etc. ca. 1d ✅ Infrastructure for automated testing of JS - ca. 5d Apps / App Maintenance ✅ Update most apps which used ephemeral variables for formulas to just use parameters (new in v14) ca. 0.5d ✅ new Timeline Apps ✅ new Files App ✅ new Jobs ✅ Make many Apps backwards compatible with Bootstrap 3 for a big customer ✅ Have the core apps tested & optimized for WCAG for a government customer ✅ Re-release sxc-angular ✅ Remove dependency on SharpZipLib 14.09 - 14.12 (2022-10) ✅ Improve UI/Flow of system registration (ATM still confusing) ✅ Make sure edit-ui doesn't need material fonts from CDN for icons ✅ Create a new app.json configuration file for 2sxc apps to tune how export/import works ✅ Remove Newtonsoft JSON and migrate to System.Text.Json ✅ Improve handling of app-metadata (resources, settings) ✅ Enable init and import completely new app directly from folder/git copy 1d SDV ✅ Ability to sync Apps through git including the Assets and ADAM ✅ Improve handing feature details to edit-ui Data Sources New data source Users New data source Roles ✅ Update Imageflow to latest version ✅ Remove dependency on Newtonsoft - only use System.Text.Json ✅ Create https://schemas.2sxc.org for json schemas ✅ Create JSON Schemas for image recipe and app.json ✅ More formula tutorials how to call a WebAPI ✅ Security update System.Data.SqlClient ✅ Oqtane 2shine Theme release ✅ cre8magic v0.0.1 released 14.12.00 - 14.12.03 LTS (November 2022) ✅ Publish blazor-cms.org ✅ get a great page speed - 95%+ ✅ Get blazor-cms.org to index really well in google ✅ v14 LTS #2 ca. v14.12 \uD83D\uDE80 Important Changes Assembly Binding Issue on Installs from 2sxc 13.04 to 14.02 Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08 New app.json with Export Exclude v14.09 Version 13 TODO New WebApi route app/auto/data to replace /app/auto/content - the old one will still work, but we won't document it any more, because it was a confusing name Lots of metadata stuff... TODO: New sxc.data and sxc.query Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important: This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 13.01 JSON fields Link.Image with srcSet Parameter ? ToSic.Sxc.Services.IFeaturesService 13.02 JS Global Apps 13.03 TODO 13.04 TODO 13.05 Moved the Web.IInPageEditingHelper to Services.IEditService - this is non breaking and shouldn't matter, as people won't be using the direct inteface Moved the Web.ILinkHelper to Services.ILinkService - this is non breaking and shouldn't matter, as people won't be using the direct inteface 13.x 2022-Q1 ✅ Improve Tutorials massively ✅ View Metadata ✅ Oqtane Website Mode which can be indexed in Google ✅ Improve Feature-Management ✅ IFeaturesService ✅ Shared Apps across Sites (Patrons only feature) ✅ Enable editing of Shared Templates / files ✅ Enable shared APIs ✅ Disable translation of specific content-types ✅ Dnn Factory replacement to render module or get DynamicCode outside of 2sxc ✅ Fully integrate with Dnn Dependency Injection ✅ Improve DI Scopes to Module-Level ✅ IImageService 13.x LTS 2022-Q2 ✅ v13 LTS Version 12 Changes Version 12.10 New Children DataSource New Parents DataSource New Metadata DataSource New MetadataTargets DataSource The StreamMerge DataSource got three new out-streams Distinct, And and Xor Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Changes Version 12.06 LTS No relevant changes Changes Version 12.05 Introduced IJsonService for json serialize/deserialize Introduced IConvertService for simple data-type conversion, also available on the Convert property of Razor12 and Api12 Introduced ToSic.Sxc.Services.ILogService to log messages to the system (Dnn/Oqtane) Introduced IMailService to easily send mails cross-platform Introduced ISecureDataService to use encrypted settings Introduced IRenderService for inner-content rendering (Oqtane code must use this) Published ToSic.Eav.DataFormats.EavLight to better document simple eav data Published IConvertToEavLight as the new standard way to prepare entities for WebAPI serialization. This is meant to replace previous code using objects such as EntitiesToDictionary or DataToDictionary which are now marked as obsolete. New Razor12, Api12 and Code12 Classes now don't support old, obsolete APIs anymore Link.Image now also accepts parameters as a parameter Link.Image and Link.To always create safe urls now (spaces are encoded etc.) Link.To and Link.Image now have a parameter type which can be \"full\" to ensure domains are always added to links (for use in APIs generating RSS etc.) Update to RazorBlade v3.7 Edit.Toolbar now supports condition so that toolbars may or may not be created based on a true/false value Link.Image now also accepts a factor or aspectRatio which is a string like 1:2 or 3/4 AsDynamic(...) now also wraps anonymous objects in quite an amazing way Bugfix: lots of small ones Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path, Convert, Settings, Resources and DevTools. Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12, Custom.Dnn.Code12, Custom.Hybrid.Razor12, Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController. So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Changes Version 12.04 incl 12.03 which was not officially released Settings Stack and Resources Stack added, and the Settings / Resources object now have this Global Settings.Images.xxx settings defined for Content, Screen, Lightbox and Section Global Settings.Resources.xxx defined for fancybox3, fancybox4, bootstrap4, bootstrap5 Link.Image API created to support predefined sizes/resize modes etc. Created feature where DynamicEntities can browse to sub-items using their identifier (used for Settings.Images.Content where Content is actually the title of a sub-entity) Added debug-feature for DynamicEntity get String-Dropdown inputs now have a value-key presets option (instead of the key-value which was flaky) and added support for escaping special characters #Oqtane 2.2 support added Introduced Monaco (VS-Code online) editor for beta-testing source-editing Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object>. We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Changes Version 12.02 Formulas feature finalized DynamicEntityStack object created Hybrid IPageService created with Activate and similar features CmsContext was enhanced with View information Content-Type icons can now be stored in the app with an [App:Path]/image.jpg style reference Enabled view-configuration to configure search behavior incl. not-to-index or what streams should be indexed turnOn created / deployed #Oqtane 2.1 support added in 2sxc 12.02.01 Changes Version 12.00 Todo Version 11 Changes Version 11.00 Breaking Changes The following changes are all super-low-profile, but we want to document them just to be through: DataStream and IDataStream loses a very old property called .LightList - we're pretty sure it's not in use anywhere, if you have it, just use .List instead. Enhancements Brand new Admin UI based on Angular 9 and Ivy with new Code-Editor, new VisualQuery and much more Razor CodeBehind Automatic Polymorphism Updated Razor Blades to 3.02 with the new Tags.SafeUrl(...) command Field: Boolean-Tristate which saves true/false/null App.Data.Create(...) now returns entities it just created Changes Version 11.01 Enhancements In-Page Toolbar now recognises sub-item lists and provides sorting and editing buttons #2009 Item-lists now have a button to add existing items to them #1278 New system to create extensions in an app, in the system folder Ability to create custom Input Fields just by placing them in the system folder #2070 Minor Improve Equality Check for DynamicEntities and EntitiesInList #2075 Data-table in admin UI now shows Title field no matter if there is another field which is the title #1639 Button to flush app-cache in admin-ui #2073 2sxc Insights now available from the super-user toolbar #2069 PT translations are added again #2064 Loads of enhancements and minor issues in the UI Changes Version 11.02 Enhancements App-Extensions system in the folder system Custom WebComponent based input fields #2082 API to reconfigure the wysiwyg input control #2090 Show view use with links to pages and more #2077 UI - fields can now be set to not-translate #2086 UI - boolean can now show different labels based on the value it has #2085 Minor Add HR language pack for editor #2087 show app-name in admin ui show app-icon in apps-management #2078 Changes Version 11.03 - todo Changes Version 11.04 - todo Changes Version 11.05 Old Edit UI be removed Old Admin-UI be removed APIs which only the old UIs used be removed Old helper JS for AngularJS apps (located in /js/angularjs) will be removed from the distribution. They had not been updated for over 3 years and we believe they were not widely used. Anybody upgrading will still preserve the files that are there. If you really need them, download an old release of 2sxc and get them manually. Changes Version 11.06 - 11.11 - todo \uD83D\uDC49 See the Project Issues Changes Version 11.13 VisualQuery 3 with a lot of new features Click on a stream shows what's in that stream Much better error handling to avoid queries from crashing if a stream has an error All internal DataSources were updated to use this new Error-Handling Output of Query is now tabbed which is much nicer to use Visual-Query only returns top 25 results by default to help with creating queries with large amounts of data UI was enhanced to show more user-friendly names/infos DynamicIn was introduced so DataSources can indicate that they expect a lot of In-streams UI enhanced with better/larger buttons/icons In Streams are now managed better so they can connect before it's known if the source Out actually has that stream New DataSource Error to provoke an error in a Query for testing New DataSource SerializationConfiguration lets you determine how things are serialized DataSource AttributeFilter enhanced to have keep-all or remove-all and multi-line configuration (easier) New DataSource Tutorial with updated sample code Insights-Logging was enhanced to log Exceptions (used in the VisualQuery Error handling) Bugfixes Toolbar had issue when color code was numbers only Changes Version 11.14 - 11.22 LTS TODO Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true/false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity. So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history, as the history is now part of the edit dialog Version 10 Changes Version 10.01 - 10.09 LTS Develop and fine-tuning of the new Edit-UI based on Angular 8 Changes Version 10.20-00 to 10.20-05 Enhanced ListCache so it will prevent parallel buildup - important for long-loading DataSources like SharePoint DataSources Updating to RazorBlade 3.1 which doesn't need extension methods Changes Version 10.20-06 Created AsDynamic(string) Created AsDynamic(DataSource) to enable AsDynamic(Data) instead of AsDynamic(Data[\"Default\"]) Changes Version 10.21 New AsList() for better code New AsDynamic(string) to work with json /dist/ is now cleaned up on every update, to better distribute changing JS file structures Changes Version 10.22 Query Params added for VisualQuery Created QueryRun DataSource Insights now includes the code file and line numbers Insights now also measures time needed to execute some code Various performance enhancements Improved SoC for AppsCache and AppRoot DataSource Changes Version 10.23 Lots of logging enhancements Changes Version 10.24 LTS New stable LTS Improved/fixed QueryRun DataSource Improved Insights Enhancements to use 2sxc with Redis Cache WYSIWYG enhancements for better H1-Hx, P and Blockquote Performance enhancements Intenal refactoring for APIs Introduced an internal Compatibility-Level to disable very old features when using new RazorComponents Changes Version 10.25 LTS Changed how the $2sxc client JavaScripts are loaded for much better performance and better Google PageSpeed Enabled various features for the Content area which previously were hidden, like Resources and Settings Released brand new Content-Templates App with best-practices for 10.25 Fixed bugs with Evoq Page Publishing Enhanced the ValueFilter DataSource to handle dates which were null Changes Version 10.26 TinyMCE Updated to 5.1 Enhanced CreateInstance API to also work when compiling Razor files from a WebApi New DataSource StreamPick New automatic Param called [Params:ShowDrafts] to be used in VisualQuery - returns True or False New tokens [App:AppId] and [App:ZoneId] to use in VisualQuery calles (dropdown from query) Changed List-Caching bbehavior to create more reliable cache-keys for complex queries (previously it only went through Default streams to generate the cache-key) Changes Version 10.27 Possibly breaking changes Because the dynamic entity list now has a type which is dynamic, it cannot be cast to List<dynamic> any more. IList<dynamic> works, but in case you have any code casting it to List<dynamic> you'll need to change that to either IList<dynamic> or IEnumerable<dynamic>. New Features / Major Improvements Changed DynamicEntity so that accessing a property which contains many other entities it will return a DynamicEntityWithList. This allows Razor files to access the properties like .EntityId or .FirstName of the main entity in a sub-list easily without requiring AsList(...) #1993 Updated Quick-Dialog to use Angular 9, Ivy and the latest Dnn-Sxc-Angular #1992 New DataSource AttributeRename #2004 Completely refactored internal list management API #1995 Complete refactoring of the inpage code to make it typesafe (no more any types) Created brand-new, simpler way to create custom Toolbars and specs Introduces JS/API 2sxc-Insights for debugging In-Page code Enhancements Performance-Enhance App DataSource to delay building objects until needed #1991 Performance-Enhance internal Token Lookup #1998 Enhanced Dnn Search Index logging #1997 Corrected help-links on all data sources #1994 Bugfixes Cache-All-Streams only used the Default-Streams for Cache-Key identification #1988 QueryRun DataSource doesn't show statitics on all streams #1989 Modified date and Owner information were missing on json stored entities #2005 / #2006 Fixed bug in JS API for non-2sxc endpoint resolution #2000 Queries didn't resolve Dnn tokens when accessed in the Search Index #1999 Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable, old name still works. Renamed ExternalDataDataSource to ExternalData, old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock, old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute, old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory, old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>>. This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target. Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strong-typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent. External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps, was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView. We also renamed the internal properti ViewNameInUrl to UrlIdentifier. To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose. The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation, because you should use Header.Presentation Version 9 Changes Version 9.0 [x] Change data access to Entity Framework Core 1.1 [x] Change IoC Layer to use .net Core mechanisms [x] Replace Quick-Dialogs with Angular4 implementation Changes Version 9.1 [x] Move primary quick-dialog GUI to bottom of page Changes Version 9.3 [x] Item-Level versioning, history and rollback Changes Version 9.4 [x] Drop all dependencies to Telerik - file browser using ADAM Changes Version 9.5 [x] Support for Dnn/Evoq Page Publishing Changes Version 9.6 [x] Extensive logging system to watch all internals Changes Version 9.7 - the JSON-Content-Types & Entities Upgrade [x] New features in entity json serialization [x] Support for schema-free (very dynamic) entities [x] new features in content-type json serialization [x] defined json format for content-types [x] full serialization and deserialization of json-based content types [x] SQL IRepository storage enhancements [x] extended SQL table Entities to also store AppId and ContentType (name) to ensure that json-entities can be stored [x] Support to persist entities as JSON in repository (DB) [x] file-storage implementation of IRepository loader, to created a standard-based app-content-types provider [x] Ability to provide file-based json content-types at a system level, which is probably the better solution for most scenarios (more flexible, easier to spot changes, etc.) [x] global content-types system [x] Support for code-provided content-types, which allows faster feature-evolution [x] Support for JSON based i18n on code-provided content-types, to allow better translation removed again, as not needed [x] Ensure export/import of data of these new content-types (req. extensive refactoring) [x] extensive automated testing of these new features Changes Version 9.8 - the VisualQuery Upgrade [x] SqlDataSource in VisualQuery Designer [x] Show DataSources which have Fallback-In-Streams in VisualQuery Designer [x] UI Updates on VisualQuery Designer, to better fit current needs [x] More help documentation for various data sources in VisualQuery Designer [x] Shuffle DataSource now configurable in VisualQuery [x] Support for Schema-Free Content (dynamic, without existing content-type) Changes Version 9.9 - another VisualQuery Upgrade [x] Enhance relationship filter to enable filtering on other fields of related items [x] Enhance other data sources with features which so far were not available in the visual designer Changes Version 9.10 - Combobox and more DataSources (WIP) [x] Combobox input type allowing a dropdown with values, but also allowing manual typing (to select pre-defined values, but also use Tokens) [x] StreamMerge DataSource [x] ItemFilterDuplicates DataSource [x] feature to export Json ContentTypes [x] multiple file-repos which deliver Content-Types, allows for any module to provide additional contenttypes Changes Version 9.11 - Query-Picker & more DataSources [x] Entity-Picker delivering items from a query, instead of a type [x] string-dropdown-query to pick string-items from a query instead of pre-filled [x] query export / import [x] multi-select items in a string-query-picker Changes Version 9.12 [x] Json-based global query definitions [x] Method to add parameters to a called query (like when using an entity-pickers which uses a query) [x] pre-build queries for things like zones, apps, content-types, fields, query-info etc. [x] data sources for Zones, Apps, Queries, Attributes, etc. [x] limit streams returned by a query Changes Version 9.13 [x] Enhanced API to create custom DataSources + ca. 10 blog posts for that [x] Standalone FnL / UDT DataSource (removed it from core distribution) Changes Version 9.14 LTS [x] New LTS Concept - see blog post about LTS 9.14 Changes Version 9.15-9.42 LTS Didn't have time to document this yet, sorry. If you need to know, best check the git-history. Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity. see full blog post Changes Version 8 Changes Version 8.00 - 8.8 Didn't find time to document this :) Changes Version 8.09 [x] Very Rich Content (Inner Content 2.0) [x] Item-Delete directly from in-page toolbar Changes Version 8.10 [x] Shuffle data sources (to randomize items) [x] Public (anonyomous) REST API for query and read/write content-items Changes Version 8.11-8.12 Mostly smaller bugfixes Version 1-7 (2012-2016) Didn't find time to document this :)"
  },
  "abyss/releases/history/changes-breaking.html": {
    "href": "abyss/releases/history/changes-breaking.html",
    "title": "Breaking Changes Overview for 2sxc/EAV | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes Overview for 2sxc/EAV We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. \uD83D\uDC49 please also read about the Deprecation Policy Breaking Changes in EAV and 2sxc v19 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary ⬇️ An interface called ToSic.Sxc.DataSources.IBlockInstance was removed since it was identical to ToSic.Eav.DataSource.IDataSource and should not be used anywhere. ⬇️ Core objects like Entity, Attribute etc. were changed to record - this would only affect you if you inherited from them ⬇️ Cleanup internal APIs on an internal interface IEntityLight which is not public. Properties: Title, Attributes and this[...] ⚠️ Enhancement in the Pages DataSource - property renames Visible to IsNavigation and Clickable to IsClickable ⚠️ Enhancement to the Roles DataSource - renamed to UserRoles - breaking change! ⚠️ Renamed the system query System.Roles to System.UserRoles - breaking change! Breaking Changes in EAV and 2sxc v18 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary ATM no breaking changes in v18 Breaking Changes in EAV and 2sxc v17 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Minor breaking changes which probably won't affect you, unless you're using some very advanced features. v17.00 ToSic.Eav.App.AppData is renamed to ToSic.Eav.Apps.DataSources.AppDataWithCrud In Typed mode, the App.Data now has a different interface ToSic.Sxc.Apps.IAppDataTyped AppState changes... App object had a hidden AppState property which was never documented and is now removed. If you were using it, then probably to access GetContentType(string). You can find a replacement on App.Data.GetContentType(...). Shortlink: https://go.2sxc.org/brc-17 Breaking Changes in EAV and 2sxc v16 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V16.00 doesn't have breaking changes; 16.02 has some very minor breaking changes Breaking Changes in 2sxc 16.02 API Changes which affect you if you had installed v16.01 with the latest Blog or Mobius In v16.01 we had introduced a new Typed API, which turned out to be not good-enough. This meant we had to rollback some of the changes we had introduced there, API Changes which should really not affect you Various APIs which used to return an IHybridHtmlString now return an IRawHtml This is to sync types with RazorBlade. It should have no effect on any code out there, as the result type is usually dynamic Renamed the type ToSic.Sxc.Data.IDynamicMetadata to ToSic.Sxc.Data.IMetadata This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody. Renamed ToSic.Sxc.Data.IDynamicField to ToSic.Sxc.Data.IField This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody. Breaking Changes in 2sxc 16.03 API Changes which affect you if you had installed v16.01/16.02 with the latest Blog or Mobius Base classes were renamed because of confusing ...Pro suffix. RazorPro is now RazorTyped, ApiPro is ApiTyped and CodePro is CodeTyped #3147 Now by default, all access to a property like .String(\"SomeName\") will throw an error in required mode if the field doesn't exist #3138 The .Parents(...) was enhanced to require named parameters (see blog post) #3139 Breaking Changes in EAV and 2sxc v15 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 15.00 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: If you have a custom DataSource, you will need to make some minor changes and recompile them If you used special, non-public Logging APIs you would need to update your work If you used any undocumented APIs, you will need to check if everything still works API Changes that may affect you DataSource base class was completely refactored see instructions Old static ToSic.Eav.DataSource was removed (deprecated since v13) Internal logging API ILog was completely refactored see instructions Internal object wrappers were completely refactored see instructions TinyMCE Upgrade to v6 Database changes Minor API changes Breaking Updates which probably don't affect anybody SQL changes - minor updates to the Database Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) Breaking Changes in 2sxc 15.03 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you An internal user property IUser.IsDesigner was renamed to IUser.IsSiteDeveloper An internal, deprecated user property IUser.IsAdmin was removed An internal, deprecated user property IUser.IsSuperUser was removed An internal property IUser.Guid was changed from Guid? to Guid The Users DataSource had a property called IncludeSystemAdmins which was changed from bool to string to allow for more options The Users DataSource had a property called RoleIds which returned a non-standard string-array. It has been removed, and the new Roles returns standard related entities. Removed static ToSic.Eav.Data.Build.Entity(...) method which was deprecated in v12 API Changes which should really not affect you These are internal APIs which we changed to make everything more immutable. They should never have been in use outside of the internal code. Changed IValue.Languages from IList to IEnumerable and made it immutable Change IEntity.Attributes from Dictionary<string, IAttribute> to IImmutableDictionary<string, IAttribute> as a step to later make it immutable Removed some old, probably never used APIs on IAttribute<T> such as IAttribute<T>[int[] languageIDs] IAttribute<T>[string] IAttribute<T>[string[]] IAttribute[string[] languageKeys] - was always marked as private Changed the type of Attribute.Type from string to ValueTypes to make it more strong-typed Removed the property Attribute.ControlledType which previously contained the ValueType Breaking Changes in 2sxc 15.06 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you on IEntity These were internal APIs which were not publicly documented, but may have been used by some developers. IEntity.GetDraft() was removed to ensure the entity is immutable IEntity.GetPublished() was removed to ensure the entity is immutable Note: GetDraft() and GetPublished() are still available on DynamicEntity in Razor and WebApi. They were only removed on IEntity. Renamed DataSources These data sources had uncommon names, and were renamed to be more consistent. We believe that they were only used in VisualQuery and not in code, so it should not affect you. CsvDataSource is now Csv SerializationConfiguration is now Serialization Breaking Changes in EAV and 2sxc v14 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V14 did some clean-up of internal APIs, but otherwise there are no known breaking changes. Note that these changes could be seen as a breaking change for certain users: Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08 Breaking Changes in EAV and 2sxc v13 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important: This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) Breaking Changes in EAV and 2sxc v12 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V12 did a lot of internal rework to get it to run on Oqtane. Almost none of the changes will affect you. Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path, Convert, Settings, Resources and DevTools. Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12, Custom.Dnn.Code12, Custom.Hybrid.Razor12, Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController. So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object>. We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true/false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity. So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history, as the history is now part of the edit dialog Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable, old name still works. Renamed ExternalDataDataSource to ExternalData, old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock, old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute, old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory, old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>>. This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target. Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strong-typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent. External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps, was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView. We also renamed the internal properti ViewNameInUrl to UrlIdentifier. To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose. The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation, because you should use Header.Presentation Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity. see full blog post"
  },
  "abyss/releases/history/index.html": {
    "href": "abyss/releases/history/index.html",
    "title": "History of the EAV and 2sxc Code Base | 2sxc 19 for Dnn and Oqtane",
    "keywords": "History of the EAV and 2sxc Code Base Here we'll track important changes, especially feature additions. You should check out \uD83D\uDC49 All breaking changes \uD83D\uDC49 All changes \uD83D\uDC49 Changes per version - select version in the menu Github Release Notes You can always find the latest and detailed release notes on the github releases"
  },
  "abyss/releases/history/v08/_all08.html": {
    "href": "abyss/releases/history/v08/_all08.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Changes Version 8 Changes Version 8.00 - 8.8 Didn't find time to document this :) Changes Version 8.09 [x] Very Rich Content (Inner Content 2.0) [x] Item-Delete directly from in-page toolbar Changes Version 8.10 [x] Shuffle data sources (to randomize items) [x] Public (anonyomous) REST API for query and read/write content-items Changes Version 8.11-8.12 Mostly smaller bugfixes"
  },
  "abyss/releases/history/v08/index.html": {
    "href": "abyss/releases/history/v08/index.html",
    "title": "All in EAV and 2sxc Version 8 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All in EAV and 2sxc Version 8 Changes Version 8 Changes Version 8.00 - 8.8 Didn't find time to document this :) Changes Version 8.09 [x] Very Rich Content (Inner Content 2.0) [x] Item-Delete directly from in-page toolbar Changes Version 8.10 [x] Shuffle data sources (to randomize items) [x] Public (anonyomous) REST API for query and read/write content-items Changes Version 8.11-8.12 Mostly smaller bugfixes"
  },
  "abyss/releases/history/v09/_all09.html": {
    "href": "abyss/releases/history/v09/_all09.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 9 Changes Version 9.0 [x] Change data access to Entity Framework Core 1.1 [x] Change IoC Layer to use .net Core mechanisms [x] Replace Quick-Dialogs with Angular4 implementation Changes Version 9.1 [x] Move primary quick-dialog GUI to bottom of page Changes Version 9.3 [x] Item-Level versioning, history and rollback Changes Version 9.4 [x] Drop all dependencies to Telerik - file browser using ADAM Changes Version 9.5 [x] Support for Dnn/Evoq Page Publishing Changes Version 9.6 [x] Extensive logging system to watch all internals Changes Version 9.7 - the JSON-Content-Types & Entities Upgrade [x] New features in entity json serialization [x] Support for schema-free (very dynamic) entities [x] new features in content-type json serialization [x] defined json format for content-types [x] full serialization and deserialization of json-based content types [x] SQL IRepository storage enhancements [x] extended SQL table Entities to also store AppId and ContentType (name) to ensure that json-entities can be stored [x] Support to persist entities as JSON in repository (DB) [x] file-storage implementation of IRepository loader, to created a standard-based app-content-types provider [x] Ability to provide file-based json content-types at a system level, which is probably the better solution for most scenarios (more flexible, easier to spot changes, etc.) [x] global content-types system [x] Support for code-provided content-types, which allows faster feature-evolution [x] Support for JSON based i18n on code-provided content-types, to allow better translation removed again, as not needed [x] Ensure export/import of data of these new content-types (req. extensive refactoring) [x] extensive automated testing of these new features Changes Version 9.8 - the VisualQuery Upgrade [x] SqlDataSource in VisualQuery Designer [x] Show DataSources which have Fallback-In-Streams in VisualQuery Designer [x] UI Updates on VisualQuery Designer, to better fit current needs [x] More help documentation for various data sources in VisualQuery Designer [x] Shuffle DataSource now configurable in VisualQuery [x] Support for Schema-Free Content (dynamic, without existing content-type) Changes Version 9.9 - another VisualQuery Upgrade [x] Enhance relationship filter to enable filtering on other fields of related items [x] Enhance other data sources with features which so far were not available in the visual designer Changes Version 9.10 - Combobox and more DataSources (WIP) [x] Combobox input type allowing a dropdown with values, but also allowing manual typing (to select pre-defined values, but also use Tokens) [x] StreamMerge DataSource [x] ItemFilterDuplicates DataSource [x] feature to export Json ContentTypes [x] multiple file-repos which deliver Content-Types, allows for any module to provide additional contenttypes Changes Version 9.11 - Query-Picker & more DataSources [x] Entity-Picker delivering items from a query, instead of a type [x] string-dropdown-query to pick string-items from a query instead of pre-filled [x] query export / import [x] multi-select items in a string-query-picker Changes Version 9.12 [x] Json-based global query definitions [x] Method to add parameters to a called query (like when using an entity-pickers which uses a query) [x] pre-build queries for things like zones, apps, content-types, fields, query-info etc. [x] data sources for Zones, Apps, Queries, Attributes, etc. [x] limit streams returned by a query Changes Version 9.13 [x] Enhanced API to create custom DataSources + ca. 10 blog posts for that [x] Standalone FnL / UDT DataSource (removed it from core distribution) Changes Version 9.14 LTS [x] New LTS Concept - see blog post about LTS 9.14 Changes Version 9.15-9.42 LTS Didn't have time to document this yet, sorry. If you need to know, best check the git-history."
  },
  "abyss/releases/history/v09/_brc09.html": {
    "href": "abyss/releases/history/v09/_brc09.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity. see full blog post"
  },
  "abyss/releases/history/v09/index.html": {
    "href": "abyss/releases/history/v09/index.html",
    "title": "All Changes in EAV and 2sxc v9 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v9 Version 9 Changes Version 9.0 [x] Change data access to Entity Framework Core 1.1 [x] Change IoC Layer to use .net Core mechanisms [x] Replace Quick-Dialogs with Angular4 implementation Changes Version 9.1 [x] Move primary quick-dialog GUI to bottom of page Changes Version 9.3 [x] Item-Level versioning, history and rollback Changes Version 9.4 [x] Drop all dependencies to Telerik - file browser using ADAM Changes Version 9.5 [x] Support for Dnn/Evoq Page Publishing Changes Version 9.6 [x] Extensive logging system to watch all internals Changes Version 9.7 - the JSON-Content-Types & Entities Upgrade [x] New features in entity json serialization [x] Support for schema-free (very dynamic) entities [x] new features in content-type json serialization [x] defined json format for content-types [x] full serialization and deserialization of json-based content types [x] SQL IRepository storage enhancements [x] extended SQL table Entities to also store AppId and ContentType (name) to ensure that json-entities can be stored [x] Support to persist entities as JSON in repository (DB) [x] file-storage implementation of IRepository loader, to created a standard-based app-content-types provider [x] Ability to provide file-based json content-types at a system level, which is probably the better solution for most scenarios (more flexible, easier to spot changes, etc.) [x] global content-types system [x] Support for code-provided content-types, which allows faster feature-evolution [x] Support for JSON based i18n on code-provided content-types, to allow better translation removed again, as not needed [x] Ensure export/import of data of these new content-types (req. extensive refactoring) [x] extensive automated testing of these new features Changes Version 9.8 - the VisualQuery Upgrade [x] SqlDataSource in VisualQuery Designer [x] Show DataSources which have Fallback-In-Streams in VisualQuery Designer [x] UI Updates on VisualQuery Designer, to better fit current needs [x] More help documentation for various data sources in VisualQuery Designer [x] Shuffle DataSource now configurable in VisualQuery [x] Support for Schema-Free Content (dynamic, without existing content-type) Changes Version 9.9 - another VisualQuery Upgrade [x] Enhance relationship filter to enable filtering on other fields of related items [x] Enhance other data sources with features which so far were not available in the visual designer Changes Version 9.10 - Combobox and more DataSources (WIP) [x] Combobox input type allowing a dropdown with values, but also allowing manual typing (to select pre-defined values, but also use Tokens) [x] StreamMerge DataSource [x] ItemFilterDuplicates DataSource [x] feature to export Json ContentTypes [x] multiple file-repos which deliver Content-Types, allows for any module to provide additional contenttypes Changes Version 9.11 - Query-Picker & more DataSources [x] Entity-Picker delivering items from a query, instead of a type [x] string-dropdown-query to pick string-items from a query instead of pre-filled [x] query export / import [x] multi-select items in a string-query-picker Changes Version 9.12 [x] Json-based global query definitions [x] Method to add parameters to a called query (like when using an entity-pickers which uses a query) [x] pre-build queries for things like zones, apps, content-types, fields, query-info etc. [x] data sources for Zones, Apps, Queries, Attributes, etc. [x] limit streams returned by a query Changes Version 9.13 [x] Enhanced API to create custom DataSources + ca. 10 blog posts for that [x] Standalone FnL / UDT DataSource (removed it from core distribution) Changes Version 9.14 LTS [x] New LTS Concept - see blog post about LTS 9.14 Changes Version 9.15-9.42 LTS Didn't have time to document this yet, sorry. If you need to know, best check the git-history. Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity. see full blog post"
  },
  "abyss/releases/history/v10/_all10.html": {
    "href": "abyss/releases/history/v10/_all10.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 10 Changes Version 10.01 - 10.09 LTS Develop and fine-tuning of the new Edit-UI based on Angular 8 Changes Version 10.20-00 to 10.20-05 Enhanced ListCache so it will prevent parallel buildup - important for long-loading DataSources like SharePoint DataSources Updating to RazorBlade 3.1 which doesn't need extension methods Changes Version 10.20-06 Created AsDynamic(string) Created AsDynamic(DataSource) to enable AsDynamic(Data) instead of AsDynamic(Data[\"Default\"]) Changes Version 10.21 New AsList() for better code New AsDynamic(string) to work with json /dist/ is now cleaned up on every update, to better distribute changing JS file structures Changes Version 10.22 Query Params added for VisualQuery Created QueryRun DataSource Insights now includes the code file and line numbers Insights now also measures time needed to execute some code Various performance enhancements Improved SoC for AppsCache and AppRoot DataSource Changes Version 10.23 Lots of logging enhancements Changes Version 10.24 LTS New stable LTS Improved/fixed QueryRun DataSource Improved Insights Enhancements to use 2sxc with Redis Cache WYSIWYG enhancements for better H1-Hx, P and Blockquote Performance enhancements Intenal refactoring for APIs Introduced an internal Compatibility-Level to disable very old features when using new RazorComponents Changes Version 10.25 LTS Changed how the $2sxc client JavaScripts are loaded for much better performance and better Google PageSpeed Enabled various features for the Content area which previously were hidden, like Resources and Settings Released brand new Content-Templates App with best-practices for 10.25 Fixed bugs with Evoq Page Publishing Enhanced the ValueFilter DataSource to handle dates which were null Changes Version 10.26 TinyMCE Updated to 5.1 Enhanced CreateInstance API to also work when compiling Razor files from a WebApi New DataSource StreamPick New automatic Param called [Params:ShowDrafts] to be used in VisualQuery - returns True or False New tokens [App:AppId] and [App:ZoneId] to use in VisualQuery calles (dropdown from query) Changed List-Caching bbehavior to create more reliable cache-keys for complex queries (previously it only went through Default streams to generate the cache-key) Changes Version 10.27 Possibly breaking changes Because the dynamic entity list now has a type which is dynamic, it cannot be cast to List<dynamic> any more. IList<dynamic> works, but in case you have any code casting it to List<dynamic> you'll need to change that to either IList<dynamic> or IEnumerable<dynamic>. New Features / Major Improvements Changed DynamicEntity so that accessing a property which contains many other entities it will return a DynamicEntityWithList. This allows Razor files to access the properties like .EntityId or .FirstName of the main entity in a sub-list easily without requiring AsList(...) #1993 Updated Quick-Dialog to use Angular 9, Ivy and the latest Dnn-Sxc-Angular #1992 New DataSource AttributeRename #2004 Completely refactored internal list management API #1995 Complete refactoring of the inpage code to make it typesafe (no more any types) Created brand-new, simpler way to create custom Toolbars and specs Introduces JS/API 2sxc-Insights for debugging In-Page code Enhancements Performance-Enhance App DataSource to delay building objects until needed #1991 Performance-Enhance internal Token Lookup #1998 Enhanced Dnn Search Index logging #1997 Corrected help-links on all data sources #1994 Bugfixes Cache-All-Streams only used the Default-Streams for Cache-Key identification #1988 QueryRun DataSource doesn't show statitics on all streams #1989 Modified date and Owner information were missing on json stored entities #2005 / #2006 Fixed bug in JS API for non-2sxc endpoint resolution #2000 Queries didn't resolve Dnn tokens when accessed in the Search Index #1999"
  },
  "abyss/releases/history/v10/_brc10.html": {
    "href": "abyss/releases/history/v10/_brc10.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable, old name still works. Renamed ExternalDataDataSource to ExternalData, old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock, old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute, old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory, old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>>. This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target. Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strong-typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent. External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps, was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView. We also renamed the internal properti ViewNameInUrl to UrlIdentifier. To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose. The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation, because you should use Header.Presentation"
  },
  "abyss/releases/history/v10/index.html": {
    "href": "abyss/releases/history/v10/index.html",
    "title": "All Changes in EAV and 2sxc v10 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v10 Version 10 Changes Version 10.01 - 10.09 LTS Develop and fine-tuning of the new Edit-UI based on Angular 8 Changes Version 10.20-00 to 10.20-05 Enhanced ListCache so it will prevent parallel buildup - important for long-loading DataSources like SharePoint DataSources Updating to RazorBlade 3.1 which doesn't need extension methods Changes Version 10.20-06 Created AsDynamic(string) Created AsDynamic(DataSource) to enable AsDynamic(Data) instead of AsDynamic(Data[\"Default\"]) Changes Version 10.21 New AsList() for better code New AsDynamic(string) to work with json /dist/ is now cleaned up on every update, to better distribute changing JS file structures Changes Version 10.22 Query Params added for VisualQuery Created QueryRun DataSource Insights now includes the code file and line numbers Insights now also measures time needed to execute some code Various performance enhancements Improved SoC for AppsCache and AppRoot DataSource Changes Version 10.23 Lots of logging enhancements Changes Version 10.24 LTS New stable LTS Improved/fixed QueryRun DataSource Improved Insights Enhancements to use 2sxc with Redis Cache WYSIWYG enhancements for better H1-Hx, P and Blockquote Performance enhancements Intenal refactoring for APIs Introduced an internal Compatibility-Level to disable very old features when using new RazorComponents Changes Version 10.25 LTS Changed how the $2sxc client JavaScripts are loaded for much better performance and better Google PageSpeed Enabled various features for the Content area which previously were hidden, like Resources and Settings Released brand new Content-Templates App with best-practices for 10.25 Fixed bugs with Evoq Page Publishing Enhanced the ValueFilter DataSource to handle dates which were null Changes Version 10.26 TinyMCE Updated to 5.1 Enhanced CreateInstance API to also work when compiling Razor files from a WebApi New DataSource StreamPick New automatic Param called [Params:ShowDrafts] to be used in VisualQuery - returns True or False New tokens [App:AppId] and [App:ZoneId] to use in VisualQuery calles (dropdown from query) Changed List-Caching bbehavior to create more reliable cache-keys for complex queries (previously it only went through Default streams to generate the cache-key) Changes Version 10.27 Possibly breaking changes Because the dynamic entity list now has a type which is dynamic, it cannot be cast to List<dynamic> any more. IList<dynamic> works, but in case you have any code casting it to List<dynamic> you'll need to change that to either IList<dynamic> or IEnumerable<dynamic>. New Features / Major Improvements Changed DynamicEntity so that accessing a property which contains many other entities it will return a DynamicEntityWithList. This allows Razor files to access the properties like .EntityId or .FirstName of the main entity in a sub-list easily without requiring AsList(...) #1993 Updated Quick-Dialog to use Angular 9, Ivy and the latest Dnn-Sxc-Angular #1992 New DataSource AttributeRename #2004 Completely refactored internal list management API #1995 Complete refactoring of the inpage code to make it typesafe (no more any types) Created brand-new, simpler way to create custom Toolbars and specs Introduces JS/API 2sxc-Insights for debugging In-Page code Enhancements Performance-Enhance App DataSource to delay building objects until needed #1991 Performance-Enhance internal Token Lookup #1998 Enhanced Dnn Search Index logging #1997 Corrected help-links on all data sources #1994 Bugfixes Cache-All-Streams only used the Default-Streams for Cache-Key identification #1988 QueryRun DataSource doesn't show statitics on all streams #1989 Modified date and Owner information were missing on json stored entities #2005 / #2006 Fixed bug in JS API for non-2sxc endpoint resolution #2000 Queries didn't resolve Dnn tokens when accessed in the Search Index #1999 Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable, old name still works. Renamed ExternalDataDataSource to ExternalData, old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock, old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute, old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory, old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>>. This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target. Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strong-typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent. External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps, was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView. We also renamed the internal properti ViewNameInUrl to UrlIdentifier. To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose. The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation, because you should use Header.Presentation"
  },
  "abyss/releases/history/v11/_all11.html": {
    "href": "abyss/releases/history/v11/_all11.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 11 Changes Version 11.00 Breaking Changes The following changes are all super-low-profile, but we want to document them just to be through: DataStream and IDataStream loses a very old property called .LightList - we're pretty sure it's not in use anywhere, if you have it, just use .List instead. Enhancements Brand new Admin UI based on Angular 9 and Ivy with new Code-Editor, new VisualQuery and much more Razor CodeBehind Automatic Polymorphism Updated Razor Blades to 3.02 with the new Tags.SafeUrl(...) command Field: Boolean-Tristate which saves true/false/null App.Data.Create(...) now returns entities it just created Changes Version 11.01 Enhancements In-Page Toolbar now recognises sub-item lists and provides sorting and editing buttons #2009 Item-lists now have a button to add existing items to them #1278 New system to create extensions in an app, in the system folder Ability to create custom Input Fields just by placing them in the system folder #2070 Minor Improve Equality Check for DynamicEntities and EntitiesInList #2075 Data-table in admin UI now shows Title field no matter if there is another field which is the title #1639 Button to flush app-cache in admin-ui #2073 2sxc Insights now available from the super-user toolbar #2069 PT translations are added again #2064 Loads of enhancements and minor issues in the UI Changes Version 11.02 Enhancements App-Extensions system in the folder system Custom WebComponent based input fields #2082 API to reconfigure the wysiwyg input control #2090 Show view use with links to pages and more #2077 UI - fields can now be set to not-translate #2086 UI - boolean can now show different labels based on the value it has #2085 Minor Add HR language pack for editor #2087 show app-name in admin ui show app-icon in apps-management #2078 Changes Version 11.03 - todo Changes Version 11.04 - todo Changes Version 11.05 Old Edit UI be removed Old Admin-UI be removed APIs which only the old UIs used be removed Old helper JS for AngularJS apps (located in /js/angularjs) will be removed from the distribution. They had not been updated for over 3 years and we believe they were not widely used. Anybody upgrading will still preserve the files that are there. If you really need them, download an old release of 2sxc and get them manually. Changes Version 11.06 - 11.11 - todo \uD83D\uDC49 See the Project Issues Changes Version 11.13 VisualQuery 3 with a lot of new features Click on a stream shows what's in that stream Much better error handling to avoid queries from crashing if a stream has an error All internal DataSources were updated to use this new Error-Handling Output of Query is now tabbed which is much nicer to use Visual-Query only returns top 25 results by default to help with creating queries with large amounts of data UI was enhanced to show more user-friendly names/infos DynamicIn was introduced so DataSources can indicate that they expect a lot of In-streams UI enhanced with better/larger buttons/icons In Streams are now managed better so they can connect before it's known if the source Out actually has that stream New DataSource Error to provoke an error in a Query for testing New DataSource SerializationConfiguration lets you determine how things are serialized DataSource AttributeFilter enhanced to have keep-all or remove-all and multi-line configuration (easier) New DataSource Tutorial with updated sample code Insights-Logging was enhanced to log Exceptions (used in the VisualQuery Error handling) Bugfixes Toolbar had issue when color code was numbers only Changes Version 11.14 - 11.22 LTS TODO"
  },
  "abyss/releases/history/v11/_brc11.html": {
    "href": "abyss/releases/history/v11/_brc11.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true/false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity. So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history, as the history is now part of the edit dialog"
  },
  "abyss/releases/history/v11/index.html": {
    "href": "abyss/releases/history/v11/index.html",
    "title": "All Changes in EAV and 2sxc v11 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v11 Version 11 Changes Version 11.00 Breaking Changes The following changes are all super-low-profile, but we want to document them just to be through: DataStream and IDataStream loses a very old property called .LightList - we're pretty sure it's not in use anywhere, if you have it, just use .List instead. Enhancements Brand new Admin UI based on Angular 9 and Ivy with new Code-Editor, new VisualQuery and much more Razor CodeBehind Automatic Polymorphism Updated Razor Blades to 3.02 with the new Tags.SafeUrl(...) command Field: Boolean-Tristate which saves true/false/null App.Data.Create(...) now returns entities it just created Changes Version 11.01 Enhancements In-Page Toolbar now recognises sub-item lists and provides sorting and editing buttons #2009 Item-lists now have a button to add existing items to them #1278 New system to create extensions in an app, in the system folder Ability to create custom Input Fields just by placing them in the system folder #2070 Minor Improve Equality Check for DynamicEntities and EntitiesInList #2075 Data-table in admin UI now shows Title field no matter if there is another field which is the title #1639 Button to flush app-cache in admin-ui #2073 2sxc Insights now available from the super-user toolbar #2069 PT translations are added again #2064 Loads of enhancements and minor issues in the UI Changes Version 11.02 Enhancements App-Extensions system in the folder system Custom WebComponent based input fields #2082 API to reconfigure the wysiwyg input control #2090 Show view use with links to pages and more #2077 UI - fields can now be set to not-translate #2086 UI - boolean can now show different labels based on the value it has #2085 Minor Add HR language pack for editor #2087 show app-name in admin ui show app-icon in apps-management #2078 Changes Version 11.03 - todo Changes Version 11.04 - todo Changes Version 11.05 Old Edit UI be removed Old Admin-UI be removed APIs which only the old UIs used be removed Old helper JS for AngularJS apps (located in /js/angularjs) will be removed from the distribution. They had not been updated for over 3 years and we believe they were not widely used. Anybody upgrading will still preserve the files that are there. If you really need them, download an old release of 2sxc and get them manually. Changes Version 11.06 - 11.11 - todo \uD83D\uDC49 See the Project Issues Changes Version 11.13 VisualQuery 3 with a lot of new features Click on a stream shows what's in that stream Much better error handling to avoid queries from crashing if a stream has an error All internal DataSources were updated to use this new Error-Handling Output of Query is now tabbed which is much nicer to use Visual-Query only returns top 25 results by default to help with creating queries with large amounts of data UI was enhanced to show more user-friendly names/infos DynamicIn was introduced so DataSources can indicate that they expect a lot of In-streams UI enhanced with better/larger buttons/icons In Streams are now managed better so they can connect before it's known if the source Out actually has that stream New DataSource Error to provoke an error in a Query for testing New DataSource SerializationConfiguration lets you determine how things are serialized DataSource AttributeFilter enhanced to have keep-all or remove-all and multi-line configuration (easier) New DataSource Tutorial with updated sample code Insights-Logging was enhanced to log Exceptions (used in the VisualQuery Error handling) Bugfixes Toolbar had issue when color code was numbers only Changes Version 11.14 - 11.22 LTS TODO Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true/false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity. So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history, as the history is now part of the edit dialog"
  },
  "abyss/releases/history/v12/_all12.html": {
    "href": "abyss/releases/history/v12/_all12.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 12 Changes Version 12.10 New Children DataSource New Parents DataSource New Metadata DataSource New MetadataTargets DataSource The StreamMerge DataSource got three new out-streams Distinct, And and Xor Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Changes Version 12.06 LTS No relevant changes Changes Version 12.05 Introduced IJsonService for json serialize/deserialize Introduced IConvertService for simple data-type conversion, also available on the Convert property of Razor12 and Api12 Introduced ToSic.Sxc.Services.ILogService to log messages to the system (Dnn/Oqtane) Introduced IMailService to easily send mails cross-platform Introduced ISecureDataService to use encrypted settings Introduced IRenderService for inner-content rendering (Oqtane code must use this) Published ToSic.Eav.DataFormats.EavLight to better document simple eav data Published IConvertToEavLight as the new standard way to prepare entities for WebAPI serialization. This is meant to replace previous code using objects such as EntitiesToDictionary or DataToDictionary which are now marked as obsolete. New Razor12, Api12 and Code12 Classes now don't support old, obsolete APIs anymore Link.Image now also accepts parameters as a parameter Link.Image and Link.To always create safe urls now (spaces are encoded etc.) Link.To and Link.Image now have a parameter type which can be \"full\" to ensure domains are always added to links (for use in APIs generating RSS etc.) Update to RazorBlade v3.7 Edit.Toolbar now supports condition so that toolbars may or may not be created based on a true/false value Link.Image now also accepts a factor or aspectRatio which is a string like 1:2 or 3/4 AsDynamic(...) now also wraps anonymous objects in quite an amazing way Bugfix: lots of small ones Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path, Convert, Settings, Resources and DevTools. Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12, Custom.Dnn.Code12, Custom.Hybrid.Razor12, Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController. So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Changes Version 12.04 incl 12.03 which was not officially released Settings Stack and Resources Stack added, and the Settings / Resources object now have this Global Settings.Images.xxx settings defined for Content, Screen, Lightbox and Section Global Settings.Resources.xxx defined for fancybox3, fancybox4, bootstrap4, bootstrap5 Link.Image API created to support predefined sizes/resize modes etc. Created feature where DynamicEntities can browse to sub-items using their identifier (used for Settings.Images.Content where Content is actually the title of a sub-entity) Added debug-feature for DynamicEntity get String-Dropdown inputs now have a value-key presets option (instead of the key-value which was flaky) and added support for escaping special characters #Oqtane 2.2 support added Introduced Monaco (VS-Code online) editor for beta-testing source-editing Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object>. We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Changes Version 12.02 Formulas feature finalized DynamicEntityStack object created Hybrid IPageService created with Activate and similar features CmsContext was enhanced with View information Content-Type icons can now be stored in the app with an [App:Path]/image.jpg style reference Enabled view-configuration to configure search behavior incl. not-to-index or what streams should be indexed turnOn created / deployed #Oqtane 2.1 support added in 2sxc 12.02.01 Changes Version 12.00 Todo"
  },
  "abyss/releases/history/v12/_brc12.04.html": {
    "href": "abyss/releases/history/v12/_brc12.04.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object>. We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change"
  },
  "abyss/releases/history/v12/_brc12.05.html": {
    "href": "abyss/releases/history/v12/_brc12.05.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path, Convert, Settings, Resources and DevTools. Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12, Custom.Dnn.Code12, Custom.Hybrid.Razor12, Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController. So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this."
  },
  "abyss/releases/history/v12/_brc12.10.html": {
    "href": "abyss/releases/history/v12/_brc12.10.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default."
  },
  "abyss/releases/history/v12/_brc12.html": {
    "href": "abyss/releases/history/v12/_brc12.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v12 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V12 did a lot of internal rework to get it to run on Oqtane. Almost none of the changes will affect you. Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path, Convert, Settings, Resources and DevTools. Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12, Custom.Dnn.Code12, Custom.Hybrid.Razor12, Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController. So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object>. We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change"
  },
  "abyss/releases/history/v12/breaking.html": {
    "href": "abyss/releases/history/v12/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc 12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc 12 Breaking Changes in EAV and 2sxc v12 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V12 did a lot of internal rework to get it to run on Oqtane. Almost none of the changes will affect you. Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path, Convert, Settings, Resources and DevTools. Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12, Custom.Dnn.Code12, Custom.Hybrid.Razor12, Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController. So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object>. We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change"
  },
  "abyss/releases/history/v12/index.html": {
    "href": "abyss/releases/history/v12/index.html",
    "title": "All Changes in EAV and 2sxc v12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v12 Version 12 Changes Version 12.10 New Children DataSource New Parents DataSource New Metadata DataSource New MetadataTargets DataSource The StreamMerge DataSource got three new out-streams Distinct, And and Xor Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Changes Version 12.06 LTS No relevant changes Changes Version 12.05 Introduced IJsonService for json serialize/deserialize Introduced IConvertService for simple data-type conversion, also available on the Convert property of Razor12 and Api12 Introduced ToSic.Sxc.Services.ILogService to log messages to the system (Dnn/Oqtane) Introduced IMailService to easily send mails cross-platform Introduced ISecureDataService to use encrypted settings Introduced IRenderService for inner-content rendering (Oqtane code must use this) Published ToSic.Eav.DataFormats.EavLight to better document simple eav data Published IConvertToEavLight as the new standard way to prepare entities for WebAPI serialization. This is meant to replace previous code using objects such as EntitiesToDictionary or DataToDictionary which are now marked as obsolete. New Razor12, Api12 and Code12 Classes now don't support old, obsolete APIs anymore Link.Image now also accepts parameters as a parameter Link.Image and Link.To always create safe urls now (spaces are encoded etc.) Link.To and Link.Image now have a parameter type which can be \"full\" to ensure domains are always added to links (for use in APIs generating RSS etc.) Update to RazorBlade v3.7 Edit.Toolbar now supports condition so that toolbars may or may not be created based on a true/false value Link.Image now also accepts a factor or aspectRatio which is a string like 1:2 or 3/4 AsDynamic(...) now also wraps anonymous objects in quite an amazing way Bugfix: lots of small ones Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path, Convert, Settings, Resources and DevTools. Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12, Custom.Dnn.Code12, Custom.Hybrid.Razor12, Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController. So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Changes Version 12.04 incl 12.03 which was not officially released Settings Stack and Resources Stack added, and the Settings / Resources object now have this Global Settings.Images.xxx settings defined for Content, Screen, Lightbox and Section Global Settings.Resources.xxx defined for fancybox3, fancybox4, bootstrap4, bootstrap5 Link.Image API created to support predefined sizes/resize modes etc. Created feature where DynamicEntities can browse to sub-items using their identifier (used for Settings.Images.Content where Content is actually the title of a sub-entity) Added debug-feature for DynamicEntity get String-Dropdown inputs now have a value-key presets option (instead of the key-value which was flaky) and added support for escaping special characters #Oqtane 2.2 support added Introduced Monaco (VS-Code online) editor for beta-testing source-editing Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object>. We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Changes Version 12.02 Formulas feature finalized DynamicEntityStack object created Hybrid IPageService created with Activate and similar features CmsContext was enhanced with View information Content-Type icons can now be stored in the app with an [App:Path]/image.jpg style reference Enabled view-configuration to configure search behavior incl. not-to-index or what streams should be indexed turnOn created / deployed #Oqtane 2.1 support added in 2sxc 12.02.01 Changes Version 12.00 Todo"
  },
  "abyss/releases/history/v13/_all13.html": {
    "href": "abyss/releases/history/v13/_all13.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 13 TODO New WebApi route app/auto/data to replace /app/auto/content - the old one will still work, but we won't document it any more, because it was a confusing name Lots of metadata stuff... TODO: New sxc.data and sxc.query Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important: This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 13.01 JSON fields Link.Image with srcSet Parameter ? ToSic.Sxc.Services.IFeaturesService 13.02 JS Global Apps 13.03 TODO 13.04 TODO 13.05 Moved the Web.IInPageEditingHelper to Services.IEditService - this is non breaking and shouldn't matter, as people won't be using the direct inteface Moved the Web.ILinkHelper to Services.ILinkService - this is non breaking and shouldn't matter, as people won't be using the direct inteface 13.x 2022-Q1 ✅ Improve Tutorials massively ✅ View Metadata ✅ Oqtane Website Mode which can be indexed in Google ✅ Improve Feature-Management ✅ IFeaturesService ✅ Shared Apps across Sites (Patrons only feature) ✅ Enable editing of Shared Templates / files ✅ Enable shared APIs ✅ Disable translation of specific content-types ✅ Dnn Factory replacement to render module or get DynamicCode outside of 2sxc ✅ Fully integrate with Dnn Dependency Injection ✅ Improve DI Scopes to Module-Level ✅ IImageService 13.x LTS 2022-Q2 ✅ v13 LTS"
  },
  "abyss/releases/history/v13/_brc13.00.html": {
    "href": "abyss/releases/history/v13/_brc13.00.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important: This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...)"
  },
  "abyss/releases/history/v13/_brc13.html": {
    "href": "abyss/releases/history/v13/_brc13.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v13 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important: This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...)"
  },
  "abyss/releases/history/v13/breaking.html": {
    "href": "abyss/releases/history/v13/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc Breaking Changes in EAV and 2sxc v13 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important: This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...)"
  },
  "abyss/releases/history/v13/conversion/index.html": {
    "href": "abyss/releases/history/v13/conversion/index.html",
    "title": "Fix Breaking Change Conversion in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Conversion in v13 Keywords: #Deprecated #Conversion #DataToDictionary #EntitiesToDictionary 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, these features were removed which convert data to a simple JSON: ToSic.Eav.Conversion.EntitiesToDictionary ToSic.Sxc.Conversion.DataToDictionary Reason for Removal These features were removed because they relied on objects which need Dependency Injection, and calling this object directly cannot give us DI. These features were rarely used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work Some code samples suggested to use this in WebApis. Based on StackOverflow questions, we believe it has been used a few times. Upgrade to Newer functionality We suggest you search for EntitiesToDictionary and DataToDictionary in your code, and replace it with GetService<ToSic.Eav.DataFormats.EavLight.IConvertToEavLight>(). Example before: using ToSic.Eav.Conversion; var convert = new EntitiesToDictionary(); var result = convert.Convert(...); Example after fix: var convert = GetService<ToSic.Eav.DataFormats.EavLight.IConvertToEavLight>(); var result = convert.Convert(...); History Created ToSic.Eav.Conversion.EntitiesToDictionary ca. v5 Introduced ToSic.Sxc.Conversion.DataToDictionary ca. v7 Both marked as Deprecated in v12 Was only ever used in Dnn, never used in Oqtane To be removed ca. v14 ca. middle of 2022 Shortlink to here: https://go.2sxc.org/brc-13-conversion"
  },
  "abyss/releases/history/v13/datasource.cache/index.html": {
    "href": "abyss/releases/history/v13/datasource.cache/index.html",
    "title": "Fix Breaking Change DataSource.Cache in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change DataSource.Cache in v13 Keywords: #Deprecated #DataSource 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, this feature was removed: ToSic.Sxc.DataSources.IBlockDataSource.Cache, usually used as Data.Cache.GetContentType(contentTypeName) to find a Content-Type Reason for Removal These features were removed because the API was misplaced. Unfortunately it was in the original Mobius-Forms so we are giving it a 1 year deprecation, and will be fully removed it v15. Upgrade to Newer functionality If you look at the Code in Mobius, you will see that the name is the only thing used. This was the code: var type = Data.Cache.GetContentType(config.ContentType); ... App.Data.Create(type.Name, contactFormRequest); ... files.Add(SaveInAdam(stream: new MemoryStream(data), fileName: file[\"Name\"], contentType: type.Name, guid: guid, field: file[\"Field\"])); ... Because of this, you can actually just skip gotting the content-type, and just use the name directly. To fix this, just use the config.ContentTypeName instead of the type.Name OR upgrade to a newer Mobius. If you need the type for other uses, best create an issue on GitHub. Shortlink to here: https://go.2sxc.org/brc-13-datasource-cache"
  },
  "abyss/releases/history/v13/datasource/index.html": {
    "href": "abyss/releases/history/v13/datasource/index.html",
    "title": "Fix Breaking Change DataSource in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change DataSource in v13 Keywords: #Deprecated #DataSource 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, this feature was removed: ToSic.Eav.DataSource to create DataSources Reason for Removal These features were removed because they relied on objects which need Dependency Injection, and calling this object directly cannot give us DI. These features were almost never used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work 2sxc V7 (ca. 2016) introduced this to create DataSources in code. Typically it would have looked like this: var dsMaker = new ToSic.Eav.DataSource(); var ds = dsMaker.GetDataSource<Sql>(); Upgrade to Newer functionality In Razor and WebApi there are always built-in methods to get data sources, specifically: CreateSource(...) CreateSource<T>(...) See e.g. docs If you need this in a DLL then these will be missing. For that, please ensure your classes also use DependencyInjection and are created from code which uses DI. Then, just put a dependency on the new ToSic.Eav.DataSources.DataSourceFactory to get the same functionality. Shortlink to here: https://go.2sxc.org/brc-13-datasource"
  },
  "abyss/releases/history/v13/dnn-factory/index.html": {
    "href": "abyss/releases/history/v13/dnn-factory/index.html",
    "title": "Fix Breaking Change Static Dnn Factory in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Static Dnn Factory in v13 Keywords: #Deprecated #Factory #Build #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. The ToSic.Sxc.Dnn.Factory.[various]() are being deprecated, and will be removed in v14. Reason for Removal 2sxc used to be the first and only Module in Dnn which supported Dependency Injection, so there was a need to patch this in somehow. The solution we used was to have static object ToSic.Sxc.Dnn.Factory which managed this, but this is actually bad practice and encourages bad code. This was mainly used in WebForms, specifically Skins/Themes to access 2sxc data, but we've created a much better replacement using: IDynamicCodeService IRenderService History - How it Used to Work Previously you could write code like this in your ascx Theme: <%@ Import Namespace=\"System.Linq\" %> <script runat=\"server\"> public string OldFactoryUse() { var appId = 6; var app = ToSic.Sxc.Dnn.Factory.App(appId); var questions = app.Data[\"Question\"]; var title = questions.First().GetBestValue(\"EntityTitle\"); return \"Questions: \" + questions.Count() + \": First Title:\" + title; } public string OldRender() { var pageId = 21; var moduleId = 380; var block = ToSic.Sxc.Dnn.Factory.CmsBlock(pageId, moduleId); var result = block.Render(); return result; } public string OldDynamicCode() { var pageId = 21; var moduleId = 380; var blockBuilder = ToSic.Sxc.Dnn.Factory.CmsBlock(pageId, moduleId); var dynCode = ToSic.Sxc.Dnn.Factory.DynamicCode(blockBuilder); var questions = dynCode.App.Data[\"Question\"]; var title = dynCode.AsDynamic(questions.First()).EntityTitle; return \"Questions: \" + questions.Count() + \": First Title:\" + title; } </script> What we Changed In 2sxc 13.00 we integrated our Dependency Injection with the Dnn 9.4+ built-in Dependency Injection. This allows you to get 2sxc services from DI. In 2sxc 13.02 we created the IDynamicCodeService which is a replacement for the old Factory. You must use this from now on. Reasons for Change The newer code may seem a bit more complex, but you'll see in the API docs that we've actually improved the API. The reason the code looks so messy is because Dnn doesn't fully embrace Dependency Injection yet, so to get it, you need that complex looking var codeSvc = HttpContext.Current.GetScope().ServiceProvider.GetService<IDynamicCodeService>(); We hope and believe that Dnn will improve on this soon. Upgrade to Newer functionality So the previous example would look like this: <%@ Import Namespace=\"System.Linq\" %> <%@ Import Namespace=\"DotNetNuke.Common.Extensions\" %> <%@ Import Namespace=\"Microsoft.Extensions.DependencyInjection\" %> <%@ Import Namespace=\"ToSic.Sxc.Services\" %> <script runat=\"server\"> public IServiceProvider ServiceProvider { get { return HttpContext.Current.GetScope().ServiceProvider; }} public string NewApp() { var codeSvc = ServiceProvider.GetService<IDynamicCodeService>(); var app = codeSvc.App(appId: 6); var questions = app.Data[\"Question\"]; var title = questions.First().GetBestValue(\"EntityTitle\"); return \"Questions: \" + questions.Count() + \": First Title:\" + title; } public string NewRender() { var renderSvc = ServiceProvider.GetService<IRenderService>(); var result = renderSvc.Module(pageId: 21, moduleId: 380); return result.ToString(); } public string NewDynamicCode() { var pageId = 21; var moduleId = 380; var codeSvc = ServiceProvider.GetService<IDynamicCodeService>(); var dynCode = codeSvc.OfModule(pageId, moduleId); var questions = dynCode.App.Data[\"Question\"]; var title = dynCode.AsDynamic(questions.First()).EntityTitle; return \"Questions: \" + questions.Count() + \": First Title:\" + title; } </script> If you were using this from outside of 2sxc Razor / WebApi, you will need to use the Dnn specific DependencyInjection (available in Dnn 9.4+). History Introduced in 2sxc 7 with Dependency Injection based on .net Standard 1.6 Deprecated in 2sxc 13 with the integration of Dnn 9.4 DI Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://go.2sxc.org/brc-13-dnn-factory"
  },
  "abyss/releases/history/v13/eav-factory-startup/index.html": {
    "href": "abyss/releases/history/v13/eav-factory-startup/index.html",
    "title": "Fix Breaking Change Static EAV Factory StartUp in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Static EAV Factory StartUp in v13 Keywords: #Deprecated #Factory #Build #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. The ToSic.Eav.Factory.ActivateNetCoreDi(...) is removed and will not work any more. Reason for Removal 2sxc used to be the first and only Module in Dnn which supported Dependency Injection, so there was a need to patch this in somehow. ActivateNetCoreDi was used to register services startup, but caused issues in special cases. Upgrade to Newer functionality 2sxc 13 is now fully integrated in Dnn 9.4 DI, so registering services must use the Dnn Mechanisms for this - see Dnn Services. There is no alternative for Dnn 7, so you must either remain on an older 2sxc (v12 or lower) or upgrade to Dnn 9.4 or newer. History Introduced in 2sxc 7 with Dependency Injection based on .net Standard 1.6 It only ever worked in Dnn, Oqtane never had this feature Removed in 2sxc 13 with the integration of Dnn 9.4 DI - API still exits, but doesn't do anything except for log an error Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://go.2sxc.org/brc-13-eav-factory-startup"
  },
  "abyss/releases/history/v13/eav-factory/index.html": {
    "href": "abyss/releases/history/v13/eav-factory/index.html",
    "title": "Fix Breaking Change Static EAV Factory Resolve in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Static EAV Factory Resolve in v13 Keywords: #Deprecated #Factory #Build #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. The ToSic.Eav.Factory.Resolve<T>() is being deprecated, and will be removed in v14. In v13 it was moved to the Dnn DLL because it shoudn't be used anywhere else. Reason for Removal 2sxc used to be the first and only Module in Dnn which supported Dependency Injection, so there was a need to patch this in somehow. The solution we used was to have static object ToSic.Eav.Factory which managed this, but this is actually bad practice and encourages bad code. We believe this is rarely used, so we removed it. But it was in the official docs, so there may have been a few users who picked this up. History - How it Used to Work Previously you could write code like this in your Razor: var convertService = ToSic.Eav.Factory.Resolve<IConvertService>(); What we Changed In 2sxc 11.11 we introduced the GetService<T>() (e.g. docs) which takes care of this. Please use this from now on. The old API will be disabled disabled and will show an error pointing to this documentation. Upgrade to Newer functionality So the previous example would look like this: var convertService = GetService<IConvertService>(); If you were using this from outside of 2sxc Razor / WebApi, you will need to use the Dnn specific DependencyInjection (available in Dnn 9.4+). History Introduced in 2sxc 7 with Dependency Injection based on .net Standard 1.6 Deprecated in 2sxc 13 with the integration of Dnn 9.4 DI Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://go.2sxc.org/brc-13-eav-factory"
  },
  "abyss/releases/history/v13/ientity-links/index.html": {
    "href": "abyss/releases/history/v13/ientity-links/index.html",
    "title": "Fix Breaking Change Automatic Links in IEntity in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Automatic Links in IEntity in v13 Keywords: #Deprecated #IEntity #LinkConversion 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, features were removed which convert special file:... and page:... links on the IEntity: Important You are probably not affected This only affects special code calls which first get an IEntity and then uses the GetBestValue expecting the link to convert. Almost all Razor / WebApi code uses Dynamic Entities (with AsDynamic(...)), and these cases will continue to work as expected. Reason for Removal These features were removed because they relied on objects which need Dependency Injection, and calling this object directly cannot give us DI. These features were rarely used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work A long time ago we introduced the ability to store links like file:73 or page:42. At that time, we looked up the link in APIs of the cached object (the IEntity). This turned out to be a bad idea, because the cached object doesn't have access to the current Site information, which is needed to lookup these real links. What we Changed A long time ago we already ensured that the Dynamic Entity will do this lookup, and not rely on the inner APIs to do this. So all code which uses AsDynamic(...).SomeLinkProperty will always work as expected. But in rare cases you may have been getting the SomeLinkProperty from the IEntity. This will now not throw an error, but simply not lookup the link any more. So if you end up getting links like this, you are probably affected: <a href=\"file:74\">click here</a> Upgrade to Newer functionality Just make sure you always access the properties using the Dynamic Entity - so if you had an IEntity before, wrap it into AsDynamic(...) first. Shortlink to here: https://go.2sxc.org/brc-13-ientitylink"
  },
  "abyss/releases/history/v13/index.html": {
    "href": "abyss/releases/history/v13/index.html",
    "title": "All Changes in EAV and 2sxc v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v13 Version 13 TODO New WebApi route app/auto/data to replace /app/auto/content - the old one will still work, but we won't document it any more, because it was a confusing name Lots of metadata stuff... TODO: New sxc.data and sxc.query Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important: This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 13.01 JSON fields Link.Image with srcSet Parameter ? ToSic.Sxc.Services.IFeaturesService 13.02 JS Global Apps 13.03 TODO 13.04 TODO 13.05 Moved the Web.IInPageEditingHelper to Services.IEditService - this is non breaking and shouldn't matter, as people won't be using the direct inteface Moved the Web.ILinkHelper to Services.ILinkService - this is non breaking and shouldn't matter, as people won't be using the direct inteface 13.x 2022-Q1 ✅ Improve Tutorials massively ✅ View Metadata ✅ Oqtane Website Mode which can be indexed in Google ✅ Improve Feature-Management ✅ IFeaturesService ✅ Shared Apps across Sites (Patrons only feature) ✅ Enable editing of Shared Templates / files ✅ Enable shared APIs ✅ Disable translation of specific content-types ✅ Dnn Factory replacement to render module or get DynamicCode outside of 2sxc ✅ Fully integrate with Dnn Dependency Injection ✅ Improve DI Scopes to Module-Level ✅ IImageService 13.x LTS 2022-Q2 ✅ v13 LTS"
  },
  "abyss/releases/history/v13/instance-data/index.html": {
    "href": "abyss/releases/history/v13/instance-data/index.html",
    "title": "Fix Breaking Change InstanceData in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change InstanceData in v13 Keywords: #Deprecated #InstanceData 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, three features were removed: The ability to publish Module Instance Data directly The ability to configure this in the View settings The JS API which was optimized to process the resulting data in a fairly untypical way Reason for Removal These features were removed because they were almost never used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work 2sxc V3 (ca. 2013) introduced a feature where a Module could publish the data it was also showing on a normal screen as a WebApi / JSON call. It was required that a view activates this feature to ensure that it doesn't happen by accident. The settings in the view were like this (example from the TimelineJs App): Go to the view configuration The old deprecated settings Enable data publishing (which opened the data for JS) The streams which were to be published Note that the stream Default is still called Default today, but ListContent is usually called Header today. Once this was setup, there was a way to get this data through a WebApi call. From v3 to ca. v6 there was a call which actually went through the Dnn Page (so it was slow) V6 to ca. v11 it used a call to app-sys/AppContent/GetContentBlockData Later there was a special WebApi call to app/auto/InstanceData which did the same thing The format of the response was a bit special, specifically it looked like this (TimelineJs example): The call to InstanceData The data which was on a special List sub-object To complement this, there was a JS-API which worked as follows: // Process each Timeline DOM-element on the page $(\".timeline-embed\").each(function() { // Define our timeline element, get moduleId var timeLineElement = $(this); var sxc = $2sxc(this); // Load the data from the 2SexyContent module and define a callback sxc.data.on(\"load\", function (source, data) { processDataAndCreateTimeline(source, data, sxc.id, timeLineElement) }).load(); }); Specifically, it used a data.on call to kind of say: on load get the data from the current module. The resulting data was then used in the JS - for example like this in TimelineJS: // what should happen on loading of the data: function processDataAndCreateTimeline (data, moduleId, timeLineElement) { // Old code using the `in`, the `ListContent` and `.List[...]` stream var content = data.in.Default.List; var listContent = data.in.ListContent.List[0]; var timelineData = getTimelineData(moduleId, content, listContent); ... Upgrade to Newer functionality Tip Below you'll find instructions how to create the same functionality using Visual Query and newer JS APIs. But: In many cases you may actually want a different solution, because Visual Query is very powerful and may provide other ways to get you the data you need. Step 1: Create Query which Gets Instance Data This creates a Query API call which gets the same data as before, but in a newer API and newer standard. Create the Query - in our example we'll call it ModuleData After doing this, you have created a query which returns the same data as before, with 2 important differences: The stream ListContent is now called Header There are no permissions configured yet for anonymous users to access the query Step 2: Update the JS code to use the Query instead of the .data We have updated the TimelineJS code to use the new fetchJson api - see docs: // Process each Timeline DOM-element on the page $(\".timeline-embed\").each(function() { // Define our timeline element, get moduleId var timeLineElement = $(this); var sxc = $2sxc(this); // New version using fetch and the default Query we just created sxc.webApi.fetchJson('app/auto/query/ModuleData') .then((data) => processDataAndCreateTimeline(data, sxc.id, timeLineElement)); }); In addition, the data returned is a simpler. Specifically three things are now different: it doesn't have a level in it doesn't need the use .List in our new Query the Header is in a stream Header and not ListContent This would be the modified code in TimelineJs: function processDataAndCreateTimeline (data, moduleId, timeLineElement) { // Re-format streams that are contained in data var content = data.Default; var listContent = data.Header[0]; var timelineData = getTimelineData(moduleId, content, listContent); ... Step 3: Set Query Permissions After doing Step 1 & 2 you will have a working solution, but only super-users (host-users) can use the query because the read-permissions have not yet been configured. To configure them, use this checklist: Shortlink to here: https://go.2sxc.org/brc-13-id"
  },
  "abyss/releases/history/v13/sxc-static-render/index.html": {
    "href": "abyss/releases/history/v13/sxc-static-render/index.html",
    "title": "Fix Breaking Change Static Render in v13 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Static Render in v13 Keywords: #Deprecated #Render #Static #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. These two commands for rendering Inner Content are being deprecated and will be removed in v14. In v13 it was moved to the Dnn DLL because it shoudn't be used anywhere else. ToSic.SexyContent.ContentBlocks.One(...) ToSic.SexyContent.ContentBlocks.All(...) ToSic.Sxc.Blocks.Render.One(...) ToSic.Sxc.Blocks.Render.All(...) Reason for Removal 2sxc used to not have Dependency Injection so there were some static APIs which we provided. But this is bad practice and causes a lot of difficulty to keep everything working. The newer APIs use Services and Dependency Injection and do what they should. History - How it Used to Work Previously you could write code like this in your Razor: @using ToSic.Sxc.Blocks; // some code @Render.All(someEntity, field: \"AnswerInnerContent\", merge: someEntity.Answer) What we Changed In 2sxc 11.11 we introduced the GetService<T>() (e.g. docs) which provides proper DI. We also introduced a ToSic.Sxc.Services.IRenderService which should replace these commands - see docs. Please use this from now on. The old API will continue to work for a while but show errors in the insight. Upgrade to Newer functionality So the previous example would look like this: @using ToSic.Sxc.Services; // some code var renderSvc = GetService<IRenderService>(); @renderSvc.All(someEntity, field: \"AnswerInnerContent\", merge: someEntity.Answer) History Introduced ToSic.SexyContent.ContentBlocks ca. 2sxc 5 Introduced better name but still non-DI implementation called ToSic.Sxc.ContentBlocks ca. 2sxc 7 New IRenderService introduced in 2sxc 11 and 12 Deprecated in 2sxc 13 Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://go.2sxc.org/brc-13-static-render"
  },
  "abyss/releases/history/v14/_all14.html": {
    "href": "abyss/releases/history/v14/_all14.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v14 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V14 did some clean-up of internal APIs, but otherwise there are no known breaking changes. Note that these changes could be seen as a breaking change for certain users: Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08 All Changes V14 14.00 - 14.07.05 (2022-Q2 & 2022-Q3) Q2 ✅ Image-Service/Picture ✅ Image primary area / corner selector ✅ Patron features with licensing & payment system ✅ LightSpeed cache ✅ v14 Release ✅ DNN 9.6.1 only ✅ Formula Boost with many new features #1 ✅ DNN DI integration ✅ Update turnOn to 0.1.2 ✅ CSP for the site (DNN only ATM) ✅ Formula Boost #2 (more context info, features-infos, etc.) ✅ NPM Types updated to latest release ✅ Enterprise Features which will be availabe for bigger sponsors ✅ Patron-System, where sponsors of 2sxc get some extra features ✅ Standardize how to integrate into other systems (non-Dnn/Oqtane) ✅ Service Kits ✅ Deprecation System ✅ Toolbar Services v1 ✅ JS Docs updated to the latest version and auto-generated ✅ Tutorials Formulas ✅ Update all Apps to the lastest/greatest conventions ✅ v14 LTS Q3 ✅ Toolbars Service Improvements ✅ icon-metadata ✅ group C# API - ToolbarBuilder now has Group command ✅ SVG icons - Toolbar Buttons can now use SVGs for icons (usually base64 encoded) ✅ base64 ✅ ui multiple params ✅ bugfixes ✅ params multiple params ✅ array params ✅ Debug-logging on Oqtane client side code, bugfixing ca. 0.5d ✅ Change storage of app.xml to App_Data, change how import works and enable import-from-folder/git ✅ Clean up JS code, latest webpack, packages etc. ca. 1d ✅ Infrastructure for automated testing of JS - ca. 5d Apps / App Maintenance ✅ Update most apps which used ephemeral variables for formulas to just use parameters (new in v14) ca. 0.5d ✅ new Timeline Apps ✅ new Files App ✅ new Jobs ✅ Make many Apps backwards compatible with Bootstrap 3 for a big customer ✅ Have the core apps tested & optimized for WCAG for a government customer ✅ Re-release sxc-angular ✅ Remove dependency on SharpZipLib 14.09 - 14.12 (2022-10) ✅ Improve UI/Flow of system registration (ATM still confusing) ✅ Make sure edit-ui doesn't need material fonts from CDN for icons ✅ Create a new app.json configuration file for 2sxc apps to tune how export/import works ✅ Remove Newtonsoft JSON and migrate to System.Text.Json ✅ Improve handling of app-metadata (resources, settings) ✅ Enable init and import completely new app directly from folder/git copy 1d SDV ✅ Ability to sync Apps through git including the Assets and ADAM ✅ Improve handing feature details to edit-ui Data Sources New data source Users New data source Roles ✅ Update Imageflow to latest version ✅ Remove dependency on Newtonsoft - only use System.Text.Json ✅ Create https://schemas.2sxc.org for json schemas ✅ Create JSON Schemas for image recipe and app.json ✅ More formula tutorials how to call a WebAPI ✅ Security update System.Data.SqlClient ✅ Oqtane 2shine Theme release ✅ cre8magic v0.0.1 released 14.12.00 - 14.12.03 LTS (November 2022) ✅ Publish blazor-cms.org ✅ get a great page speed - 95%+ ✅ Get blazor-cms.org to index really well in google ✅ v14 LTS #2 ca. v14.12 \uD83D\uDE80 Important Changes Assembly Binding Issue on Installs from 2sxc 13.04 to 14.02 Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08 New app.json with Export Exclude v14.09"
  },
  "abyss/releases/history/v14/_brc14.html": {
    "href": "abyss/releases/history/v14/_brc14.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v14 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V14 did some clean-up of internal APIs, but otherwise there are no known breaking changes. Note that these changes could be seen as a breaking change for certain users: Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08"
  },
  "abyss/releases/history/v14/breaking.html": {
    "href": "abyss/releases/history/v14/breaking.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v14 Breaking Changes in EAV and 2sxc v14 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V14 did some clean-up of internal APIs, but otherwise there are no known breaking changes. Note that these changes could be seen as a breaking change for certain users: Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08"
  },
  "abyss/releases/history/v14/change-in-app-data-folder.html": {
    "href": "abyss/releases/history/v14/change-in-app-data-folder.html",
    "title": "Change in App Data Folder in v14.08 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Change in App Data Folder in v14.08 In older versions, App-State versioning saves and restores the app with data and configuration in [App-Folder]/.data/app.xml. That is useful for versioning using git (aka git-sync). What has changed The .data folder is renamed to the more protected App_Data. This means that in the following processes, this folder will now be used instead: App Export App Import App State Versioning It will always save / restore in this folder. If it finds the older folder, will migrate app.xml from the old .data folder to the new App_Data folder. See also \uD83D\uDC49\uD83C\uDFFB Change in App Zip Package in v14.08 Changed in v14.08"
  },
  "abyss/releases/history/v14/change-in-app-zip-package.html": {
    "href": "abyss/releases/history/v14/change-in-app-zip-package.html",
    "title": "Change in App Zip Package in v14.08 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Change in App Zip Package in v14.08 Apps which are exported to ZIP place all their data in a file called app.xml. We've changed where this file is located to make it identical with the better protected folder used in sync scenarios. What has changed Location of the app.xml file In previous versions, this ZIP file was located inside the zip in the folder Apps/[app-name]/app.xml. Starting from v14.08 it is located in Apps/[app-name]/2sexy/App_Data/app.xml. This is the same location as the one used for app-sync. Behavior on Export Previously export created this file in a temporary location and deleted it afterwards. Now the file is directly created in the App_Data folder. This makes it easier to export and also git-sync in the same steps. Behavior on Import App-Import will import app.xml from the old and new path. After import, the app folder will have an App_Data containing the imported state. Breaking Change This change makes the system more consistent, but also means that exported ZIPs cannot be imported into older versions of 2sxc. Workaround if you Need to Import in an Older Version Please manually modify the zip file. Copy file Apps/[app-name]/2sexy/App_Data/app.xml to Apps/[app-name]/app.xml. Changed in v14.08"
  },
  "abyss/releases/history/v14/export-exclude-in-app-json.html": {
    "href": "abyss/releases/history/v14/export-exclude-in-app-json.html",
    "title": "New app.json with Export Exclude | 2sxc 19 for Dnn and Oqtane",
    "keywords": "New app.json with Export Exclude In older versions, exported apps automatically excluded some folders such sa .git node_modules To allow more control (and also exclude folders such as .temp_cache of Webpack5) this is now configurable. The configuration is in [App-Folder]/App_Data/app.json. Here's a sample [App-Folder]/App_Data/app.json for 14.09+ { /* This is a JSON file but it is treated like a JSONC (with comments). Different editors may complain about the comments. To reconfigure VS Code so it knows comments are ok, do this: https://azing.org/2sxc/r/h9m1l6JO */ // Export-App configuration \"export\": { // Exclude certain folders/file beginning with the values specified below // Note that it may look like glob, but ATM it's a simpler starts-with mechanism \"exclude\": [ // Skip git versioning folders, github config folders \".git/\", \".github/\", // \".gitignore\", // Webpack 5 temporary folder and NPM folders \".temp_cache/\", \"node_modules/\" // Other examples // \".vs\", // \".vscode\", // \"package.json\", // \"package-lock.json\", // \"nuget.config\", ] } } Behavior if file is missing Without the file, the previous defaults will be applied. Behavior with the file With this file, all excludes must be mentioned. This includes node_modules if you don't want it in your export. Added in v14.09"
  },
  "abyss/releases/history/v14/index.html": {
    "href": "abyss/releases/history/v14/index.html",
    "title": "All Changes in EAV and 2sxc v14 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v14 Breaking Changes in EAV and 2sxc v14 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V14 did some clean-up of internal APIs, but otherwise there are no known breaking changes. Note that these changes could be seen as a breaking change for certain users: Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08 All Changes V14 14.00 - 14.07.05 (2022-Q2 & 2022-Q3) Q2 ✅ Image-Service/Picture ✅ Image primary area / corner selector ✅ Patron features with licensing & payment system ✅ LightSpeed cache ✅ v14 Release ✅ DNN 9.6.1 only ✅ Formula Boost with many new features #1 ✅ DNN DI integration ✅ Update turnOn to 0.1.2 ✅ CSP for the site (DNN only ATM) ✅ Formula Boost #2 (more context info, features-infos, etc.) ✅ NPM Types updated to latest release ✅ Enterprise Features which will be availabe for bigger sponsors ✅ Patron-System, where sponsors of 2sxc get some extra features ✅ Standardize how to integrate into other systems (non-Dnn/Oqtane) ✅ Service Kits ✅ Deprecation System ✅ Toolbar Services v1 ✅ JS Docs updated to the latest version and auto-generated ✅ Tutorials Formulas ✅ Update all Apps to the lastest/greatest conventions ✅ v14 LTS Q3 ✅ Toolbars Service Improvements ✅ icon-metadata ✅ group C# API - ToolbarBuilder now has Group command ✅ SVG icons - Toolbar Buttons can now use SVGs for icons (usually base64 encoded) ✅ base64 ✅ ui multiple params ✅ bugfixes ✅ params multiple params ✅ array params ✅ Debug-logging on Oqtane client side code, bugfixing ca. 0.5d ✅ Change storage of app.xml to App_Data, change how import works and enable import-from-folder/git ✅ Clean up JS code, latest webpack, packages etc. ca. 1d ✅ Infrastructure for automated testing of JS - ca. 5d Apps / App Maintenance ✅ Update most apps which used ephemeral variables for formulas to just use parameters (new in v14) ca. 0.5d ✅ new Timeline Apps ✅ new Files App ✅ new Jobs ✅ Make many Apps backwards compatible with Bootstrap 3 for a big customer ✅ Have the core apps tested & optimized for WCAG for a government customer ✅ Re-release sxc-angular ✅ Remove dependency on SharpZipLib 14.09 - 14.12 (2022-10) ✅ Improve UI/Flow of system registration (ATM still confusing) ✅ Make sure edit-ui doesn't need material fonts from CDN for icons ✅ Create a new app.json configuration file for 2sxc apps to tune how export/import works ✅ Remove Newtonsoft JSON and migrate to System.Text.Json ✅ Improve handling of app-metadata (resources, settings) ✅ Enable init and import completely new app directly from folder/git copy 1d SDV ✅ Ability to sync Apps through git including the Assets and ADAM ✅ Improve handing feature details to edit-ui Data Sources New data source Users New data source Roles ✅ Update Imageflow to latest version ✅ Remove dependency on Newtonsoft - only use System.Text.Json ✅ Create https://schemas.2sxc.org for json schemas ✅ Create JSON Schemas for image recipe and app.json ✅ More formula tutorials how to call a WebAPI ✅ Security update System.Data.SqlClient ✅ Oqtane 2shine Theme release ✅ cre8magic v0.0.1 released 14.12.00 - 14.12.03 LTS (November 2022) ✅ Publish blazor-cms.org ✅ get a great page speed - 95%+ ✅ Get blazor-cms.org to index really well in google ✅ v14 LTS #2 ca. v14.12 \uD83D\uDE80 Important Changes Assembly Binding Issue on Installs from 2sxc 13.04 to 14.02 Change in App Zip Package in v14.08 v14.08 Change in App Data Folder in v14.08 v14.08 New app.json with Export Exclude v14.09"
  },
  "abyss/releases/history/v14/issue-assembly-binding.html": {
    "href": "abyss/releases/history/v14/issue-assembly-binding.html",
    "title": "Assembly Binding Issue on Installs from 2sxc 13.04 to 14.02 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Assembly Binding Issue on Installs from 2sxc 13.04 to 14.02 2sxc 13.04 up until v14.02 had a bug where the assembly bindings in web.config wasn't done correctly. The result is, that many bindings were added repeatedly. Issue is fixed in v14.03. The problems: the web.config grows to be very large future upgrades of 2sxc which need to modify the bindings could end up modifying a binding, but other unmodified bindings could take precedence third party modules which also modify assembly bindings could modify the wrong bindings The following bindings were added repeatedly: <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Configuration.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Configuration.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Logging.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Logging.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Primitives\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Primitives.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Memory\" publicKeyToken=\"cc7b13ffcd2ddd51\" /> <codeBase version=\"4.0.1.1\" href=\"bin\\Imageflow\\System.Memory.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Numerics.Vectors\" publicKeyToken=\"b03f5f7f11d50a3a\" /> <codeBase version=\"4.1.4.0\" href=\"bin\\Imageflow\\System.Numerics.Vectors.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" /> <codeBase version=\"4.0.4.1\" href=\"bin\\Imageflow\\System.Runtime.CompilerServices.Unsafe.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.DependencyInjection.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.DependencyInjection\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.DependencyInjection.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.FileProviders.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Hosting.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Hosting.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> This assemblyBinding fragment can be repeated many times, depending on the amount of times you upgraded 2sxc (since v13.04 till v14.02), what DNN version you're using and what 3rd party modules you have. While testing this issue, we did not noticed anything that is breaking dnn and 2sxc because .NET Framework will follow only first occurrence of assembly binding for specified assembly in web.config. From functional point of view, second and any other assembly binding for the same specified assembly will be ignored by .NET Framework. Still it is not nice to have unnecessary assembly binding copies in web.config. For v13.04-v14.02. recommendation is that you manually remove unnecessary bindings in web.config to keep it clean. Upgrade to v14.03 (or latter version) will auto-fix this. Am I affected? You are affected, if you see multiple copies of following XML fragments in your web.config, eg: ... <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> ... <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> ... <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> How to Clean Do the following: Backup web.config. Search for first occurrence of... <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> ...that is followed by list of unnecessary duplicate assembly bindings, started with duplicate... <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Configuration.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Configuration.Abstractions.dll\" /> </dependentAssembly> ...ending with duplicate... <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> Select and remove all duplicate assembly bindings fragments. Second (and any other) copy of this fragment is unnecessary. <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Configuration.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Configuration.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Logging.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Logging.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Primitives\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Primitives.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Memory\" publicKeyToken=\"cc7b13ffcd2ddd51\" /> <codeBase version=\"4.0.1.1\" href=\"bin\\Imageflow\\System.Memory.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Numerics.Vectors\" publicKeyToken=\"b03f5f7f11d50a3a\" /> <codeBase version=\"4.1.4.0\" href=\"bin\\Imageflow\\System.Numerics.Vectors.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" /> <codeBase version=\"4.0.4.1\" href=\"bin\\Imageflow\\System.Runtime.CompilerServices.Unsafe.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.DependencyInjection.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.DependencyInjection\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.DependencyInjection.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.FileProviders.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Hosting.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Hosting.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> YouTube video: How to manually remove duplicate assembly bindings? Ensure that you have only one list of this bindings in web.config. Save web.config and test dnn that is working."
  },
  "abyss/releases/history/v15/_all15.html": {
    "href": "abyss/releases/history/v15/_all15.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 15 2sxc v15.00 (2022-12-23) ✅ Improve logging ✅ Place it in an own library DLL for better reuse ✅ Create ICodeLog for improve logging in Razor and WebApi which ensures compatibility with existing code ✅ Improve automatic connecting logs with helpers so most Init(Log) become obsolete ✅ Update CsvHelper DLL to latest version ✅ Improve install-file names ✅ Update to Razor Blade 4 ✅ Support Oqtane v4 with .net 7 - ATM Oqtane doesn't plan on going to .net 7 ✅ Tutorial App ✅ Improve internal structure ✅ Change how to show code vs results - mostly use tabs ✅ Razor APIs and Services ✅ Improve ImageService to have an imgAltFallback on .Img(), .Picture() and .ImgOrPic() ✅ Improve ImageService to better respect multi-language crop-settings and labels ✅ Improve Page service Parameters.Set(...) to also allow bool, int etc. (not just strings) ✅ Create Kit.HtmlTag ✅ Create ITurnOnService and Kit.Page.TurnOn(...) ✅ Data Sources ✅ Improve ValuFilter Data Source to also allow Contains on numbers ✅ DB Clean-Up ✅ Remove SQL triggers which log XML data to DataTimeline which isn't used any more ✅ Remove XML column NewData in DataTimeline which isn't used any more ✅ Internal APIs ✅ Improve Settings/Resources Stack with various unit tests ✅ Improve Settings/Resources Stack to have internal quick access to deep objects using a path like \"Images.Content.Width\" ✅ Create API DependenciesBase to better handle log attachments to dependencies ✅ TinyMCE upgrade to v6 ✅ Drop _ prefix requirement on cshtml files by protecting them in an another manner ✅ It's not needed on Oqtane, as the files are not accessible ✅ Only needed ATM on DNN because each file could be called from the browser directly ✅ Probably make sure all base classes refuse to render standalone ✅ Ability to use compressed GZIP data for DataTimeline (patrons) ✅ Technical features ✅ Toggle to turn on/off ✅ Rename internal .data folder to App_Data/system and similar as this folder will contain private data in future ✅ Feature to deploy a corporate license in an installation to auto-enable certain features on all sites ✅ Settings: Ability to augment the preset configuration / settings with custom overrides ✅ Provide Google Services API Keys (Maps, Translate) from backend to edit UI ✅ Ability to set own default GPS coordinates for when not set ✅ Ability to configure them in settings ✅ Provide Default maps coordinates from backend to Edit UI ✅ Ability to import apps from folder directly (patrons) ✅ Functionality ✅ Hints / Infos to user ⏳ Documentation ✅ Integration of Google Translate in the Edit UI ✅ Functionality for one field ✅ For many fields ✅ Configure so it only affects string fields ✅ Ability to disable auto-translate on certain fields - eg. name fields ✅ Ability to add custom API key ✅ Clear warning when using the demo key ✅ Make sure the license is respected and easy to spot ⏳ Documentation for this (how the fields are selected, how to activate, etc.) ✅ Release v15 before XMas Breaking Changes in 2sxc 15.00 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: If you have a custom DataSource, you will need to make some minor changes and recompile them If you used special, non-public Logging APIs you would need to update your work If you used any undocumented APIs, you will need to check if everything still works API Changes that may affect you DataSource base class was completely refactored see instructions Old static ToSic.Eav.DataSource was removed (deprecated since v13) Internal logging API ILog was completely refactored see instructions Internal object wrappers were completely refactored see instructions TinyMCE Upgrade to v6 Database changes Minor API changes Breaking Updates which probably don't affect anybody SQL changes - minor updates to the Database Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 2sxc v15.01 (2023-01-31) ✅ Export / Import ✅ Create export bundle configuration to mark content-types and entities for export together ✅ Create json bundle export system ✅ Create json bundle import system ✅ Extend the file-based data loader to also load bundles ✅ Change all pre-loaded data items to be in bundles ✅ New Auto-Installer with search, list-view etc. ✅ Remaining docs for Features released in v15.00 ✅ Finish API and docs for Logging v15.01 ✅ Ability to import apps from folder directly (patrons) ✅ Documentation for google translate (how the fields are selected, how to activate, etc.) ✅ Indicate premium/patron features in UI and explain what it is and how to get it ✅ Visual indicators on buttons ✅ Visual messages in certain places ✅ Details dialog to know more about the feature ✅ Public DB of the feature explaining it in more details, how to activate etc. on https://patrons.2sxc.org/features ✅ Licenses / Features ✅ Ability to license a specific feature only (for enterprise customers) ✅ Feature to generate enterprise license fingerprints for enterprise distribution ✅ Allow parts of the license to expire earlier (for evaluation purpose) ✅ Internal / Data Management ✅ Ability to retrieve Entities for App, parent-App, global-App etc. for certain settings-pickers ✅ System query to retrieve such entities (need for Wysiwyg-functionality) ✅ Oqtane: fix compatibility so it works in Oqtane 3.3+ ✅ FIPS Compliance Note that the image resizer is not yet FIPS compliant, and it may take a while for it to become compliant ✅ Change Secure Data Service to be FIPS compliant ✅ Change System fingerprint to use FIPS compliant SHA256 ✅ Internal - re-org ApiKeys for UI to be in a better place ✅ Enhance Page DataSource with community requests 2sxc v15.02 (2023-02) This was a quick release, no changes to report ATM, they will be reported in v15.03 also done: ✅ Upgrade Blazor-CMS.org to use 2sxc 15.01 for real-life testing ✅ Create blog on Blazor-CMS.org ✅ Publish Tutorial in Blazor-CMS.org ✅ CSP Training at DNN Summit ✅ Image Perfectionist Training at DNN Summit 2sxc v15.03 (2023-02-21) ✅ APIs ✅ EntityId now has a OwnerId property ✅ Kit.Page.Activate(condition: bool, features: \"...\") ✅ move to .net 6 (and drop .net standard 2.0) - almost done, last tests ✅ Bugs ✅ RazorBlade json serialization https://github.com/2sic/2sxc/issues/2998 ✅ Support for use on DNN 404 pages ✅ Date was off in date-picker ✅ FIPS compliance on encryption APIs ✅ DataSources ✅ Pages DataSource ✅ Improve Pages DataSource with LinkTarget ✅ Improve Pages DataSource with internal ability to configure what to get ✅ Improve Pages DataSource to have a UI to configure what to get - @2dm ✅ Users DataSource Massively improved - with Roles and configurable ✅ Roles DataSource improved ✅ Internal - Rework Getting-Started Server to be latest and greatest @2ro ... and more see https://github.com/2sic/2sxc/releases Breaking Changes in 2sxc 15.03 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you An internal user property IUser.IsDesigner was renamed to IUser.IsSiteDeveloper An internal, deprecated user property IUser.IsAdmin was removed An internal, deprecated user property IUser.IsSuperUser was removed An internal property IUser.Guid was changed from Guid? to Guid The Users DataSource had a property called IncludeSystemAdmins which was changed from bool to string to allow for more options The Users DataSource had a property called RoleIds which returned a non-standard string-array. It has been removed, and the new Roles returns standard related entities. Removed static ToSic.Eav.Data.Build.Entity(...) method which was deprecated in v12 API Changes which should really not affect you These are internal APIs which we changed to make everything more immutable. They should never have been in use outside of the internal code. Changed IValue.Languages from IList to IEnumerable and made it immutable Change IEntity.Attributes from Dictionary<string, IAttribute> to IImmutableDictionary<string, IAttribute> as a step to later make it immutable Removed some old, probably never used APIs on IAttribute<T> such as IAttribute<T>[int[] languageIDs] IAttribute<T>[string] IAttribute<T>[string[]] IAttribute[string[] languageKeys] - was always marked as private Changed the type of Attribute.Type from string to ValueTypes to make it more strong-typed Removed the property Attribute.ControlledType which previously contained the ValueType 2sxc v15.04 (2023-03-22) ✅ Oqtane: Compatibility with Oqtane 15.04 ✅ Formula improvements ✅ Get App or global settings for formulas ✅ Better support for promises ✅ Ability to set the value of another field ✅ Intellisense on Formulas ✅ Cdn remapping to other cdn like cdn.2sxc.org or custom CDN ✅ Ability to remap all cdn urls to a different url ✅ New template CDN on https://cdn.2sxc.org ✅ New template repo for anybody that wants to create their own CDN or host on their path https://github.com/2sxc/cdn.2sxc.org New APIs for Data Sources finalized ✅ Public IDataFactory API ✅ Public IDataSourceFactory API ✅ Enhanced IDataSource API ✅ Prototype of live DataSources ✅ Make everything internal immutable ✅ Improve WYSIWYG ✅ Ability to select which \"mode\" the editor is in, affecting toolbars ✅ Allow selected mode to affect other things (like deny image-drop if in text-mode) ✅ Sections to better align images ✅ Use classes to determine size instead of styles ✅ WYSIWYG Images which auto-resize on the server based on size (eg 1/2 of the screen) ✅ New Data Sources and System Queries ✅ New Data Source Scopes ✅ New Query Scopes ✅ New Data Source MetadataTargetTypes ✅ New Query MetadataTargetTypes ✅ New DataSource Licenses - with state ✅ New Query Licenses ✅ New DataSource Features - with state ✅ New Query Features ✅ New DataSource Sites ✅ New Query Sites ✅ Improve data sources for Pages ✅ Query Improvements ✅ Allow edit/new to be done in a query-selector ✅ Get query to know if entity can be edited (based on AppId) ✅ We've renamed the system queries to have a much simpler name such as System.Sites which we'll make available to public use soon. ✅ New LookUp for Settings- and Resources-Stack - to use Settings and Resources ✅ Change internal key for Settings to MyConfiguration to avoid naming conflicts (breaking but probably no impact) ✅ Custom DataSources - breaking ✅ New IDataFactory API ✅ New RawEntity and IRawEntity API ✅ New API for data sources to make data generation easier ✅ Improved custom DataSources API ✅ New base class CustomDataSourceLight ✅ New base class CustomDataSourceAdvanced ✅ Error handling is now simpler / more standardized ✅ Jewels ✅ CmsContext.View now has a Path, PathShared, PhysicalPath and PhysicalPathShared property ✅ Page.Activate(...) now has a condition: true parameter which lets you only activate a feature if a condition is met ✅ Page.Parameters has new Get(name) and Get<type>(name) and Get(name, fallback: 7) APIs to make it easier to work with url parameters ✅ The Toolbar now has a new Info button which is used to show an info-bubble to the user or provide a help-link to somewhere. You'll soon see this in our standard apps to inform users about special cases such as \"why the toolbar isn't available on demo-data\" ✅ Bugs fixes ✅ 2sxc in DNN Skins on 404 pages https://github.com/2sic/2sxc/issues/2986 ✅ Issue with Mobius Forms in v15.03 Breaking Changes in 2sxc 15.06 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you on IEntity These were internal APIs which were not publicly documented, but may have been used by some developers. IEntity.GetDraft() was removed to ensure the entity is immutable IEntity.GetPublished() was removed to ensure the entity is immutable Note: GetDraft() and GetPublished() are still available on DynamicEntity in Razor and WebApi. They were only removed on IEntity. Renamed DataSources These data sources had uncommon names, and were renamed to be more consistent. We believe that they were only used in VisualQuery and not in code, so it should not affect you. CsvDataSource is now Csv SerializationConfiguration is now Serialization"
  },
  "abyss/releases/history/v15/_brc15.00.html": {
    "href": "abyss/releases/history/v15/_brc15.00.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in 2sxc 15.00 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: If you have a custom DataSource, you will need to make some minor changes and recompile them If you used special, non-public Logging APIs you would need to update your work If you used any undocumented APIs, you will need to check if everything still works API Changes that may affect you DataSource base class was completely refactored see instructions Old static ToSic.Eav.DataSource was removed (deprecated since v13) Internal logging API ILog was completely refactored see instructions Internal object wrappers were completely refactored see instructions TinyMCE Upgrade to v6 Database changes Minor API changes Breaking Updates which probably don't affect anybody SQL changes - minor updates to the Database Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...)"
  },
  "abyss/releases/history/v15/_brc15.03.html": {
    "href": "abyss/releases/history/v15/_brc15.03.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in 2sxc 15.03 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you An internal user property IUser.IsDesigner was renamed to IUser.IsSiteDeveloper An internal, deprecated user property IUser.IsAdmin was removed An internal, deprecated user property IUser.IsSuperUser was removed An internal property IUser.Guid was changed from Guid? to Guid The Users DataSource had a property called IncludeSystemAdmins which was changed from bool to string to allow for more options The Users DataSource had a property called RoleIds which returned a non-standard string-array. It has been removed, and the new Roles returns standard related entities. Removed static ToSic.Eav.Data.Build.Entity(...) method which was deprecated in v12 API Changes which should really not affect you These are internal APIs which we changed to make everything more immutable. They should never have been in use outside of the internal code. Changed IValue.Languages from IList to IEnumerable and made it immutable Change IEntity.Attributes from Dictionary<string, IAttribute> to IImmutableDictionary<string, IAttribute> as a step to later make it immutable Removed some old, probably never used APIs on IAttribute<T> such as IAttribute<T>[int[] languageIDs] IAttribute<T>[string] IAttribute<T>[string[]] IAttribute[string[] languageKeys] - was always marked as private Changed the type of Attribute.Type from string to ValueTypes to make it more strong-typed Removed the property Attribute.ControlledType which previously contained the ValueType"
  },
  "abyss/releases/history/v15/_brc15.06.html": {
    "href": "abyss/releases/history/v15/_brc15.06.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in 2sxc 15.06 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you on IEntity These were internal APIs which were not publicly documented, but may have been used by some developers. IEntity.GetDraft() was removed to ensure the entity is immutable IEntity.GetPublished() was removed to ensure the entity is immutable Note: GetDraft() and GetPublished() are still available on DynamicEntity in Razor and WebApi. They were only removed on IEntity. Renamed DataSources These data sources had uncommon names, and were renamed to be more consistent. We believe that they were only used in VisualQuery and not in code, so it should not affect you. CsvDataSource is now Csv SerializationConfiguration is now Serialization"
  },
  "abyss/releases/history/v15/_brc15.html": {
    "href": "abyss/releases/history/v15/_brc15.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v15 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 15.00 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: If you have a custom DataSource, you will need to make some minor changes and recompile them If you used special, non-public Logging APIs you would need to update your work If you used any undocumented APIs, you will need to check if everything still works API Changes that may affect you DataSource base class was completely refactored see instructions Old static ToSic.Eav.DataSource was removed (deprecated since v13) Internal logging API ILog was completely refactored see instructions Internal object wrappers were completely refactored see instructions TinyMCE Upgrade to v6 Database changes Minor API changes Breaking Updates which probably don't affect anybody SQL changes - minor updates to the Database Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) Breaking Changes in 2sxc 15.03 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you An internal user property IUser.IsDesigner was renamed to IUser.IsSiteDeveloper An internal, deprecated user property IUser.IsAdmin was removed An internal, deprecated user property IUser.IsSuperUser was removed An internal property IUser.Guid was changed from Guid? to Guid The Users DataSource had a property called IncludeSystemAdmins which was changed from bool to string to allow for more options The Users DataSource had a property called RoleIds which returned a non-standard string-array. It has been removed, and the new Roles returns standard related entities. Removed static ToSic.Eav.Data.Build.Entity(...) method which was deprecated in v12 API Changes which should really not affect you These are internal APIs which we changed to make everything more immutable. They should never have been in use outside of the internal code. Changed IValue.Languages from IList to IEnumerable and made it immutable Change IEntity.Attributes from Dictionary<string, IAttribute> to IImmutableDictionary<string, IAttribute> as a step to later make it immutable Removed some old, probably never used APIs on IAttribute<T> such as IAttribute<T>[int[] languageIDs] IAttribute<T>[string] IAttribute<T>[string[]] IAttribute[string[] languageKeys] - was always marked as private Changed the type of Attribute.Type from string to ValueTypes to make it more strong-typed Removed the property Attribute.ControlledType which previously contained the ValueType Breaking Changes in 2sxc 15.06 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you on IEntity These were internal APIs which were not publicly documented, but may have been used by some developers. IEntity.GetDraft() was removed to ensure the entity is immutable IEntity.GetPublished() was removed to ensure the entity is immutable Note: GetDraft() and GetPublished() are still available on DynamicEntity in Razor and WebApi. They were only removed on IEntity. Renamed DataSources These data sources had uncommon names, and were renamed to be more consistent. We believe that they were only used in VisualQuery and not in code, so it should not affect you. CsvDataSource is now Csv SerializationConfiguration is now Serialization"
  },
  "abyss/releases/history/v15/_changes15.00.html": {
    "href": "abyss/releases/history/v15/_changes15.00.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v15.00 (2022-12-23) ✅ Improve logging ✅ Place it in an own library DLL for better reuse ✅ Create ICodeLog for improve logging in Razor and WebApi which ensures compatibility with existing code ✅ Improve automatic connecting logs with helpers so most Init(Log) become obsolete ✅ Update CsvHelper DLL to latest version ✅ Improve install-file names ✅ Update to Razor Blade 4 ✅ Support Oqtane v4 with .net 7 - ATM Oqtane doesn't plan on going to .net 7 ✅ Tutorial App ✅ Improve internal structure ✅ Change how to show code vs results - mostly use tabs ✅ Razor APIs and Services ✅ Improve ImageService to have an imgAltFallback on .Img(), .Picture() and .ImgOrPic() ✅ Improve ImageService to better respect multi-language crop-settings and labels ✅ Improve Page service Parameters.Set(...) to also allow bool, int etc. (not just strings) ✅ Create Kit.HtmlTag ✅ Create ITurnOnService and Kit.Page.TurnOn(...) ✅ Data Sources ✅ Improve ValuFilter Data Source to also allow Contains on numbers ✅ DB Clean-Up ✅ Remove SQL triggers which log XML data to DataTimeline which isn't used any more ✅ Remove XML column NewData in DataTimeline which isn't used any more ✅ Internal APIs ✅ Improve Settings/Resources Stack with various unit tests ✅ Improve Settings/Resources Stack to have internal quick access to deep objects using a path like \"Images.Content.Width\" ✅ Create API DependenciesBase to better handle log attachments to dependencies ✅ TinyMCE upgrade to v6 ✅ Drop _ prefix requirement on cshtml files by protecting them in an another manner ✅ It's not needed on Oqtane, as the files are not accessible ✅ Only needed ATM on DNN because each file could be called from the browser directly ✅ Probably make sure all base classes refuse to render standalone ✅ Ability to use compressed GZIP data for DataTimeline (patrons) ✅ Technical features ✅ Toggle to turn on/off ✅ Rename internal .data folder to App_Data/system and similar as this folder will contain private data in future ✅ Feature to deploy a corporate license in an installation to auto-enable certain features on all sites ✅ Settings: Ability to augment the preset configuration / settings with custom overrides ✅ Provide Google Services API Keys (Maps, Translate) from backend to edit UI ✅ Ability to set own default GPS coordinates for when not set ✅ Ability to configure them in settings ✅ Provide Default maps coordinates from backend to Edit UI ✅ Ability to import apps from folder directly (patrons) ✅ Functionality ✅ Hints / Infos to user ⏳ Documentation ✅ Integration of Google Translate in the Edit UI ✅ Functionality for one field ✅ For many fields ✅ Configure so it only affects string fields ✅ Ability to disable auto-translate on certain fields - eg. name fields ✅ Ability to add custom API key ✅ Clear warning when using the demo key ✅ Make sure the license is respected and easy to spot ⏳ Documentation for this (how the fields are selected, how to activate, etc.) ✅ Release v15 before XMas"
  },
  "abyss/releases/history/v15/_changes15.01.html": {
    "href": "abyss/releases/history/v15/_changes15.01.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v15.01 (2023-01-31) ✅ Export / Import ✅ Create export bundle configuration to mark content-types and entities for export together ✅ Create json bundle export system ✅ Create json bundle import system ✅ Extend the file-based data loader to also load bundles ✅ Change all pre-loaded data items to be in bundles ✅ New Auto-Installer with search, list-view etc. ✅ Remaining docs for Features released in v15.00 ✅ Finish API and docs for Logging v15.01 ✅ Ability to import apps from folder directly (patrons) ✅ Documentation for google translate (how the fields are selected, how to activate, etc.) ✅ Indicate premium/patron features in UI and explain what it is and how to get it ✅ Visual indicators on buttons ✅ Visual messages in certain places ✅ Details dialog to know more about the feature ✅ Public DB of the feature explaining it in more details, how to activate etc. on https://patrons.2sxc.org/features ✅ Licenses / Features ✅ Ability to license a specific feature only (for enterprise customers) ✅ Feature to generate enterprise license fingerprints for enterprise distribution ✅ Allow parts of the license to expire earlier (for evaluation purpose) ✅ Internal / Data Management ✅ Ability to retrieve Entities for App, parent-App, global-App etc. for certain settings-pickers ✅ System query to retrieve such entities (need for Wysiwyg-functionality) ✅ Oqtane: fix compatibility so it works in Oqtane 3.3+ ✅ FIPS Compliance Note that the image resizer is not yet FIPS compliant, and it may take a while for it to become compliant ✅ Change Secure Data Service to be FIPS compliant ✅ Change System fingerprint to use FIPS compliant SHA256 ✅ Internal - re-org ApiKeys for UI to be in a better place ✅ Enhance Page DataSource with community requests"
  },
  "abyss/releases/history/v15/_changes15.02.html": {
    "href": "abyss/releases/history/v15/_changes15.02.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v15.02 (2023-02) This was a quick release, no changes to report ATM, they will be reported in v15.03 also done: ✅ Upgrade Blazor-CMS.org to use 2sxc 15.01 for real-life testing ✅ Create blog on Blazor-CMS.org ✅ Publish Tutorial in Blazor-CMS.org ✅ CSP Training at DNN Summit ✅ Image Perfectionist Training at DNN Summit"
  },
  "abyss/releases/history/v15/_changes15.03.html": {
    "href": "abyss/releases/history/v15/_changes15.03.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v15.03 (2023-02-21) ✅ APIs ✅ EntityId now has a OwnerId property ✅ Kit.Page.Activate(condition: bool, features: \"...\") ✅ move to .net 6 (and drop .net standard 2.0) - almost done, last tests ✅ Bugs ✅ RazorBlade json serialization https://github.com/2sic/2sxc/issues/2998 ✅ Support for use on DNN 404 pages ✅ Date was off in date-picker ✅ FIPS compliance on encryption APIs ✅ DataSources ✅ Pages DataSource ✅ Improve Pages DataSource with LinkTarget ✅ Improve Pages DataSource with internal ability to configure what to get ✅ Improve Pages DataSource to have a UI to configure what to get - @2dm ✅ Users DataSource Massively improved - with Roles and configurable ✅ Roles DataSource improved ✅ Internal - Rework Getting-Started Server to be latest and greatest @2ro ... and more see https://github.com/2sic/2sxc/releases"
  },
  "abyss/releases/history/v15/_changes15.04.html": {
    "href": "abyss/releases/history/v15/_changes15.04.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v15.04 (2023-03-22) ✅ Oqtane: Compatibility with Oqtane 15.04 ✅ Formula improvements ✅ Get App or global settings for formulas ✅ Better support for promises ✅ Ability to set the value of another field ✅ Intellisense on Formulas ✅ Cdn remapping to other cdn like cdn.2sxc.org or custom CDN ✅ Ability to remap all cdn urls to a different url ✅ New template CDN on https://cdn.2sxc.org ✅ New template repo for anybody that wants to create their own CDN or host on their path https://github.com/2sxc/cdn.2sxc.org New APIs for Data Sources finalized ✅ Public IDataFactory API ✅ Public IDataSourceFactory API ✅ Enhanced IDataSource API ✅ Prototype of live DataSources ✅ Make everything internal immutable ✅ Improve WYSIWYG ✅ Ability to select which \"mode\" the editor is in, affecting toolbars ✅ Allow selected mode to affect other things (like deny image-drop if in text-mode) ✅ Sections to better align images ✅ Use classes to determine size instead of styles ✅ WYSIWYG Images which auto-resize on the server based on size (eg 1/2 of the screen) ✅ New Data Sources and System Queries ✅ New Data Source Scopes ✅ New Query Scopes ✅ New Data Source MetadataTargetTypes ✅ New Query MetadataTargetTypes ✅ New DataSource Licenses - with state ✅ New Query Licenses ✅ New DataSource Features - with state ✅ New Query Features ✅ New DataSource Sites ✅ New Query Sites ✅ Improve data sources for Pages ✅ Query Improvements ✅ Allow edit/new to be done in a query-selector ✅ Get query to know if entity can be edited (based on AppId) ✅ We've renamed the system queries to have a much simpler name such as System.Sites which we'll make available to public use soon. ✅ New LookUp for Settings- and Resources-Stack - to use Settings and Resources ✅ Change internal key for Settings to MyConfiguration to avoid naming conflicts (breaking but probably no impact) ✅ Custom DataSources - breaking ✅ New IDataFactory API ✅ New RawEntity and IRawEntity API ✅ New API for data sources to make data generation easier ✅ Improved custom DataSources API ✅ New base class CustomDataSourceLight ✅ New base class CustomDataSourceAdvanced ✅ Error handling is now simpler / more standardized ✅ Jewels ✅ CmsContext.View now has a Path, PathShared, PhysicalPath and PhysicalPathShared property ✅ Page.Activate(...) now has a condition: true parameter which lets you only activate a feature if a condition is met ✅ Page.Parameters has new Get(name) and Get<type>(name) and Get(name, fallback: 7) APIs to make it easier to work with url parameters ✅ The Toolbar now has a new Info button which is used to show an info-bubble to the user or provide a help-link to somewhere. You'll soon see this in our standard apps to inform users about special cases such as \"why the toolbar isn't available on demo-data\" ✅ Bugs fixes ✅ 2sxc in DNN Skins on 404 pages https://github.com/2sic/2sxc/issues/2986 ✅ Issue with Mobius Forms in v15.03"
  },
  "abyss/releases/history/v15/breaking.html": {
    "href": "abyss/releases/history/v15/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc 15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc 15 Breaking Changes in EAV and 2sxc v15 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 15.00 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: If you have a custom DataSource, you will need to make some minor changes and recompile them If you used special, non-public Logging APIs you would need to update your work If you used any undocumented APIs, you will need to check if everything still works API Changes that may affect you DataSource base class was completely refactored see instructions Old static ToSic.Eav.DataSource was removed (deprecated since v13) Internal logging API ILog was completely refactored see instructions Internal object wrappers were completely refactored see instructions TinyMCE Upgrade to v6 Database changes Minor API changes Breaking Updates which probably don't affect anybody SQL changes - minor updates to the Database Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) Breaking Changes in 2sxc 15.03 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you An internal user property IUser.IsDesigner was renamed to IUser.IsSiteDeveloper An internal, deprecated user property IUser.IsAdmin was removed An internal, deprecated user property IUser.IsSuperUser was removed An internal property IUser.Guid was changed from Guid? to Guid The Users DataSource had a property called IncludeSystemAdmins which was changed from bool to string to allow for more options The Users DataSource had a property called RoleIds which returned a non-standard string-array. It has been removed, and the new Roles returns standard related entities. Removed static ToSic.Eav.Data.Build.Entity(...) method which was deprecated in v12 API Changes which should really not affect you These are internal APIs which we changed to make everything more immutable. They should never have been in use outside of the internal code. Changed IValue.Languages from IList to IEnumerable and made it immutable Change IEntity.Attributes from Dictionary<string, IAttribute> to IImmutableDictionary<string, IAttribute> as a step to later make it immutable Removed some old, probably never used APIs on IAttribute<T> such as IAttribute<T>[int[] languageIDs] IAttribute<T>[string] IAttribute<T>[string[]] IAttribute[string[] languageKeys] - was always marked as private Changed the type of Attribute.Type from string to ValueTypes to make it more strong-typed Removed the property Attribute.ControlledType which previously contained the ValueType Breaking Changes in 2sxc 15.06 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you on IEntity These were internal APIs which were not publicly documented, but may have been used by some developers. IEntity.GetDraft() was removed to ensure the entity is immutable IEntity.GetPublished() was removed to ensure the entity is immutable Note: GetDraft() and GetPublished() are still available on DynamicEntity in Razor and WebApi. They were only removed on IEntity. Renamed DataSources These data sources had uncommon names, and were renamed to be more consistent. We believe that they were only used in VisualQuery and not in code, so it should not affect you. CsvDataSource is now Csv SerializationConfiguration is now Serialization"
  },
  "abyss/releases/history/v15/database/index.html": {
    "href": "abyss/releases/history/v15/database/index.html",
    "title": "Fix Breaking Change Database Clean-Up in v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Database Clean-Up in v15 Keywords: #EAV #Database 2sxc clean up some historical things in the DB which were obsolete: ToSicEavAttributeGroups.SortOrder field was removed ToSicEavEntities.SortOrder was removed AttributeSet.Description was removed ToSIC_EAV_DataTimeline.NewData was removed Obsolete SQL-triggers which created data to the ToSIC_EAV_DataTimeline were removed Note that the IContentType.Description in the API was also removed."
  },
  "abyss/releases/history/v15/datasource/index.html": {
    "href": "abyss/releases/history/v15/datasource/index.html",
    "title": "Fix Breaking Change DataSource in v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change DataSource in v15 Keywords: #DataSource #CustomDataSource 2sxc/EAV has a powerful extension system called DataSource which allows you to create new data providers. We completely reworked object hierarchy and Dependency Injection. Because of this, any custom DataSource will have to be adjusted and recompiled. Reason for Change The DataSource concept was created in times before Dependency Injection. This means that the architecture was very problematic, and we had a lot of hacky implementations to make it work. History - How it Used to Work Previously all DataSources inherited from ToSic.Eav.DataSources.DataSourceBase ToSic.Eav.DataSources.ExternalData ...from another data source These had empty constructors, so your DataSource could also have an empty constructor. Internally it still needed some helper objects which were only available because a special factory added them later on. What we Changed 1. Base Class with Parameters in Constructor The base class was renamed to ToSic.Eav.DataSources.DataSource The base class now always expects 2 parameters in the constructor Dependencies dependencies - type TODO string logName - for any messages which appear in Insights To make this work, any inheriting class must implement a minimal constructor like this: class MyDataSource { // Constructor public MyDataSource(Dependencies dependencies): base(dependencies, $\"My.DataSc\") { //... } } 2. Changes in Logging If your DataSource does any logging, see also breaking changes in logging 3. Removed Old Base Classes Some old base classes may have still been in use, but because the code must be recompiled anyhow we decided to remove these. These are the classes and their replacement: ToSic.Eav.DataSources.BaseDataSource - > DataSource ToSic.Eav.DataSources.DataTableDataSource -> ToSic.Eav.DataSources.DataTable ToSic.Eav.DataSources.ExternalDataDataSource: ToSic.Eav.DataSources.ExternalData ToSic.Eav.DataSources.SqlDataSource: ToSic.Eav.DataSources.Sql Also ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute -> DataSources.Queries.VisualQueryAttribute 4. Changes in Provide signature Previously there were many Provide(...) methods but we reduced it to 2 and renamed to ProvideOut for better readability. Now you should use: ProvideOut(function) or the named stream ProvideOut(function, \"MyStream\") Where function can be () => IEnumerable<IEntity> () => IImmutableList<IEntity> They will behave the same, but providing an IImmutableList is slightly more performant. 5. Changes in how Configuration is retrieved Now it uses the attribute [Configuration] and Configuration.GetThis() and Configuration.SetThis(value). 6. Changes in VisualQuery attribute GlobalName is now NameId PreviousNames is now NameIds 7. Changes in Error handling Use TryGetIn() to see if an in-stream exists and get the data TODO: History Introduced ca. 2sxc 5 Completely reworked in 2sxc/eav 15"
  },
  "abyss/releases/history/v15/index.html": {
    "href": "abyss/releases/history/v15/index.html",
    "title": "All Changes in EAV and 2sxc v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v15 Version 15 2sxc v15.00 (2022-12-23) ✅ Improve logging ✅ Place it in an own library DLL for better reuse ✅ Create ICodeLog for improve logging in Razor and WebApi which ensures compatibility with existing code ✅ Improve automatic connecting logs with helpers so most Init(Log) become obsolete ✅ Update CsvHelper DLL to latest version ✅ Improve install-file names ✅ Update to Razor Blade 4 ✅ Support Oqtane v4 with .net 7 - ATM Oqtane doesn't plan on going to .net 7 ✅ Tutorial App ✅ Improve internal structure ✅ Change how to show code vs results - mostly use tabs ✅ Razor APIs and Services ✅ Improve ImageService to have an imgAltFallback on .Img(), .Picture() and .ImgOrPic() ✅ Improve ImageService to better respect multi-language crop-settings and labels ✅ Improve Page service Parameters.Set(...) to also allow bool, int etc. (not just strings) ✅ Create Kit.HtmlTag ✅ Create ITurnOnService and Kit.Page.TurnOn(...) ✅ Data Sources ✅ Improve ValuFilter Data Source to also allow Contains on numbers ✅ DB Clean-Up ✅ Remove SQL triggers which log XML data to DataTimeline which isn't used any more ✅ Remove XML column NewData in DataTimeline which isn't used any more ✅ Internal APIs ✅ Improve Settings/Resources Stack with various unit tests ✅ Improve Settings/Resources Stack to have internal quick access to deep objects using a path like \"Images.Content.Width\" ✅ Create API DependenciesBase to better handle log attachments to dependencies ✅ TinyMCE upgrade to v6 ✅ Drop _ prefix requirement on cshtml files by protecting them in an another manner ✅ It's not needed on Oqtane, as the files are not accessible ✅ Only needed ATM on DNN because each file could be called from the browser directly ✅ Probably make sure all base classes refuse to render standalone ✅ Ability to use compressed GZIP data for DataTimeline (patrons) ✅ Technical features ✅ Toggle to turn on/off ✅ Rename internal .data folder to App_Data/system and similar as this folder will contain private data in future ✅ Feature to deploy a corporate license in an installation to auto-enable certain features on all sites ✅ Settings: Ability to augment the preset configuration / settings with custom overrides ✅ Provide Google Services API Keys (Maps, Translate) from backend to edit UI ✅ Ability to set own default GPS coordinates for when not set ✅ Ability to configure them in settings ✅ Provide Default maps coordinates from backend to Edit UI ✅ Ability to import apps from folder directly (patrons) ✅ Functionality ✅ Hints / Infos to user ⏳ Documentation ✅ Integration of Google Translate in the Edit UI ✅ Functionality for one field ✅ For many fields ✅ Configure so it only affects string fields ✅ Ability to disable auto-translate on certain fields - eg. name fields ✅ Ability to add custom API key ✅ Clear warning when using the demo key ✅ Make sure the license is respected and easy to spot ⏳ Documentation for this (how the fields are selected, how to activate, etc.) ✅ Release v15 before XMas Breaking Changes in 2sxc 15.00 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: If you have a custom DataSource, you will need to make some minor changes and recompile them If you used special, non-public Logging APIs you would need to update your work If you used any undocumented APIs, you will need to check if everything still works API Changes that may affect you DataSource base class was completely refactored see instructions Old static ToSic.Eav.DataSource was removed (deprecated since v13) Internal logging API ILog was completely refactored see instructions Internal object wrappers were completely refactored see instructions TinyMCE Upgrade to v6 Database changes Minor API changes Breaking Updates which probably don't affect anybody SQL changes - minor updates to the Database Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 2sxc v15.01 (2023-01-31) ✅ Export / Import ✅ Create export bundle configuration to mark content-types and entities for export together ✅ Create json bundle export system ✅ Create json bundle import system ✅ Extend the file-based data loader to also load bundles ✅ Change all pre-loaded data items to be in bundles ✅ New Auto-Installer with search, list-view etc. ✅ Remaining docs for Features released in v15.00 ✅ Finish API and docs for Logging v15.01 ✅ Ability to import apps from folder directly (patrons) ✅ Documentation for google translate (how the fields are selected, how to activate, etc.) ✅ Indicate premium/patron features in UI and explain what it is and how to get it ✅ Visual indicators on buttons ✅ Visual messages in certain places ✅ Details dialog to know more about the feature ✅ Public DB of the feature explaining it in more details, how to activate etc. on https://patrons.2sxc.org/features ✅ Licenses / Features ✅ Ability to license a specific feature only (for enterprise customers) ✅ Feature to generate enterprise license fingerprints for enterprise distribution ✅ Allow parts of the license to expire earlier (for evaluation purpose) ✅ Internal / Data Management ✅ Ability to retrieve Entities for App, parent-App, global-App etc. for certain settings-pickers ✅ System query to retrieve such entities (need for Wysiwyg-functionality) ✅ Oqtane: fix compatibility so it works in Oqtane 3.3+ ✅ FIPS Compliance Note that the image resizer is not yet FIPS compliant, and it may take a while for it to become compliant ✅ Change Secure Data Service to be FIPS compliant ✅ Change System fingerprint to use FIPS compliant SHA256 ✅ Internal - re-org ApiKeys for UI to be in a better place ✅ Enhance Page DataSource with community requests 2sxc v15.02 (2023-02) This was a quick release, no changes to report ATM, they will be reported in v15.03 also done: ✅ Upgrade Blazor-CMS.org to use 2sxc 15.01 for real-life testing ✅ Create blog on Blazor-CMS.org ✅ Publish Tutorial in Blazor-CMS.org ✅ CSP Training at DNN Summit ✅ Image Perfectionist Training at DNN Summit 2sxc v15.03 (2023-02-21) ✅ APIs ✅ EntityId now has a OwnerId property ✅ Kit.Page.Activate(condition: bool, features: \"...\") ✅ move to .net 6 (and drop .net standard 2.0) - almost done, last tests ✅ Bugs ✅ RazorBlade json serialization https://github.com/2sic/2sxc/issues/2998 ✅ Support for use on DNN 404 pages ✅ Date was off in date-picker ✅ FIPS compliance on encryption APIs ✅ DataSources ✅ Pages DataSource ✅ Improve Pages DataSource with LinkTarget ✅ Improve Pages DataSource with internal ability to configure what to get ✅ Improve Pages DataSource to have a UI to configure what to get - @2dm ✅ Users DataSource Massively improved - with Roles and configurable ✅ Roles DataSource improved ✅ Internal - Rework Getting-Started Server to be latest and greatest @2ro ... and more see https://github.com/2sic/2sxc/releases Breaking Changes in 2sxc 15.03 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you An internal user property IUser.IsDesigner was renamed to IUser.IsSiteDeveloper An internal, deprecated user property IUser.IsAdmin was removed An internal, deprecated user property IUser.IsSuperUser was removed An internal property IUser.Guid was changed from Guid? to Guid The Users DataSource had a property called IncludeSystemAdmins which was changed from bool to string to allow for more options The Users DataSource had a property called RoleIds which returned a non-standard string-array. It has been removed, and the new Roles returns standard related entities. Removed static ToSic.Eav.Data.Build.Entity(...) method which was deprecated in v12 API Changes which should really not affect you These are internal APIs which we changed to make everything more immutable. They should never have been in use outside of the internal code. Changed IValue.Languages from IList to IEnumerable and made it immutable Change IEntity.Attributes from Dictionary<string, IAttribute> to IImmutableDictionary<string, IAttribute> as a step to later make it immutable Removed some old, probably never used APIs on IAttribute<T> such as IAttribute<T>[int[] languageIDs] IAttribute<T>[string] IAttribute<T>[string[]] IAttribute[string[] languageKeys] - was always marked as private Changed the type of Attribute.Type from string to ValueTypes to make it more strong-typed Removed the property Attribute.ControlledType which previously contained the ValueType 2sxc v15.04 (2023-03-22) ✅ Oqtane: Compatibility with Oqtane 15.04 ✅ Formula improvements ✅ Get App or global settings for formulas ✅ Better support for promises ✅ Ability to set the value of another field ✅ Intellisense on Formulas ✅ Cdn remapping to other cdn like cdn.2sxc.org or custom CDN ✅ Ability to remap all cdn urls to a different url ✅ New template CDN on https://cdn.2sxc.org ✅ New template repo for anybody that wants to create their own CDN or host on their path https://github.com/2sxc/cdn.2sxc.org New APIs for Data Sources finalized ✅ Public IDataFactory API ✅ Public IDataSourceFactory API ✅ Enhanced IDataSource API ✅ Prototype of live DataSources ✅ Make everything internal immutable ✅ Improve WYSIWYG ✅ Ability to select which \"mode\" the editor is in, affecting toolbars ✅ Allow selected mode to affect other things (like deny image-drop if in text-mode) ✅ Sections to better align images ✅ Use classes to determine size instead of styles ✅ WYSIWYG Images which auto-resize on the server based on size (eg 1/2 of the screen) ✅ New Data Sources and System Queries ✅ New Data Source Scopes ✅ New Query Scopes ✅ New Data Source MetadataTargetTypes ✅ New Query MetadataTargetTypes ✅ New DataSource Licenses - with state ✅ New Query Licenses ✅ New DataSource Features - with state ✅ New Query Features ✅ New DataSource Sites ✅ New Query Sites ✅ Improve data sources for Pages ✅ Query Improvements ✅ Allow edit/new to be done in a query-selector ✅ Get query to know if entity can be edited (based on AppId) ✅ We've renamed the system queries to have a much simpler name such as System.Sites which we'll make available to public use soon. ✅ New LookUp for Settings- and Resources-Stack - to use Settings and Resources ✅ Change internal key for Settings to MyConfiguration to avoid naming conflicts (breaking but probably no impact) ✅ Custom DataSources - breaking ✅ New IDataFactory API ✅ New RawEntity and IRawEntity API ✅ New API for data sources to make data generation easier ✅ Improved custom DataSources API ✅ New base class CustomDataSourceLight ✅ New base class CustomDataSourceAdvanced ✅ Error handling is now simpler / more standardized ✅ Jewels ✅ CmsContext.View now has a Path, PathShared, PhysicalPath and PhysicalPathShared property ✅ Page.Activate(...) now has a condition: true parameter which lets you only activate a feature if a condition is met ✅ Page.Parameters has new Get(name) and Get<type>(name) and Get(name, fallback: 7) APIs to make it easier to work with url parameters ✅ The Toolbar now has a new Info button which is used to show an info-bubble to the user or provide a help-link to somewhere. You'll soon see this in our standard apps to inform users about special cases such as \"why the toolbar isn't available on demo-data\" ✅ Bugs fixes ✅ 2sxc in DNN Skins on 404 pages https://github.com/2sic/2sxc/issues/2986 ✅ Issue with Mobius Forms in v15.03 Breaking Changes in 2sxc 15.06 Tip In summary we've made a lot of internal breaking changes. But for all normal users it will have no effect at all. We believe it will only affect you in these scenarios: TODO API Changes that may affect you on IEntity These were internal APIs which were not publicly documented, but may have been used by some developers. IEntity.GetDraft() was removed to ensure the entity is immutable IEntity.GetPublished() was removed to ensure the entity is immutable Note: GetDraft() and GetPublished() are still available on DynamicEntity in Razor and WebApi. They were only removed on IEntity. Renamed DataSources These data sources had uncommon names, and were renamed to be more consistent. We believe that they were only used in VisualQuery and not in code, so it should not affect you. CsvDataSource is now Csv SerializationConfiguration is now Serialization"
  },
  "abyss/releases/history/v15/logging/index.html": {
    "href": "abyss/releases/history/v15/logging/index.html",
    "title": "Fix Breaking Change Logging in v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change Logging in v15 Keywords: #Logging #DataSources 2sxc has a powerful logging system which tracks what happens in a structure that matches code calls. This was changed extensively. Tip This change should not affect any normal Razor / WebApi etc. code in any way. It will only affect compiled code, or if you were using non-public APIs Reason for Change We wanted to make this part of code more reusable and plan to publish a Nuget package. For this it must be a standalone component. There were various cases were the log could be null, which would result in errors just because of logging. We wanted to make sure that logging can never break the code. To make the logs match the call-stack, the log objects must be attached to each other. This always dependend on perfect programming, so we wanted it to be more robust. History - How it Used to Work Previously all this came from the following base interfaces / classes ToSic.Eav.Logging.ILog ToSic.Eav.Logging.Log ToSic.Eav.Logging.IHasLog ToSic.Eav.Logging.HasLog Almost every relevant object in 2sxc inherited from these or implemented them. In addition, the API to add logs was - just as an example: Log.Add(\"Some message\"); These methods were methods of ILog, so they were part of the object. If for some reason the Log object was null, this would result in an exception. What we Changed 1. Move to ToSic.Lib.Core In 2sxc 15 we introduced a new DLL ToSic.Lib.Core. It contains very fundamental parts such as Logging and Dependency Injection Helpers. \uD83D\uDC49\uD83C\uDFFD All classes now inherit from this. If you had any compiled code, it would need to be recompiled. We then changed almost all logging commands to be Extension Methods. By doing this, we could make all calls null safe, so if the Log object is null, the call will not do anything. This means, that calling anything on the Log object requires you to add the namespace ToSic.Lib.Logging: using ToSic.Lib.Logging; Log.A(\"some message); 2. New ICodeLog for Dynamic Code Logging We believe that any Razor or WebApi should have a simpler logging mechanism which doesn't need much documentation or learning. Because of this, we created a new ICodeLog which still has very simple Add(...) methods. This will be what the Log property of every Razor and WebApi will return. So they will not be ILog but ICodeLog. This should also ensure that any apps which previously used Add(...) will continue to work. History Introduced ca. 2sxc 9 Completely reworked in 2sxc/eav 15"
  },
  "abyss/releases/history/v15/minor/index.html": {
    "href": "abyss/releases/history/v15/minor/index.html",
    "title": "Minor Breaking Changes in v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Minor Breaking Changes in v15 IContentType.Description removed The internal object IContentType used to have a Description. It has been obsolete for a long time and just used internally. This was removed. ToSic.Eav.Repositories.RepositoryInfoOfFolder was removed This was an old API, please use ToSic.Eav.Repositories.FolderBasedRepository instead. AppCacheLoader was changed This is just very internal and only relevant to caching providers. .data is now App_Data An internal folder which was called .data is now App_Data"
  },
  "abyss/releases/history/v15/template/_index.html": {
    "href": "abyss/releases/history/v15/template/_index.html",
    "title": "Fix Breaking Change TEMPLATE in v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change TEMPLATE in v15 Keywords: #Deprecated #Render #Static #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. These two commands for rendering Inner Content are being deprecated and will be removed in v14. In v13 it was moved to the Dnn DLL because it shoudn't be used anywhere else. ToSic.SexyContent.ContentBlocks.One(...) ToSic.SexyContent.ContentBlocks.All(...) ToSic.Sxc.Blocks.Render.One(...) ToSic.Sxc.Blocks.Render.All(...) Reason for Removal 2sxc used to not have Dependency Injection so there were some static APIs which we provided. But this is bad practice and causes a lot of difficulty to keep everything working. The newer APIs use Services and Dependency Injection and do what they should. History - How it Used to Work Previously you could write code like this in your Razor: @using ToSic.Sxc.Blocks; // some code @Render.All(someEntity, field: \"AnswerInnerContent\", merge: someEntity.Answer) What we Changed In 2sxc 11.11 we introduced the GetService<T>() (docs) which provides proper DI. We also introduced a ToSic.Sxc.Services.IRenderService which should replace these commands - see docs. Please use this from now on. The old API will continue to work for a while but show errors in the insight. Upgrade to Newer functionality So the previous example would look like this: @using ToSic.Sxc.Services; // some code var renderSvc = GetService<IRenderService>(); @renderSvc.All(someEntity, field: \"AnswerInnerContent\", merge: someEntity.Answer) History Introduced ToSic.SexyContent.ContentBlocks ca. 2sxc 5 Introduced better name but still non-DI implementation called ToSic.Sxc.ContentBlocks ca. 2sxc 7 New IRenderService introduced in 2sxc 11 and 12 Deprecated in 2sxc 13 Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://go.2sxc.org/brc-13-static-render"
  },
  "abyss/releases/history/v15/tinymce-upgrade/index.html": {
    "href": "abyss/releases/history/v15/tinymce-upgrade/index.html",
    "title": "Fix Breaking Change TinyMCE Upgrade to v6 in v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change TinyMCE Upgrade to v6 in v15 Keywords: #Edit #Wysiwyg #TinyMCE 2sxc updated TinyMCE from v5 to v6. If you have any customizations, these may change."
  },
  "abyss/releases/history/v15/unwrappedcontents/index.html": {
    "href": "abyss/releases/history/v15/unwrappedcontents/index.html",
    "title": "Fix Breaking Change UnwrappedContents on IWrapper in v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fix Breaking Change UnwrappedContents on IWrapper in v15 Keywords: #Wrapper #UnwrappedContents 2sxc has a convention for wrapping objects, creating decorators and facades. Basically there is an internal Interface IWrapper<T> which is used in all objects which simply wrap something. Tip This is a very internal API so we believe should not affect anybody. History - How it Used to Work Previously all these objects had a property UnwrappedContents. What we Changed In 2sxc 15 we moved this to the new DLL ToSic.Lib.Core. We also changed the access to the inner value to be GetContents() History Introduced ca. 2sxc 9 Completely reworked in 2sxc/eav 15"
  },
  "abyss/releases/history/v16/_all.html": {
    "href": "abyss/releases/history/v16/_all.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 16 2sxc v16.00 LTS (2023-05-04) No relevant changes, just minor bugfixes + our convention to upgrade the main version every 6 months. We mainly finished the docs for various features, so this is what is now done. ✅ improve IConfiguration API - lighten the IDataService API ✅ Document new data sources API ✅ finish Dynamic DataSources ✅ Document CDN / Asset management ✅ Document Formula improvements ✅ IDataService completed ✅...and documented ✅ New WYSIWYG mode completed (and documented) ✅ Toolbars Service Improvements: transport data for use in notes etc. ca. 0.5d 2dm ✅ Data-conversion of entities to json in attribute... - documented 2sxc v16.01 LTS (2023-05-23) Various bugfixes + some enhancements. ✅ New rich WYSIWYG experience ✅ Edit-UI can now be opened to only show a few specified fields (feature API not yet public, but used in the new WYSIWYG feature) #3080 ✅ New ITypedItem and AsTyped(...) API ✅ New Data.Content and Data.Header objects ✅ IDynamicEntity now has methods like String(...), Int(...), Bool(...), Date(...), Decimal(...), Double(...), Long(...), DateTime(...), Float(...) to convert values to the desired type. #3089 ✅ Sort-Items UI was enhanced with remove, add, add-existing #3077 ✅ DynamicDataSource now supports relationships #3078 ✅ DynamicDataSource now shows better errors in Razor on compile issues #3084 ✅ Razor now automatically suggests the insights button on the toolbar if there are errors #3085 ✅ Enhancement: Serializing Entities to JSON now skips empty fields such as messages or ephemeral fields ✅ Clean up Formulas code into better SoC @SDV ✅ Clean up ancient documentation which is probably invalid, but still seen by many :( Dnn / Evoq ✅ Evoq: Better support for list management together with page workflow #3087 ✅ Dnn Skin: Adding module to skin using IRenderService now allows editing entities #3092 Oqtane ✅ Enabled full WASM support for Oqtane #3083 (previously only server-rendering worked) \uD83E\uDEB2 Improvement on how AJAX reloads work, resolves some reload-errors #3081 Minor Bugfixes \uD83E\uDEB2 Two bugfixes related to Formulas v1 - returning date #3088 \uD83E\uDEB2 XML-Data-Export now works with IsContentAdmin permissions (before it required IsSiteAdmin) #3075 \uD83E\uDEB2 View list of data now works with IsContentAdmin permissions (before it required IsSiteAdmin) \uD83E\uDEB2 Fixed issue with GetService<ILogService>() because ILogService had been renamed to ISystemLogService #3082 2sxc v16.02 (2023-07-07) Major Enhancements ✅ ImageFlow upgraded to version 0.10.0 - thereby making sure it works with FIPS enabled #3121 ✅ Brand new typed code Pro mode ITypedItem and ITyped interfaces with properties such as Id, Guid and methods such as .String(name), ... RazorPro, ApiPro, CodePro base classes with completely reworked API such as AsStack(...), MyPage or AllSettings ApiPro now serializes JSON using new defaults which are more common in WebApis (lower-case properties, auto-serialize entities, etc.) Documentation ✅ Upgraded DocFX from 2.48.1 to 2.67.3 with major improvements to the generated docs ✅ Improved Documentation of all Razor and WebApi base classes! Support for Developers ✅ Dramatically improved insights with more details and filtering options ✅ Created system to automatically detect and warn about deprecated code - using buttons in the toolbar ✅ Created CodeHelp system to guide developers when common coding mistakes were made ✅ New Obsolete system collects issues per App and shows them even if the current Razor is not affected ✅ Show CodeHelp warnings if a RazorPage doesn't have @inherits Various bugfixes + some enhancements. ✅ Refactored Razor and WebApi base classes to use Composition over Inheritance ✅ RazorBlade upgrade from v4.2.0 to 4.4.0 (also for .net 7 compatibility) ✅ Feature to not show edit-toolbar buttons on HTML coming from Resources ✅ Improve not showing a metadata-toolbar on images which are coming from demo-items Dnn / Evoq ✅ Downgrade SQL to still work with SQL Server 2012 as people had trouble upgrading #3120 ✅ Since ImageFlow was upgraded, the following DLLs were also upgraded Imageflow, 0.7.24 -> 0.10.0 Imageflow.Net, 0.7.24 -> 0.10.0 Imazen.Common, 0.7.7 -> 0.8.1 Imazen.HybridCache, 0.7.7 -> 0.8.1 Newtonsoft.Json, Version=10.0.0.0 -> 13.0.0.0 ✅ As part of the upgrade we also had to upgrade some MS DLLs Microsoft.Bcl.AsyncInterfaces, Version=6.0.0.0 -> 7.0.0.0 System.Collections.Immutable, Version=6.0.0.0 -> 7.0.0.0 System.Text.Encodings.Web, Version=6.0.0.0 -> 7.0.0.0 System.Text.Json, Version=6.0.0.0 -> 7.0.0.2 System.Memory, Version=4.0.1.1 -> 4.0.1.2 Oqtane ✅ Oqtane 4.0 Support (with .net 7) #3123 ✅ Reworked API Middleware to avoid conflicts with OAuth 2 Minor Bugfixes \uD83E\uDEB2 Fixed issue with Swiper not being able to add slides #3108 #3112 \uD83E\uDEB2 Fixed issue with DatePicker in Edge and also added more cultures #3113 ✅ Changed internal APIs to return RazorBlade IHtmlTag objects instead of previously IHybridHtmlString #3098 2sxc v16.03 (2023-08-21) Enhancements around Typed Code ✅ Typed: rename RazorPro to RazorTyped etc. #3147 ✅ Make all typed objects very strict when checking if fields exist ✅ Add much more helpful info / error when fields not found ✅ Typed: Massively enhanced with strict checks and reduced the possibility of writing code which doesn't do anything ✅ Typed: ITypedItem now has a new .Picture(...) method making the code nicer #3135 ✅ Typed: ITypedItems can now be mocked #3141 to create alternate data in code when no data exists ✅ Typed: New methods ContainsKey(...), Keys(...) #3142 ✅ Typed: New methods IsEmpty(...) and IsNotEmpty(...) #3144 ✅ Typed: method .String(..., scrubHtml) now also accepts a string containing tags to remove #3146 ✅ Typed: If an error occurs, much more information is provided as to how to fix #3143 #3145 ✅ Typed Json: now also supports paths, so you can use Kit.Json.ToTyped(jsonString).Int(\"Root.Child.Id\") ✅ Typed Json: now also strict using propsRequired by default ✅ Typed: the property .Dyn now only exists on ITypedItem (entity-based) and not on other wrappers Other Enhancements ✅ Image Resizer: New Square resize settings #3134 ✅ Image Resizer: ImageService can now also handle IFile objects and get the metadata automatically #3140 ✅ Web Farm Cache: Updated for v16.02+ (enterprise customers only) ✅ Page Parameters: now support ITyped so you can use MyPage.Parameters.Int(\"id\") and similar Support for Developers ✅ Errors now highlight the .cshtml line which caused the error ✅ Errors on mistyped property names now gives very detailed information about it DNN / Evoq ✅ Image Resizer: Upgrade to dnn-imageflow 1.2.1 #3130 ✅ Newtonsoft internal version in DNN Manifest now matches 13.0.3 Oqtane ✅ Oqtane: Better error when Oqtane in installed without sufficient DB permissions #3128 / #3131 ✅ Internal: Code cleanup with warnings new EF-Core #3132 ✅ Internal: EF Core QuerySplittingBehavior #3133 Minor Bugfixes \uD83E\uDEB2 turnOn failed on AJAX reloads during editing #3127 \uD83E\uDEB2 Oqtane: Bugfix importing App Assets #3129 \uD83E\uDEB2 Web Farm Cache: Fix issue which occured on license uploads \uD83E\uDEB2 Licenses: fix issue with multiple licenses / names resulting in an unlicensed message 2sxc v16.04 (2023-09-05) Highlight: UniqueKey ✅ Razor: New UniqueKey property (in Typed mode) #3151 ✅ Razor: New Kit.Keys.UniqueKeyWith(...) for unique IDs and working with JS #3152 Images ✅ Images: Images in rich wysiwyg mode now are shown nicely after import into other site ✅ Images: Dialog-Options to set empty title and not use fallback #3150 ✅ Images: Enable crop/title dialog for public files, with delayed toolbar and warning-hint #3057 ✅ Images: Fix Safari bug with small images #2 ✅ Images: Ability to specify alternate toolbar #3157 ✅ Images: Ability to specify no toolbar #3158 ✅ Images: Ability to use Toolbar outside of main picture/img tag using img.Toolbar() #3156 ✅ Images: Metadata now also has a DescriptionExtended Razor in Typed Mode ✅ MyModel: Improve handling fallback / required #3149 ✅ App.Folder.Url to replace App.Path for clearer APIs ✅ App.GetQuery(...) to replace App.Query[name] ✅ All ITyped objects now behave strict by default ✅ Complete various scenarios for ITyped with unit tests, especially conversion of anonymous and json-based ITyped ✅ All ITyped now have APIs for ContainsKey, IsEmpty and IsNotEmpty ✅ Razor: Errors now highlight the .cshtml file with a \uD83C\uDFAF emoji GetDraft / GetPublished (decided not to implement yet) ✅ Override Equality operations - using ITyped.Equals Oqtane \uD83E\uDE78 Improve indexing in Google #3154 \uD83E\uDE78 Improve pre-render adding JS/CSS \uD83E\uDE78 Improve page header changes (title, metadata) using latest Oqtane 4 APIs Patrons \uD83E\uDDB8\uD83C\uDFFD New feature to better control language fallback sequence (beta) #3159 \uD83E\uDDB8\uD83C\uDFFD Improve showing expired features - important when testing a feature for 24h Bugfixes \uD83E\uDEB2 Languages: Bug in UI: Some labels and dropdown-labels didn't show in current language #3153 \uD83E\uDEB2 lots of minor bugfixes 2sxc v16.06 (2023-09-20) ✅ Tutorials for new Pro mode / Quick-Ref ✅ Optimize build of 2sxc to use local config-files so it's easier for others to contribute @STV ✅ Improve JS build to make it easier for others to contribute ✅ Improve headers handling in Oqtane 4 2sxc v16.07 LTS (2023-09-22) ✅ new TypeItem.Parent(...) - especially. .Parent(current: true) api #3173 ✅ new parameters to the .Picture(...) incl. picClass, imgAttributes and picAttributes ✅ fix bug where presentation data was generated even if not used #3185 Major: Release 16.07 LTS \uD83D\uDE80 2sxc v16.09 (2023-11-22) ✅ TypedItem.Picture(\"Child.Property\") path notation ✅ fix js minification of inpage.min.js ✅ Release all apps in the new typed mode ✅ Blazor .net 8 / Oqtane 5 support ✅ Improve file-upload to prevent files with \"..\" in the name ✅ Improve DataSource Caching and cache-flushing ✅ Add new (beta ⌛) feature for copyright management (Patron AdvancedCMS) to add copyright info to each image ✅ Extend SQL Database to store SysSettings and Guid on Attributes for future features \uD83D\uDC1E Fix minor issue with old .Code for older Razor base classes \uD83D\uDC1E Fix minor issue with edit-dialog in scenarios with multiple portal aliases \uD83D\uDC1E Fix minor issue with IMetadata.Children(...) / ...Child(...) #3217 \uD83D\uDC1E Fix DataSource LanguageModeler #3219 \uD83D\uDC1E Fix DataSource TreeMapper \uD83E\uDE78 Oqtane: Adam backend didn't always serialize all properties #3206"
  },
  "abyss/releases/history/v16/_brc.html": {
    "href": "abyss/releases/history/v16/_brc.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v16 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V16.00 doesn't have breaking changes; 16.02 has some very minor breaking changes Breaking Changes in 2sxc 16.02 API Changes which affect you if you had installed v16.01 with the latest Blog or Mobius In v16.01 we had introduced a new Typed API, which turned out to be not good-enough. This meant we had to rollback some of the changes we had introduced there, API Changes which should really not affect you Various APIs which used to return an IHybridHtmlString now return an IRawHtml This is to sync types with RazorBlade. It should have no effect on any code out there, as the result type is usually dynamic Renamed the type ToSic.Sxc.Data.IDynamicMetadata to ToSic.Sxc.Data.IMetadata This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody. Renamed ToSic.Sxc.Data.IDynamicField to ToSic.Sxc.Data.IField This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody. Breaking Changes in 2sxc 16.03 API Changes which affect you if you had installed v16.01/16.02 with the latest Blog or Mobius Base classes were renamed because of confusing ...Pro suffix. RazorPro is now RazorTyped, ApiPro is ApiTyped and CodePro is CodeTyped #3147 Now by default, all access to a property like .String(\"SomeName\") will throw an error in required mode if the field doesn't exist #3138 The .Parents(...) was enhanced to require named parameters (see blog post) #3139"
  },
  "abyss/releases/history/v16/_brc16.02.html": {
    "href": "abyss/releases/history/v16/_brc16.02.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in 2sxc 16.02 API Changes which affect you if you had installed v16.01 with the latest Blog or Mobius In v16.01 we had introduced a new Typed API, which turned out to be not good-enough. This meant we had to rollback some of the changes we had introduced there, API Changes which should really not affect you Various APIs which used to return an IHybridHtmlString now return an IRawHtml This is to sync types with RazorBlade. It should have no effect on any code out there, as the result type is usually dynamic Renamed the type ToSic.Sxc.Data.IDynamicMetadata to ToSic.Sxc.Data.IMetadata This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody. Renamed ToSic.Sxc.Data.IDynamicField to ToSic.Sxc.Data.IField This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody."
  },
  "abyss/releases/history/v16/_brc16.03.html": {
    "href": "abyss/releases/history/v16/_brc16.03.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in 2sxc 16.03 API Changes which affect you if you had installed v16.01/16.02 with the latest Blog or Mobius Base classes were renamed because of confusing ...Pro suffix. RazorPro is now RazorTyped, ApiPro is ApiTyped and CodePro is CodeTyped #3147 Now by default, all access to a property like .String(\"SomeName\") will throw an error in required mode if the field doesn't exist #3138 The .Parents(...) was enhanced to require named parameters (see blog post) #3139"
  },
  "abyss/releases/history/v16/_changes16.00.html": {
    "href": "abyss/releases/history/v16/_changes16.00.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.00 LTS (2023-05-04) No relevant changes, just minor bugfixes + our convention to upgrade the main version every 6 months. We mainly finished the docs for various features, so this is what is now done. ✅ improve IConfiguration API - lighten the IDataService API ✅ Document new data sources API ✅ finish Dynamic DataSources ✅ Document CDN / Asset management ✅ Document Formula improvements ✅ IDataService completed ✅...and documented ✅ New WYSIWYG mode completed (and documented) ✅ Toolbars Service Improvements: transport data for use in notes etc. ca. 0.5d 2dm ✅ Data-conversion of entities to json in attribute... - documented"
  },
  "abyss/releases/history/v16/_changes16.01.html": {
    "href": "abyss/releases/history/v16/_changes16.01.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.01 LTS (2023-05-23) Various bugfixes + some enhancements. ✅ New rich WYSIWYG experience ✅ Edit-UI can now be opened to only show a few specified fields (feature API not yet public, but used in the new WYSIWYG feature) #3080 ✅ New ITypedItem and AsTyped(...) API ✅ New Data.Content and Data.Header objects ✅ IDynamicEntity now has methods like String(...), Int(...), Bool(...), Date(...), Decimal(...), Double(...), Long(...), DateTime(...), Float(...) to convert values to the desired type. #3089 ✅ Sort-Items UI was enhanced with remove, add, add-existing #3077 ✅ DynamicDataSource now supports relationships #3078 ✅ DynamicDataSource now shows better errors in Razor on compile issues #3084 ✅ Razor now automatically suggests the insights button on the toolbar if there are errors #3085 ✅ Enhancement: Serializing Entities to JSON now skips empty fields such as messages or ephemeral fields ✅ Clean up Formulas code into better SoC @SDV ✅ Clean up ancient documentation which is probably invalid, but still seen by many :( Dnn / Evoq ✅ Evoq: Better support for list management together with page workflow #3087 ✅ Dnn Skin: Adding module to skin using IRenderService now allows editing entities #3092 Oqtane ✅ Enabled full WASM support for Oqtane #3083 (previously only server-rendering worked) \uD83E\uDEB2 Improvement on how AJAX reloads work, resolves some reload-errors #3081 Minor Bugfixes \uD83E\uDEB2 Two bugfixes related to Formulas v1 - returning date #3088 \uD83E\uDEB2 XML-Data-Export now works with IsContentAdmin permissions (before it required IsSiteAdmin) #3075 \uD83E\uDEB2 View list of data now works with IsContentAdmin permissions (before it required IsSiteAdmin) \uD83E\uDEB2 Fixed issue with GetService<ILogService>() because ILogService had been renamed to ISystemLogService #3082"
  },
  "abyss/releases/history/v16/_changes16.02.html": {
    "href": "abyss/releases/history/v16/_changes16.02.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.02 (2023-07-07) Major Enhancements ✅ ImageFlow upgraded to version 0.10.0 - thereby making sure it works with FIPS enabled #3121 ✅ Brand new typed code Pro mode ITypedItem and ITyped interfaces with properties such as Id, Guid and methods such as .String(name), ... RazorPro, ApiPro, CodePro base classes with completely reworked API such as AsStack(...), MyPage or AllSettings ApiPro now serializes JSON using new defaults which are more common in WebApis (lower-case properties, auto-serialize entities, etc.) Documentation ✅ Upgraded DocFX from 2.48.1 to 2.67.3 with major improvements to the generated docs ✅ Improved Documentation of all Razor and WebApi base classes! Support for Developers ✅ Dramatically improved insights with more details and filtering options ✅ Created system to automatically detect and warn about deprecated code - using buttons in the toolbar ✅ Created CodeHelp system to guide developers when common coding mistakes were made ✅ New Obsolete system collects issues per App and shows them even if the current Razor is not affected ✅ Show CodeHelp warnings if a RazorPage doesn't have @inherits Various bugfixes + some enhancements. ✅ Refactored Razor and WebApi base classes to use Composition over Inheritance ✅ RazorBlade upgrade from v4.2.0 to 4.4.0 (also for .net 7 compatibility) ✅ Feature to not show edit-toolbar buttons on HTML coming from Resources ✅ Improve not showing a metadata-toolbar on images which are coming from demo-items Dnn / Evoq ✅ Downgrade SQL to still work with SQL Server 2012 as people had trouble upgrading #3120 ✅ Since ImageFlow was upgraded, the following DLLs were also upgraded Imageflow, 0.7.24 -> 0.10.0 Imageflow.Net, 0.7.24 -> 0.10.0 Imazen.Common, 0.7.7 -> 0.8.1 Imazen.HybridCache, 0.7.7 -> 0.8.1 Newtonsoft.Json, Version=10.0.0.0 -> 13.0.0.0 ✅ As part of the upgrade we also had to upgrade some MS DLLs Microsoft.Bcl.AsyncInterfaces, Version=6.0.0.0 -> 7.0.0.0 System.Collections.Immutable, Version=6.0.0.0 -> 7.0.0.0 System.Text.Encodings.Web, Version=6.0.0.0 -> 7.0.0.0 System.Text.Json, Version=6.0.0.0 -> 7.0.0.2 System.Memory, Version=4.0.1.1 -> 4.0.1.2 Oqtane ✅ Oqtane 4.0 Support (with .net 7) #3123 ✅ Reworked API Middleware to avoid conflicts with OAuth 2 Minor Bugfixes \uD83E\uDEB2 Fixed issue with Swiper not being able to add slides #3108 #3112 \uD83E\uDEB2 Fixed issue with DatePicker in Edge and also added more cultures #3113 ✅ Changed internal APIs to return RazorBlade IHtmlTag objects instead of previously IHybridHtmlString #3098"
  },
  "abyss/releases/history/v16/_changes16.03.html": {
    "href": "abyss/releases/history/v16/_changes16.03.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.03 (2023-08-21) Enhancements around Typed Code ✅ Typed: rename RazorPro to RazorTyped etc. #3147 ✅ Make all typed objects very strict when checking if fields exist ✅ Add much more helpful info / error when fields not found ✅ Typed: Massively enhanced with strict checks and reduced the possibility of writing code which doesn't do anything ✅ Typed: ITypedItem now has a new .Picture(...) method making the code nicer #3135 ✅ Typed: ITypedItems can now be mocked #3141 to create alternate data in code when no data exists ✅ Typed: New methods ContainsKey(...), Keys(...) #3142 ✅ Typed: New methods IsEmpty(...) and IsNotEmpty(...) #3144 ✅ Typed: method .String(..., scrubHtml) now also accepts a string containing tags to remove #3146 ✅ Typed: If an error occurs, much more information is provided as to how to fix #3143 #3145 ✅ Typed Json: now also supports paths, so you can use Kit.Json.ToTyped(jsonString).Int(\"Root.Child.Id\") ✅ Typed Json: now also strict using propsRequired by default ✅ Typed: the property .Dyn now only exists on ITypedItem (entity-based) and not on other wrappers Other Enhancements ✅ Image Resizer: New Square resize settings #3134 ✅ Image Resizer: ImageService can now also handle IFile objects and get the metadata automatically #3140 ✅ Web Farm Cache: Updated for v16.02+ (enterprise customers only) ✅ Page Parameters: now support ITyped so you can use MyPage.Parameters.Int(\"id\") and similar Support for Developers ✅ Errors now highlight the .cshtml line which caused the error ✅ Errors on mistyped property names now gives very detailed information about it DNN / Evoq ✅ Image Resizer: Upgrade to dnn-imageflow 1.2.1 #3130 ✅ Newtonsoft internal version in DNN Manifest now matches 13.0.3 Oqtane ✅ Oqtane: Better error when Oqtane in installed without sufficient DB permissions #3128 / #3131 ✅ Internal: Code cleanup with warnings new EF-Core #3132 ✅ Internal: EF Core QuerySplittingBehavior #3133 Minor Bugfixes \uD83E\uDEB2 turnOn failed on AJAX reloads during editing #3127 \uD83E\uDEB2 Oqtane: Bugfix importing App Assets #3129 \uD83E\uDEB2 Web Farm Cache: Fix issue which occured on license uploads \uD83E\uDEB2 Licenses: fix issue with multiple licenses / names resulting in an unlicensed message"
  },
  "abyss/releases/history/v16/_changes16.04.html": {
    "href": "abyss/releases/history/v16/_changes16.04.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.04 (2023-09-05) Highlight: UniqueKey ✅ Razor: New UniqueKey property (in Typed mode) #3151 ✅ Razor: New Kit.Keys.UniqueKeyWith(...) for unique IDs and working with JS #3152 Images ✅ Images: Images in rich wysiwyg mode now are shown nicely after import into other site ✅ Images: Dialog-Options to set empty title and not use fallback #3150 ✅ Images: Enable crop/title dialog for public files, with delayed toolbar and warning-hint #3057 ✅ Images: Fix Safari bug with small images #2 ✅ Images: Ability to specify alternate toolbar #3157 ✅ Images: Ability to specify no toolbar #3158 ✅ Images: Ability to use Toolbar outside of main picture/img tag using img.Toolbar() #3156 ✅ Images: Metadata now also has a DescriptionExtended Razor in Typed Mode ✅ MyModel: Improve handling fallback / required #3149 ✅ App.Folder.Url to replace App.Path for clearer APIs ✅ App.GetQuery(...) to replace App.Query[name] ✅ All ITyped objects now behave strict by default ✅ Complete various scenarios for ITyped with unit tests, especially conversion of anonymous and json-based ITyped ✅ All ITyped now have APIs for ContainsKey, IsEmpty and IsNotEmpty ✅ Razor: Errors now highlight the .cshtml file with a \uD83C\uDFAF emoji GetDraft / GetPublished (decided not to implement yet) ✅ Override Equality operations - using ITyped.Equals Oqtane \uD83E\uDE78 Improve indexing in Google #3154 \uD83E\uDE78 Improve pre-render adding JS/CSS \uD83E\uDE78 Improve page header changes (title, metadata) using latest Oqtane 4 APIs Patrons \uD83E\uDDB8\uD83C\uDFFD New feature to better control language fallback sequence (beta) #3159 \uD83E\uDDB8\uD83C\uDFFD Improve showing expired features - important when testing a feature for 24h Bugfixes \uD83E\uDEB2 Languages: Bug in UI: Some labels and dropdown-labels didn't show in current language #3153 \uD83E\uDEB2 lots of minor bugfixes"
  },
  "abyss/releases/history/v16/_changes16.06.html": {
    "href": "abyss/releases/history/v16/_changes16.06.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.06 (2023-09-20) ✅ Tutorials for new Pro mode / Quick-Ref ✅ Optimize build of 2sxc to use local config-files so it's easier for others to contribute @STV ✅ Improve JS build to make it easier for others to contribute ✅ Improve headers handling in Oqtane 4"
  },
  "abyss/releases/history/v16/_changes16.07.html": {
    "href": "abyss/releases/history/v16/_changes16.07.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.07 LTS (2023-09-22) ✅ new TypeItem.Parent(...) - especially. .Parent(current: true) api #3173 ✅ new parameters to the .Picture(...) incl. picClass, imgAttributes and picAttributes ✅ fix bug where presentation data was generated even if not used #3185 Major: Release 16.07 LTS \uD83D\uDE80"
  },
  "abyss/releases/history/v16/_changes16.09.html": {
    "href": "abyss/releases/history/v16/_changes16.09.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v16.09 (2023-11-22) ✅ TypedItem.Picture(\"Child.Property\") path notation ✅ fix js minification of inpage.min.js ✅ Release all apps in the new typed mode ✅ Blazor .net 8 / Oqtane 5 support ✅ Improve file-upload to prevent files with \"..\" in the name ✅ Improve DataSource Caching and cache-flushing ✅ Add new (beta ⌛) feature for copyright management (Patron AdvancedCMS) to add copyright info to each image ✅ Extend SQL Database to store SysSettings and Guid on Attributes for future features \uD83D\uDC1E Fix minor issue with old .Code for older Razor base classes \uD83D\uDC1E Fix minor issue with edit-dialog in scenarios with multiple portal aliases \uD83D\uDC1E Fix minor issue with IMetadata.Children(...) / ...Child(...) #3217 \uD83D\uDC1E Fix DataSource LanguageModeler #3219 \uD83D\uDC1E Fix DataSource TreeMapper \uD83E\uDE78 Oqtane: Adam backend didn't always serialize all properties #3206"
  },
  "abyss/releases/history/v16/breaking.html": {
    "href": "abyss/releases/history/v16/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc 16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc 16 Breaking Changes in EAV and 2sxc v16 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V16.00 doesn't have breaking changes; 16.02 has some very minor breaking changes Breaking Changes in 2sxc 16.02 API Changes which affect you if you had installed v16.01 with the latest Blog or Mobius In v16.01 we had introduced a new Typed API, which turned out to be not good-enough. This meant we had to rollback some of the changes we had introduced there, API Changes which should really not affect you Various APIs which used to return an IHybridHtmlString now return an IRawHtml This is to sync types with RazorBlade. It should have no effect on any code out there, as the result type is usually dynamic Renamed the type ToSic.Sxc.Data.IDynamicMetadata to ToSic.Sxc.Data.IMetadata This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody. Renamed ToSic.Sxc.Data.IDynamicField to ToSic.Sxc.Data.IField This is technically a breaking change, but the type name should never have been used in any razor code, so it shouldn't affect anybody. Breaking Changes in 2sxc 16.03 API Changes which affect you if you had installed v16.01/16.02 with the latest Blog or Mobius Base classes were renamed because of confusing ...Pro suffix. RazorPro is now RazorTyped, ApiPro is ApiTyped and CodePro is CodeTyped #3147 Now by default, all access to a property like .String(\"SomeName\") will throw an error in required mode if the field doesn't exist #3138 The .Parents(...) was enhanced to require named parameters (see blog post) #3139"
  },
  "abyss/releases/history/v16/index.html": {
    "href": "abyss/releases/history/v16/index.html",
    "title": "All Changes in EAV and 2sxc v16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in EAV and 2sxc v16 Version 16 2sxc v16.00 LTS (2023-05-04) No relevant changes, just minor bugfixes + our convention to upgrade the main version every 6 months. We mainly finished the docs for various features, so this is what is now done. ✅ improve IConfiguration API - lighten the IDataService API ✅ Document new data sources API ✅ finish Dynamic DataSources ✅ Document CDN / Asset management ✅ Document Formula improvements ✅ IDataService completed ✅...and documented ✅ New WYSIWYG mode completed (and documented) ✅ Toolbars Service Improvements: transport data for use in notes etc. ca. 0.5d 2dm ✅ Data-conversion of entities to json in attribute... - documented 2sxc v16.01 LTS (2023-05-23) Various bugfixes + some enhancements. ✅ New rich WYSIWYG experience ✅ Edit-UI can now be opened to only show a few specified fields (feature API not yet public, but used in the new WYSIWYG feature) #3080 ✅ New ITypedItem and AsTyped(...) API ✅ New Data.Content and Data.Header objects ✅ IDynamicEntity now has methods like String(...), Int(...), Bool(...), Date(...), Decimal(...), Double(...), Long(...), DateTime(...), Float(...) to convert values to the desired type. #3089 ✅ Sort-Items UI was enhanced with remove, add, add-existing #3077 ✅ DynamicDataSource now supports relationships #3078 ✅ DynamicDataSource now shows better errors in Razor on compile issues #3084 ✅ Razor now automatically suggests the insights button on the toolbar if there are errors #3085 ✅ Enhancement: Serializing Entities to JSON now skips empty fields such as messages or ephemeral fields ✅ Clean up Formulas code into better SoC @SDV ✅ Clean up ancient documentation which is probably invalid, but still seen by many :( Dnn / Evoq ✅ Evoq: Better support for list management together with page workflow #3087 ✅ Dnn Skin: Adding module to skin using IRenderService now allows editing entities #3092 Oqtane ✅ Enabled full WASM support for Oqtane #3083 (previously only server-rendering worked) \uD83E\uDEB2 Improvement on how AJAX reloads work, resolves some reload-errors #3081 Minor Bugfixes \uD83E\uDEB2 Two bugfixes related to Formulas v1 - returning date #3088 \uD83E\uDEB2 XML-Data-Export now works with IsContentAdmin permissions (before it required IsSiteAdmin) #3075 \uD83E\uDEB2 View list of data now works with IsContentAdmin permissions (before it required IsSiteAdmin) \uD83E\uDEB2 Fixed issue with GetService<ILogService>() because ILogService had been renamed to ISystemLogService #3082 2sxc v16.02 (2023-07-07) Major Enhancements ✅ ImageFlow upgraded to version 0.10.0 - thereby making sure it works with FIPS enabled #3121 ✅ Brand new typed code Pro mode ITypedItem and ITyped interfaces with properties such as Id, Guid and methods such as .String(name), ... RazorPro, ApiPro, CodePro base classes with completely reworked API such as AsStack(...), MyPage or AllSettings ApiPro now serializes JSON using new defaults which are more common in WebApis (lower-case properties, auto-serialize entities, etc.) Documentation ✅ Upgraded DocFX from 2.48.1 to 2.67.3 with major improvements to the generated docs ✅ Improved Documentation of all Razor and WebApi base classes! Support for Developers ✅ Dramatically improved insights with more details and filtering options ✅ Created system to automatically detect and warn about deprecated code - using buttons in the toolbar ✅ Created CodeHelp system to guide developers when common coding mistakes were made ✅ New Obsolete system collects issues per App and shows them even if the current Razor is not affected ✅ Show CodeHelp warnings if a RazorPage doesn't have @inherits Various bugfixes + some enhancements. ✅ Refactored Razor and WebApi base classes to use Composition over Inheritance ✅ RazorBlade upgrade from v4.2.0 to 4.4.0 (also for .net 7 compatibility) ✅ Feature to not show edit-toolbar buttons on HTML coming from Resources ✅ Improve not showing a metadata-toolbar on images which are coming from demo-items Dnn / Evoq ✅ Downgrade SQL to still work with SQL Server 2012 as people had trouble upgrading #3120 ✅ Since ImageFlow was upgraded, the following DLLs were also upgraded Imageflow, 0.7.24 -> 0.10.0 Imageflow.Net, 0.7.24 -> 0.10.0 Imazen.Common, 0.7.7 -> 0.8.1 Imazen.HybridCache, 0.7.7 -> 0.8.1 Newtonsoft.Json, Version=10.0.0.0 -> 13.0.0.0 ✅ As part of the upgrade we also had to upgrade some MS DLLs Microsoft.Bcl.AsyncInterfaces, Version=6.0.0.0 -> 7.0.0.0 System.Collections.Immutable, Version=6.0.0.0 -> 7.0.0.0 System.Text.Encodings.Web, Version=6.0.0.0 -> 7.0.0.0 System.Text.Json, Version=6.0.0.0 -> 7.0.0.2 System.Memory, Version=4.0.1.1 -> 4.0.1.2 Oqtane ✅ Oqtane 4.0 Support (with .net 7) #3123 ✅ Reworked API Middleware to avoid conflicts with OAuth 2 Minor Bugfixes \uD83E\uDEB2 Fixed issue with Swiper not being able to add slides #3108 #3112 \uD83E\uDEB2 Fixed issue with DatePicker in Edge and also added more cultures #3113 ✅ Changed internal APIs to return RazorBlade IHtmlTag objects instead of previously IHybridHtmlString #3098 2sxc v16.03 (2023-08-21) Enhancements around Typed Code ✅ Typed: rename RazorPro to RazorTyped etc. #3147 ✅ Make all typed objects very strict when checking if fields exist ✅ Add much more helpful info / error when fields not found ✅ Typed: Massively enhanced with strict checks and reduced the possibility of writing code which doesn't do anything ✅ Typed: ITypedItem now has a new .Picture(...) method making the code nicer #3135 ✅ Typed: ITypedItems can now be mocked #3141 to create alternate data in code when no data exists ✅ Typed: New methods ContainsKey(...), Keys(...) #3142 ✅ Typed: New methods IsEmpty(...) and IsNotEmpty(...) #3144 ✅ Typed: method .String(..., scrubHtml) now also accepts a string containing tags to remove #3146 ✅ Typed: If an error occurs, much more information is provided as to how to fix #3143 #3145 ✅ Typed Json: now also supports paths, so you can use Kit.Json.ToTyped(jsonString).Int(\"Root.Child.Id\") ✅ Typed Json: now also strict using propsRequired by default ✅ Typed: the property .Dyn now only exists on ITypedItem (entity-based) and not on other wrappers Other Enhancements ✅ Image Resizer: New Square resize settings #3134 ✅ Image Resizer: ImageService can now also handle IFile objects and get the metadata automatically #3140 ✅ Web Farm Cache: Updated for v16.02+ (enterprise customers only) ✅ Page Parameters: now support ITyped so you can use MyPage.Parameters.Int(\"id\") and similar Support for Developers ✅ Errors now highlight the .cshtml line which caused the error ✅ Errors on mistyped property names now gives very detailed information about it DNN / Evoq ✅ Image Resizer: Upgrade to dnn-imageflow 1.2.1 #3130 ✅ Newtonsoft internal version in DNN Manifest now matches 13.0.3 Oqtane ✅ Oqtane: Better error when Oqtane in installed without sufficient DB permissions #3128 / #3131 ✅ Internal: Code cleanup with warnings new EF-Core #3132 ✅ Internal: EF Core QuerySplittingBehavior #3133 Minor Bugfixes \uD83E\uDEB2 turnOn failed on AJAX reloads during editing #3127 \uD83E\uDEB2 Oqtane: Bugfix importing App Assets #3129 \uD83E\uDEB2 Web Farm Cache: Fix issue which occured on license uploads \uD83E\uDEB2 Licenses: fix issue with multiple licenses / names resulting in an unlicensed message 2sxc v16.04 (2023-09-05) Highlight: UniqueKey ✅ Razor: New UniqueKey property (in Typed mode) #3151 ✅ Razor: New Kit.Keys.UniqueKeyWith(...) for unique IDs and working with JS #3152 Images ✅ Images: Images in rich wysiwyg mode now are shown nicely after import into other site ✅ Images: Dialog-Options to set empty title and not use fallback #3150 ✅ Images: Enable crop/title dialog for public files, with delayed toolbar and warning-hint #3057 ✅ Images: Fix Safari bug with small images #2 ✅ Images: Ability to specify alternate toolbar #3157 ✅ Images: Ability to specify no toolbar #3158 ✅ Images: Ability to use Toolbar outside of main picture/img tag using img.Toolbar() #3156 ✅ Images: Metadata now also has a DescriptionExtended Razor in Typed Mode ✅ MyModel: Improve handling fallback / required #3149 ✅ App.Folder.Url to replace App.Path for clearer APIs ✅ App.GetQuery(...) to replace App.Query[name] ✅ All ITyped objects now behave strict by default ✅ Complete various scenarios for ITyped with unit tests, especially conversion of anonymous and json-based ITyped ✅ All ITyped now have APIs for ContainsKey, IsEmpty and IsNotEmpty ✅ Razor: Errors now highlight the .cshtml file with a \uD83C\uDFAF emoji GetDraft / GetPublished (decided not to implement yet) ✅ Override Equality operations - using ITyped.Equals Oqtane \uD83E\uDE78 Improve indexing in Google #3154 \uD83E\uDE78 Improve pre-render adding JS/CSS \uD83E\uDE78 Improve page header changes (title, metadata) using latest Oqtane 4 APIs Patrons \uD83E\uDDB8\uD83C\uDFFD New feature to better control language fallback sequence (beta) #3159 \uD83E\uDDB8\uD83C\uDFFD Improve showing expired features - important when testing a feature for 24h Bugfixes \uD83E\uDEB2 Languages: Bug in UI: Some labels and dropdown-labels didn't show in current language #3153 \uD83E\uDEB2 lots of minor bugfixes 2sxc v16.06 (2023-09-20) ✅ Tutorials for new Pro mode / Quick-Ref ✅ Optimize build of 2sxc to use local config-files so it's easier for others to contribute @STV ✅ Improve JS build to make it easier for others to contribute ✅ Improve headers handling in Oqtane 4 2sxc v16.07 LTS (2023-09-22) ✅ new TypeItem.Parent(...) - especially. .Parent(current: true) api #3173 ✅ new parameters to the .Picture(...) incl. picClass, imgAttributes and picAttributes ✅ fix bug where presentation data was generated even if not used #3185 Major: Release 16.07 LTS \uD83D\uDE80 2sxc v16.09 (2023-11-22) ✅ TypedItem.Picture(\"Child.Property\") path notation ✅ fix js minification of inpage.min.js ✅ Release all apps in the new typed mode ✅ Blazor .net 8 / Oqtane 5 support ✅ Improve file-upload to prevent files with \"..\" in the name ✅ Improve DataSource Caching and cache-flushing ✅ Add new (beta ⌛) feature for copyright management (Patron AdvancedCMS) to add copyright info to each image ✅ Extend SQL Database to store SysSettings and Guid on Attributes for future features \uD83D\uDC1E Fix minor issue with old .Code for older Razor base classes \uD83D\uDC1E Fix minor issue with edit-dialog in scenarios with multiple portal aliases \uD83D\uDC1E Fix minor issue with IMetadata.Children(...) / ...Child(...) #3217 \uD83D\uDC1E Fix DataSource LanguageModeler #3219 \uD83D\uDC1E Fix DataSource TreeMapper \uD83E\uDE78 Oqtane: Adam backend didn't always serialize all properties #3206"
  },
  "abyss/releases/history/v17/_all.html": {
    "href": "abyss/releases/history/v17/_all.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 17 2sxc v17.00 (2023-12-23) ✅ DNN: Require CodeDome C# 7.3 to be installed ✅ Docs infrastructure can now be multi-versioned ✅ Show app icon in admin UI ✅ Ctrl+Click on toolbar buttons to open in new tab ✅ Completely refactor internal APIs to do advanced work and save data ✅ Change UI to use Angular 17 (from Angular 14) ✅ Get intellisense to work in VS Code ✅ Work out best way to do this in VS Code ✅ Work out best way to hide non-public APIs ✅ Work out best way to include docs (xml files, nuget, etc.) ✅ Support C# 7.3 in DNN with warning if not installed ✅ System Capabilities Framework for tagging apps which need certain technologies/features ✅ Crazy new compiled typed shared code /ThisApp/Code - see Hot App Code ✅ New APIs on Typed Code IsPublished Publishing Publishing.HasPublished, Publishing.HasUnpublished, Publishing.HasBoth Publishing.GetPublished(), Publishing.GetUnpublished(), Publishing.GetOpposite() 2sxc v17.01 (2024-01-18) Moved almost all internal APIs in the ToSic.Sxc namespace to hidden locations #3189 Marked a lot of internal APIs so that they won't appear in IntelliSense ♨️ HotBuild: Improved errors in Razor so the user can better find them #3246 ♨️ HotBuild: Improved errors when compiling ThisApp #3247 ♨️ HotBuild: Support Editions such as live and staging with auto-fallback #3248 ♨️ Roslyn: Improve error if @inherits ends in semicolon #3245 ♨️ HotBuild: Show all compiled types in insights ♨️ HotBuild: Minimize exact pre-included namespaces ♨️ HotBuild: Performance Improvements \uD83D\uDFE3 Toolbars: Show hover on layout button after a delay with module-infos #3251 New Features / Important Improvements Kit.PageParameters now has new commands Toggle(...), Remove(...) and Filter(...) see docs #3241 #3242 #3243 \uD83D\uDFE3 Toolbars: Tweak Notes can now delay and linger #3250 docs Create-New File now shows templates for RazorTyped, CodeTyped and ApiTyped ✏️ App-Management UI now uses a left-menu (experimental) ✏️ Edit-UI: Boolean fields can now be toggled by clicking on the label \uD83D\uDDBC️ Resizer: Improve handling of images in virtual-application folders Bugfixes ITypedItem.Equals now works #3213 Old Render APIs were broken, which affected News App 4.1.1 and others #3252 Fix bug with UniqueKey which affected HotSpots App Various minor UI bugfixes related to the entity-picker and dropdowns 2sxc v17.01.04 Minor enhancements and bugfixes Image toolbar now shows resize specs \uD83C\uDF1F #3270 Toolbar notes now support a format = html #3271 Edit inner-content in accordions for non-website-admins #3234 Old Razor base class - PageData didn't always work #3260 HotBuild now respects additional assemblies from web.config #3272 2sxc v17.01.05 minor bugfixes l enhancements including dropdown pills fixed #3269 REST Query API fails when used from \"outside\" #3274 page picker in UI is broken in 17.01.04 #3276 auto-serialized ITypedItem and IEnumerable<ITypedItem> #3277 refactor an internal old API to init app-objects #3275 HotBuild Performance Improvements (locking / caching) HotBuild improve detection when CS files inherit from ThisApp base 1. classes Internal Lookup System Performance Improvements internal work for the new Picker-UI system 2sxc v17.01.06 Upgrade System.Data.SqlClient #3209 TweakButton on dynamic code #3279 Edit menu in Dnn fix #3280 Bug with dropdowns #3281 Export/Import App now includes hidden entities #3282 Export/Import App now includes Attribute SysSettings #3283 2sxc v17.01.07 ajax reload on details-pages eg. blog-post #3287 SQL DataSource can't connect #sql #3285 2sxc v17.02 (2024-02-22) ✅ Improve infos about layout in toolbar ✅ Improve infos about image resizer in toolbar ✅ Improve Create New App Experience ✅ Create new app template ✅ Improve the new app wizard - allow selecting template ✅ Improve create-app code to use the new template ✅ Update Monaco to latest version ✅ Ability to change input config types/metadata - eg. skip @String when never needed ✅ Improve HotBuild ✅ Improve initial list of included assemblies and namespaces @STV ✅ Improve caching of information how to build/compile to improve speed ✅ Add support for sub-folders ✅ Support Editions ✅ Improve error messages on building the ThisCode folder ✅ Improve error messages when building Razor and C# using Roslyn ✅ Improve detection so that build is locking (prevent multiple builds on high-load) ✅ Create system to generate models ✅ Provide special UI to build the code and debug Copilot ✅ Switch to AppCode ThisApp ✅ Provide final place for base type ✅ Custom.Data.CustomItem base class ✅ GPS data ✅ fix/improve date picker ✅ Ability to share field configurations ✅ Custom config inherit from multiple sources for keeping the Label ✅ Preserve config on export/import https://github.com/2sic/2sxc/releases/tag/v17.02.00 2sxc v17.03 (2024-03-04) ✅ New Pickers released with a lot of features, incl. Sources, custom labels, help, tooltips, multi-select and much more! ✅ Ability to install recommended apps in a later step! ✅ New typed razor RazorTyped<TModel> ✅ New typed App using IAppTyped<TSettings, TResources> ✅ Publish As<Type> and AsList<Type> API ✅ Publish App.Data.GetAll<TModel>() and App.Data.GetOne<TModel>(id) APIs ✅ New Custom.Data.CustomItem base class with GPS data, As<Type> and AsList<Type> API ✅ improve App_Data/app.json schema to include editions for Copilot ✅ Add template app Basic and Empty ✅ Intellisense: Find way to link to the official docs from inside the help 2sxc v17.04 (2024-03-11) Improvements MyView.Resources added to complement existing MyView.Settings #3315 ITypedItem.Img(...) added to complement exitsing ITypedItem.Picture(...) #3324 Dnn improve Roslyn build performance in many cases from ca. 2.5 seconds to 0.5 seconds #3322 Query: Improve $select OData parameter REST API - add $select OData Parameter #3319 Razor / Typed Code: add a Customize helper ojbect #3316 Admin UI - Data Scopes now show count Add Razor compile code help for more common problem such as accessing typed-items dynamically Improve razor compile help - show errors before warnings Picker - auto extract additional fields to retrieve based on placeholders in Label / Help texts etc. Generate Data Models Improvements Include Scope name Include content-types in Configuration scope CustomItem - implement == and != operators to use wrapper equality Lots of docs for custom data app.json editions configuration, add isDefault Bugfixes UI Date Picker - fix but with UTC offset #3321 UI Page Picker - fix, was broken in 17.03.00 #3320 Calling Query using JS missed the Id property #3325 Admin: state of the DateTime Show-Time toggle didn't properly get persisted #3318 2sxc v17.05 (2024-03-25) We believe this is stable, but ask the community to do in-depth testing so we can release an LTS Highlights Improved Code-Generator to be in a standalone DLL ToSic.Sxc.Code.Generate Improved Code-Generator to generate Razor, Code and WebApi base classes Enhancements Impove image-resize tooltip #3329 $2sxc JS used in modules which are rendered into Dnn themes #3333 Improve logging of parameters of DataSources (eg. Value-Filter DS) Prepare for Oqtane 5 SSR Improve architecture for generating App-objects in the background Bugs fixed various admin and replace-operations on inner-content #3299 fix quickE when selecting content-blocks #3317 Token templates - fix some toolbars #3328 Fix issue with Oqtane urls Fix issue with Oqtane WebApis which affected Blog RSS feed 2sxc v17.06 LTS (2024-03-28) The first LTS (Long-Term-Stable) Release of 2sxc 17. Easter LTS Release ✅ Prepare for Oqtane SSR (Server-Side Rendering) ✅ Provide Code Generator for Content Types, Razor and Services ✅ Improve discoverability of REST APIs ✅ Document new Pro Typed mode ✅ Document new strong-typed mode ✅ Auto-Install more apps from catalog - even after some have already been installed - ca. 1d ✅ Feature to tell new auto-installer what apps are already installed ✅ App-Auto-Installer UI to add-install apps later on ✅ LTS Bugfixes When accessing an App through another app (eg first going to Apps-Management) it show the data of the original app Opening features in Apps-Management didn't work reliably Edit-UI Picker / Dropdown code was cleaned up Copilot Razor Generator ready to use Copilot Service generator ready to use Copilot WebApi generator ready to use Copilot previously failed if the AppCode folder was missing Fix to a data-caching issue in 17.05 (this was important) 2sxc v17.07 (2024-05-04) published/blogged: ✅/✅ 2sxc 17.07 ✅/✅ 2shine 5.3 (May 4th) ✅/✅ Content App 17.07 (May 6th) ✅/✅ Mobius Form Builder 06.00 for 2sxc 17.07 (May 7th) ✅/✅ Release all apps as typed (May 8th) 2sxc v17.08 (2024-05-16) ✅ WebApi in AppCode ✅ DataSources in AppCode ✅ ITemplateService ✅ Add CmsContext.Block and CmsContext.Module.Block as well as Block.Guid ✅ Cache Service internal ✅ Switch Edition UI ✅ Switch Edition Permissions for non-super users ✅ Update Image Resizer ✅ Re-Release another LTS ca. 17.09"
  },
  "abyss/releases/history/v17/_brc.html": {
    "href": "abyss/releases/history/v17/_brc.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v17 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Minor breaking changes which probably won't affect you, unless you're using some very advanced features. v17.00 ToSic.Eav.App.AppData is renamed to ToSic.Eav.Apps.DataSources.AppDataWithCrud In Typed mode, the App.Data now has a different interface ToSic.Sxc.Apps.IAppDataTyped AppState changes... App object had a hidden AppState property which was never documented and is now removed. If you were using it, then probably to access GetContentType(string). You can find a replacement on App.Data.GetContentType(...). Shortlink: https://go.2sxc.org/brc-17"
  },
  "abyss/releases/history/v17/_brc17-planned.html": {
    "href": "abyss/releases/history/v17/_brc17-planned.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Planned Removals for 2sxc v17 For 2sxc 17 we plan to remove some very old APIs. The process is as follows: Mark the API as deprecated in the code Add internal code which warns the admin that the App is using deprecated code Provide guidance here how to resolve Make sure the warnings have been around for at least 6 months Remove the code on the next major release For v17 we plan to remove some very old APIs, which we believe are probably not even used any more. This is the list: The old namespace ToSic.SexyContent.Interfaces.IApp and all related code We believe this is probably not used at all, since it's probably only ever used to access App.Configuration which is dynamic when using this interface, but a normal object with typed properties when using the normal ToSic.Sxc.Apps.IApp interface. Guide to Fixing Issues Fixing SexyContent.Interfaces.IApp removal Background A long time ago 2sxc was called SexyContent and we used the namespace ToSic.SexyContent.Interfaces for various things. Ca. 2014, we decided to rename it to 2sxc and use a ToSic.Sxc namespace instead. In addition to that, we created a clearer namespace structure. Am I Affected? Most code does not explicitly use namespaces, and if your code is newer than 2016, you are probably not affected. But if you have any code which uses the namespace ToSic.SexyContent in your Razor or C# code you are affected. This is especially true if you have code such as: using SexyContent.Interfaces; IApp app = App; var version = app.Configuration.Version; How to Fix It's difficult to give you an exact guideline, because we don't know what your code does. But in most cases, you'll just be working with the current App object which is typed as IApp. So in most cases, you don't need to specify the type at all, just use something like: var app = App; var version = App.Configuration.Get(\"Version\");"
  },
  "abyss/releases/history/v17/_changes17.00.html": {
    "href": "abyss/releases/history/v17/_changes17.00.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.00 (2023-12-23) ✅ DNN: Require CodeDome C# 7.3 to be installed ✅ Docs infrastructure can now be multi-versioned ✅ Show app icon in admin UI ✅ Ctrl+Click on toolbar buttons to open in new tab ✅ Completely refactor internal APIs to do advanced work and save data ✅ Change UI to use Angular 17 (from Angular 14) ✅ Get intellisense to work in VS Code ✅ Work out best way to do this in VS Code ✅ Work out best way to hide non-public APIs ✅ Work out best way to include docs (xml files, nuget, etc.) ✅ Support C# 7.3 in DNN with warning if not installed ✅ System Capabilities Framework for tagging apps which need certain technologies/features ✅ Crazy new compiled typed shared code /ThisApp/Code - see Hot App Code ✅ New APIs on Typed Code IsPublished Publishing Publishing.HasPublished, Publishing.HasUnpublished, Publishing.HasBoth Publishing.GetPublished(), Publishing.GetUnpublished(), Publishing.GetOpposite()"
  },
  "abyss/releases/history/v17/_changes17.01.html": {
    "href": "abyss/releases/history/v17/_changes17.01.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.01 (2024-01-18) Moved almost all internal APIs in the ToSic.Sxc namespace to hidden locations #3189 Marked a lot of internal APIs so that they won't appear in IntelliSense ♨️ HotBuild: Improved errors in Razor so the user can better find them #3246 ♨️ HotBuild: Improved errors when compiling ThisApp #3247 ♨️ HotBuild: Support Editions such as live and staging with auto-fallback #3248 ♨️ Roslyn: Improve error if @inherits ends in semicolon #3245 ♨️ HotBuild: Show all compiled types in insights ♨️ HotBuild: Minimize exact pre-included namespaces ♨️ HotBuild: Performance Improvements \uD83D\uDFE3 Toolbars: Show hover on layout button after a delay with module-infos #3251 New Features / Important Improvements Kit.PageParameters now has new commands Toggle(...), Remove(...) and Filter(...) see docs #3241 #3242 #3243 \uD83D\uDFE3 Toolbars: Tweak Notes can now delay and linger #3250 docs Create-New File now shows templates for RazorTyped, CodeTyped and ApiTyped ✏️ App-Management UI now uses a left-menu (experimental) ✏️ Edit-UI: Boolean fields can now be toggled by clicking on the label \uD83D\uDDBC️ Resizer: Improve handling of images in virtual-application folders Bugfixes ITypedItem.Equals now works #3213 Old Render APIs were broken, which affected News App 4.1.1 and others #3252 Fix bug with UniqueKey which affected HotSpots App Various minor UI bugfixes related to the entity-picker and dropdowns 2sxc v17.01.04 Minor enhancements and bugfixes Image toolbar now shows resize specs \uD83C\uDF1F #3270 Toolbar notes now support a format = html #3271 Edit inner-content in accordions for non-website-admins #3234 Old Razor base class - PageData didn't always work #3260 HotBuild now respects additional assemblies from web.config #3272 2sxc v17.01.05 minor bugfixes l enhancements including dropdown pills fixed #3269 REST Query API fails when used from \"outside\" #3274 page picker in UI is broken in 17.01.04 #3276 auto-serialized ITypedItem and IEnumerable<ITypedItem> #3277 refactor an internal old API to init app-objects #3275 HotBuild Performance Improvements (locking / caching) HotBuild improve detection when CS files inherit from ThisApp base 1. classes Internal Lookup System Performance Improvements internal work for the new Picker-UI system 2sxc v17.01.06 Upgrade System.Data.SqlClient #3209 TweakButton on dynamic code #3279 Edit menu in Dnn fix #3280 Bug with dropdowns #3281 Export/Import App now includes hidden entities #3282 Export/Import App now includes Attribute SysSettings #3283 2sxc v17.01.07 ajax reload on details-pages eg. blog-post #3287 SQL DataSource can't connect #sql #3285"
  },
  "abyss/releases/history/v17/_changes17.02.html": {
    "href": "abyss/releases/history/v17/_changes17.02.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.02 (2024-02-22) ✅ Improve infos about layout in toolbar ✅ Improve infos about image resizer in toolbar ✅ Improve Create New App Experience ✅ Create new app template ✅ Improve the new app wizard - allow selecting template ✅ Improve create-app code to use the new template ✅ Update Monaco to latest version ✅ Ability to change input config types/metadata - eg. skip @String when never needed ✅ Improve HotBuild ✅ Improve initial list of included assemblies and namespaces @STV ✅ Improve caching of information how to build/compile to improve speed ✅ Add support for sub-folders ✅ Support Editions ✅ Improve error messages on building the ThisCode folder ✅ Improve error messages when building Razor and C# using Roslyn ✅ Improve detection so that build is locking (prevent multiple builds on high-load) ✅ Create system to generate models ✅ Provide special UI to build the code and debug Copilot ✅ Switch to AppCode ThisApp ✅ Provide final place for base type ✅ Custom.Data.CustomItem base class ✅ GPS data ✅ fix/improve date picker ✅ Ability to share field configurations ✅ Custom config inherit from multiple sources for keeping the Label ✅ Preserve config on export/import https://github.com/2sic/2sxc/releases/tag/v17.02.00"
  },
  "abyss/releases/history/v17/_changes17.03.html": {
    "href": "abyss/releases/history/v17/_changes17.03.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.03 (2024-03-04) ✅ New Pickers released with a lot of features, incl. Sources, custom labels, help, tooltips, multi-select and much more! ✅ Ability to install recommended apps in a later step! ✅ New typed razor RazorTyped<TModel> ✅ New typed App using IAppTyped<TSettings, TResources> ✅ Publish As<Type> and AsList<Type> API ✅ Publish App.Data.GetAll<TModel>() and App.Data.GetOne<TModel>(id) APIs ✅ New Custom.Data.CustomItem base class with GPS data, As<Type> and AsList<Type> API ✅ improve App_Data/app.json schema to include editions for Copilot ✅ Add template app Basic and Empty ✅ Intellisense: Find way to link to the official docs from inside the help"
  },
  "abyss/releases/history/v17/_changes17.04.html": {
    "href": "abyss/releases/history/v17/_changes17.04.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.04 (2024-03-11) Improvements MyView.Resources added to complement existing MyView.Settings #3315 ITypedItem.Img(...) added to complement exitsing ITypedItem.Picture(...) #3324 Dnn improve Roslyn build performance in many cases from ca. 2.5 seconds to 0.5 seconds #3322 Query: Improve $select OData parameter REST API - add $select OData Parameter #3319 Razor / Typed Code: add a Customize helper ojbect #3316 Admin UI - Data Scopes now show count Add Razor compile code help for more common problem such as accessing typed-items dynamically Improve razor compile help - show errors before warnings Picker - auto extract additional fields to retrieve based on placeholders in Label / Help texts etc. Generate Data Models Improvements Include Scope name Include content-types in Configuration scope CustomItem - implement == and != operators to use wrapper equality Lots of docs for custom data app.json editions configuration, add isDefault Bugfixes UI Date Picker - fix but with UTC offset #3321 UI Page Picker - fix, was broken in 17.03.00 #3320 Calling Query using JS missed the Id property #3325 Admin: state of the DateTime Show-Time toggle didn't properly get persisted #3318"
  },
  "abyss/releases/history/v17/_changes17.05.html": {
    "href": "abyss/releases/history/v17/_changes17.05.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.05 (2024-03-25) We believe this is stable, but ask the community to do in-depth testing so we can release an LTS Highlights Improved Code-Generator to be in a standalone DLL ToSic.Sxc.Code.Generate Improved Code-Generator to generate Razor, Code and WebApi base classes Enhancements Impove image-resize tooltip #3329 $2sxc JS used in modules which are rendered into Dnn themes #3333 Improve logging of parameters of DataSources (eg. Value-Filter DS) Prepare for Oqtane 5 SSR Improve architecture for generating App-objects in the background Bugs fixed various admin and replace-operations on inner-content #3299 fix quickE when selecting content-blocks #3317 Token templates - fix some toolbars #3328 Fix issue with Oqtane urls Fix issue with Oqtane WebApis which affected Blog RSS feed"
  },
  "abyss/releases/history/v17/_changes17.06.html": {
    "href": "abyss/releases/history/v17/_changes17.06.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.06 LTS (2024-03-28) The first LTS (Long-Term-Stable) Release of 2sxc 17. Easter LTS Release ✅ Prepare for Oqtane SSR (Server-Side Rendering) ✅ Provide Code Generator for Content Types, Razor and Services ✅ Improve discoverability of REST APIs ✅ Document new Pro Typed mode ✅ Document new strong-typed mode ✅ Auto-Install more apps from catalog - even after some have already been installed - ca. 1d ✅ Feature to tell new auto-installer what apps are already installed ✅ App-Auto-Installer UI to add-install apps later on ✅ LTS Bugfixes When accessing an App through another app (eg first going to Apps-Management) it show the data of the original app Opening features in Apps-Management didn't work reliably Edit-UI Picker / Dropdown code was cleaned up Copilot Razor Generator ready to use Copilot Service generator ready to use Copilot WebApi generator ready to use Copilot previously failed if the AppCode folder was missing Fix to a data-caching issue in 17.05 (this was important)"
  },
  "abyss/releases/history/v17/_changes17.07.html": {
    "href": "abyss/releases/history/v17/_changes17.07.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.07 (2024-05-04) published/blogged: ✅/✅ 2sxc 17.07 ✅/✅ 2shine 5.3 (May 4th) ✅/✅ Content App 17.07 (May 6th) ✅/✅ Mobius Form Builder 06.00 for 2sxc 17.07 (May 7th) ✅/✅ Release all apps as typed (May 8th)"
  },
  "abyss/releases/history/v17/_changes17.08.html": {
    "href": "abyss/releases/history/v17/_changes17.08.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v17.08 (2024-05-16) ✅ WebApi in AppCode ✅ DataSources in AppCode ✅ ITemplateService ✅ Add CmsContext.Block and CmsContext.Module.Block as well as Block.Guid ✅ Cache Service internal ✅ Switch Edition UI ✅ Switch Edition Permissions for non-super users ✅ Update Image Resizer ✅ Re-Release another LTS ca. 17.09"
  },
  "abyss/releases/history/v17/breaking.html": {
    "href": "abyss/releases/history/v17/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc v17 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v17 Breaking Changes in EAV and 2sxc v17 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Minor breaking changes which probably won't affect you, unless you're using some very advanced features. v17.00 ToSic.Eav.App.AppData is renamed to ToSic.Eav.Apps.DataSources.AppDataWithCrud In Typed mode, the App.Data now has a different interface ToSic.Sxc.Apps.IAppDataTyped AppState changes... App object had a hidden AppState property which was never documented and is now removed. If you were using it, then probably to access GetContentType(string). You can find a replacement on App.Data.GetContentType(...). Shortlink: https://go.2sxc.org/brc-17 Planned Removals for 2sxc v17 For 2sxc 17 we plan to remove some very old APIs. The process is as follows: Mark the API as deprecated in the code Add internal code which warns the admin that the App is using deprecated code Provide guidance here how to resolve Make sure the warnings have been around for at least 6 months Remove the code on the next major release For v17 we plan to remove some very old APIs, which we believe are probably not even used any more. This is the list: The old namespace ToSic.SexyContent.Interfaces.IApp and all related code We believe this is probably not used at all, since it's probably only ever used to access App.Configuration which is dynamic when using this interface, but a normal object with typed properties when using the normal ToSic.Sxc.Apps.IApp interface. Guide to Fixing Issues Fixing SexyContent.Interfaces.IApp removal Background A long time ago 2sxc was called SexyContent and we used the namespace ToSic.SexyContent.Interfaces for various things. Ca. 2014, we decided to rename it to 2sxc and use a ToSic.Sxc namespace instead. In addition to that, we created a clearer namespace structure. Am I Affected? Most code does not explicitly use namespaces, and if your code is newer than 2016, you are probably not affected. But if you have any code which uses the namespace ToSic.SexyContent in your Razor or C# code you are affected. This is especially true if you have code such as: using SexyContent.Interfaces; IApp app = App; var version = app.Configuration.Version; How to Fix It's difficult to give you an exact guideline, because we don't know what your code does. But in most cases, you'll just be working with the current App object which is typed as IApp. So in most cases, you don't need to specify the type at all, just use something like: var app = App; var version = App.Configuration.Get(\"Version\");"
  },
  "abyss/releases/history/v17/index.html": {
    "href": "abyss/releases/history/v17/index.html",
    "title": "All Changes in 2sxc and EAV v17 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in 2sxc and EAV v17 Version 17 2sxc v17.00 (2023-12-23) ✅ DNN: Require CodeDome C# 7.3 to be installed ✅ Docs infrastructure can now be multi-versioned ✅ Show app icon in admin UI ✅ Ctrl+Click on toolbar buttons to open in new tab ✅ Completely refactor internal APIs to do advanced work and save data ✅ Change UI to use Angular 17 (from Angular 14) ✅ Get intellisense to work in VS Code ✅ Work out best way to do this in VS Code ✅ Work out best way to hide non-public APIs ✅ Work out best way to include docs (xml files, nuget, etc.) ✅ Support C# 7.3 in DNN with warning if not installed ✅ System Capabilities Framework for tagging apps which need certain technologies/features ✅ Crazy new compiled typed shared code /ThisApp/Code - see Hot App Code ✅ New APIs on Typed Code IsPublished Publishing Publishing.HasPublished, Publishing.HasUnpublished, Publishing.HasBoth Publishing.GetPublished(), Publishing.GetUnpublished(), Publishing.GetOpposite() 2sxc v17.01 (2024-01-18) Moved almost all internal APIs in the ToSic.Sxc namespace to hidden locations #3189 Marked a lot of internal APIs so that they won't appear in IntelliSense ♨️ HotBuild: Improved errors in Razor so the user can better find them #3246 ♨️ HotBuild: Improved errors when compiling ThisApp #3247 ♨️ HotBuild: Support Editions such as live and staging with auto-fallback #3248 ♨️ Roslyn: Improve error if @inherits ends in semicolon #3245 ♨️ HotBuild: Show all compiled types in insights ♨️ HotBuild: Minimize exact pre-included namespaces ♨️ HotBuild: Performance Improvements \uD83D\uDFE3 Toolbars: Show hover on layout button after a delay with module-infos #3251 New Features / Important Improvements Kit.PageParameters now has new commands Toggle(...), Remove(...) and Filter(...) see docs #3241 #3242 #3243 \uD83D\uDFE3 Toolbars: Tweak Notes can now delay and linger #3250 docs Create-New File now shows templates for RazorTyped, CodeTyped and ApiTyped ✏️ App-Management UI now uses a left-menu (experimental) ✏️ Edit-UI: Boolean fields can now be toggled by clicking on the label \uD83D\uDDBC️ Resizer: Improve handling of images in virtual-application folders Bugfixes ITypedItem.Equals now works #3213 Old Render APIs were broken, which affected News App 4.1.1 and others #3252 Fix bug with UniqueKey which affected HotSpots App Various minor UI bugfixes related to the entity-picker and dropdowns 2sxc v17.01.04 Minor enhancements and bugfixes Image toolbar now shows resize specs \uD83C\uDF1F #3270 Toolbar notes now support a format = html #3271 Edit inner-content in accordions for non-website-admins #3234 Old Razor base class - PageData didn't always work #3260 HotBuild now respects additional assemblies from web.config #3272 2sxc v17.01.05 minor bugfixes l enhancements including dropdown pills fixed #3269 REST Query API fails when used from \"outside\" #3274 page picker in UI is broken in 17.01.04 #3276 auto-serialized ITypedItem and IEnumerable<ITypedItem> #3277 refactor an internal old API to init app-objects #3275 HotBuild Performance Improvements (locking / caching) HotBuild improve detection when CS files inherit from ThisApp base 1. classes Internal Lookup System Performance Improvements internal work for the new Picker-UI system 2sxc v17.01.06 Upgrade System.Data.SqlClient #3209 TweakButton on dynamic code #3279 Edit menu in Dnn fix #3280 Bug with dropdowns #3281 Export/Import App now includes hidden entities #3282 Export/Import App now includes Attribute SysSettings #3283 2sxc v17.01.07 ajax reload on details-pages eg. blog-post #3287 SQL DataSource can't connect #sql #3285 2sxc v17.02 (2024-02-22) ✅ Improve infos about layout in toolbar ✅ Improve infos about image resizer in toolbar ✅ Improve Create New App Experience ✅ Create new app template ✅ Improve the new app wizard - allow selecting template ✅ Improve create-app code to use the new template ✅ Update Monaco to latest version ✅ Ability to change input config types/metadata - eg. skip @String when never needed ✅ Improve HotBuild ✅ Improve initial list of included assemblies and namespaces @STV ✅ Improve caching of information how to build/compile to improve speed ✅ Add support for sub-folders ✅ Support Editions ✅ Improve error messages on building the ThisCode folder ✅ Improve error messages when building Razor and C# using Roslyn ✅ Improve detection so that build is locking (prevent multiple builds on high-load) ✅ Create system to generate models ✅ Provide special UI to build the code and debug Copilot ✅ Switch to AppCode ThisApp ✅ Provide final place for base type ✅ Custom.Data.CustomItem base class ✅ GPS data ✅ fix/improve date picker ✅ Ability to share field configurations ✅ Custom config inherit from multiple sources for keeping the Label ✅ Preserve config on export/import https://github.com/2sic/2sxc/releases/tag/v17.02.00 2sxc v17.03 (2024-03-04) ✅ New Pickers released with a lot of features, incl. Sources, custom labels, help, tooltips, multi-select and much more! ✅ Ability to install recommended apps in a later step! ✅ New typed razor RazorTyped<TModel> ✅ New typed App using IAppTyped<TSettings, TResources> ✅ Publish As<Type> and AsList<Type> API ✅ Publish App.Data.GetAll<TModel>() and App.Data.GetOne<TModel>(id) APIs ✅ New Custom.Data.CustomItem base class with GPS data, As<Type> and AsList<Type> API ✅ improve App_Data/app.json schema to include editions for Copilot ✅ Add template app Basic and Empty ✅ Intellisense: Find way to link to the official docs from inside the help 2sxc v17.04 (2024-03-11) Improvements MyView.Resources added to complement existing MyView.Settings #3315 ITypedItem.Img(...) added to complement exitsing ITypedItem.Picture(...) #3324 Dnn improve Roslyn build performance in many cases from ca. 2.5 seconds to 0.5 seconds #3322 Query: Improve $select OData parameter REST API - add $select OData Parameter #3319 Razor / Typed Code: add a Customize helper ojbect #3316 Admin UI - Data Scopes now show count Add Razor compile code help for more common problem such as accessing typed-items dynamically Improve razor compile help - show errors before warnings Picker - auto extract additional fields to retrieve based on placeholders in Label / Help texts etc. Generate Data Models Improvements Include Scope name Include content-types in Configuration scope CustomItem - implement == and != operators to use wrapper equality Lots of docs for custom data app.json editions configuration, add isDefault Bugfixes UI Date Picker - fix but with UTC offset #3321 UI Page Picker - fix, was broken in 17.03.00 #3320 Calling Query using JS missed the Id property #3325 Admin: state of the DateTime Show-Time toggle didn't properly get persisted #3318 2sxc v17.05 (2024-03-25) We believe this is stable, but ask the community to do in-depth testing so we can release an LTS Highlights Improved Code-Generator to be in a standalone DLL ToSic.Sxc.Code.Generate Improved Code-Generator to generate Razor, Code and WebApi base classes Enhancements Impove image-resize tooltip #3329 $2sxc JS used in modules which are rendered into Dnn themes #3333 Improve logging of parameters of DataSources (eg. Value-Filter DS) Prepare for Oqtane 5 SSR Improve architecture for generating App-objects in the background Bugs fixed various admin and replace-operations on inner-content #3299 fix quickE when selecting content-blocks #3317 Token templates - fix some toolbars #3328 Fix issue with Oqtane urls Fix issue with Oqtane WebApis which affected Blog RSS feed 2sxc v17.06 LTS (2024-03-28) The first LTS (Long-Term-Stable) Release of 2sxc 17. Easter LTS Release ✅ Prepare for Oqtane SSR (Server-Side Rendering) ✅ Provide Code Generator for Content Types, Razor and Services ✅ Improve discoverability of REST APIs ✅ Document new Pro Typed mode ✅ Document new strong-typed mode ✅ Auto-Install more apps from catalog - even after some have already been installed - ca. 1d ✅ Feature to tell new auto-installer what apps are already installed ✅ App-Auto-Installer UI to add-install apps later on ✅ LTS Bugfixes When accessing an App through another app (eg first going to Apps-Management) it show the data of the original app Opening features in Apps-Management didn't work reliably Edit-UI Picker / Dropdown code was cleaned up Copilot Razor Generator ready to use Copilot Service generator ready to use Copilot WebApi generator ready to use Copilot previously failed if the AppCode folder was missing Fix to a data-caching issue in 17.05 (this was important) 2sxc v17.07 (2024-05-04) published/blogged: ✅/✅ 2sxc 17.07 ✅/✅ 2shine 5.3 (May 4th) ✅/✅ Content App 17.07 (May 6th) ✅/✅ Mobius Form Builder 06.00 for 2sxc 17.07 (May 7th) ✅/✅ Release all apps as typed (May 8th) 2sxc v17.08 (2024-05-16) ✅ WebApi in AppCode ✅ DataSources in AppCode ✅ ITemplateService ✅ Add CmsContext.Block and CmsContext.Module.Block as well as Block.Guid ✅ Cache Service internal ✅ Switch Edition UI ✅ Switch Edition Permissions for non-super users ✅ Update Image Resizer ✅ Re-Release another LTS ca. 17.09 Planned Removals for 2sxc v17 Planned Removals for 2sxc v17 For 2sxc 17 we plan to remove some very old APIs. The process is as follows: Mark the API as deprecated in the code Add internal code which warns the admin that the App is using deprecated code Provide guidance here how to resolve Make sure the warnings have been around for at least 6 months Remove the code on the next major release For v17 we plan to remove some very old APIs, which we believe are probably not even used any more. This is the list: The old namespace ToSic.SexyContent.Interfaces.IApp and all related code We believe this is probably not used at all, since it's probably only ever used to access App.Configuration which is dynamic when using this interface, but a normal object with typed properties when using the normal ToSic.Sxc.Apps.IApp interface. Guide to Fixing Issues Fixing SexyContent.Interfaces.IApp removal Background A long time ago 2sxc was called SexyContent and we used the namespace ToSic.SexyContent.Interfaces for various things. Ca. 2014, we decided to rename it to 2sxc and use a ToSic.Sxc namespace instead. In addition to that, we created a clearer namespace structure. Am I Affected? Most code does not explicitly use namespaces, and if your code is newer than 2016, you are probably not affected. But if you have any code which uses the namespace ToSic.SexyContent in your Razor or C# code you are affected. This is especially true if you have code such as: using SexyContent.Interfaces; IApp app = App; var version = app.Configuration.Version; How to Fix It's difficult to give you an exact guideline, because we don't know what your code does. But in most cases, you'll just be working with the current App object which is typed as IApp. So in most cases, you don't need to specify the type at all, just use something like: var app = App; var version = App.Configuration.Get(\"Version\");"
  },
  "abyss/releases/history/v18/_all.html": {
    "href": "abyss/releases/history/v18/_all.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 18 2sxc v18.00 (2024-07-12) ✅ ITemplateService with MergeSources(...) ✅ Oqtane 5.1 or 5.2 SSR Release There's a lot more! I don't have time to describe it yet, but here's the short list https://github.com/2sic/2sxc/releases/tag/v18.00.00 ...and more. 2sxc v18.01 (2024-09-23) \uD83D\uDD22 Pickers ✅ Improve Picker-UIs ✅ Picker with Radio-Buttons (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Picker with Checkboxes (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Pickers with tooltips, more help, etc. (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) \uD83E\uDDEA Formulas ✅\uD83D\uDD01 Major refactor of internal code structure ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Improve visibility of formulas in the UI for dev-users (always show for developes \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) \uD83D\uDD01 Refactoring / internal ✅\uD83D\uDD01 Edit-UI Drop NgRx ✅\uD83D\uDD01 Edit-UI Switch most code to Signals ✅\uD83D\uDD01 Edit-UI feature to store user settings in the local storage and session ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Create debugging system to log changes in production (developers \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) Internal content types ✅ Use newer picker features for Wysiwyg and other UIs ✅ String-Default (basic field) enable different Text-Wrappings ☢️ DNN Enhancements ✅☢️ Improve startup speed \uD83E\uDE78 Oqtane Enhancements ✅\uD83E\uDE78 Improve DLL clean-up on startup ✅\uD83E\uDE78 Fix compile of AppCode DLLs in inner-content ✅\uD83E\uDE78 Interactive Server bugs closing signalr connections \uD83E\uDDB9\uD83C\uDFFE‍♂️ Patron Features ✅⚡ Optimize data loading for better performance ✅\uD83D\uDD22 Many new picker features for patrons 2sxc v18.02 (2024-10-09) Release notes ✅ Shared Field Configurations / Content-Type Composition ✅ Pickers stable ✅ Picker Source CSV ✅ Picker Source Custom List ✅ Picker Source Entity ✅ Picker Source Query ⌛ Picker Source CSS (BETA) ✅ Picker Data Type: Number now supported as well ✅ Picker Outputs ✅ Radio buttons ✅ Checkboxes ✅ Auto-Inline (which will take radio/checkboxes depending on your settings) ✅ Picker Previews ✅ Font-Icon preview ✅ SVG-Icon preview ⌛ Image preview (BETA) ✅ Finalize Content-Type Composition ✅ Ctrl + S (upper case) now works too ✅ Ctrl + Alt + s now saves and closes ✅ Host user now always sees the developer tool bar, but can unpin it for a while ✅ Edit UI: Update Angular 18, Material 3, and other JS dependencies, refactor to use signals. ✅ Edit UI: Massively improve pickers - ca. 90%, also with Number and CSS / SVG / Image icons ✅ HotBuild: Enhance to use SHA fingerprint for cache-busting 2sxc v18.03 (2024-11-05) ✅ Clean up data model, remove unused table ToSIC_EAV_AttributeGroups (may be breaking) ✅ Pickers - Stabilize most features so final ✅ Tweak API for Image Service Settings, Img, Picture ✅ Tweak API for Typed Items .Img(..., tweak: t => t.Alt(...)...) and .Picture(...) ✅ Ongoing Angular refactoring (switching to signals, deduplicate code, ...) 2sxc v18.04 (2024-11-24) \uD83D\uDC1E Bug with image generator when image was external (http) #3500 \uD83D\uDC1E Bug with LightSpeed #3502 ☢️ Search indexing bug #3498 \uD83E\uDE78 Minor bugfix to ensure it works on Oqtane 6 #3501 2sxc v18.05 (2024-12-06) \uD83E\uDE78 Oqtane / AppCode problems with empty AppCode.dll #3505 \uD83D\uDCD6 Add contributing.md to all repos #3484 \uD83D\uDCD6 Major docs update regarding contributing to docs ✅ Support Ctrl+Click in Admin-UI to open dialogs in new windows/tabs #3496 \uD83D\uDC1E Bug with Visual Query Editor #3513 2sxc v18.06 (2024-12-06) Stabilization release with one big feature: \uD83D\uDE80 Double-Encrypt Forms posted to server, to prevent CDN snooping \uD83D\uDEE1️ #3518 Features ✅ Ctrl + Click and Shift + Click now works in almost all Admin UIs / Lists #3496 ✅ Automatically sort URL parameters provided by MyPage.Parameters #3520 ✅ Ability to prioritize url parameters as needed with .Prioritize(...) #3521 ✅ Ability to flush url parameters and still preserve settings with .Flush() Minor: add contributing.md everywhere #3484 Bugfixes \uD83E\uDE78 Oqtane issues with AppCode compiling when AppCode is empty #3505 \uD83D\uDC1E Bug toolbar opens query-editor sometimes fails #3513 Minor: show better indication when item in Entity-Picker doesn't exist #3504"
  },
  "abyss/releases/history/v18/_brc.html": {
    "href": "abyss/releases/history/v18/_brc.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v18 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary ATM no breaking changes in v18"
  },
  "abyss/releases/history/v18/_changes18.00.html": {
    "href": "abyss/releases/history/v18/_changes18.00.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v18.00 (2024-07-12) ✅ ITemplateService with MergeSources(...) ✅ Oqtane 5.1 or 5.2 SSR Release There's a lot more! I don't have time to describe it yet, but here's the short list https://github.com/2sic/2sxc/releases/tag/v18.00.00 ...and more."
  },
  "abyss/releases/history/v18/_changes18.01.html": {
    "href": "abyss/releases/history/v18/_changes18.01.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v18.01 (2024-09-23) \uD83D\uDD22 Pickers ✅ Improve Picker-UIs ✅ Picker with Radio-Buttons (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Picker with Checkboxes (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Pickers with tooltips, more help, etc. (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) \uD83E\uDDEA Formulas ✅\uD83D\uDD01 Major refactor of internal code structure ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Improve visibility of formulas in the UI for dev-users (always show for developes \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) \uD83D\uDD01 Refactoring / internal ✅\uD83D\uDD01 Edit-UI Drop NgRx ✅\uD83D\uDD01 Edit-UI Switch most code to Signals ✅\uD83D\uDD01 Edit-UI feature to store user settings in the local storage and session ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Create debugging system to log changes in production (developers \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) Internal content types ✅ Use newer picker features for Wysiwyg and other UIs ✅ String-Default (basic field) enable different Text-Wrappings ☢️ DNN Enhancements ✅☢️ Improve startup speed \uD83E\uDE78 Oqtane Enhancements ✅\uD83E\uDE78 Improve DLL clean-up on startup ✅\uD83E\uDE78 Fix compile of AppCode DLLs in inner-content ✅\uD83E\uDE78 Interactive Server bugs closing signalr connections \uD83E\uDDB9\uD83C\uDFFE‍♂️ Patron Features ✅⚡ Optimize data loading for better performance ✅\uD83D\uDD22 Many new picker features for patrons"
  },
  "abyss/releases/history/v18/_changes18.02.html": {
    "href": "abyss/releases/history/v18/_changes18.02.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v18.02 (2024-10-09) Release notes ✅ Shared Field Configurations / Content-Type Composition ✅ Pickers stable ✅ Picker Source CSV ✅ Picker Source Custom List ✅ Picker Source Entity ✅ Picker Source Query ⌛ Picker Source CSS (BETA) ✅ Picker Data Type: Number now supported as well ✅ Picker Outputs ✅ Radio buttons ✅ Checkboxes ✅ Auto-Inline (which will take radio/checkboxes depending on your settings) ✅ Picker Previews ✅ Font-Icon preview ✅ SVG-Icon preview ⌛ Image preview (BETA) ✅ Finalize Content-Type Composition ✅ Ctrl + S (upper case) now works too ✅ Ctrl + Alt + s now saves and closes ✅ Host user now always sees the developer tool bar, but can unpin it for a while ✅ Edit UI: Update Angular 18, Material 3, and other JS dependencies, refactor to use signals. ✅ Edit UI: Massively improve pickers - ca. 90%, also with Number and CSS / SVG / Image icons ✅ HotBuild: Enhance to use SHA fingerprint for cache-busting"
  },
  "abyss/releases/history/v18/_changes18.03.html": {
    "href": "abyss/releases/history/v18/_changes18.03.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v18.03 (2024-11-05) ✅ Clean up data model, remove unused table ToSIC_EAV_AttributeGroups (may be breaking) ✅ Pickers - Stabilize most features so final ✅ Tweak API for Image Service Settings, Img, Picture ✅ Tweak API for Typed Items .Img(..., tweak: t => t.Alt(...)...) and .Picture(...) ✅ Ongoing Angular refactoring (switching to signals, deduplicate code, ...)"
  },
  "abyss/releases/history/v18/_changes18.04.html": {
    "href": "abyss/releases/history/v18/_changes18.04.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v18.04 (2024-11-24) \uD83D\uDC1E Bug with image generator when image was external (http) #3500 \uD83D\uDC1E Bug with LightSpeed #3502 ☢️ Search indexing bug #3498 \uD83E\uDE78 Minor bugfix to ensure it works on Oqtane 6 #3501"
  },
  "abyss/releases/history/v18/_changes18.05.html": {
    "href": "abyss/releases/history/v18/_changes18.05.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v18.05 (2024-12-06) \uD83E\uDE78 Oqtane / AppCode problems with empty AppCode.dll #3505 \uD83D\uDCD6 Add contributing.md to all repos #3484 \uD83D\uDCD6 Major docs update regarding contributing to docs ✅ Support Ctrl+Click in Admin-UI to open dialogs in new windows/tabs #3496 \uD83D\uDC1E Bug with Visual Query Editor #3513"
  },
  "abyss/releases/history/v18/_changes18.06.html": {
    "href": "abyss/releases/history/v18/_changes18.06.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v18.06 (2024-12-06) Stabilization release with one big feature: \uD83D\uDE80 Double-Encrypt Forms posted to server, to prevent CDN snooping \uD83D\uDEE1️ #3518 Features ✅ Ctrl + Click and Shift + Click now works in almost all Admin UIs / Lists #3496 ✅ Automatically sort URL parameters provided by MyPage.Parameters #3520 ✅ Ability to prioritize url parameters as needed with .Prioritize(...) #3521 ✅ Ability to flush url parameters and still preserve settings with .Flush() Minor: add contributing.md everywhere #3484 Bugfixes \uD83E\uDE78 Oqtane issues with AppCode compiling when AppCode is empty #3505 \uD83D\uDC1E Bug toolbar opens query-editor sometimes fails #3513 Minor: show better indication when item in Entity-Picker doesn't exist #3504"
  },
  "abyss/releases/history/v18/breaking.html": {
    "href": "abyss/releases/history/v18/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc v18 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v18 Breaking Changes in EAV and 2sxc v18 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary ATM no breaking changes in v18"
  },
  "abyss/releases/history/v18/index.html": {
    "href": "abyss/releases/history/v18/index.html",
    "title": "All Changes in 2sxc and EAV v18 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in 2sxc and EAV v18 Version 18 2sxc v18.00 (2024-07-12) ✅ ITemplateService with MergeSources(...) ✅ Oqtane 5.1 or 5.2 SSR Release There's a lot more! I don't have time to describe it yet, but here's the short list https://github.com/2sic/2sxc/releases/tag/v18.00.00 ...and more. 2sxc v18.01 (2024-09-23) \uD83D\uDD22 Pickers ✅ Improve Picker-UIs ✅ Picker with Radio-Buttons (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Picker with Checkboxes (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) ✅ Pickers with tooltips, more help, etc. (for patrons \uD83E\uDDB9\uD83C\uDFFE‍♂️) \uD83E\uDDEA Formulas ✅\uD83D\uDD01 Major refactor of internal code structure ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Improve visibility of formulas in the UI for dev-users (always show for developes \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) \uD83D\uDD01 Refactoring / internal ✅\uD83D\uDD01 Edit-UI Drop NgRx ✅\uD83D\uDD01 Edit-UI Switch most code to Signals ✅\uD83D\uDD01 Edit-UI feature to store user settings in the local storage and session ✅\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB Create debugging system to log changes in production (developers \uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDCBB) Internal content types ✅ Use newer picker features for Wysiwyg and other UIs ✅ String-Default (basic field) enable different Text-Wrappings ☢️ DNN Enhancements ✅☢️ Improve startup speed \uD83E\uDE78 Oqtane Enhancements ✅\uD83E\uDE78 Improve DLL clean-up on startup ✅\uD83E\uDE78 Fix compile of AppCode DLLs in inner-content ✅\uD83E\uDE78 Interactive Server bugs closing signalr connections \uD83E\uDDB9\uD83C\uDFFE‍♂️ Patron Features ✅⚡ Optimize data loading for better performance ✅\uD83D\uDD22 Many new picker features for patrons 2sxc v18.02 (2024-10-09) Release notes ✅ Shared Field Configurations / Content-Type Composition ✅ Pickers stable ✅ Picker Source CSV ✅ Picker Source Custom List ✅ Picker Source Entity ✅ Picker Source Query ⌛ Picker Source CSS (BETA) ✅ Picker Data Type: Number now supported as well ✅ Picker Outputs ✅ Radio buttons ✅ Checkboxes ✅ Auto-Inline (which will take radio/checkboxes depending on your settings) ✅ Picker Previews ✅ Font-Icon preview ✅ SVG-Icon preview ⌛ Image preview (BETA) ✅ Finalize Content-Type Composition ✅ Ctrl + S (upper case) now works too ✅ Ctrl + Alt + s now saves and closes ✅ Host user now always sees the developer tool bar, but can unpin it for a while ✅ Edit UI: Update Angular 18, Material 3, and other JS dependencies, refactor to use signals. ✅ Edit UI: Massively improve pickers - ca. 90%, also with Number and CSS / SVG / Image icons ✅ HotBuild: Enhance to use SHA fingerprint for cache-busting 2sxc v18.03 (2024-11-05) ✅ Clean up data model, remove unused table ToSIC_EAV_AttributeGroups (may be breaking) ✅ Pickers - Stabilize most features so final ✅ Tweak API for Image Service Settings, Img, Picture ✅ Tweak API for Typed Items .Img(..., tweak: t => t.Alt(...)...) and .Picture(...) ✅ Ongoing Angular refactoring (switching to signals, deduplicate code, ...) 2sxc v18.04 (2024-11-24) \uD83D\uDC1E Bug with image generator when image was external (http) #3500 \uD83D\uDC1E Bug with LightSpeed #3502 ☢️ Search indexing bug #3498 \uD83E\uDE78 Minor bugfix to ensure it works on Oqtane 6 #3501 2sxc v18.05 (2024-12-06) \uD83E\uDE78 Oqtane / AppCode problems with empty AppCode.dll #3505 \uD83D\uDCD6 Add contributing.md to all repos #3484 \uD83D\uDCD6 Major docs update regarding contributing to docs ✅ Support Ctrl+Click in Admin-UI to open dialogs in new windows/tabs #3496 \uD83D\uDC1E Bug with Visual Query Editor #3513 2sxc v18.06 (2024-12-06) Stabilization release with one big feature: \uD83D\uDE80 Double-Encrypt Forms posted to server, to prevent CDN snooping \uD83D\uDEE1️ #3518 Features ✅ Ctrl + Click and Shift + Click now works in almost all Admin UIs / Lists #3496 ✅ Automatically sort URL parameters provided by MyPage.Parameters #3520 ✅ Ability to prioritize url parameters as needed with .Prioritize(...) #3521 ✅ Ability to flush url parameters and still preserve settings with .Flush() Minor: add contributing.md everywhere #3484 Bugfixes \uD83E\uDE78 Oqtane issues with AppCode compiling when AppCode is empty #3505 \uD83D\uDC1E Bug toolbar opens query-editor sometimes fails #3513 Minor: show better indication when item in Entity-Picker doesn't exist #3504"
  },
  "abyss/releases/history/v19/_all.html": {
    "href": "abyss/releases/history/v19/_all.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Version 19 2sxc v19.00 (2024-12-21) \uD83C\uDD70️ Update UI to Angular 19 and Angular Material 19 ✅ Finalize Pickers main features Radio Checkboxes Preview Material Icon Preview SVG Preview Image (jpg/png) Configurations: AppAssets, CSS, Entity, Query, CustomList, CSV Preview features Info Link Tooltip ✅ New AppAssets DataSource and System.AppAssets query to get assets for pickers such as all SVGs in a folder. ✅ Double-Encrypt sensitive data on HTTP-Transport ✅ Ability to switch UI languages (not just content-languages) ✅ GPS Picker enhancements with my current location and searching for addresses which were not in the data ✅ Ability to delete a field (column) which had entity-relationships in it (previously SQL stopped you) ✅ New Toolbar.Audience(...) API to show it when needed ✅ Improve UI for creating fields for content-types, better dropdowns, longer etc. Breaking Changes An interface called ToSic.Sxc.DataSources.IBlockInstance was removed since it was identical to ToSic.Eav.DataSource.IDataSource and should not be used anywhere. Bugfixes \uD83D\uDC1E Fix: various issues around the Pickers \uD83D\uDC1E Fix: Public forms called a backend endpoint which was protected, and got errors (though it wasn't necessary) Internal ✅ Refactor toolbar and image/picture objects to use records instead of classes in C# 2sxc v19.01 (2025-01-16) Note: the version was incorrectly released as 19.00.01. ✅ Implemented system to use the As<...> API with interfaces, which will automatically find the right class to instantiate ✅ Created new DataModel system in the Models and Data.Model namespace #3543 ✅ Created data model for IFileModel and IFolderModel which matches the entities returned by the AppAssets DataSource ✅ Created data model for IUserModel and IUserRoleModel which matches entities returned by the Users and UserRoles DataSource ✅ Renamed Roles DataSource to UserRoles (could be breaking change for very few users) ✅ Created data model ISiteModel which matches data returned by the Sites DataSource ✅ created data model IPageModel which matches data returned by Pages DataSource ✅ Finished the ICacheService on Kit.Cache #3536 ✅ Finished the AppAssets Datasource and documented it #3541 ✅ New ToSic.Sxc.Data.Models with ModelWithEntity and ModelWithItem base classes ✅ Changed System.Text.Json to use .net 9 #3547 ✅ Upgraded to Oqtane 6+ so it's only compatible with Oqtane 6.0.1+ now #3548 \uD83C\uDD70️ Update Date/Time picker to use Angular Material Time Picker \uD83E\uDE78 Oqtane: Set minimum version to 06.00.01 and minimum .net to 9 because of security warnings Minor \uD83C\uDD70️ Fix some inconsistencies in the GPS UI \uD83C\uDD70️ Minor update Google Maps API to latest (was using old API before) ✅ Improved Custom DataSource so you can access the List and GetStream(...) #3540 Bugfixes \uD83D\uDC1E Bug: Fix access to global and site settings \uD83D\uDC1E\uD83E\uDE78 Oqtane bugs with JavaScripts due to changes in Oqtane 6.0 and 6.0.1 - affected Interactive mode #3533 \uD83E\uDEB2 Minor bugfixes in new AppAssets DataSource Internal Stuff ✅ Refactor internal Entity, Attribute Values, ContentType to use record ✅ Refactor internal SaveOptions to use record ✅ Refactor internal Entity to be init-only (where were a few set properties left for legacy reasons) \uD83C\uDFC3\uD83C\uDFFC‍➡️ Start architecture for a Task-system to run things #3545 ⚠️ Enhancement in the Pages DataSource - property renames Visible to IsNavigation and Clickable to IsClickable ⚠️ Enhancement to the Roles DataSource - renamed to UserRoles - breaking change! 2sxc v19.02 (2025-01-21) ✅ IUserService on Kit.User #3552 which can get one/all users and all roles of Dnn/Oqtane in the same signature as the Users DataSource ✅ better structure for models in Cms.Users, Cms.Pages etc. ⚠️ Renamed the system query System.Roles to System.UserRoles - breaking change! Minor ✅ Ensure that As<...> API allows the new model interfaces just like AsList<...> #3551 \uD83D\uDC1E Bug: previous release a few days ago had an issue exporting Apps - files in the root folder were missing \uD83D\uDC1E Bug: previous release a few days ago had issues saving hidden items - they were visible \uD83D\uDC1E Bug: App name and version did not show in App Admin UI \uD83D\uDCAA\uD83C\uDFFC Cleanup internal APIs on an internal interface IEntityLight which is not public. Properties: Title, Attributes and this[...] 2sxc v19.03 (2025-01-22) ✅ introduced Custom.Data.CustomModel ✅ Finalizing model base classes in ToSic.Sxc.Data.Models and attributes \uD83D\uDC1E Bugfix editing global and site custom settings"
  },
  "abyss/releases/history/v19/_brc.html": {
    "href": "abyss/releases/history/v19/_brc.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v19 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary ⬇️ An interface called ToSic.Sxc.DataSources.IBlockInstance was removed since it was identical to ToSic.Eav.DataSource.IDataSource and should not be used anywhere. ⬇️ Core objects like Entity, Attribute etc. were changed to record - this would only affect you if you inherited from them ⬇️ Cleanup internal APIs on an internal interface IEntityLight which is not public. Properties: Title, Attributes and this[...] ⚠️ Enhancement in the Pages DataSource - property renames Visible to IsNavigation and Clickable to IsClickable ⚠️ Enhancement to the Roles DataSource - renamed to UserRoles - breaking change! ⚠️ Renamed the system query System.Roles to System.UserRoles - breaking change!"
  },
  "abyss/releases/history/v19/_changes.00.html": {
    "href": "abyss/releases/history/v19/_changes.00.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v19.00 (2024-12-21) \uD83C\uDD70️ Update UI to Angular 19 and Angular Material 19 ✅ Finalize Pickers main features Radio Checkboxes Preview Material Icon Preview SVG Preview Image (jpg/png) Configurations: AppAssets, CSS, Entity, Query, CustomList, CSV Preview features Info Link Tooltip ✅ New AppAssets DataSource and System.AppAssets query to get assets for pickers such as all SVGs in a folder. ✅ Double-Encrypt sensitive data on HTTP-Transport ✅ Ability to switch UI languages (not just content-languages) ✅ GPS Picker enhancements with my current location and searching for addresses which were not in the data ✅ Ability to delete a field (column) which had entity-relationships in it (previously SQL stopped you) ✅ New Toolbar.Audience(...) API to show it when needed ✅ Improve UI for creating fields for content-types, better dropdowns, longer etc. Breaking Changes An interface called ToSic.Sxc.DataSources.IBlockInstance was removed since it was identical to ToSic.Eav.DataSource.IDataSource and should not be used anywhere. Bugfixes \uD83D\uDC1E Fix: various issues around the Pickers \uD83D\uDC1E Fix: Public forms called a backend endpoint which was protected, and got errors (though it wasn't necessary) Internal ✅ Refactor toolbar and image/picture objects to use records instead of classes in C#"
  },
  "abyss/releases/history/v19/_changes.01.html": {
    "href": "abyss/releases/history/v19/_changes.01.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v19.01 (2025-01-16) Note: the version was incorrectly released as 19.00.01. ✅ Implemented system to use the As<...> API with interfaces, which will automatically find the right class to instantiate ✅ Created new DataModel system in the Models and Data.Model namespace #3543 ✅ Created data model for IFileModel and IFolderModel which matches the entities returned by the AppAssets DataSource ✅ Created data model for IUserModel and IUserRoleModel which matches entities returned by the Users and UserRoles DataSource ✅ Renamed Roles DataSource to UserRoles (could be breaking change for very few users) ✅ Created data model ISiteModel which matches data returned by the Sites DataSource ✅ created data model IPageModel which matches data returned by Pages DataSource ✅ Finished the ICacheService on Kit.Cache #3536 ✅ Finished the AppAssets Datasource and documented it #3541 ✅ New ToSic.Sxc.Data.Models with ModelWithEntity and ModelWithItem base classes ✅ Changed System.Text.Json to use .net 9 #3547 ✅ Upgraded to Oqtane 6+ so it's only compatible with Oqtane 6.0.1+ now #3548 \uD83C\uDD70️ Update Date/Time picker to use Angular Material Time Picker \uD83E\uDE78 Oqtane: Set minimum version to 06.00.01 and minimum .net to 9 because of security warnings Minor \uD83C\uDD70️ Fix some inconsistencies in the GPS UI \uD83C\uDD70️ Minor update Google Maps API to latest (was using old API before) ✅ Improved Custom DataSource so you can access the List and GetStream(...) #3540 Bugfixes \uD83D\uDC1E Bug: Fix access to global and site settings \uD83D\uDC1E\uD83E\uDE78 Oqtane bugs with JavaScripts due to changes in Oqtane 6.0 and 6.0.1 - affected Interactive mode #3533 \uD83E\uDEB2 Minor bugfixes in new AppAssets DataSource Internal Stuff ✅ Refactor internal Entity, Attribute Values, ContentType to use record ✅ Refactor internal SaveOptions to use record ✅ Refactor internal Entity to be init-only (where were a few set properties left for legacy reasons) \uD83C\uDFC3\uD83C\uDFFC‍➡️ Start architecture for a Task-system to run things #3545 ⚠️ Enhancement in the Pages DataSource - property renames Visible to IsNavigation and Clickable to IsClickable ⚠️ Enhancement to the Roles DataSource - renamed to UserRoles - breaking change!"
  },
  "abyss/releases/history/v19/_changes.02.html": {
    "href": "abyss/releases/history/v19/_changes.02.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v19.02 (2025-01-21) ✅ IUserService on Kit.User #3552 which can get one/all users and all roles of Dnn/Oqtane in the same signature as the Users DataSource ✅ better structure for models in Cms.Users, Cms.Pages etc. ⚠️ Renamed the system query System.Roles to System.UserRoles - breaking change! Minor ✅ Ensure that As<...> API allows the new model interfaces just like AsList<...> #3551 \uD83D\uDC1E Bug: previous release a few days ago had an issue exporting Apps - files in the root folder were missing \uD83D\uDC1E Bug: previous release a few days ago had issues saving hidden items - they were visible \uD83D\uDC1E Bug: App name and version did not show in App Admin UI \uD83D\uDCAA\uD83C\uDFFC Cleanup internal APIs on an internal interface IEntityLight which is not public. Properties: Title, Attributes and this[...]"
  },
  "abyss/releases/history/v19/_changes.03.html": {
    "href": "abyss/releases/history/v19/_changes.03.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc v19.03 (2025-01-22) ✅ introduced Custom.Data.CustomModel ✅ Finalizing model base classes in ToSic.Sxc.Data.Models and attributes \uD83D\uDC1E Bugfix editing global and site custom settings"
  },
  "abyss/releases/history/v19/breaking.html": {
    "href": "abyss/releases/history/v19/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc v19 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Breaking Changes in EAV and 2sxc v19 Breaking Changes in EAV and 2sxc v19 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary ⬇️ An interface called ToSic.Sxc.DataSources.IBlockInstance was removed since it was identical to ToSic.Eav.DataSource.IDataSource and should not be used anywhere. ⬇️ Core objects like Entity, Attribute etc. were changed to record - this would only affect you if you inherited from them ⬇️ Cleanup internal APIs on an internal interface IEntityLight which is not public. Properties: Title, Attributes and this[...] ⚠️ Enhancement in the Pages DataSource - property renames Visible to IsNavigation and Clickable to IsClickable ⚠️ Enhancement to the Roles DataSource - renamed to UserRoles - breaking change! ⚠️ Renamed the system query System.Roles to System.UserRoles - breaking change!"
  },
  "abyss/releases/history/v19/index.html": {
    "href": "abyss/releases/history/v19/index.html",
    "title": "All Changes in 2sxc and EAV v19 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All Changes in 2sxc and EAV v19 Version 19 2sxc v19.00 (2024-12-21) \uD83C\uDD70️ Update UI to Angular 19 and Angular Material 19 ✅ Finalize Pickers main features Radio Checkboxes Preview Material Icon Preview SVG Preview Image (jpg/png) Configurations: AppAssets, CSS, Entity, Query, CustomList, CSV Preview features Info Link Tooltip ✅ New AppAssets DataSource and System.AppAssets query to get assets for pickers such as all SVGs in a folder. ✅ Double-Encrypt sensitive data on HTTP-Transport ✅ Ability to switch UI languages (not just content-languages) ✅ GPS Picker enhancements with my current location and searching for addresses which were not in the data ✅ Ability to delete a field (column) which had entity-relationships in it (previously SQL stopped you) ✅ New Toolbar.Audience(...) API to show it when needed ✅ Improve UI for creating fields for content-types, better dropdowns, longer etc. Breaking Changes An interface called ToSic.Sxc.DataSources.IBlockInstance was removed since it was identical to ToSic.Eav.DataSource.IDataSource and should not be used anywhere. Bugfixes \uD83D\uDC1E Fix: various issues around the Pickers \uD83D\uDC1E Fix: Public forms called a backend endpoint which was protected, and got errors (though it wasn't necessary) Internal ✅ Refactor toolbar and image/picture objects to use records instead of classes in C# 2sxc v19.01 (2025-01-16) Note: the version was incorrectly released as 19.00.01. ✅ Implemented system to use the As<...> API with interfaces, which will automatically find the right class to instantiate ✅ Created new DataModel system in the Models and Data.Model namespace #3543 ✅ Created data model for IFileModel and IFolderModel which matches the entities returned by the AppAssets DataSource ✅ Created data model for IUserModel and IUserRoleModel which matches entities returned by the Users and UserRoles DataSource ✅ Renamed Roles DataSource to UserRoles (could be breaking change for very few users) ✅ Created data model ISiteModel which matches data returned by the Sites DataSource ✅ created data model IPageModel which matches data returned by Pages DataSource ✅ Finished the ICacheService on Kit.Cache #3536 ✅ Finished the AppAssets Datasource and documented it #3541 ✅ New ToSic.Sxc.Data.Models with ModelWithEntity and ModelWithItem base classes ✅ Changed System.Text.Json to use .net 9 #3547 ✅ Upgraded to Oqtane 6+ so it's only compatible with Oqtane 6.0.1+ now #3548 \uD83C\uDD70️ Update Date/Time picker to use Angular Material Time Picker \uD83E\uDE78 Oqtane: Set minimum version to 06.00.01 and minimum .net to 9 because of security warnings Minor \uD83C\uDD70️ Fix some inconsistencies in the GPS UI \uD83C\uDD70️ Minor update Google Maps API to latest (was using old API before) ✅ Improved Custom DataSource so you can access the List and GetStream(...) #3540 Bugfixes \uD83D\uDC1E Bug: Fix access to global and site settings \uD83D\uDC1E\uD83E\uDE78 Oqtane bugs with JavaScripts due to changes in Oqtane 6.0 and 6.0.1 - affected Interactive mode #3533 \uD83E\uDEB2 Minor bugfixes in new AppAssets DataSource Internal Stuff ✅ Refactor internal Entity, Attribute Values, ContentType to use record ✅ Refactor internal SaveOptions to use record ✅ Refactor internal Entity to be init-only (where were a few set properties left for legacy reasons) \uD83C\uDFC3\uD83C\uDFFC‍➡️ Start architecture for a Task-system to run things #3545 ⚠️ Enhancement in the Pages DataSource - property renames Visible to IsNavigation and Clickable to IsClickable ⚠️ Enhancement to the Roles DataSource - renamed to UserRoles - breaking change! 2sxc v19.02 (2025-01-21) ✅ IUserService on Kit.User #3552 which can get one/all users and all roles of Dnn/Oqtane in the same signature as the Users DataSource ✅ better structure for models in Cms.Users, Cms.Pages etc. ⚠️ Renamed the system query System.Roles to System.UserRoles - breaking change! Minor ✅ Ensure that As<...> API allows the new model interfaces just like AsList<...> #3551 \uD83D\uDC1E Bug: previous release a few days ago had an issue exporting Apps - files in the root folder were missing \uD83D\uDC1E Bug: previous release a few days ago had issues saving hidden items - they were visible \uD83D\uDC1E Bug: App name and version did not show in App Admin UI \uD83D\uDCAA\uD83C\uDFFC Cleanup internal APIs on an internal interface IEntityLight which is not public. Properties: Title, Attributes and this[...] 2sxc v19.03 (2025-01-22) ✅ introduced Custom.Data.CustomModel ✅ Finalizing model base classes in ToSic.Sxc.Data.Models and attributes \uD83D\uDC1E Bugfix editing global and site custom settings"
  },
  "abyss/releases/management/index.html": {
    "href": "abyss/releases/management/index.html",
    "title": "2sxc Release Management | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Release Management For people who professionaly work with 2sxc it's useful to know how we release it and what the releases mean. General Releases All our Releases are published here: Github for Dnn and Oqtane NuGet for Oqtane releases Oqtane.net for Oqtane Auto-Installer Release Frequency 2sxc is released an irregular frequencies. This can sometimes mean a few releases in a week, and sometimes less than one release per month. If this is hard to keep up with and you don't need the latest and greatest, we suggest you stick to the LTS Releases LTS Releases (Long Term Support) Sometimes too much innovation can be scary - which is why we're releasing an LTS (Long Term Support) edition. \uD83D\uDC49 Read more about this in the LTS Policy Deprecation Policy The 2sxc APIs are really, really stable. But sometimes we must deprecate old APIs to avoid confusion and to allow better features to replace this. We do this in a very controlled manner. \uD83D\uDC49 Read more about this in the Deprecation Policy"
  },
  "abyss/releases/management/policy-deprecate.html": {
    "href": "abyss/releases/management/policy-deprecate.html",
    "title": "Deprecation Policy & Breaking Changes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Deprecation Policy & Breaking Changes Tip 2sxc is really, really stable. Upgrades usually don't cause any breaking changes at all. Despite this, it's important that 2sxc can become better, without becoming confusing. Because of this, we have some policies how to achieve this. Rule #1: Public APIs Remain Stable Public APIs remain stable across releases, so old code / Razor will continue to work. Public APIs include Public REST APIs Public C# APIs used in Razor and WebAPI Controllers Note that public APIs in code are marked as such. Note also that internal APIs can change without warning, as you can use them, but the burden of keeping up with the changes is up to you. If you use these, you will have to spend more time testing an upgrade. Rule #2: New Features go Together Many new features will only be available if you are working in a newer base class. This will aften make older APIs unavailable, so we can phase them out. Example: The new AsList(...) command is only available on the newer base classes like Custom.Razor12 The old Elements API will not be available on the newer base classes Rule #3: Deprecations are Warned at Runtime (new in v13) V13 added a new feature: Deprecation warnings. This works as follows: APIs that are going to be deprecated are internally going to raise messages if they are still in use You can see these messages in Insights and soon also in the System dialogs Deprecated APIs will follow this process: Warn about deprecation for at least 1 full version, if possible 2 versions of 2sxc (so ca. 12 months) We'll try to include an information, if and when the API will be removed We'll also try to include information for what API should be used instead. If removing the API is important for future features, we will remove it after the warned period If removal is not necessary We'll remove them from the public docs we'll leave them in but stop testing them - so they may stop working without us knowing about it Note that depending on how much we believe the old APIs have been used, we will usually also remove them from the docs once they are deprecated. Only in rare cases where an API is widely used will we keep it in the docs, but clearly communicate that it's obsolete and that it shouldn't be used any more. History Deprecation warning system added in v13 Shortlink: https://go.2sxc.org/pol-deprecation"
  },
  "abyss/releases/management/policy-lts.html": {
    "href": "abyss/releases/management/policy-lts.html",
    "title": "LTS Policy (Long Term Stable) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "LTS Policy (Long Term Stable) Every few months 2sxc is released as an LTS version, a.k.a. Long Term Stable. To sync expectations, we want to explain what this means. Tip LTS for 2sxc means stability and security. Meaning of Long-Term-Stable for 2sxc LTS Editions will be receive special support for at least 3 months after their release at least till the next LTS is released Special support means Security fixes Critical bug fixes What it does not mean LTS Editions will not receive new features new support for new platforms (because this might introduce new risks) non-critical bugfixes - these will be in normal releases, unless someone sponsors a fix Volunteer Work Please remember that 2sxc is free and open-source. All the work is done by volunteers or by people who are paid by sponsors. As such, these people will still make the decision if something is deemed critical or not, and who will implement the fix. If you have a special need and wish to sponsor a fix in either an LTS or any other version, do contact us History LTS policy introduced in v9.14 - see blog Information added to docs in v13.03 Renamed Long Term Support to Long Term Stable in v16.07 to avoid expectations of free support Shortlink: https://go.2sxc.org/lts"
  },
  "abyss/releases/planned/db-schema-changes-v14.html": {
    "href": "abyss/releases/planned/db-schema-changes-v14.html",
    "title": "Planned DB Schema Changes 2023 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Planned DB Schema Changes 2023 This page collects planned changes to the DB Schema, so that we'll be able to implement them all in one go when we do it. We plan to do this ca. 2023 Q3 or Q4 ModifiedBy on each entity and Json - and prefill with current owner CreatedBy on each entity and Json - and prefill with current owner Rename various fields with names that don't match current naming conventions Todo Rename various tables with names that don't match current naming conventions AttributeSets... TODO"
  },
  "abyss/releases/roadmap.html": {
    "href": "abyss/releases/roadmap.html",
    "title": "Roadmap of EAV and 2sxc - Vision of the Future | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Roadmap of EAV and 2sxc - Vision of the Future The 2sxc roadmap contains the things we think are fairly important to tackle next. Since we're all working for free, there is no commitment to do this in the order you see below. And sometimes a customer will need a feature quickly - and pay for it - then it will appear sooner. Tip You too can sponsor a feature to make things happen sooner! Last Update: 2025-01-22 Current Priority: cre8magic for Oqtane 2025 Q1 is going to focus mainly on cre8magic, not 2sxc. Note: Some Features still not final ⌛✅ ICacheService on Kit.Cache - docs & samples missing! ⌛\uD83C\uDD70️ JSON Bundle Export, Import, Persist (beta, various scenarios don't work as expected) Picker Formulas (beta) Picker Source WebService (not started) Picker Source CSS (beta) 2025 Q1 Finish DoD / Almost-Done Work Improve Intellisense Harden more Dlls and include more XML docs ✅/✅ ToSic.Sxc ✅/\uD83D\uDD33 ToSic.Sxc.Code.Generate ✅/\uD83D\uDD33 ToSic.Sxc.WebApi \uD83D\uDD33/\uD83D\uDD33 ToSic.Sxc.Dnn \uD83D\uDD33/\uD83D\uDD33 ToSic.Sxc.Dnn.Core \uD83D\uDD33/\uD83D\uDD33 ToSic.Sxc.Dnn.Razor ✅/\uD83D\uDD33 ToSic.Sxc.Dnn.WebApi ✅/\uD83D\uDD33 ToSic.Eav.Apps ✅/\uD83D\uDD33 ToSic.Eav.DataSources \uD83D\uDD33/\uD83D\uDD33 ToSic.Eav...other ToSic.Sxc.Oqt / Razor also... Oqtane Menu Control Oqtane Multi-language Oqtane professional theme Q2 Improve CSP in Oqtane 5 (once SSR is ready) Create a User service to get more user data also... Improve Pickers all kinds of small issues tree Improve Oqtane Pages DS to also respect all known settings - @STV Finalize Deprecation system @2dm Improve CSP so it can work in a pure DNN skin without 2sxc @STV Done but not communicated, or still tweaking / WIP ✅ Auto-Installer - Features to configure at system level which apps are allowed / must be installed Data Sources ✅ Internal data source to get data from app parents ✅ Internal Query to get data from app-parents ✅ New DataSource AppAssets (released 19.00) ✅ New DataSource AdamFiles ⏳ Publish SharePoint DataSource (Premium/Patrons only) ⏳ New data sources like: ADAM (Files, Folders), Navigation, etc. - ca. 2d ✅ Compress Timeline: Feature to compress the existing history ✅ Entity Serialization Improvements ⏳ Language editing permissions - improve, test, finalize, document - ca. 3-5d also allow non-admins to possibly translate resources ✅⌛ Ability to set/force compiler in Dnn to always be Roslyn (implemented, but not officially released/supported) ✅⌛ Ability to include Dlls in the compile process for Dnn/Oqtane (implemented, but not officially released/supported) Post LTS Apps / App Maintenance: publish other new apps New timeline Files etc. CSP - ca. 5d ⏳ CSP Tutorials, docs and more Standardize / complete IDataBuilder API User Service - requires some final decision in regards to the data-format returned Blazor CMS / cre8magic ⏳ cre8magic - auto-generate sitemap.xml Minor: Tutorial App Enhancements Get tutorial app to run perfectly on Oqtane - ca. 0.5d 2dm Probably 2024 Q3 2sxc Page Level Settings and Metadata User Help / Manual in-page Plan new Metadata Target/Address system using only a string Major update on dropdowns/selectors Improve Export-Import Bundles Ability to create bundles in the Admin UI Ability to review bundles and what's inside in the Admin-UI Ability to download/export bundles Ability to import bundles in the Admin-UI Ability to save bundles to App_Data Ability to import bundles from App_Data Maybe ability to auto-save bundles to App_Data on standard export Notes / Metadata Provide Page-Level Metadata and Settings (outside of a specific App) - ca. 2d Metadata for Page, User, Site incl. Notes for each - ca. 2d Notes everywhere - especially on the page - ca. 2d Massively improve JSON import with language checks, overwrite/vs new etc. Code editor intellisense for most APIs - ca. 3-4d ⚠️ Deprecation System (show in UI, mark all APIs clearly, blog) - ca. 2d Many automated tests in the core JS APIs (toolbar, etc.) - ca. 5d - SDV JS Docs for formula Blazor CMS / cre8magic Oqtane Theme release and cre8magic Nuget v0.0.2 cre8magic Google Analytics Improve getting started with theme etc. Create section with showcase Create section with partners / experts Backlog New Stuff and Major Enhancements CSP CSP for inline code - eg using nonce CSP for the Edit UI incl. custom extensions etc. Note-feature to add notes to various things like entities, fields etc. (show, persist show, add to all kinds of things, ...) - ca. 3d sxc-angular Re-release sxc-angular demo-app for it Js Docs for sxc-angular React sample application ⏳ Edit UI Picker (Entity, Number, String, etc.) - completely rework concept / system - SDV ca. 10d ⏳ Edit UI Picker - hierarchy / tree of data ⏳ string-Dropdowns from many data sources like CSVs WebService svg files icon-picker after new Selectors - improve permissions UIs New Icon-Dropdowns from other data sources for better icons-support without fonts ⏳ Edit and Admin UI Dependencies Upgrades @SDV ⏳ Improve / Refactor some public types code Apps / App Maintenance maybe Status App WIP / Ongoing Larger Projects / Enhancements Language Editing Permissions based on roles/users Implemented v13 2022 Q1 but not in production, so probably not fully ready / tested / documented Enable viewing read-only data / configuration to better discover options/features Implemented to ca. 70%, but shared data metadata can't be accessed in UI ATM Provide more help UIs for using REST APIs Make the Metadata-System completely discoverable Standardize how to integrate into other systems (non-Dnn/Oqtane) (ca. 70% done) OpenGraph system - probably requires rewrite of CSP-Stack Create demo app with react More public headless APIs and Demos Improve WYSIWYG Ability to do more configuration on WYSIWYG ability to override toolbar buttons ability to set various easy-to-set configuration Possibly ability to preset various configurations globally or at site-level and use in other places Oqtane specific CSP for Oqtane It's partially done, but docs are missing Unsolved aspect: collecting all necessary resources for CSP of pages not initially loaded Oqtane Page/Module integration / use (also for notes etc.) Future / Other Update DB-Schema Support for persisting data to the file-system instead of DB Blazor integration for use in client-side Blazor ATM not really usefuly, because blazor is not run-time compiled yet, so development would be super difficult Review further integrations nopCommerce integration Orchard integration Umbraco integration In-Page direct upload / replacement of images In-Page direct editing of texts Possible side-by-side editing with live-preview Multi-import apps (drag-drop many) - probably patrons only Import Export Improve JSON import (language differences etc.) Improve xml and app import (language differences, etc.) App Update System (features to help migrate an App to a newer template) Unclear how to do this, but probably needs some kind of compare/merge features ...or whatever is needed next :)"
  },
  "abyss/security/csp/background.html": {
    "href": "abyss/security/csp/background.html",
    "title": "Content Security Policy (CSP) Basics | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Basics Content Security Policy (CSP) is a security policy that helps you to protect your web application from cross-site scripting attacks. This page should help you understand what it is and how it works. Here's just a quick example of CSP in action: The Need for CSP There is always a risk that the visitor will see content which you didn't intend. It could happen because your server was hacked, but there are many other ways to make this happen which are outside of your control. This content-insecurity places your visitor at a very high risk of being compromised or redirected. Or it's possible that actions are performed as the current user without their consent. Here some basic examples: Example: URL Injection for XSS Your website has a thank-you page which shows the name from the url like ?name=John Doe. When you made it, you expected to show Thank you John Doe. But smart people figured out, that giving it ?name=<script>alert('Hello')</script> would also work. This injection in many flavors BTW: A few years ago even 2sxc had a small loophole which allowed this. This looks harmless - what can an alert do? As every hacker will tell you, the alert is just the PoC. Once it works, the rest will follow. Example: CSS Attacks You thought CSS was harmless, right? Nyet. If an attacker can manipulate CSS on a page, they can do things like move important links to other locations and make them invisible. This way you can trick people into performing actions they are not aware of. Example: Hack Attacks Every DNN Website loads a copy of jQuery located in a very specific folder. A hacker figured out that it is possible to modify this file using a security loophole. Now that file also loads additional files from another server. Example: JavaScript inside an SVG Your editor just replaced an image on the page, without knowing it contains a JavaScript... Example: JavaScript inject through CDN Your website may load a script such as the old AngularJS from a CDN. In many such cases, tweaking the url or cookie can cause it to load more JavaScripts from other sources. What is CSP? CSP stands for Content Security Policy and it sets rules (policies) which are enforced by the browser. Think of CSP as invisible instructions (HTTP headers) for your browser. All modern browsers understand these instructions. Of course it assumes the browser is friendly - because a user being attacked won't try to actively disable it. With CSP you can set rules such as: Never execute any JavaScript Only load CSS files which are from my server Only load images and fonts from my server Never run on-click javascripts Why does Content-Security-Policy use HTTP Headers? The headers can only be set by the server delivering the content. This means it's fairly tamper proof. For example, JavaScript cannot modify it. This is really important, because this is mostly used when something unexpected compromises your website. There are two main headers used by CSP Content-Security-Policy this will set the rules for the current page/request Content-Security-Policy-Report-Only this is for development to see what the browser would do with the rules Important: You can only use one of these headers at a time. Warning Technically the Content-Security-Policy header could also be set using a <meta> tag. But not the Content-Security-Policy-Report-Only. Many security experts regard the meta-tag as a security risk, so we highly recommended against doing this. In addition, you could end up with CSP in HTTP headers and meta-tags, which will confuse everybody. You will also need the ...-Report-Only during setup, which cannot be done using the meta-tag. So for simplicity all the documentations here assume HTTP-headers. The Four Types of Whitelisting You can just allow everything (not a good idea) You can explicitly allow certain protocols like https:/data:, domains, files or features like unsafe-eval You can allow an inline code/style using a nonce You can allow an inline code/style using a hash The first two are probably obvious, but the nonce and hash could use some help... What is a Nonce? A nonce is a random string which is used to prevent cross-site scripting attacks. It basically works like this: <script nonce=\"random123\"> alert('Hello'); </script> Obviously this nonce must change on every single request! The final piece of the puzzle would be an http header like this: Content-Security-Policy: script-src 'nonce-random123' What is a Hash? Instead of using a nonce you can also write a script and calculate the hash of it. <script> alert('hello world!'); </script> Now you would mention this hash in the header: Content-Security-Policy: script-src 'sha256-VAqTxgfXYRCLFYN1tICr/TFOgCNcl16bsv4r8weidBc=' Warning: Nonce and Hashes disable unsafe-inline This may come as a surprise but it's important. As soon as you specify a nonce or a hash, you can't use unsafe-inline. Meaning you can add it, but it will be ignored. This is because it's kind of a replacement; older browsers would then process unsafe-inline and newer ones would ignore it. Next Steps \uD83D\uDC49\uD83C\uDFFC Learn how to setup CSP in your website Learn more About CSP Read about CSP on MDN Read about CSP on W3 History CSP added in 2sxc 13.10 These docs added in 2sxc 14.00"
  },
  "abyss/security/csp/best-practices.html": {
    "href": "abyss/security/csp/best-practices.html",
    "title": "Content Security Policy (CSP) Best Practices | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Best Practices Content Security Policy (CSP) is a security policy that helps you to protect your web application from cross-site scripting attacks. There are many ways you can setup CSP, but it is easier if the entire setup is geared towards this goal. JavaScript CSP Best Practices JS: Avoid eval and other Stupid Stuff This is fairly basic: don't use eval in your code. JS: Avoid any JS in the Page Any In-Page JS will either force you to use lax security rules or require a lot of whitelisting using nonce or hashes. We recommend that you avoid this alltogether. Place all your code in external JS files which are on the same server (rule: self). Then use turnOn to start the code. turnOn will also help you pass parameters like the current ModuleId to the script, in case you need it. CSP Configuration Best Practices Use Comments to Document your CSP In the Settings you can use comments with lines beginning with // to document your CSP. It will make your work easier and help others who make changes in the future. // This will apply to all ...-src all-src: 'self' https: Use Multiple Lines All rules will be merged in the end, so in many cases it's better to have rules on multiple lines. // This is for the image gallery script-src https://some-cdn.com/ // This is for jQuery script-src https://some-other-cdn.com/ Use all-src 2sxc has a special all-src rule which you should use for 'self' or https: rules. You should use these at global/site level, because it ensures that any further rules from Apps or other sources won't break your site. Avoid 'nonce-...' and 'sha256-...' Policies 'nonce-...' and 'sha256-...' policies are great for allowing a specific inline bit of script or CSS. But they have a huge side-effect: they automatically disable the 'unsafe-inline' rule. Because of this, you should avoid using these policies, as most Dnn/Oqtane sites will have other scripts which are outside of your control, so you will typically need unsafe-inline. Warning If any of these policies are used, it automatically disables the 'unsafe-inline' rule. This is how CSP works. Be as Local as Possible Rules which should only be used in a specific App should be on that App, not on the site. Rules which only apply to a specific razor page should ideally also be on that page only. Production / Operations Reporting Use a Reporting Server Even if you think you're done, make sure to setup a reporting server. You can get free system from Report-URI. This will allow you to monitor if your site is being compromised - or if you forgot to set some rules, which result in the site breaking."
  },
  "abyss/security/csp/coded-rules.html": {
    "href": "abyss/security/csp/coded-rules.html",
    "title": "Content Security Policy (CSP) Coded Rules Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Coded Rules Guide In case automation doesn't fulfil all your needs, you can always add additional rules in your C# / Razor code like this. Kit.Page.AddCsp(\"default-src\", \"'self'\"); Note that the above example uses the IPageService. The Kit object is the new v14 ServiceKit which gives you quick access to common services."
  },
  "abyss/security/csp/directives.html": {
    "href": "abyss/security/csp/directives.html",
    "title": "Content Security Policy (CSP) Directives | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Directives The Content-Security-Policy value is made of directives separated by a semicolon. The 2sxc Csp configuration does the separation for us, as each rule is on an own line. Common Security Directives These are the most relevant to configure security: Directive Description all-src This directive is unique to 2sxc. It defines allowed resources like the default-src directive. The difference is that all source directives (even if already specified) will inherit the set values on all-src. default-src Defines the allowed resources such for fetching JavaScript, Images, CSS, Fonts, AJAX requests, Frames, HTML5 Media. It serves as a fallback for unset directives. style-src Defines the allowed <style> sources script-src Defines the allowed <script> sources img-src Defines the allowed <img> sources font-src Defines the allowed font sources form-action Defines the allowed form target urls media-src Defines the allowed <audio> and <video> sources object-src Defines plugin sources <object>, <embed> and <applet> upgrade-insecure-requests Treats http resources as https Tip There are actually many more, such as worker-src or base-uri. See all possible directives in the MDN docs. Common Reporting Directives Both of these directives define the reporting endpoint for CSP violations. report-uri See MDN docs report-to See MDN docs"
  },
  "abyss/security/csp/guide.html": {
    "href": "abyss/security/csp/guide.html",
    "title": "Content Security Policy (CSP) Guide for 2sxc, Dnn and Oqtane | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Guide for 2sxc, Dnn and Oqtane Content Security Policy (CSP) is a security policy that helps you to protect your web application from cross-site scripting attacks. In this guide we'll give you step-by-step instructions how to harden a website in no time. With a bit of practice you can harden a DNN with Content-Security-Policy in one to two hours \uD83D\uDE80. \uD83C\uDFAC Before you start, be sure you've read the background, parts and best-practices. General Process Plan and prepare Setup CSP for anonymous users in reporting-only-mode with a reporting-server Setup CSP for other users - reporting-only Go productive Monitor for a few days Switch to full-mode CSP Preparations Planning CSP Think before you act Some choices made ahead of time will save you time and effort later. Will you make different CSP rules for admins and anonymous users? Will you use a reporting-server? Are you doing this just to \"tick the box, yes we did it\" or do you want it as secure as possible? Tip We highly suggest you segment this by users. That will allow you to make much stricter rules for anonymous users and less strict for admins. This also gives you a better score in most penetration tests, because they will evaluate the rules for anonymous users. In addition, we suggest you ask yourself these questions ahead of time, because it will make it easier to hand off work: When you have a situation where a code-change would let you make the rule more strict, will you make the code change, or use a lax rule? When you have CDN resources, will you want to whitelist them, or move them to your server? If you have resources from CDNs, will you whitelist the entire CDNs or just these resources? Prepare / Harden a Site for CSP Before you try to configure CSP it's best to have a good setup which makes it more secure. Tip If you follow these recommendations, you will be able to have much stricter policies. If you don't, you can still activate CSP but will need a much laxer setup. Rework your Skins / Apps to match a secure architecture, following the best practices. Things such as: Get rid of unused js/css code/files Reduce or better still, remove all jQuery dependent code (especially for anonymous users) Reduce all CDN references to as few as possible Place all your inline scripts and styles in files Change all inline onclick or href:javascript:... to be bound by the loaded code Use turnOn to couple the JS with Razor-data such as the ModuleId Use IPageService.Activate(...) and IPageService.AssetAttributes(...) wherever possible Tip All the latest standard 2sxc apps implement all these best practices. If you still have older Apps, we suggest you install the latest on another server and copy the parts you need. Prepare for Monitoring Once you've deployed CSP you should get notified of any violations. The idea is that violations could just be a sign that something wasn't configured correctly and you may have missed this. There are some cool online services which can do this, like https://report-uri.com/. So we highly recommend you get an account to use for monitoring. Develop CSP Rules General Pattern Always do dry-run tests first Create a new Dev policy and set it to Report-Only Test it using ?csp=dev in the url Choose to start restrictive or lax either start restrictive and open up the rules step-by-step or start with lax rules and tighten step-by-step Once it works, apply to production as ...-Report-Only Repeat with other user roles Dry-Run Without Enforcing Policies First you must enable the dev-feature. Now you can test the policy by adding ?csp=dev to any page. It will work with any login - as soon as you add the parameter, it will use the Dev settings. This is how the dev settings could look: Browser Setup You will want to have a logged-in window to make configuration changes, and another window to test the policy. You can either use two browsers (chrome+canary, chrome+firefox, firefox+edge, etc.) or a single browser with anonymous/guest modes to have different login states. As we're testing this, you will always need to add ?csp=dev to the url you're testing. Tip In the window where you make the configuration, use Ctl+S to just save and not close the widow. This will make it much faster to try various setups. Tip During development, please disable LightSpeed Cache as it may cache some settings, making it hard to debug. Strict-First Method (recommended) With Strict-First you start with very strict rules in ...-Report-Only mode. You will then review the errors you see in the browsers F12 console. Then you will loosen up the rules step-by-step. Lax-First Method The Lax-First method assumes that you start with rules that allow everything, then you tighten them up step-by-step. Here's an example of a very lax rule set, taken from StackOverflow: default-src * data: blob: filesystem: about: ws: wss: 'unsafe-inline' 'unsafe-eval' 'unsafe-dynamic' ; script-src * data: blob: 'unsafe-inline' 'unsafe-eval' ; connect-src * data: blob: 'unsafe-inline' ; img-src * data: blob: 'unsafe-inline' ; frame-src * data: blob: ; style-src * data: blob: 'unsafe-inline' ; font-src * data: blob: 'unsafe-inline' ; frame-ancestors * data: blob: 'unsafe-inline' ; for 2sxc it can be shorted to: // all-src would always be applied to all rules all-src * data: blob: 'unsafe-inline' default-src filesystem: about: ws: wss: 'unsafe-eval' 'unsafe-dynamic' script-src 'unsafe-eval' You can now start to tighten up the rules."
  },
  "abyss/security/csp/index.html": {
    "href": "abyss/security/csp/index.html",
    "title": "Content Security Policy (CSP) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Content Security Policy (CSP) is a security policy that helps you to protect your web application from cross-site scripting attacks. You should... Learn about Content Security Policy (CSP) Learn about the Parts that make it work in 2sxc Smarten up on the Best-Practices Follow the CSP Guide Shortlink: https://go.2sxc.org/csp"
  },
  "abyss/security/csp/parts.html": {
    "href": "abyss/security/csp/parts.html",
    "title": "Content Security Policy (CSP) Parts in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Parts in 2sxc Content Security Policy (CSP) is a security policy that helps you to protect your web application from cross-site scripting attacks. This should give you an overview as to the parts that make CSP work in 2sxc with Dnn and Oqtane. 2sxc Implementation 2sxc uses the following parts to make it work Global Features which can be enabled/disabled CSP Settings at Site / Global level Settings at the App-Level which will be included automatically Policies for different user groups Automatic White-Listing of Trusted Resources C# / Razor APIs for advanced scenarios Special all-src shorthand Test configurations which can be activated during development Really Smart CSP Engine which combines everything to make the rules you need turnOn JavaScript to run scripts which need Razor data DNN Page Integration LightSpeed Integration Global CSP Features You can manage CSP features in the system administration to enable/disable just the rules you want. For example, you could only enable dev-rules until you are happy with the configuration. Note The CSP features are very advanced features. They are exclusive to patrons who support 2sxc. To use them, you must enable the bundle Patron Sentinel. Settings Global and Site Settings You can configure CSP settings at the site- and global-level. Anything that is configured at global, but not site-level, will use the global settings. With these settings you can: Enable/Disable CSP Determine if it's report-only or fully enforced Set a bunch of rules which will be applied Note that if you set CSP rules at the site level, they will apply to that site and not inherit global settings any more. This is by design, because it could lead to very confusing, hard-to-debug configurations. App Settings The same configuration which is applied to the site or global can also be configured at the app-level. The main difference is that this will only be applied to pages which have that App. In addition, these settigs will be mixed in with the site/global settings. Tip All default 2sxc Apps have been built with CSP in mind, so all of them already include the CSP settings they need. You may need to get the latest releases to see this in action. Content Security Policies by User Groups Different users typically need different CSP policies. For example, we can really harden the Content Security Policy for end-users, as we can clearly restrict what they need and can do. Admins and super-users cannot work with the most restrictive rules, because some of the admin-functionality needs more permissions. 2sxc has policies for these user groups: SystemAdmin - a policy which will only apply to system admins SiteAdmin - a policy which will only apply to site admins Anonymous - a policy which will only apply to anonymous users Default - the default policy which is used if no other policy is defined Dev - a policy which will only apply if the url has ?csp=dev Automatic White-Listing Trusted Resources As a developer, you want your code to just-work. So ideally any JS/CSS you add, is automatically white-listed. But we cannot just white-list every <script> tag in your code, as that would make CSP useless again. So to make this easy and secure, there are two ways to white-list your trusted resources. Tip All default 2sxc Apps apply these practices. You may need to get the latest releases to see this in action. Option 1: Registered Web-Resources Every registered web-resource used by your code will be white-listed automatically. Web Resources are registered in the Settings at global, site or app-level, and then activated using the Razor API. Kit.Page.Activate(\"fancybox4\", \"MySpecialFormJs\"); Option 2: Explicitly Whitelist Assets If you have inline scripts or styles, you can mark them as trusted by using the Razor API. <script src=\"@App.Path/@Edition/dist/scripts.min.js\" @pageSvc.AssetAttributes()></script> The AssetAttributes(...) will also do other things like set script priorities. But anywhere it's applied it will also mark it for whitelisting in CSP (if CSP is enabled). Tip The Asset-Attributes will add a secret nonce to the HTML. Internally it will be processed and removed again, but this ensures that the HTML can carry a single-use key to whitelist the resource, while making it impossible for an attacker to guess the key. C# APIs for Advanced Scenarios The previously mentioned features cover 99.9% of all use cases. We ourselves have not seen a scenario that would need more than this. But you may want to create other rules for your own use-cases. In this case, you can use the IPageService.AddCsp method. Special all-src Shorthand CSP is a funny beast. If you set a rule such as default-src: https: it will be be applied automatically for js, css, fonts etc. ...But only if you don't set those rules as well. As soon as you set script-src: 'self', it will not include the previous https: rule. I assume there are cases where this makes sense. But in our experience this leads to a lot of mistakes. For example, if the site already whitelists https: an an App also needs whitelist another font, it would have to also manually add all the previous rules. We felt this is not a good idea. So we've added a special all-src shorthand which will apply the rule to all resources. It works as follows: Everything you add to all-src is added to default-src Whenever other rules are added - such as font-src - it will add all the rules ever added to all-src as well Test Configurations for Development Testing and developing your CSP rules can be very tricky, especially on a live site. Because if the HTTP headers block something, the site may become unusable. There are three distinct challenges: Step-by-step tweaking your rules Improving your rules on a site which already has CSP Testing rules for different roles / user-groups ...and all this on a live site, without accidentally blocking the site for everyone. 2sxc makes this possible with a combination of 3 features: A global feature which enables this dev-mode A special Setting called Dev which is only used for development A url-parameter ?csp=true which will switch a page to use the Dev settings This way you can test modified rules in all kinds of combinations and with various users. Once you're happy, you can then copy/paste the configuration to the live Settings. Smart CSP Engine Technically the HTTP-header can only be set once. So to make it possible to merge rules / configurations from the Site, App and Razor code, we've implemented a Smart Engine. It will collect all the requirements and before rendering the final page, it merges everything to a final rule-set and generates the HTTP-Header. turnOn JavaScript 2sxc introduced turnOn in v12.04 in preparation for CSP. It is a crucial part in the entire concept, because it allows you to place your scripts in external files, and still use parameters/configuration from Razor (such as the ModuleId) in your scripts. Do check it out \uD83D\uDE09. DNN Page Integration All of this leaves just one final piece of the puzzle: DNN Pages without 2sxc on it. We also want to protect these pages. Technically this requires the CSP Smart-Engine to be activate on the skin. We do this automatically, the moment you access DynamicCode using the IDynamicCodeService on the skin. To make it work, you must get DynamicCode of the Site or any App from the theme. The rest will happen automatically. Something like this will do the trick: <%-- This has all common 2sxc services and GetScopedService(...) --%> <%@ Import Namespace=\"ToSic.Sxc.Services\" %> <%-- This namespace provides IDynamicCode --%> <%@ Import Namespace=\"ToSic.Sxc.Code\" %> <script runat=\"server\"> // Get the Dynamic Code of this Site = OfSite() and keep for re-use protected IDynamicCode SiteDynCode { get { return _sdc ?? (_sdc = this.GetScopedService<IDynamicCodeService>().OfSite()); } } private IDynamicCode _sdc; </script> Note that your code must access the SiteDynCode somewhere so the OfSite() is actually run. LightSpeed Integration We've ensured that CSP will also work with LightSpeed Cache. So even cached modules and Apps will still apply the CSP rules. Next Steps \uD83D\uDC49\uD83C\uDFFC Learn how to setup CSP in your website"
  },
  "abyss/security/csp/reporting.html": {
    "href": "abyss/security/csp/reporting.html",
    "title": "Content Security Policy (CSP) Reporting Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Reporting Guide CSP allows for easy reporting of rule violations. When a violation occurs, the browser will send a request to the given URL. For testing we recommend report-uri.com. Simply add the \"report-uri\" directive and specify your URI. report-uri: https://YOUR-DOMAIN.report-uri.com/r/d/csp/enforce Using \"report-uri.com\" you can see all violations in the reports section and can analyse them. Report Only mode You can configure CSP to use the report only mode. This stops the browser from forcing the CSP policies on the client and only reports violations."
  },
  "abyss/security/csp/sources.html": {
    "href": "abyss/security/csp/sources.html",
    "title": "Content Security Policy (CSP) Sources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Sources The Content-Security-Policy value is made of directives with specify a source. These are the most relevant. Note that special keywords such as '*' or 'self' must be enclosed in single quotes '.: Source Description '*' Wildcard – Allows any URL except data 'none' Prevents loading from any source 'self' Allows loading from same origin (scheme, host, port) – https://yourdomain.com:80 data: Allows loading data resources yourdomain.com Allows loading resources from the specified domain (yourdomain.com) *.yourdomain.com Allows loading resources from any subdomain from the specified domain (xy.yourdomain.com) https://yourdomain.com Allows loading resources from the specified domain only over https https: Allows loading resources over https 'unsafe-inline' Allows use of inline source attributes (style, onclick…) 'unsafe-eval' Allows unsafe dynamic code evaluation (eval() in JS) 'sha256-H4shV41ue' Allows inline execution if it matches the hash in the header 'nonce-r4nd0mV41ue' Allows inline execution of tags that match the nonce attribute 'strict-dynamic' Allows trusted scripts to load other scripts 'unsafe-hashes' Allows enabling scripts in event handlers. (not href=\"javascript:...\" or inline <script> tags) Tip Also check out the MDN sources docs"
  },
  "abyss/security/csp/whitelist.html": {
    "href": "abyss/security/csp/whitelist.html",
    "title": "Content Security Policy (CSP) Whitelist Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Security Policy (CSP) Whitelist Guide Most of your CSP policies will allow something to work. This is called whitelisting. Default fallback First, we set the all-src directive with the value 'self' and https:. This will force the browser to only accept sources originating from the host URL. all-src is a custom directive from 2sxc, which all source directives inherit from. all-src 'self' https: To improve documentation / clarity, you can also use multiple lines and comments: // Always allow things from the own server all-src: 'self' // No matter where it comes from, it must use HTTPS all-src: https: Script sources For JavaScript code, we use the scipt-src directive. It is important for this directive to have 'self' specified as origin, but because we have set the all-src directive it gets inherited automatically. For the trusted scripts to work properly we will also add 'unsafe-eval', which will allow script execution methods. script-src 'unsafe-eval' Style Sources Because we sometimes use inline styles, we need to add the directive style-src with the value 'unsafe-inline'. style-src 'unsafe-inline' Font Sources Some of our fonts are hosted on the same origin and some are external. Inline Fonts For example, we may allow fonts from inline data. You would do this by adding a font-src with the value data:. font-src data: Google Fonts Because fonts are often included in the skin, we can't whitelist them using 2sxc and must specify them in the config. For fonts included from google you typically need to add the url fonts.googleapis.com as trusted style-src origin and fonts.gstatic.com as trusted font-src origin. style-src https://fonts.googleapis.com font-src https://fonts.gstatic.com Image sources We will only allow images from secure sources. If you have the all-src specified above, we don't need to add this again. But we may wish to add data: for inline images. img-src data: Media sources For the usage of video/audio tags we will only allow media from secure sources as well. The \"media-src\" directive with the value \"'self' https:\" will be automatically assumed, if you have the all-src set above. Form actions Form actions can be a sensitive topic while handling data. Simply by adding the form-action directive with the value \"'self'\", we can prevent data-leaks. When dealing with other websites you should add the external domain specifically, like for example \"'self' https://externaldomain.com\". form-action 'self' form-action https://externaldomain.com Insecure (http) Resources For most resources we have specified to only allow secure https connections as origin. Because it would be hard to migrate every HTTP resource to HTTPS, we can use the \"upgrade-insecure-requests\" directive. Using this directive, the browser will request every resource (even if originating from HTTP) using HTTPS. Note that we don't recommend doing this! Include External Resources When including external resources in apps, you should use the AssetAttributes method from the IPageService. @inherits Custom.Hybrid.Razor14 <script src=\"@App.Path/dist/scripts.min.js\" @Kit.Page.AssetAttributes() ></script> For cases, which are outside of the scope of 2sxc Apps you can whitelist them by specifying the directive script-src with the origin URL. Trusted, Pre-Registered Web Resources For pre-registered resources, you can also just activate them. @inherits Custom.Hybrid.Razor14 @{ Kit.Page.Activate(\"turnOn\", \"2sxc.JsCore\", \"fancybox4\"); } Fontawesome Icon Libraries As our default icon library, fontawesome gets set as trusted source automatically by 2sxc. This will only work if added using Kit.Page.Activate(\"Fontawesome5\"). Otherwise you will have to specify it in the configuration. @inherits Custom.Hybrid.Razor14 @{ Kit.Page.Activate(\"fontawesome5\"); } FancyBox Within 2sxc the FancyBox library is also a pre-registered resource. Because 2sxc hosts the JavaScript file internally, we only need to trust the origin of its stylesheet file. We do this by adding a \"style-src\" directive and setting the \"cdn.jsdelivr.net/npm/@fancyapps/\" origin as value. But this will also happen automatically when we activate the resource. @inherits Custom.Hybrid.Razor14 @{ Kit.Page.Activate(\"fancybox3\"); }"
  },
  "abyss/security/encrypt-body/index.html": {
    "href": "abyss/security/encrypt-body/index.html",
    "title": "Network POST Body Encryption (new v19) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Network POST Body Encryption (new v19) 2sxc 18.04 introduces a new feature to encrypt the HTTP POST Body. Reason is for sensitive or personal data which may pass through CDNs or other proxies. Note that this requires the feature Sentinel NetworkDataEncryption feature. What it Does When this feature is active, your POST data will be encrypted before it is sent to the server. This is useful when you are sending sensitive data, like passwords, credit card numbers, etc. This will prevent the data from being intercepted. The following images show the difference between sending data unencrypted... ... and encrypted. How it Works The system uses a public key to encrypt the data, and the server uses a private key to decrypt it. The private key is only known to the server and is never sent to the client. The client then uses the latest WebCrypto API to encrypt the data before it is sent to the server. Since PKI is only meant for short messages, the client will use the Crypto API to generate a secure, random AES Key which is used to encrypt the payload. The AES-Key in turn is encrypted using the public key, so only the server can access the AES key. In addition, the Crypto API generates an IV (Initialization Vector) which prevents the same data from being encrypted the same way each time. All of this is then sent to the server, which uses it to decrypt the data. Tip All of this happens fully automatically, just by a) activating the feature in 2sxc and b) enabling it in the view you want to secure and c) adding the [SecureEndpoint] attribute to your API. How it Runs The feature is activated by the Network.EncryptBody feature in Razor using @Kit.Page.Activate(\"Network.EncryptBody\") The feature will automatically add a public key to the page The public key will be used to encrypt the POST body by the $2sxc JavaScript API The encrypted POST body will be sent to the server The server API must then use the [SecureEndpoint] attribute to decrypt the body (remember to add @using ToSic.Sxc.WebApi) Default Behavior Basically if you activate the feature in your Razor use the [SecureEndpoint] attribute in your API ...everything will be encrypted and decrypted automatically, as the setting encrypt: \"auto\" is assumed. Important In scenarios where the encryption fails, the system will automatically fall back to sending the data unencrypted. Read on in case you prefer not to submit unencrypted data. Enforcing Encryption / No-Encryption If you want to enforce encryption (refuse to send unencrypted data), you must use encrypt: true in your JavaScript. If you want to enforce no-encryption even if the public key is provided, you must use encrypt: false in your JavaScript. // Get the sxc object for the current module (there are many ways to do this) const sxc = $2sxc(moduleId); // With encryption enforced - will throw an error if encryption is not possible sxc.webApi .fetchJson('app/auto/api/SomeEndpoint/SomeMethod', data, { encrypt: true }) .catch(function(error) { // Do some error handling, show a message, whatever console.error('Handle error in promise: ', error); }); Important: WebCrypto API requires HTTPS Warning Because of the way that the WebCrypto API works, it will only work on HTTPS sites, and will not work on HTTP sites. If you wish to use this feature on an HTTP site, you must provide a polyfill."
  },
  "api/dot-net/AppCode._Help.html": {
    "href": "api/dot-net/AppCode._Help.html",
    "title": "Class _Help | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class _Help Namespace AppCode Assembly ToSic.Sxc.dll EXPERIMENTAL v17 This class is a placeholder to provide help in the docs. The namespace AppCode is reserved for custom code in your app. As such, it doesn't have any code in the public docs, but will contain classes and code from your app. To use, see TODO: Add link to docs [PublicApi] public class _Help Inheritance object _Help"
  },
  "api/dot-net/AppCode.html": {
    "href": "api/dot-net/AppCode.html",
    "title": "Namespace AppCode | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace AppCode Classes _Help EXPERIMENTAL v17 This class is a placeholder to provide help in the docs. The namespace AppCode is reserved for custom code in your app. As such, it doesn't have any code in the public docs, but will contain classes and code from your app. To use, see TODO: Add link to docs"
  },
  "api/dot-net/Custom.Data.CustomData.html": {
    "href": "api/dot-net/Custom.Data.CustomData.html",
    "title": "Class CustomData | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CustomData Namespace Custom.Data Assembly ToSic.Sxc.dll WIP [PublicApi] public abstract class CustomData : ITypedItemWrapper Inheritance object CustomData Implements ITypedItemWrapper Derived FileModel FolderModel Remarks Released in v19.01 Properties _item The item - for inheriting classes to access. protected ITypedItem _item { get; } Property Value ITypedItem Remarks This property is protected, not public, as it should only be used internally. It uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes. Methods Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(CustomData, CustomData) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(CustomData item1, CustomData item2) Parameters item1 CustomData first item to compare item2 CustomData second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(CustomData, CustomData) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(CustomData item1, CustomData item2) Parameters item1 CustomData first item to compare item2 CustomData second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/Custom.Data.CustomItem.html": {
    "href": "api/dot-net/Custom.Data.CustomItem.html",
    "title": "Class CustomItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CustomItem Namespace Custom.Data Assembly ToSic.Sxc.dll Base class for custom data objects, which extend the ITypedItem for use in Razor Components. [PublicApi] public class CustomItem : ITypedItem, ITyped, IEquatable<ITypedItem>, ICanWrap<ITypedItem>, ICanWrapData Inheritance object CustomItem Implements ITypedItem ITyped IEquatable<ITypedItem> ICanWrap<ITypedItem> ICanWrapData Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom ITyped data model: namespace AppCode.Data { class MyPerson : Custom.Data.CustomItem { // New custom property public string Name => _item.String(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } @* Now you can use the custom properties *@ <span>@person.Name</span> @* But also all the standard properties like Id, Guid, Title, Type, etc. *@ <span>@person.Id / @person.Guid</span> Remarks It is used by 2sxc Copilot when generating base classes for custom data objects. History Released in v17.06 It's not abstract, even if the most common case is to inherit, as there are cases where you want to use it directly. Properties Guid The guid of the underlying entity. [JsonPropertyOrder(-99)] public Guid Guid { get; } Property Value Guid Remarks If the entity doesn't exist, it will return an empty guid Id The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. [JsonPropertyOrder(-100)] public int Id { get; } Property Value int Remarks If the entity doesn't exist, it will return 0 IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use .IsDemoItem. [JsonIgnore] public bool IsDemoItem { get; } Property Value bool True if this is the item configured in the view-settings, false if not. IsPublished True if this item version is published. This means that the item can exist as published, or published-with-draft, showing the published version. Note that by default, end-users only see the published version and don't see any draft version. [JsonIgnore] public bool IsPublished { get; } Property Value bool Remarks New in v17, see also Publishing Metadata Metadata of the current item, with special features. [JsonIgnore] public IMetadata Metadata { get; } Property Value IMetadata Remarks Added in 16.02 Presentation The presentation item or null if it doesn't exist. [JsonIgnore] public ITypedItem Presentation { get; } Property Value ITypedItem Publishing [JsonIgnore] public IPublishing Publishing { get; } Property Value IPublishing Title The title of this item. This is always available no matter what the underlying field for the title is. [JsonIgnore] public string Title { get; } Property Value string The title of the underlying entity. In rare cases where no title-field is known, it can be null. It can also be null if there is no underlying entity. Remarks This returns a string which is usually what's expected. In previous versions (before v15) 2sxc it returned an object. Type The Content-Type of the current entity. [JsonIgnore] public IContentType Type { get; } Property Value IContentType _item The item - for inheriting classes to access. protected ITypedItem _item { get; } Property Value ITypedItem Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(IEnumerable<ITypedItem>, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(IEnumerable<ITypedItem> source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source IEnumerable<ITypedItem> protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T Remarks New in v17.03 As<T>(ITypedItem) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(ITypedItem item) where T : class, ICanWrapData Parameters item ITypedItem Returns T Type Parameters T Remarks New in v17.03 Attribute(string, NoParamOrder, string, bool?) Return a value as a raw HTML string for using inside an attribute. Usage like title='@item.Attribute(\"Title\")' It will do a few things such as: Ensure dates are in the ISO format Ensure numbers are in a neutral format such as 14.27 and never 14,27 Html encode any characters which would cause trouble such as quotes public IRawHtmlString Attribute(string name, NoParamOrder noParamOrder = default, string fallback = null, bool? required = null) Parameters name string Name of the property noParamOrder NoParamOrder see Convention: Named Parameters fallback string Value to use if the property specified by name doesn't exist required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IRawHtmlString Bool(string, NoParamOrder, bool, bool?) Get a property and return the value as a bool. If conversion fails, will return default false or what is specified in the fallback. public bool Bool(string name, NoParamOrder noParamOrder = default, bool fallback = false, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback bool optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns bool Value as bool Child(string, NoParamOrder, bool?) A single item from a field. public ITypedItem Child(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string Name of the field noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns ITypedItem The ITypedItem. If the field doesn't exist or is empty, will return null. Child<T>(string, NoParamOrder, bool?) Get a child and return with specified custom type. public T Child<T>(string name, NoParamOrder protector = default, bool? required = null) where T : class, ICanWrapData, new() Parameters name string Name of the field protector NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns T Type Parameters T Remarks New v17.05 Children(string, NoParamOrder, string, bool?) A typed list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", type: typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. public IEnumerable<ITypedItem> Children(string field, NoParamOrder noParamOrder = default, string type = null, bool? required = null) Parameters field string Optional field filter - would only return items that point to the current item in a specific field name. noParamOrder NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IEnumerable<ITypedItem> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks Note that the parameter-order is reversed to the Parents() Children<T>(string, NoParamOrder, string, bool?) A strongly typed list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", type: typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. public IEnumerable<T> Children<T>(string field, NoParamOrder protector = default, string type = null, bool? required = null) where T : class, ICanWrapData, new() Parameters field string Name of the field protector NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IEnumerable<T> Type Parameters T Remarks New v17.05 ContainsKey(string) Check if this typed object has a property of this specified name. It's case-insensitive. public bool ContainsKey(string name) Parameters name string the name like Image; some objects also support path to sub-property like Author.Name Returns bool Remarks Adding in 16.03 (WIP) DateTime(string, NoParamOrder, DateTime, bool?) Get a property and return the value as a DateTime. If conversion fails, will return default 0001-01-01 or what is specified in the fallback. public DateTime DateTime(string name, NoParamOrder noParamOrder = default, DateTime fallback = default, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback DateTime optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns DateTime Value as DateTime Decimal(string, NoParamOrder, decimal, bool?) Get a property and return the value as a decimal. If conversion fails, will return default 0 or what is specified in the fallback. public decimal Decimal(string name, NoParamOrder noParamOrder = default, decimal fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback decimal optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns decimal Value as decimal Double(string, NoParamOrder, double, bool?) Get a property and return the value as a double. If conversion fails, will return default 0 or what is specified in the fallback. public double Double(string name, NoParamOrder noParamOrder = default, double fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback double optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns double Value as double Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool Field(string, NoParamOrder, bool?) Get a special info-object describing a specific field in this item. This is a rich object used by other operations which need a lot of context about the item and the field. public IField Field(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string Name of the property noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IField File(string, NoParamOrder, bool?) Get the file of the current field. There are a few scenarios: If it's a file/hyperlink field pointing to a file such as file:27 it will retrieve the file itself. If it's a file/hyperlink field pointing to a url such as http://xyz it will return null. If it's a library field, it will just take the first file, as there is no value referencing a specific field If it's any other field, will return null public IFile File(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IFile Remarks Added in 16.02 Float(string, NoParamOrder, float, bool?) Get a property and return the value as a float. If conversion fails, will return default 0 or what is specified in the fallback. public float Float(string name, NoParamOrder noParamOrder = default, float fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback float optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns float Value as float Folder(string, NoParamOrder, bool?) Get the ADAM (Automatic Digital Asset Manager) for this field. This is a folder which contains all the files and possibly folders which are uploaded on exactly this field. public IFolder Folder(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IFolder The Folder object Remarks Added in 16.02 Get(string, NoParamOrder, bool?, string) Get a property. public object Get(string name, NoParamOrder noParamOrder = default, bool? required = null, string language = null) Parameters name string the property name like Image - or path to sub-property like Author.Name (new v15) noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns object The result if found or null; or error if the object is in strict mode Remarks parameter languages added in 17.10 Get<TValue>(string, NoParamOrder, TValue, bool?, string) Get a value using the name - and cast it to the expected strong type. For example to get an int even though it's stored as decimal. Since the parameter fallback determines the type TValue you can just write this like `something.Get(\"Title\", fallback: \"no title\") public TValue Get<TValue>(string name, NoParamOrder noParamOrder = default, TValue fallback = default, bool? required = null, string language = null) Parameters name string the property name like Image - or path to sub-property like Author.Name (new v15) noParamOrder NoParamOrder see Convention: Named Parameters fallback TValue the fallback value to provide if not found required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns TValue The typed value, or the default like null or 0 if casting isn't possible. Type Parameters TValue The expected type, like string, int, etc. Note that you don't need to specify it, if you specify the fallback property. Remarks Added in v15 parameter languages added in 17.10 Gps(string, NoParamOrder, bool?) Get the GPS coordinates of a GPS field as a typed object. public GpsCoordinates Gps(string name, NoParamOrder protector = default, bool? required = null) Parameters name string Name of a field protector NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns GpsCoordinates Remarks New in v17.03 Html(string, NoParamOrder, object, bool?, object, bool?, bool, Func<ITweakInput<string>, ITweakInput<string>>) Show a field in the expected / best possible way. As of now it's meant for WYSIWYG fields with Very-Rich Text. See DynamicEntity / TypedItem .Html(...) Method new v16.01 public IHtmlTag Html(string name, NoParamOrder noParamOrder = default, object container = null, bool? toolbar = null, object imageSettings = null, bool? required = null, bool debug = false, Func<ITweakInput<string>, ITweakInput<string>> tweak = null) Parameters name string the field name noParamOrder NoParamOrder see Convention: Named Parameters container object A wrapper tag for the result. It's either a RazorBlade tag such as Kit.HtmlTag.Div(), a string such as span or an empty string `` to indicate no container. If not set it will default to to a div-tag. See docs toolbar bool? Override default toolbar behavior on this field. See docs imageSettings object Settings for resizing. Default is Wysiwyg but it can also be Content or a settings object. required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks debug bool Activate debug visualization to better see alignments and such. tweak Func<ITweakInput<string>, ITweakInput<string>> tweak behavior - ATM modify the input before it's processed new in v17 Returns IHtmlTag Remarks Added in 2sxc 16.01 Added tweak in v17 Only works on Razor files inheriting from Hybrid14 or newer Img(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, object, object) Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @pic or you can work with sub-properties as specified in the IResponsivePicture. Important: This call only allows you to set the most common parameters factor and width. For other parameters like height, aspectRatio, quality etc. create typed Settings Settings(object, NoParamOrder, Func<ITweakResize, ITweakResize>, object, object, object, object, string, string, string, object, string, object) and pass them in. Note This is the similar as using the Picture(object, object, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, string, string, string, object, string, object, object, object) just a bit simpler. An important difference is that it returns null if the field does not exist or is empty, allowing you to just show nothing or use ...Picture(...) ?? someFallback; public IResponsiveImage Img(string name, NoParamOrder noParamOrder = default, Func<ITweakMedia, ITweakMedia> tweak = null, object settings = null, object factor = null, object width = null, string imgAlt = null, string imgAltFallback = null, string imgClass = null, object imgAttributes = null, object toolbar = null, object recipe = null) Parameters name string Name of a field noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakMedia, ITweakMedia> Tweak API to configure everything (new v18.03). This is recommended above using parameter names and all newer parameters will only be available on this. settings object The name of a settings configuration, like \"Content\", \"Screen\", \"Square\", etc. A standardized Image-Settings object like Settings.Child(\"Images.Content\") - see https://go.2sxc.org/settings A dynamic object containing settings properties (this can also be a merged custom + standard settings) A strictly typed IResizeSettings object containing all settings created using ResizeSettings factor object An optional multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. width object An optional, fixed width of the image imgAlt string Optional alt attribute on the created img tag for SEO etc. If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves. If you want to provide a fallback value (in case the metadata has no alt), use imgAltFallback imgAltFallback string Optional alt attribute which is only used if the imgAlt or the alt-text in the metadata are empty. imgClass string Optional class attribute on the created img tag imgAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) toolbar object Provide a custom toolbar or false to not show a toolbar recipe object Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns IResponsiveImage A IResponsivePicture object which can be rendered directly. See Responsive Images API in .net If the field does not exist, it will return null If the field exists, but is empty, it will return null Remarks Added to ITypedItem in v17.04 (previously only Picture was available) tweak added in 18.03 Int(string, NoParamOrder, int, bool?) Get a property and return the value as a int. If conversion fails, will return default 0 or what is specified in the fallback. public int Int(string name, NoParamOrder noParamOrder = default, int fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback int optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns int Value as int IsEmpty(string, NoParamOrder, string) Check if this typed object has a property of this specified name, and has real data. The opposite version of this is IsNotEmpty(...) Important This method is optimized for use in Razor-like scenarios. It's behavior is super-useful but maybe not always expected. If the value is a string, and is empty or only contains whitespace (even &nbsp;) it is regarded as empty. If the returned value is an empty list (e.g. a field containing relationships, without any items in it) it is regarded as empty. If you need a different kind of check, just .Get(...) the value and perform the checks in your code. public bool IsEmpty(string name, NoParamOrder noParamOrder = default, string language = null) Parameters name string the property name like Image; some objects also support path to sub-property like Author.Name noParamOrder NoParamOrder see Convention: Named Parameters language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns bool true if the property exists and has a real value. If it returned an empty list, it will also return false Remarks Added in 16.03 language parameter added in 17.10 IsNotEmpty(string, NoParamOrder, string) Check if this typed object has a property of this specified name, and has real data. The opposite version of this is IsEmpty(...) Important This method is optimized for use in Razor-like scenarios. It's behavior is super-useful but maybe not always expected. If the value is a string, and is empty or only contains whitespace (even &nbsp;) it is regarded as empty. If the returned value is an empty list (e.g. a field containing relationships, without any items in it) it is regarded as empty. If you need a different kind of check, just .Get(...) the value and perform the checks in your code. public bool IsNotEmpty(string name, NoParamOrder noParamOrder = default, string language = null) Parameters name string the property name like Image; some objects also support path to sub-property like Author.Name noParamOrder NoParamOrder see Convention: Named Parameters language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns bool true if the property exists and has a real value. If it returned an empty list, it will also return false Remarks Added in 16.03 language parameter added in 17.10 Keys(NoParamOrder, IEnumerable<string>) Get all the keys available in this Model (all the parameters passed in). This is used to sometimes run early checks if all the expected parameters have been provided. public IEnumerable<string> Keys(NoParamOrder noParamOrder = default, IEnumerable<string> only = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters only IEnumerable<string> Only return the keys specified here, if found. Typical use: only: new [] { \"Key1\", \"Key2\" }. Useful to check if all or any specific keys exist. Returns IEnumerable<string> Remarks Added in 16.03 Long(string, NoParamOrder, long, bool?) Get a property and return the value as a long. If conversion fails, will return default 0 or what is specified in the fallback. public long Long(string name, NoParamOrder noParamOrder = default, long fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback long optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns long Value as long Parent(NoParamOrder, bool?, string, string) Get either the current parent or the first parent which would be found on .Parents(...). public ITypedItem Parent(NoParamOrder noParamOrder = default, bool? current = null, string type = null, string field = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters current bool? if set to true, will get the Item which created the current item (the parent) which called .Child(...) or .Children(...) type string Optional type filter - would only return items of this type. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns ITypedItem either the current parent or the first parent returned by the same .Parents(...) call. Parent<T>(NoParamOrder, bool?, string, string) Get either the current parent or the first parent which would be found on .Parents(...) as strongly typed. public T Parent<T>(NoParamOrder protector = default, bool? current = null, string type = null, string field = null) where T : class, ICanWrapData, new() Parameters protector NoParamOrder see Convention: Named Parameters current bool? if set to true, will get the Item which created the current item (the parent) which called .Child(...) or .Children(...) type string Optional type filter - would only return items of this type. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns T either the current parent or the first parent returned by the same .Parents(...) call. Type Parameters T Remarks New v17.06 Parents(NoParamOrder, string, string) A typed list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. public IEnumerable<ITypedItem> Parents(NoParamOrder noParamOrder = default, string type = null, string field = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns IEnumerable<ITypedItem> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks Note that the parameter-order is reversed to the Children() Parents<T>(NoParamOrder, string, string) A typed list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. public IEnumerable<T> Parents<T>(NoParamOrder protector = default, string type = null, string field = null) where T : class, ICanWrapData, new() Parameters protector NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. If not specified (null) will use the name of T. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns IEnumerable<T> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Type Parameters T Remarks Note that the parameter-order is reversed to the Children() Picture(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, string, object, object, object) Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @pic or you can work with sub-properties as specified in the IResponsivePicture. Important: This call only allows you to set the most common parameters factor and width. For other parameters like height, aspectRatio, quality etc. create typed Settings Settings(object, NoParamOrder, Func<ITweakResize, ITweakResize>, object, object, object, object, string, string, string, object, string, object) and pass them in. Note This is the similar as using the Picture(object, object, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, string, string, string, object, string, object, object, object) just a bit simpler. An important difference is that it returns null if the field does not exist or is empty, allowing you to just show nothing or use ...Picture(...) ?? someFallback; public IResponsivePicture Picture(string name, NoParamOrder noParamOrder = default, Func<ITweakMedia, ITweakMedia> tweak = null, object settings = null, object factor = null, object width = null, string imgAlt = null, string imgAltFallback = null, string imgClass = null, object imgAttributes = null, string pictureClass = null, object pictureAttributes = null, object toolbar = null, object recipe = null) Parameters name string Name of a field noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakMedia, ITweakMedia> Tweak API to configure everything (new v18.03). This is recommended above using parameter names and all newer parameters will only be available on this. settings object The name of a settings configuration, like \"Content\", \"Screen\", \"Square\", etc. A standardized Image-Settings object like Settings.Child(\"Images.Content\") - see https://go.2sxc.org/settings A dynamic object containing settings properties (this can also be a merged custom + standard settings) A strictly typed IResizeSettings object containing all settings created using ResizeSettings factor object An optional multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. width object An optional, fixed width of the image imgAlt string Optional alt attribute on the created img tag for SEO etc. If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves. If you want to provide a fallback value (in case the metadata has no alt), use imgAltFallback imgAltFallback string Optional alt attribute which is only used if the imgAlt or the alt-text in the metadata are empty. imgClass string Optional class attribute on the created img tag imgAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) pictureClass string Optional class attribute on the created picture tag pictureAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) toolbar object Provide a custom toolbar or false to not show a toolbar recipe object Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns IResponsivePicture A IResponsivePicture object which can be rendered directly. See Responsive Images API in .net If the field does not exist, it will return null If the field exists, but is empty, it will return null Remarks Added to ITypedItem in v16.03 imgAttributes, picClass and picAttributes added in 16.07 tweak added in 18.03 String(string, NoParamOrder, string, bool?, object) Get a property and return the value as a string. If conversion fails, will return default null or what is specified in the fallback. public string String(string name, NoParamOrder noParamOrder = default, string fallback = null, bool? required = null, object scrubHtml = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback string optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks scrubHtml object If true, will remove all HTML tags from the string. If p will remove all p tags, if div,span will remove these tags. This is the same as using Kit.Scrub.All(...) or .Only(...). For more detailed scrubbing, use the Kit.Scrub` Returns string Value as string ToString() Override ToString to give more information about the current object public override string ToString() Returns string Url(string, NoParamOrder, string, bool?) Get a url from a field. It will do sanitation / url-corrections for special characters etc. On TypedItems it will also auto-convert values such as file:72 or page:14. public string Url(string name, NoParamOrder noParamOrder = default, string fallback = null, bool? required = null) Parameters name string The field name. noParamOrder NoParamOrder see Convention: Named Parameters fallback string optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns string A url converted if possible. If the field contains anything else such as hello then it will not be modified. Operators operator ==(CustomItem, CustomItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(CustomItem item1, CustomItem item2) Parameters item1 CustomItem first item to compare item2 CustomItem second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(CustomItem, CustomItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(CustomItem item1, CustomItem item2) Parameters item1 CustomItem first item to compare item2 CustomItem second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/Custom.Data.CustomModel.html": {
    "href": "api/dot-net/Custom.Data.CustomModel.html",
    "title": "Class CustomModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CustomModel Namespace Custom.Data Assembly ToSic.Sxc.dll Base class for custom models. Similar to CustomItem but without predefined public properties or methods. [PublicApi] public class CustomModel : ModelFromItem, ICanWrap<ITypedItem>, ICanWrapData, IEquatable<ITypedItem> Inheritance object ModelFromItem CustomModel Implements ICanWrap<ITypedItem> ICanWrapData IEquatable<ITypedItem> Inherited Members ModelFromItem._item ModelFromItem.ToString() ModelFromItem.As<T>(object) ModelFromItem.AsList<T>(object, NoParamOrder, bool) ModelFromItem.Equals(object) Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom data model: namespace AppCode.Data { class MyPersonModel : Custom.Data.CustomModel { // New custom property public string Name => _item.String(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPersonModel>(MyItem); } @* Now you can use the custom properties *@ <span>@person.Name</span> @* But NOT all the standard properties like Id, Guid, Title, Type, etc. *@ @* this would error: *@ <span>@person.Id / @person.Guid</span> Remarks This is a lightweight custom object which doesn't have public properties like Id or methods such as String(...). It's ideal for data models which need full control, like for serializing or just to reduce the API surface. You can access the underlying (protected) _item property to get the raw data. And it also has the (protected) As<...>() conversion for typed sub-properties. History: New in 19.03"
  },
  "api/dot-net/Custom.Data.html": {
    "href": "api/dot-net/Custom.Data.html",
    "title": "Namespace Custom.Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace Custom.Data Classes CustomItem Base class for custom data objects, which extend the ITypedItem for use in Razor Components. CustomModel Base class for custom models. Similar to CustomItem but without predefined public properties or methods."
  },
  "api/dot-net/Custom.DataSource.DataSource16.html": {
    "href": "api/dot-net/Custom.DataSource.DataSource16.html",
    "title": "Class DataSource16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataSource16 Namespace Custom.DataSource Assembly ToSic.Sxc.dll The Base Class for custom Dynamic DataSources in your App. [PublicApi] public abstract class DataSource16 : ServiceBase<DataSource16.MyServices>, IDataSource, IDataSourceLinkable, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog Inheritance object ServiceBase ServiceBase<DataSource16.MyServices> DataSource16 Implements IDataSource IDataSourceLinkable IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog Constructors DataSource16(MyServices, string) Constructor with the option to provide a log name. protected DataSource16(DataSource16.MyServices services, string logName = null) Parameters services DataSource16.MyServices All the needed services - see Convention: MyServices logName string Optional name for logging such as My.JsonDS Properties AppId The app id as used internally public int AppId { get; } Property Value int The App ID this thing belongs to Configuration The configuration system of this data source. Keeps track of all values which the data source will need, and manages the LookUp engine which provides these values. public IDataSourceConfiguration Configuration { get; } Property Value IDataSourceConfiguration Error Special helper to generate error-streams. DataSources should never throw exceptions but instead return a stream containing the error information. public DataSourceErrorHelper Error { get; } Property Value DataSourceErrorHelper Kit A simplified (light) Kit containing a bunch of helpers. public ServiceKitLight16 Kit { get; } Property Value ServiceKitLight16 Remarks This Kit has fewer APIs than in the typical Razor Kits, because many of the Razor APIs require a Razor context. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog ZoneId ID of the zone (EAV Tenant) public int ZoneId { get; } Property Value int The zone ID this thing belongs to Methods GetDefault() Optional method to provide default data. You can override this, or use one or more ProvideOut(Func<object>, NoParamOrder, string, Func<DataFactoryOptions>) in your constructor. protected virtual IEnumerable<IRawEntity> GetDefault() Returns IEnumerable<IRawEntity> ProvideOut(Func<object>, NoParamOrder, string, Func<DataFactoryOptions>) Provide out-data on this data source. Typically called in the constructor. You can call this multiple times, providing different names. protected void ProvideOut(Func<object> getList, NoParamOrder noParamOrder = default, string name = \"Default\", Func<DataFactoryOptions> options = null) Parameters getList Func<object> noParamOrder NoParamOrder name string options Func<DataFactoryOptions> TryGetIn(string) public IImmutableList<IEntity> TryGetIn(string name = \"Default\") Parameters name string Returns IImmutableList<IEntity> TryGetOut(string) public IImmutableList<IEntity> TryGetOut(string name = \"Default\") Parameters name string Returns IImmutableList<IEntity>"
  },
  "api/dot-net/Custom.DataSource.html": {
    "href": "api/dot-net/Custom.DataSource.html",
    "title": "Namespace Custom.DataSource | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace Custom.DataSource Base classes for your custom DataSources in Dnn ☢️ & Oqtane \uD83E\uDE78. This contains all the base classes for your own DataSources. Classes DataSource16 The Base Class for custom Dynamic DataSources in your App."
  },
  "api/dot-net/Custom.Dnn.Api12.html": {
    "href": "api/dot-net/Custom.Dnn.Api12.html",
    "title": "Class Api12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Api12 Namespace Custom.Dnn Assembly ToSic.Sxc.Dnn.WebApi.dll Base Class for Api Controllers for Dnn ☢️ only. This is the Dnn specific base class. It's the very same as Custom.Hybrid.Api12 except for the additional Dnn Property. If you inherit from this class, you'll automatically have all the properties from DynamicCode. Because of this, the documentation here only shows Dnn - for all other properties go to Custom.Hybrid.Api12 Tip If you don't need the Dnn object, we strongly suggest to move to the Hybrid implementation. The latest Hybrid base classes also have many new features and are easier to use. See Custom.Hybrid for more information. [PublicApi(\"This is the official base class for v12+\")] public abstract class Api12 : Api12, IDnnDynamicCode, IHasLog, IHasDnn Inheritance object ApiController DnnApiController DnnSxcControllerRoot DnnSxcControllerBase DnnSxcCustomControllerBase Api12 Api12 Implements IDnnDynamicCode IHasLog IHasDnn Inherited Members Api12.Log Api12.GetService<TService>() Api12.Content Api12.Header Api12.App Api12.Data Api12.Link Api12.Edit Api12.CmsContext Api12.Resources Api12.Settings Api12.AsDynamic(string, string) Api12.AsDynamic(IEntity) Api12.AsDynamic(object) Api12.AsDynamic(params object[]) Api12.AsEntity(object) Api12.AsList(object) Api12.Convert Api12.CreateSource<T>(IDataStream) Api12.CreateSource<T>(IDataSource, ILookUpEngine) Api12.AsAdam(ICanBeEntity, string) Api12.SaveInAdam(NoParamOrder, Stream, string, string, Guid?, string, string) Api12.CreateInstance(string, NoParamOrder, string, string, bool) Api12.File(NoParamOrder, bool?, string, string, string, object) Api12.Ok() Api12.Ok(object) Api12.NoContent() Api12.Redirect(string) Api12.RedirectPermanent(string) Api12.StatusCode(int) Api12.StatusCode(int, object) Api12.Unauthorized() Api12.Unauthorized(object) Api12.NotFound() Api12.NotFound(object) Api12.BadRequest() Api12.Conflict() Api12.Conflict(object) Api12.Accepted() Api12.Forbid() Constructors Api12() protected Api12() Api12(string) This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. protected Api12(string logSuffix) Parameters logSuffix string Properties Dnn The DNN context. Has various objects to access the Dnn Page, etc. public IDnnContext Dnn { get; } Property Value IDnnContext"
  },
  "api/dot-net/Custom.Dnn.Code12.html": {
    "href": "api/dot-net/Custom.Dnn.Code12.html",
    "title": "Class Code12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Code12 Namespace Custom.Dnn Assembly ToSic.Sxc.Dnn.Core.dll Base Class for Dynamic CSharp Classes in Dnn ☢️ only. This is the Dnn specific base class. It's the very same as Custom.Hybrid.Code12 except for the additional Dnn Property. If you inherit from this class, you'll automatically have all the properties from DynamicCode. Because of this, the documentation here only shows Dnn - for all other properties go to Custom.Hybrid.Code12 Tip If you don't need the Dnn object, we strongly suggest to move to the Hybrid implementation. The latest Hybrid base classes also have many new features and are easier to use. See Custom.Hybrid for more information. [PublicApi] public abstract class Code12 : DynamicCode12, ICanDebug, IHasLog, IHasDnn Inheritance object ServiceBase ServiceForDynamicCode CustomCodeBase DynamicCode12 Code12 Implements ICanDebug IHasLog IHasDnn Properties Dnn The DNN context. Has various objects to access the Dnn Page, etc. public IDnnContext Dnn { get; } Property Value IDnnContext"
  },
  "api/dot-net/Custom.Dnn.Razor12.html": {
    "href": "api/dot-net/Custom.Dnn.Razor12.html",
    "title": "Class Razor12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Razor12 Namespace Custom.Dnn Assembly ToSic.Sxc.Dnn.Razor.dll Base Class for Dynamic CSharp Razor in Dnn ☢️ only. This is the Dnn specific base class. It's the very same as Custom.Hybrid.Razor12 except for the additional Dnn. If you inherit from this class, you'll automatically have all the properties from DynamicCode. Because of this, the documentation here only shows Dnn - for all other properties go to Custom.Hybrid.Razor12 Tip If you don't need the Dnn object, we strongly suggest to move to the Hybrid implementation. The latest Hybrid base classes also have many new features and are easier to use. See Custom.Hybrid for more information. [PublicApi] public abstract class Razor12 : Razor12, IHasDnn, IHasLog Inheritance object WebPageExecutingBase WebPageRenderingBase WebPageBase RazorComponentBase Razor12 Razor12 Implements IHasDnn IHasLog Inherited Members Razor12.Log Razor12.Html Razor12.Link Razor12.Edit Razor12.GetService<TService>() Razor12.App Razor12.Data Razor12.AsDynamic(string, string) Razor12.AsDynamic(IEntity) Razor12.AsDynamic(object) Razor12.AsDynamic(params object[]) Razor12.AsEntity(object) Razor12.AsList(object) Razor12.Convert Razor12.CreateSource<T>(IDataSource, ILookUpEngine) Razor12.CreateSource<T>(IDataStream) Razor12.Content Razor12.Header Razor12.AsAdam(ICanBeEntity, string) Razor12.CmsContext Razor12.Resources Razor12.Settings Razor12.CreateInstance(string, NoParamOrder, string, string, bool) Razor12.DynamicModel Properties Dnn The DNN context. Has various objects to access the Dnn Page, etc. public IDnnContext Dnn { get; } Property Value IDnnContext"
  },
  "api/dot-net/Custom.Dnn.html": {
    "href": "api/dot-net/Custom.Dnn.html",
    "title": "Custom.Dnn Namespace for Dnn ☢️ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace Custom.Dnn Base classes for custom Razor / C# which only runs on Dnn ☢️. This contains all the base classes for your own solutions, which are targeted to Dnn ☢️. Tip Code created with these base classes will not work in Oqtane \uD83E\uDE78. Because of this, we recommend to use the Hybrid namespace. Note that the Hybrid namespace is also compatible with Dnn ☢️, and the classes there have more features and are easier to use. Classes Api12 Base Class for Api Controllers for Dnn ☢️ only. Code12 Base Class for Dynamic CSharp Classes in Dnn ☢️ only. Razor12 Base Class for Dynamic CSharp Razor in Dnn ☢️ only."
  },
  "api/dot-net/Custom.Hybrid.Api12.html": {
    "href": "api/dot-net/Custom.Hybrid.Api12.html",
    "title": "Class Api12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Api12 Namespace Custom.Hybrid Assembly ToSic.Sxc.Dnn.WebApi.dll This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. [PublicApi(\"This is the official base class for v12+\")] public abstract class Api12 : DnnSxcCustomControllerBase, IHasLog Inheritance object ApiController DnnApiController DnnSxcControllerRoot DnnSxcControllerBase DnnSxcCustomControllerBase Api12 Implements IHasLog Derived Api12 Constructors Api12() protected Api12() Api12(string) protected Api12(string logSuffix) Parameters logSuffix string Properties App A fully prepared IApp object letting you access all the data and queries in the current app. public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Convert Conversion helper for common data conversions in Razor and WebAPIs public IConvertService Convert { get; } Property Value IConvertService Remarks Added in 2sxc 12.05 Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. public IDataSource Data { get; } Property Value IDataSource A standard IDataSource. Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. \uD83E\uDE92 Use in Razor: @Resources.CtaButtonLabel public dynamic Resources { get; } Property Value dynamic Remarks New in 12.03 Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. \uD83E\uDE92 Use in Razor: @Settings.ItemsPerRow public dynamic Settings { get; } Property Value dynamic Remarks New in 12.03 Methods Accepted() Creates a .net-core like AcceptedResult object that produces an .net-core like StatusCodes.Status202Accepted response. Typical use: return Accepted(); [NonAction] public dynamic Accepted() Returns dynamic The created .net-core like AcceptedResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object the original object Returns dynamic a dynamic object for easier coding AsDynamic(params object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack public dynamic AsDynamic(params object[] entities) Parameters entities object[] one or more source object Returns dynamic a dynamic object for easier coding Remarks New in 12.05 AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object the wrapped IEntity Returns IEntity A normal IEntity AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 BadRequest() Creates an .net-core like BadRequestResult that produces a .net-core like StatusCodes.Status400BadRequest response. Typical use: return BadRequest(); [NonAction] public dynamic BadRequest() Returns dynamic The created .net-core like BadRequestResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Conflict() Creates an .net-core like ConflictResult that produces a .net-core like StatusCodes.Status409Conflict response. Typical use: return Conflict(); [NonAction] public dynamic Conflict() Returns dynamic The created .net-core like ConflictResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Conflict(object) Creates an .net-core like ConflictObjectResult that produces a .net-core like StatusCodes.Status409Conflict response. Typical use: return Conflict(\"the stored file is newer\"); [NonAction] public dynamic Conflict(object error) Parameters error object Contains errors to be returned to the client. Returns dynamic The created .net-core like ConflictObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. CreateInstance(string, NoParamOrder, string, string, bool) Create an instance of code lying in a file near this public dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string path to the other code file to compile noParamOrder NoParamOrder see Convention: Named Parameters name string Override the class name to compile - usually not required as it should match the file name relativePath string optional relative path, will usually use the ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath throwOnError bool throw errors if compiling fails, recommended Returns dynamic An object of the class in the file Remarks Note that the C# code which we are creating inherits from a standard base class such as Code12 or ToSic.Sxc.Code.DynamicCode then it will automatically be initialized to support App, AsDynamic etc. CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource File(NoParamOrder, bool?, string, string, string, object) Create a File-result to stream to the client Typical use: return File(download: true, contentType: \"text/xml\", contents: ...); public dynamic File(NoParamOrder noParamOrder = default, bool? download = null, string virtualPath = null, string contentType = null, string fileDownloadName = null, object contents = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters download bool? If a download should be enforced (otherwise the file may just be displayed - like an image) virtualPath string Path in the website to get the file from. Provide either virtualPath or contents contentType string Mime Content-type. Will try to auto-detect from virtualPath or fileDownloadName if not provided. fileDownloadName string Download name. If provided, it will try to force download/save on the browser. contents object Content of the result - a string, byte[] or stream to include. Returns dynamic Remarks Added in 2sxc 12.05 Forbid() Creates a .net-core like ForbidResult (.net-core like StatusCodes.Status403Forbidden by default). Typical use: return Forbid(); [NonAction] public dynamic Forbid() Returns dynamic The created .net-core like ForbidResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Some authentication schemes, such as cookies, will convert .net-core like StatusCodes.Status403Forbidden to a redirect to show a login page. GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed NoContent() Creates a .net-core like NoContentResult object that produces an empty .net-core like StatusCodes.Status204NoContent response. Typical use: return NoContent(); [NonAction] public dynamic NoContent() Returns dynamic The created .net-core like NoContentResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. NotFound() Creates an .net-core like NotFoundResult that produces a .net-core like StatusCodes.Status404NotFound response. Typical use: return NotFound(); [NonAction] public dynamic NotFound() Returns dynamic The created .net-core like NotFoundResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. NotFound(object) Creates an .net-core like NotFoundObjectResult that produces a .net-core like StatusCodes.Status404NotFound response. Typical use: return Unauthorized(\"try another ID\"); [NonAction] public dynamic NotFound(object value) Parameters value object Returns dynamic The created .net-core like NotFoundObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Ok() Creates a .net-core like OkResult object that produces an empty .net-core like StatusCodes.Status200OK response. Typical use: return Ok(); [NonAction] public dynamic Ok() Returns dynamic The created .net-core like OkResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Ok(object) Creates an .net-core like OkObjectResult object that produces an .net-core like StatusCodes.Status200OK response. Typical use: return Ok(objectToInclude); [NonAction] public dynamic Ok(object value) Parameters value object The content value to format in the entity body. Returns dynamic The created .net-core like OkObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Redirect(string) Creates a .net-core like RedirectResult object that redirects (.net-core like StatusCodes.Status302Found) to the specified url. Typical use: return Redirect(\"https://2sxc.org\"); [NonAction] public dynamic Redirect(string url) Parameters url string The URL to redirect to. Returns dynamic The created .net-core like RedirectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. RedirectPermanent(string) Creates a .net-core like RedirectResult object with .net-core like RedirectResult.Permanent set to true (.net-core like StatusCodes.Status301MovedPermanently) using the specified url. Typical use: return RedirectPermanent(\"https://2sxc.org\"); [NonAction] public dynamic RedirectPermanent(string url) Parameters url string The URL to redirect to. Returns dynamic The created .net-core like RedirectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. SaveInAdam(NoParamOrder, Stream, string, string, Guid?, string, string) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the WebAPI docs for SaveInAdam public IFile SaveInAdam(NoParamOrder noParamOrder = default, Stream stream = null, string fileName = null, string contentType = null, Guid? guid = null, string field = null, string subFolder = \"\") Parameters noParamOrder NoParamOrder see Convention: Named Parameters stream Stream the stream fileName string file name to save to contentType string content-type of the target item (important for security checks) guid Guid? field string subFolder string Returns IFile StatusCode(int) Creates a .net-core like StatusCodeResult object by specifying a statusCode. Typical use: return StatusCode(403); [NonAction] public dynamic StatusCode(int statusCode) Parameters statusCode int The status code to set on the response. Returns dynamic The created .net-core like StatusCodeResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. StatusCode(int, object) Creates a .net-core like ObjectResult object by specifying a statusCode and value Typical use: return StatusCode(304, \"not modified\"); [NonAction] public dynamic StatusCode(int statusCode, object value) Parameters statusCode int The status code to set on the response. value object The value to set on the .net-core like `ObjectResult\"/>. Returns dynamic The created .net-core like ObjectResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Unauthorized() Creates an .net-core like UnauthorizedResult that produces an .net-core like StatusCodes.Status401Unauthorized response. Typical use: return Unauthorized(); [NonAction] public dynamic Unauthorized() Returns dynamic The created .net-core like UnauthorizedResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Unauthorized(object) Creates an .net-core like UnauthorizedObjectResult that produces a .net-core like StatusCodes.Status401Unauthorized response. Typical use: return Unauthorized(\"we don't like this\"); [NonAction] public dynamic Unauthorized(object value) Parameters value object Returns dynamic The created .net-core like UnauthorizedObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object."
  },
  "api/dot-net/Custom.Hybrid.Api14.html": {
    "href": "api/dot-net/Custom.Hybrid.Api14.html",
    "title": "Class Api14 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Api14 Namespace Custom.Hybrid Assembly ToSic.Sxc.Dnn.WebApi.dll Base class for v14 Dynamic WebAPI files. Will provide the ServiceKit14 on property Kit. This contains all the popular services used in v14, so that your code can be lighter. [PublicApi] public abstract class Api14 : DnnSxcCustomControllerBase, IHasLog Inheritance object ApiController DnnApiController DnnSxcControllerRoot DnnSxcControllerBase DnnSxcCustomControllerBase Api14 Implements IHasLog Remarks Important: The property Convert which exited on Razor12 was removed. use Kit.Convert instead. Constructors Api14() protected Api14() Api14(string) protected Api14(string logSuffix) Parameters logSuffix string Properties App A fully prepared IApp object letting you access all the data and queries in the current app. public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Convert Conversion helper for common data conversions in Razor and WebAPIs public IConvertService Convert { get; } Property Value IConvertService Remarks Added in 2sxc 12.05 Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. public IDataSource Data { get; } Property Value IDataSource A standard IDataSource. Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Kit The Service Kit containing all kinds of services which are commonly used. The services on the Kit are context-aware, so they know what App is currently being used etc. public ServiceKit14 Kit { get; } Property Value ServiceKit14 Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. \uD83E\uDE92 Use in Razor: @Resources.CtaButtonLabel public dynamic Resources { get; } Property Value dynamic Remarks New in 12.03 Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. \uD83E\uDE92 Use in Razor: @Settings.ItemsPerRow public dynamic Settings { get; } Property Value dynamic Remarks New in 12.03 Methods Accepted() Creates a .net-core like AcceptedResult object that produces an .net-core like StatusCodes.Status202Accepted response. Typical use: return Accepted(); [NonAction] public dynamic Accepted() Returns dynamic The created .net-core like AcceptedResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object the original object Returns dynamic a dynamic object for easier coding AsDynamic(params object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack public dynamic AsDynamic(params object[] entities) Parameters entities object[] one or more source object Returns dynamic a dynamic object for easier coding Remarks New in 12.05 AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object the wrapped IEntity Returns IEntity A normal IEntity AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 BadRequest() Creates an .net-core like BadRequestResult that produces a .net-core like StatusCodes.Status400BadRequest response. Typical use: return BadRequest(); [NonAction] public dynamic BadRequest() Returns dynamic The created .net-core like BadRequestResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Conflict() Creates an .net-core like ConflictResult that produces a .net-core like StatusCodes.Status409Conflict response. Typical use: return Conflict(); [NonAction] public dynamic Conflict() Returns dynamic The created .net-core like ConflictResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Conflict(object) Creates an .net-core like ConflictObjectResult that produces a .net-core like StatusCodes.Status409Conflict response. Typical use: return Conflict(\"the stored file is newer\"); [NonAction] public dynamic Conflict(object error) Parameters error object Contains errors to be returned to the client. Returns dynamic The created .net-core like ConflictObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. CreateInstance(string, NoParamOrder, string, string, bool) Create an instance of code lying in a file near this public dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string path to the other code file to compile noParamOrder NoParamOrder see Convention: Named Parameters name string Override the class name to compile - usually not required as it should match the file name relativePath string optional relative path, will usually use the ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath throwOnError bool throw errors if compiling fails, recommended Returns dynamic An object of the class in the file Remarks Note that the C# code which we are creating inherits from a standard base class such as Code12 or ToSic.Sxc.Code.DynamicCode then it will automatically be initialized to support App, AsDynamic etc. CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource File(NoParamOrder, bool?, string, string, string, object) Create a File-result to stream to the client Typical use: return File(download: true, contentType: \"text/xml\", contents: ...); public dynamic File(NoParamOrder noParamOrder = default, bool? download = null, string virtualPath = null, string contentType = null, string fileDownloadName = null, object contents = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters download bool? If a download should be enforced (otherwise the file may just be displayed - like an image) virtualPath string Path in the website to get the file from. Provide either virtualPath or contents contentType string Mime Content-type. Will try to auto-detect from virtualPath or fileDownloadName if not provided. fileDownloadName string Download name. If provided, it will try to force download/save on the browser. contents object Content of the result - a string, byte[] or stream to include. Returns dynamic Remarks Added in 2sxc 12.05 Forbid() Creates a .net-core like ForbidResult (.net-core like StatusCodes.Status403Forbidden by default). Typical use: return Forbid(); [NonAction] public dynamic Forbid() Returns dynamic The created .net-core like ForbidResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Some authentication schemes, such as cookies, will convert .net-core like StatusCodes.Status403Forbidden to a redirect to show a login page. GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed NoContent() Creates a .net-core like NoContentResult object that produces an empty .net-core like StatusCodes.Status204NoContent response. Typical use: return NoContent(); [NonAction] public dynamic NoContent() Returns dynamic The created .net-core like NoContentResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. NotFound() Creates an .net-core like NotFoundResult that produces a .net-core like StatusCodes.Status404NotFound response. Typical use: return NotFound(); [NonAction] public dynamic NotFound() Returns dynamic The created .net-core like NotFoundResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. NotFound(object) Creates an .net-core like NotFoundObjectResult that produces a .net-core like StatusCodes.Status404NotFound response. Typical use: return Unauthorized(\"try another ID\"); [NonAction] public dynamic NotFound(object value) Parameters value object Returns dynamic The created .net-core like NotFoundObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Ok() Creates a .net-core like OkResult object that produces an empty .net-core like StatusCodes.Status200OK response. Typical use: return Ok(); [NonAction] public dynamic Ok() Returns dynamic The created .net-core like OkResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Ok(object) Creates an .net-core like OkObjectResult object that produces an .net-core like StatusCodes.Status200OK response. Typical use: return Ok(objectToInclude); [NonAction] public dynamic Ok(object value) Parameters value object The content value to format in the entity body. Returns dynamic The created .net-core like OkObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Redirect(string) Creates a .net-core like RedirectResult object that redirects (.net-core like StatusCodes.Status302Found) to the specified url. Typical use: return Redirect(\"https://2sxc.org\"); [NonAction] public dynamic Redirect(string url) Parameters url string The URL to redirect to. Returns dynamic The created .net-core like RedirectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. RedirectPermanent(string) Creates a .net-core like RedirectResult object with .net-core like RedirectResult.Permanent set to true (.net-core like StatusCodes.Status301MovedPermanently) using the specified url. Typical use: return RedirectPermanent(\"https://2sxc.org\"); [NonAction] public dynamic RedirectPermanent(string url) Parameters url string The URL to redirect to. Returns dynamic The created .net-core like RedirectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. SaveInAdam(NoParamOrder, Stream, string, string, Guid?, string, string) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the WebAPI docs for SaveInAdam public IFile SaveInAdam(NoParamOrder noParamOrder = default, Stream stream = null, string fileName = null, string contentType = null, Guid? guid = null, string field = null, string subFolder = \"\") Parameters noParamOrder NoParamOrder see Convention: Named Parameters stream Stream the stream fileName string file name to save to contentType string content-type of the target item (important for security checks) guid Guid? field string subFolder string Returns IFile StatusCode(int) Creates a .net-core like StatusCodeResult object by specifying a statusCode. Typical use: return StatusCode(403); [NonAction] public dynamic StatusCode(int statusCode) Parameters statusCode int The status code to set on the response. Returns dynamic The created .net-core like StatusCodeResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. StatusCode(int, object) Creates a .net-core like ObjectResult object by specifying a statusCode and value Typical use: return StatusCode(304, \"not modified\"); [NonAction] public dynamic StatusCode(int statusCode, object value) Parameters statusCode int The status code to set on the response. value object The value to set on the .net-core like `ObjectResult\"/>. Returns dynamic The created .net-core like ObjectResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Unauthorized() Creates an .net-core like UnauthorizedResult that produces an .net-core like StatusCodes.Status401Unauthorized response. Typical use: return Unauthorized(); [NonAction] public dynamic Unauthorized() Returns dynamic The created .net-core like UnauthorizedResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Unauthorized(object) Creates an .net-core like UnauthorizedObjectResult that produces a .net-core like StatusCodes.Status401Unauthorized response. Typical use: return Unauthorized(\"we don't like this\"); [NonAction] public dynamic Unauthorized(object value) Parameters value object Returns dynamic The created .net-core like UnauthorizedObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object."
  },
  "api/dot-net/Custom.Hybrid.ApiTyped.html": {
    "href": "api/dot-net/Custom.Hybrid.ApiTyped.html",
    "title": "Class ApiTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ApiTyped Namespace Custom.Hybrid Assembly ToSic.Sxc.Dnn.WebApi.dll Base class for v16 Typed WebAPI files. Use it to create custom WebAPI endpoints in your App. It provides the ServiceKit16 on property Kit which contains all the popular services to create amazing stuff. [PublicApi] [JsonFormatter] public abstract class ApiTyped : DnnSxcCustomControllerBase, IHasLog Inheritance object ApiController DnnApiController DnnSxcControllerRoot DnnSxcControllerBase DnnSxcCustomControllerBase ApiTyped Implements IHasLog Remarks Important: This is very different from Razor12 or Razor14, as it doesn't rely on dynamic code. Be aware of this since the APIs are very different - see Typed Code. Constructors ApiTyped() Main constructor. Doesn't have parameters so it can easily be inherited. protected ApiTyped() ApiTyped(string) Alternate constructor to use when inheriting, placing the Insights logs in an own section. protected ApiTyped(string insightsGroup) Parameters insightsGroup string Name of the section in Insights Properties AllResources Stack of all Resources in the System, merging Resources of View, App, Site, Global etc. Will retrieve values by priority, with View-Resources being top priority and Preset-Resources being the lowest. Tip If you know that Resources come from the App, you should prefer App.Resources instead. That is faster and helps people reading your code figure out where to change a value. public ITypedStack AllResources { get; } Property Value ITypedStack AllSettings Stack of all Settings in the System, merging Settings of View, App, Site, Global etc. Will retrieve values by priority, with View-Settings being top priority and Preset-Settings being the lowest. Tip If you know that Settings come from the App, you should prefer App.Settings instead. That is faster and helps people reading your code figure out where to change a value. public ITypedStack AllSettings { get; } Property Value ITypedStack App The current App object (with strictly typed Settings/Resources). Use it to access App properties such as Path or any data in the App. public IAppTyped App { get; } Property Value IAppTyped Kit The Service Kit containing all kinds of services which are commonly used. The services on the Kit are context-aware, so they know what App is currently being used etc. public ServiceKit16 Kit { get; } Property Value ServiceKit16 Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog MyContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext MyContext { get; } Property Value ICmsContext Remarks New in v11.11 MyData All the data which the current Template received, based on the View configuration. There are a few common scenarios: If it's a simple view, then this will just contain streams with the main Item(s) and Header If the view expects no data, it will just contain a Default stream containing no items If the view has a Query behind it, then MyData will have all the streams provided by the Query public IDataSource MyData { get; } Property Value IDataSource MyHeader The Header-Item belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. public ITypedItem MyHeader { get; } Property Value ITypedItem MyItem The main Item belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. If this view can have a list of items (more than one) then this contains the first item. To get all the items, see ToSic.Sxc.Code.Internal.IDynamicCode16.MyItems public ITypedItem MyItem { get; } Property Value ITypedItem MyItems List of all Items belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. If this view is configured to only have one item, then this list will only contain one item. Otherwise, it will have as many items as the editor added. public IEnumerable<ITypedItem> MyItems { get; } Property Value IEnumerable<ITypedItem> MyModel Data passed to this Razor template by a caller. This is typical for Razor components which are re-used, and called from other Razor templates using @Html.Partial(\"filename.cshtml\", new { thing = 7 }). public ITypedModel MyModel { get; } Property Value ITypedModel MyPage Information about the current Page (called Tab in DNN). It's especially useful to get current URL Parameters. public ICmsPage MyPage { get; } Property Value ICmsPage MyUser Information about the current user. It's especially useful to see if the user has any kind of Admin privileges. public ICmsUser MyUser { get; } Property Value ICmsUser MyView View-information such as the view Name, Identity or Edition. public ICmsView MyView { get; } Property Value ICmsView Remarks New in v12.02 UniqueKey A unique, random key for the current module. It's recommended for giving DOM elements a unique id for scripts to then access them. It's generated for every content-block, and more reliable than Module.Id since that sometimes results in duplicate keys, if the many blocks are used inside each other. It's generated using a GUID and converted/shortened. In the current version it's 8 characters long, so it has 10^14 combinations, making collisions extremely unlikely. (currently 8 characters) Tip To get a unique key which is based on additional objects such as Entities, use the UniqueKeyWith(params object[]) method. public string UniqueKey { get; } Property Value string Remarks If you get a fresh IKeyService it will also create a new UniqueKey. So your code should usually use the built-in property UniqueKey which comes from the shared ServiceKit Key. Methods Accepted() Creates a .net-core like AcceptedResult object that produces an .net-core like StatusCodes.Status202Accepted response. Typical use: return Accepted(); [NonAction] public HttpResponseMessage Accepted() Returns HttpResponseMessage The created .net-core like AcceptedResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. AsEntity(ICanBeEntity) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(ICanBeEntity thing) Parameters thing ICanBeEntity Returns IEntity A normal IEntity AsItem(object, NoParamOrder, bool?, bool?) Convert something to a ITypedItem. This works for all kinds of IEntitys, IDynamicEntitys as well as Lists/IEnumerables of those. Will always return a single item. If a list is provided, it will return the first item in the list. If null was provided, it will return null. public ITypedItem AsItem(object data, NoParamOrder noParamOrder = default, bool? propsRequired = null, bool? mock = null) Parameters data object An original object which can be converted to a TypedItem, such as a IEntity . noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true mock bool? Specify that the data is fake/mock data, which should pretend to be an Item. Default is false Returns ITypedItem Remarks New in v16.02 AsItems(object, NoParamOrder, bool?) Convert an object containing a list of Entities or similar to a list of ITypedItems. public IEnumerable<ITypedItem> AsItems(object list, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters list object The original list which is usually a list of IEntity objects. noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns IEnumerable<ITypedItem> Remarks New in v16.01 AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. public IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object the source object - a List/Enumerable of IEntity or ITypedItem protector NoParamOrder see Convention: Named Parameters nullIfNull bool if true will return null when source is null - otherwise a wrapper item with empty-contents Returns IEnumerable<T> Type Parameters T the target type Remarks Release in v17.05 AsStack(params object[]) Create a typed object which will provide all the properties of the things wrapped inside it. The priority is first-object first, so if multiple items have the property, the first in the list will be returned. public ITypedStack AsStack(params object[] items) Parameters items object[] objects to stack together Returns ITypedStack AsStack<T>(params object[]) Create a custom-typed object which will provide all the properties of the things wrapped inside it. The priority is first-object first, so if multiple items have the property, the first in the list will be returned. public T AsStack<T>(params object[] items) where T : class, ICanWrapData, new() Parameters items object[] objects to stack together Returns T Item of the custom type Type Parameters T Remarks New in 17.07 AsTyped(object, NoParamOrder, bool?) Creates a typed object to read the original passed into this function. This is usually used to process objects which the compiler can't know, such as anonymous objects returned from helper code etc. If you have an array of such objects, use AsTypedList(object, NoParamOrder, bool?). public ITyped AsTyped(object original, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters original object noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns ITyped AsTypedList(object, NoParamOrder, bool?) Create a list public IEnumerable<ITyped> AsTypedList(object list, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters list object List/Enumerable object containing a bunch of items to make typed noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns IEnumerable<ITyped> As<T>(object, NoParamOrder, bool) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. public T As<T>(object source, NoParamOrder protector = default, bool mock = false) where T : class, ICanWrapData Parameters source object the source object - an IEntity or ITypedItem protector NoParamOrder see Convention: Named Parameters mock bool if true will return a fake when source is null - otherwise a wrapper item with empty-contents Returns T Type Parameters T the target type Remarks Released v17.05 BadRequest() Creates an .net-core like BadRequestResult that produces a .net-core like StatusCodes.Status400BadRequest response. Typical use: return BadRequest(); [NonAction] public BadRequestResult BadRequest() Returns BadRequestResult The created .net-core like BadRequestResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Conflict() Creates an .net-core like ConflictResult that produces a .net-core like StatusCodes.Status409Conflict response. Typical use: return Conflict(); [NonAction] public ConflictResult Conflict() Returns ConflictResult The created .net-core like ConflictResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Conflict(object) Creates an .net-core like ConflictObjectResult that produces a .net-core like StatusCodes.Status409Conflict response. Typical use: return Conflict(\"the stored file is newer\"); [NonAction] public HttpResponseMessage Conflict(object error) Parameters error object Contains errors to be returned to the client. Returns HttpResponseMessage The created .net-core like ConflictObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. File(NoParamOrder, bool?, string, string, string, object) Create a File-result to stream to the client Typical use: return File(download: true, contentType: \"text/xml\", contents: ...); public dynamic File(NoParamOrder noParamOrder = default, bool? download = null, string virtualPath = null, string contentType = null, string fileDownloadName = null, object contents = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters download bool? If a download should be enforced (otherwise the file may just be displayed - like an image) virtualPath string Path in the website to get the file from. Provide either virtualPath or contents contentType string Mime Content-type. Will try to auto-detect from virtualPath or fileDownloadName if not provided. fileDownloadName string Download name. If provided, it will try to force download/save on the browser. contents object Content of the result - a string, byte[] or stream to include. Returns dynamic Remarks Added in 2sxc 12.05 Forbid() Creates a .net-core like ForbidResult (.net-core like StatusCodes.Status403Forbidden by default). Typical use: return Forbid(); [NonAction] public HttpResponseMessage Forbid() Returns HttpResponseMessage The created .net-core like ForbidResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Some authentication schemes, such as cookies, will convert .net-core like StatusCodes.Status403Forbidden to a redirect to show a login page. GetCode(string, NoParamOrder, string) Create an instance of a class in a .cs code file. Note that the class name in the file must match the file name, so MyHelpers.cs must have a MyHelpers class. public dynamic GetCode(string path, NoParamOrder noParamOrder = default, string className = null) Parameters path string The path, like Helper.cs, ./helper.cs, ../../Helper.cs or /SomeFolderInApp/Helper.cs (new 16.05) noParamOrder NoParamOrder see Convention: Named Parameters className string Optional class name, if it doesn't match the file name (new 16.03) Returns dynamic , Remarks Created in 16.02 className added in 16.03 Ability to give a path beginning with / as app-root in 16.05 In older code there was a similar CreateInstance method GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed NoContent() Creates a .net-core like NoContentResult object that produces an empty .net-core like StatusCodes.Status204NoContent response. Typical use: return NoContent(); [NonAction] public HttpResponseMessage NoContent() Returns HttpResponseMessage The created .net-core like NoContentResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. NotFound() Creates an .net-core like NotFoundResult that produces a .net-core like StatusCodes.Status404NotFound response. Typical use: return NotFound(); [NonAction] public NotFoundResult NotFound() Returns NotFoundResult The created .net-core like NotFoundResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. NotFound(object) Creates an .net-core like NotFoundObjectResult that produces a .net-core like StatusCodes.Status404NotFound response. Typical use: return Unauthorized(\"try another ID\"); [NonAction] public HttpResponseMessage NotFound(object value) Parameters value object Returns HttpResponseMessage The created .net-core like NotFoundObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Ok() Creates a .net-core like OkResult object that produces an empty .net-core like StatusCodes.Status200OK response. Typical use: return Ok(); [NonAction] public OkResult Ok() Returns OkResult The created .net-core like OkResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Ok(object) Creates an .net-core like OkObjectResult object that produces an .net-core like StatusCodes.Status200OK response. Typical use: return Ok(objectToInclude); [NonAction] public HttpResponseMessage Ok(object value) Parameters value object The content value to format in the entity body. Returns HttpResponseMessage The created .net-core like OkObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Redirect(string) Creates a .net-core like RedirectResult object that redirects (.net-core like StatusCodes.Status302Found) to the specified url. Typical use: return Redirect(\"https://2sxc.org\"); [NonAction] public RedirectResult Redirect(string url) Parameters url string The URL to redirect to. Returns RedirectResult The created .net-core like RedirectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. RedirectPermanent(string) Creates a .net-core like RedirectResult object with .net-core like RedirectResult.Permanent set to true (.net-core like StatusCodes.Status301MovedPermanently) using the specified url. Typical use: return RedirectPermanent(\"https://2sxc.org\"); [NonAction] public HttpResponseMessage RedirectPermanent(string url) Parameters url string The URL to redirect to. Returns HttpResponseMessage The created .net-core like RedirectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. SaveInAdam(NoParamOrder, Stream, string, string, Guid?, string, string) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the WebAPI docs for SaveInAdam public IFile SaveInAdam(NoParamOrder noParamOrder = default, Stream stream = null, string fileName = null, string contentType = null, Guid? guid = null, string field = null, string subFolder = \"\") Parameters noParamOrder NoParamOrder see Convention: Named Parameters stream Stream the stream fileName string file name to save to contentType string content-type of the target item (important for security checks) guid Guid? field string subFolder string Returns IFile StatusCode(int) Creates a .net-core like StatusCodeResult object by specifying a statusCode. Typical use: return StatusCode(403); [NonAction] public HttpResponseMessage StatusCode(int statusCode) Parameters statusCode int The status code to set on the response. Returns HttpResponseMessage The created .net-core like StatusCodeResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. StatusCode(int, object) Creates a .net-core like ObjectResult object by specifying a statusCode and value Typical use: return StatusCode(304, \"not modified\"); [NonAction] public HttpResponseMessage StatusCode(int statusCode, object value) Parameters statusCode int The status code to set on the response. value object The value to set on the .net-core like `ObjectResult\"/>. Returns HttpResponseMessage The created .net-core like ObjectResult object for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Unauthorized() Creates an .net-core like UnauthorizedResult that produces an .net-core like StatusCodes.Status401Unauthorized response. Typical use: return Unauthorized(); [NonAction] public HttpResponseMessage Unauthorized() Returns HttpResponseMessage The created .net-core like UnauthorizedResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object. Unauthorized(object) Creates an .net-core like UnauthorizedObjectResult that produces a .net-core like StatusCodes.Status401Unauthorized response. Typical use: return Unauthorized(\"we don't like this\"); [NonAction] public HttpResponseMessage Unauthorized(object value) Parameters value object Returns HttpResponseMessage The created .net-core like UnauthorizedObjectResult for the response. Remarks This is a shim to ensure that .net Framework code can be written the same way as .net core WebApis. It returns a dynamic to make it easy to use, but the real .net core implementation returns a typed object."
  },
  "api/dot-net/Custom.Hybrid.Code12.html": {
    "href": "api/dot-net/Custom.Hybrid.Code12.html",
    "title": "Class Code12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Code12 Namespace Custom.Hybrid Assembly ToSic.Sxc.dll This is the base class for custom code (.cs) files in your Apps. By inheriting from this base class, you will automatically have the context like the App object etc. available. Tip This is an old base class and works, but you should use a newer one such as CodeTyped [PublicApi] public abstract class Code12 : CustomCodeBase, ICanDebug, IHasLog Inheritance object ServiceBase ServiceForDynamicCode CustomCodeBase Code12 Implements ICanDebug IHasLog Properties App A fully prepared IApp object letting you access all the data and queries in the current app. public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Convert Conversion helper for common data conversions in Razor and WebAPIs public IConvertService Convert { get; } Property Value IConvertService Remarks Added in 2sxc 12.05 Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. public IDataSource Data { get; } Property Value IDataSource A standard IDataSource. Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. \uD83E\uDE92 Use in Razor: @Resources.CtaButtonLabel public dynamic Resources { get; } Property Value dynamic Remarks New in 12.03 Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. \uD83E\uDE92 Use in Razor: @Settings.ItemsPerRow public dynamic Settings { get; } Property Value dynamic Remarks New in 12.03 Methods AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object the original object Returns dynamic a dynamic object for easier coding AsDynamic(params object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack public dynamic AsDynamic(params object[] entities) Parameters entities object[] one or more source object Returns dynamic a dynamic object for easier coding Remarks New in 12.05 AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object the wrapped IEntity Returns IEntity A normal IEntity AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 CreateInstance(string, NoParamOrder, string, string, bool) public dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string noParamOrder NoParamOrder name string relativePath string throwOnError bool Returns dynamic CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/Custom.Hybrid.Code14.html": {
    "href": "api/dot-net/Custom.Hybrid.Code14.html",
    "title": "Class Code14 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Code14 Namespace Custom.Hybrid Assembly ToSic.Sxc.dll Base class for v14 Dynamic Code files. Will provide the ServiceKit14 on property Kit. This contains all the popular services used in v14, so that your code can be lighter. [PublicApi] public abstract class Code14 : CustomCodeBase, ICanDebug, IHasLog Inheritance object ServiceBase ServiceForDynamicCode CustomCodeBase Code14 Implements ICanDebug IHasLog Remarks Important: The property Convert which exited on Razor12 was removed. use Kit.Convert instead. Constructors Code14() Main constructor. May never have parameters, otherwise inheriting code will run into problems. protected Code14() Properties App A fully prepared IApp object letting you access all the data and queries in the current app. public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. public IDataSource Data { get; } Property Value IDataSource A standard IDataSource. Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Kit The Service Kit containing all kinds of services which are commonly used. The services on the Kit are context-aware, so they know what App is currently being used etc. public ServiceKit14 Kit { get; } Property Value ServiceKit14 Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. \uD83E\uDE92 Use in Razor: @Resources.CtaButtonLabel public dynamic Resources { get; } Property Value dynamic Remarks New in 12.03 Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. \uD83E\uDE92 Use in Razor: @Settings.ItemsPerRow public dynamic Settings { get; } Property Value dynamic Remarks New in 12.03 Methods AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object the original object Returns dynamic a dynamic object for easier coding AsDynamic(params object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack public dynamic AsDynamic(params object[] entities) Parameters entities object[] one or more source object Returns dynamic a dynamic object for easier coding Remarks New in 12.05 AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object the wrapped IEntity Returns IEntity A normal IEntity AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 CreateInstance(string, NoParamOrder, string, string, bool) public dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string noParamOrder NoParamOrder name string relativePath string throwOnError bool Returns dynamic CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/Custom.Hybrid.CodeTyped.html": {
    "href": "api/dot-net/Custom.Hybrid.CodeTyped.html",
    "title": "Class CodeTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CodeTyped Namespace Custom.Hybrid Assembly ToSic.Sxc.dll Base class for v16 Typed CSharp files. Use it to create custom CS code in your App. It provides the ServiceKit16 on property Kit which contains all the popular services to create amazing stuff. [PublicApi] public abstract class CodeTyped : CustomCodeBase, ICanDebug, IHasLog Inheritance object ServiceBase ServiceForDynamicCode CustomCodeBase CodeTyped Implements ICanDebug IHasLog Remarks Important: This is very different from Razor12 or Razor14, as it doesn't rely on dynamic code. Be aware of this since the APIs are very different - see Typed Code. Constructors CodeTyped() Main constructor. Doesn't have parameters so it can easily be inherited. protected CodeTyped() Properties AllResources Stack of all Resources in the System, merging Resources of View, App, Site, Global etc. Will retrieve values by priority, with View-Resources being top priority and Preset-Resources being the lowest. Tip If you know that Resources come from the App, you should prefer App.Resources instead. That is faster and helps people reading your code figure out where to change a value. public ITypedStack AllResources { get; } Property Value ITypedStack AllSettings Stack of all Settings in the System, merging Settings of View, App, Site, Global etc. Will retrieve values by priority, with View-Settings being top priority and Preset-Settings being the lowest. Tip If you know that Settings come from the App, you should prefer App.Settings instead. That is faster and helps people reading your code figure out where to change a value. public ITypedStack AllSettings { get; } Property Value ITypedStack App The current App object (with strictly typed Settings/Resources). Use it to access App properties such as Path or any data in the App. public IAppTyped App { get; } Property Value IAppTyped Kit public ServiceKit16 Kit { get; } Property Value ServiceKit16 Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog MyContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext MyContext { get; } Property Value ICmsContext Remarks New in v11.11 MyData All the data which the current Template received, based on the View configuration. There are a few common scenarios: If it's a simple view, then this will just contain streams with the main Item(s) and Header If the view expects no data, it will just contain a Default stream containing no items If the view has a Query behind it, then MyData will have all the streams provided by the Query public IDataSource MyData { get; } Property Value IDataSource MyHeader The Header-Item belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. public ITypedItem MyHeader { get; } Property Value ITypedItem MyItem The main Item belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. If this view can have a list of items (more than one) then this contains the first item. To get all the items, see ToSic.Sxc.Code.Internal.IDynamicCode16.MyItems public ITypedItem MyItem { get; } Property Value ITypedItem MyItems List of all Items belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. If this view is configured to only have one item, then this list will only contain one item. Otherwise, it will have as many items as the editor added. public IEnumerable<ITypedItem> MyItems { get; } Property Value IEnumerable<ITypedItem> MyModel Data passed to this Razor template by a caller. This is typical for Razor components which are re-used, and called from other Razor templates using @Html.Partial(\"filename.cshtml\", new { thing = 7 }). public ITypedModel MyModel { get; } Property Value ITypedModel MyPage Information about the current Page (called Tab in DNN). It's especially useful to get current URL Parameters. public ICmsPage MyPage { get; } Property Value ICmsPage MyUser Information about the current user. It's especially useful to see if the user has any kind of Admin privileges. public ICmsUser MyUser { get; } Property Value ICmsUser MyView View-information such as the view Name, Identity or Edition. public ICmsView MyView { get; } Property Value ICmsView Remarks New in v12.02 UniqueKey A unique, random key for the current module. It's recommended for giving DOM elements a unique id for scripts to then access them. It's generated for every content-block, and more reliable than Module.Id since that sometimes results in duplicate keys, if the many blocks are used inside each other. It's generated using a GUID and converted/shortened. In the current version it's 8 characters long, so it has 10^14 combinations, making collisions extremely unlikely. (currently 8 characters) Tip To get a unique key which is based on additional objects such as Entities, use the UniqueKeyWith(params object[]) method. public string UniqueKey { get; } Property Value string Remarks If you get a fresh IKeyService it will also create a new UniqueKey. So your code should usually use the built-in property UniqueKey which comes from the shared ServiceKit Key. Methods AsEntity(ICanBeEntity) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(ICanBeEntity thing) Parameters thing ICanBeEntity Returns IEntity A normal IEntity AsItem(object, NoParamOrder, bool?, bool?) Convert something to a ITypedItem. This works for all kinds of IEntitys, IDynamicEntitys as well as Lists/IEnumerables of those. Will always return a single item. If a list is provided, it will return the first item in the list. If null was provided, it will return null. public ITypedItem AsItem(object data, NoParamOrder noParamOrder = default, bool? propsRequired = null, bool? mock = null) Parameters data object An original object which can be converted to a TypedItem, such as a IEntity . noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true mock bool? Specify that the data is fake/mock data, which should pretend to be an Item. Default is false Returns ITypedItem Remarks New in v16.02 AsItems(object, NoParamOrder, bool?) Convert an object containing a list of Entities or similar to a list of ITypedItems. public IEnumerable<ITypedItem> AsItems(object list, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters list object The original list which is usually a list of IEntity objects. noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns IEnumerable<ITypedItem> Remarks New in v16.01 AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. public IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object the source object - a List/Enumerable of IEntity or ITypedItem protector NoParamOrder see Convention: Named Parameters nullIfNull bool if true will return null when source is null - otherwise a wrapper item with empty-contents Returns IEnumerable<T> Type Parameters T the target type Remarks Release in v17.05 AsStack(params object[]) Create a typed object which will provide all the properties of the things wrapped inside it. The priority is first-object first, so if multiple items have the property, the first in the list will be returned. public ITypedStack AsStack(params object[] items) Parameters items object[] objects to stack together Returns ITypedStack AsStack<T>(params object[]) Create a custom-typed object which will provide all the properties of the things wrapped inside it. The priority is first-object first, so if multiple items have the property, the first in the list will be returned. public T AsStack<T>(params object[] items) where T : class, ICanWrapData, new() Parameters items object[] objects to stack together Returns T Item of the custom type Type Parameters T Remarks New in 17.07 AsTyped(object, NoParamOrder, bool?) Creates a typed object to read the original passed into this function. This is usually used to process objects which the compiler can't know, such as anonymous objects returned from helper code etc. If you have an array of such objects, use AsTypedList(object, NoParamOrder, bool?). public ITyped AsTyped(object original, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters original object noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns ITyped AsTypedList(object, NoParamOrder, bool?) Create a list public IEnumerable<ITyped> AsTypedList(object list, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters list object List/Enumerable object containing a bunch of items to make typed noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns IEnumerable<ITyped> As<T>(object, NoParamOrder, bool) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. public T As<T>(object source, NoParamOrder protector = default, bool mock = false) where T : class, ICanWrapData Parameters source object the source object - an IEntity or ITypedItem protector NoParamOrder see Convention: Named Parameters mock bool if true will return a fake when source is null - otherwise a wrapper item with empty-contents Returns T Type Parameters T the target type Remarks Released v17.05 GetCode(string, NoParamOrder, string) Create an instance of a class in a .cs code file. Note that the class name in the file must match the file name, so MyHelpers.cs must have a MyHelpers class. public dynamic GetCode(string path, NoParamOrder noParamOrder = default, string className = null) Parameters path string The path, like Helper.cs, ./helper.cs, ../../Helper.cs or /SomeFolderInApp/Helper.cs (new 16.05) noParamOrder NoParamOrder see Convention: Named Parameters className string Optional class name, if it doesn't match the file name (new 16.03) Returns dynamic , Remarks Created in 16.02 className added in 16.03 Ability to give a path beginning with / as app-root in 16.05 In older code there was a similar CreateInstance method GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/Custom.Hybrid.Razor12.html": {
    "href": "api/dot-net/Custom.Hybrid.Razor12.html",
    "title": "Class Razor12 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Razor12 Namespace Custom.Hybrid Assembly ToSic.Sxc.Dnn.Razor.dll The base class for Hybrid Razor-Components in 2sxc 12 Provides context objects like CmsContext, helpers like Edit and much more. [PublicApi] public abstract class Razor12 : RazorComponentBase, IHasLog Inheritance object WebPageExecutingBase WebPageRenderingBase WebPageBase RazorComponentBase Razor12 Implements IHasLog Derived Razor12 Properties App A fully prepared IApp object letting you access all the data and queries in the current app. public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Convert Conversion helper for common data conversions in Razor and WebAPIs public IConvertService Convert { get; } Property Value IConvertService Remarks Added in 2sxc 12.05 Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. public IDataSource Data { get; } Property Value IDataSource A standard IDataSource. DynamicModel [PublicApi] public dynamic DynamicModel { get; } Property Value dynamic Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Html Helper for Html.Raw - for creating raw html output which doesn't encode > and <. Also has helpers such as .Partial(...) public override IHtmlHelper Html { get; } Property Value IHtmlHelper Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public override ICodeLog Log { get; } Property Value ICodeLog Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. \uD83E\uDE92 Use in Razor: @Resources.CtaButtonLabel public dynamic Resources { get; } Property Value dynamic Remarks New in 12.03 Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. \uD83E\uDE92 Use in Razor: @Settings.ItemsPerRow public dynamic Settings { get; } Property Value dynamic Remarks New in 12.03 Methods AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object the original object Returns dynamic a dynamic object for easier coding AsDynamic(params object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack [PublicApi(\"Careful - still Experimental in 12.02\")] public dynamic AsDynamic(params object[] entities) Parameters entities object[] one or more source object Returns dynamic a dynamic object for easier coding Remarks New in 12.05 AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object the wrapped IEntity Returns IEntity A normal IEntity AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 CreateInstance(string, NoParamOrder, string, string, bool) Create an instance of code lying in a file near this public virtual dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string path to the other code file to compile noParamOrder NoParamOrder see Convention: Named Parameters name string Override the class name to compile - usually not required as it should match the file name relativePath string optional relative path, will usually use the ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath throwOnError bool throw errors if compiling fails, recommended Returns dynamic An object of the class in the file Remarks Note that the C# code which we are creating inherits from a standard base class such as Code12 or ToSic.Sxc.Code.DynamicCode then it will automatically be initialized to support App, AsDynamic etc. CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/Custom.Hybrid.Razor14.html": {
    "href": "api/dot-net/Custom.Hybrid.Razor14.html",
    "title": "Class Razor14 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Razor14 Namespace Custom.Hybrid Assembly ToSic.Sxc.Dnn.Razor.dll Base class for v14 Dynamic Razor files. Will provide the ServiceKit14 on property Kit. This contains all the popular services used in v14, so that your code can be lighter. [PublicApi] public abstract class Razor14 : RazorComponentBase, IHasLog Inheritance object WebPageExecutingBase WebPageRenderingBase WebPageBase RazorComponentBase Razor14 Implements IHasLog Remarks Important: The property Convert which exited on Razor12 was removed. use Kit.Convert instead. Properties App A fully prepared IApp object letting you access all the data and queries in the current app. public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. public IDataSource Data { get; } Property Value IDataSource A standard IDataSource. DynamicModel Dynamic object containing parameters. So in Dnn it contains the PageData, in Oqtane it contains the Model public dynamic DynamicModel { get; } Property Value dynamic Remarks New in v12 Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Html Helper for Html.Raw - for creating raw html output which doesn't encode > and <. Also has helpers such as .Partial(...) public override IHtmlHelper Html { get; } Property Value IHtmlHelper Kit The Service Kit containing all kinds of services which are commonly used. The services on the Kit are context-aware, so they know what App is currently being used etc. public ServiceKit14 Kit { get; } Property Value ServiceKit14 Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public override ICodeLog Log { get; } Property Value ICodeLog Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. \uD83E\uDE92 Use in Razor: @Resources.CtaButtonLabel public dynamic Resources { get; } Property Value dynamic Remarks New in 12.03 Settings Resources for this Scenario. This is a dynamic object based on the IDynamicStack. It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. \uD83E\uDE92 Use in Razor: @Resources.CtaButtonLabel public dynamic Settings { get; } Property Value dynamic Remarks New in 12.03 Methods AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(params object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack public dynamic AsDynamic(params object[] entities) Parameters entities object[] one or more source object Returns dynamic a dynamic object for easier coding Remarks New in 12.05 AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object the wrapped IEntity Returns IEntity A normal IEntity AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 CreateInstance(string, NoParamOrder, string, string, bool) Create an instance of code lying in a file near this public virtual dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string path to the other code file to compile noParamOrder NoParamOrder see Convention: Named Parameters name string Override the class name to compile - usually not required as it should match the file name relativePath string optional relative path, will usually use the ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath throwOnError bool throw errors if compiling fails, recommended Returns dynamic An object of the class in the file Remarks Note that the C# code which we are creating inherits from a standard base class such as Code12 or ToSic.Sxc.Code.DynamicCode then it will automatically be initialized to support App, AsDynamic etc. CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/Custom.Hybrid.RazorTyped-1.html": {
    "href": "api/dot-net/Custom.Hybrid.RazorTyped-1.html",
    "title": "Class RazorTyped<TModel> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class RazorTyped<TModel> Namespace Custom.Hybrid Assembly ToSic.Sxc.Dnn.Razor.dll New base class with custom model. The rest of this is identical to RazorTyped. [PublicApi] public abstract class RazorTyped<TModel> : RazorTyped, IHasLog Type Parameters TModel Model type - like string or a class from your AppCode Inheritance object WebPageExecutingBase WebPageRenderingBase WebPageBase RazorComponentBase RazorTyped RazorTyped<TModel> Implements IHasLog Inherited Members RazorTyped.GetService<TService>() RazorTyped.Kit RazorTyped.Customize RazorTyped.Log RazorTyped.Html RazorTyped.GetCode(string, NoParamOrder, string) RazorTyped.Link RazorTyped.App RazorTyped.AllResources RazorTyped.AllSettings RazorTyped.MyItem RazorTyped.MyItems RazorTyped.MyHeader RazorTyped.MyData RazorTyped.MyModel RazorTyped.MyContext RazorTyped.MyPage RazorTyped.MyUser RazorTyped.MyView RazorTyped.UniqueKey RazorTyped.AsItem(object, NoParamOrder, bool?, bool?) RazorTyped.AsItems(object, NoParamOrder, bool?) RazorTyped.AsEntity(ICanBeEntity) RazorTyped.AsTyped(object, NoParamOrder, bool?) RazorTyped.AsTypedList(object, NoParamOrder, bool?) RazorTyped.AsStack(params object[]) RazorTyped.AsStack<T>(params object[]) RazorTyped.As<T>(object, NoParamOrder, bool) RazorTyped.AsList<T>(object, NoParamOrder, bool) Remarks Introduced in v17.03 Properties Model The model for this Razor file. Typed according to the @inherits statement. public TModel Model { get; } Property Value TModel"
  },
  "api/dot-net/Custom.Hybrid.RazorTyped.html": {
    "href": "api/dot-net/Custom.Hybrid.RazorTyped.html",
    "title": "Class RazorTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class RazorTyped Namespace Custom.Hybrid Assembly ToSic.Sxc.Dnn.Razor.dll Base class for v16 Typed Razor files. Use it to create custom CS code in your App. It provides the ServiceKit16 on property Kit which contains all the popular services to create amazing stuff. [PublicApi] public abstract class RazorTyped : RazorComponentBase, IHasLog Inheritance object WebPageExecutingBase WebPageRenderingBase WebPageBase RazorComponentBase RazorTyped Implements IHasLog Derived RazorTyped<TModel> Remarks Important: This is very different from Razor12 or Razor14, as it doesn't rely on dynamic code. Be aware of this since the APIs are very different - see Typed Code. Properties AllResources Stack of all Resources in the System, merging Resources of View, App, Site, Global etc. Will retrieve values by priority, with View-Resources being top priority and Preset-Resources being the lowest. Tip If you know that Resources come from the App, you should prefer App.Resources instead. That is faster and helps people reading your code figure out where to change a value. public ITypedStack AllResources { get; } Property Value ITypedStack AllSettings Stack of all Settings in the System, merging Settings of View, App, Site, Global etc. Will retrieve values by priority, with View-Settings being top priority and Preset-Settings being the lowest. Tip If you know that Settings come from the App, you should prefer App.Settings instead. That is faster and helps people reading your code figure out where to change a value. public ITypedStack AllSettings { get; } Property Value ITypedStack App The current App object (with strictly typed Settings/Resources). Use it to access App properties such as Path or any data in the App. public IAppTyped App { get; } Property Value IAppTyped Customize Helper to create typed objects for App, View etc. - mainly for custom base classes in AppCode protected ICodeCustomizer Customize { get; } Property Value ICodeCustomizer Remarks Introduced in v17.03 (beta) Stable and ready for production in v18.00 Html Helper for Html.Raw - for creating raw html output which doesn't encode > and <. Also has helpers such as .Partial(...) public override IHtmlHelper Html { get; } Property Value IHtmlHelper Kit public ServiceKit16 Kit { get; } Property Value ServiceKit16 Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public override ICodeLog Log { get; } Property Value ICodeLog MyContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext MyContext { get; } Property Value ICmsContext Remarks New in v11.11 MyData All the data which the current Template received, based on the View configuration. There are a few common scenarios: If it's a simple view, then this will just contain streams with the main Item(s) and Header If the view expects no data, it will just contain a Default stream containing no items If the view has a Query behind it, then MyData will have all the streams provided by the Query public IDataSource MyData { get; } Property Value IDataSource MyHeader The Header-Item belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. public ITypedItem MyHeader { get; } Property Value ITypedItem MyItem The main Item belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. If this view can have a list of items (more than one) then this contains the first item. To get all the items, see ToSic.Sxc.Code.Internal.IDynamicCode16.MyItems public ITypedItem MyItem { get; } Property Value ITypedItem MyItems List of all Items belonging to this Template/Module. This data is edited by the user directly on this specific module. In some cases it can also be a pre-set item configured in the View to be used if the user has not added any data himself. If this view is configured to only have one item, then this list will only contain one item. Otherwise, it will have as many items as the editor added. public IEnumerable<ITypedItem> MyItems { get; } Property Value IEnumerable<ITypedItem> MyModel Data passed to this Razor template by a caller. This is typical for Razor components which are re-used, and called from other Razor templates using @Html.Partial(\"filename.cshtml\", new { thing = 7 }). public ITypedModel MyModel { get; } Property Value ITypedModel MyPage Information about the current Page (called Tab in DNN). It's especially useful to get current URL Parameters. public ICmsPage MyPage { get; } Property Value ICmsPage MyUser Information about the current user. It's especially useful to see if the user has any kind of Admin privileges. public ICmsUser MyUser { get; } Property Value ICmsUser MyView View-information such as the view Name, Identity or Edition. public ICmsView MyView { get; } Property Value ICmsView Remarks New in v12.02 UniqueKey A unique, random key for the current module. It's recommended for giving DOM elements a unique id for scripts to then access them. It's generated for every content-block, and more reliable than Module.Id since that sometimes results in duplicate keys, if the many blocks are used inside each other. It's generated using a GUID and converted/shortened. In the current version it's 8 characters long, so it has 10^14 combinations, making collisions extremely unlikely. (currently 8 characters) Tip To get a unique key which is based on additional objects such as Entities, use the UniqueKeyWith(params object[]) method. public string UniqueKey { get; } Property Value string Remarks If you get a fresh IKeyService it will also create a new UniqueKey. So your code should usually use the built-in property UniqueKey which comes from the shared ServiceKit Key. Methods AsEntity(ICanBeEntity) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(ICanBeEntity thing) Parameters thing ICanBeEntity Returns IEntity A normal IEntity AsItem(object, NoParamOrder, bool?, bool?) Convert something to a ITypedItem. This works for all kinds of IEntitys, IDynamicEntitys as well as Lists/IEnumerables of those. Will always return a single item. If a list is provided, it will return the first item in the list. If null was provided, it will return null. public ITypedItem AsItem(object data, NoParamOrder noParamOrder = default, bool? propsRequired = null, bool? mock = null) Parameters data object An original object which can be converted to a TypedItem, such as a IEntity . noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true mock bool? Specify that the data is fake/mock data, which should pretend to be an Item. Default is false Returns ITypedItem Remarks New in v16.02 AsItems(object, NoParamOrder, bool?) Convert an object containing a list of Entities or similar to a list of ITypedItems. public IEnumerable<ITypedItem> AsItems(object list, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters list object The original list which is usually a list of IEntity objects. noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns IEnumerable<ITypedItem> Remarks New in v16.01 AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. public IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object the source object - a List/Enumerable of IEntity or ITypedItem protector NoParamOrder see Convention: Named Parameters nullIfNull bool if true will return null when source is null - otherwise a wrapper item with empty-contents Returns IEnumerable<T> Type Parameters T the target type Remarks Release in v17.05 AsStack(params object[]) Create a typed object which will provide all the properties of the things wrapped inside it. The priority is first-object first, so if multiple items have the property, the first in the list will be returned. public ITypedStack AsStack(params object[] items) Parameters items object[] objects to stack together Returns ITypedStack AsStack<T>(params object[]) Create a custom-typed object which will provide all the properties of the things wrapped inside it. The priority is first-object first, so if multiple items have the property, the first in the list will be returned. public T AsStack<T>(params object[] items) where T : class, ICanWrapData, new() Parameters items object[] objects to stack together Returns T Item of the custom type Type Parameters T Remarks New in 17.07 AsTyped(object, NoParamOrder, bool?) Creates a typed object to read the original passed into this function. This is usually used to process objects which the compiler can't know, such as anonymous objects returned from helper code etc. If you have an array of such objects, use AsTypedList(object, NoParamOrder, bool?). public ITyped AsTyped(object original, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters original object noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns ITyped AsTypedList(object, NoParamOrder, bool?) Create a list public IEnumerable<ITyped> AsTypedList(object list, NoParamOrder noParamOrder = default, bool? propsRequired = null) Parameters list object List/Enumerable object containing a bunch of items to make typed noParamOrder NoParamOrder see Convention: Named Parameters propsRequired bool? make the resulting object strict, default true Returns IEnumerable<ITyped> As<T>(object, NoParamOrder, bool) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. public T As<T>(object source, NoParamOrder protector = default, bool mock = false) where T : class, ICanWrapData Parameters source object the source object - an IEntity or ITypedItem protector NoParamOrder see Convention: Named Parameters mock bool if true will return a fake when source is null - otherwise a wrapper item with empty-contents Returns T Type Parameters T the target type Remarks Released v17.05 GetCode(string, NoParamOrder, string) Create an instance of a class in a .cs code file. Note that the class name in the file must match the file name, so MyHelpers.cs must have a MyHelpers class. public dynamic GetCode(string path, NoParamOrder noParamOrder = default, string className = null) Parameters path string The path, like Helper.cs, ./helper.cs, ../../Helper.cs or /SomeFolderInApp/Helper.cs (new 16.05) noParamOrder NoParamOrder see Convention: Named Parameters className string Optional class name, if it doesn't match the file name (new 16.03) Returns dynamic , Remarks Created in 16.02 className added in 16.03 Ability to give a path beginning with / as app-root in 16.05 In older code there was a similar CreateInstance method GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/Custom.Hybrid.html": {
    "href": "api/dot-net/Custom.Hybrid.html",
    "title": "Custom.Hybrid Namespace Dnn ☢️ & Oqtane \uD83E\uDE78 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace Custom.Hybrid Recommended Base Classes for all your Razor and C# files which work on Dnn ☢️ & Oqtane \uD83E\uDE78. This contains all the hybrid base classes for your own solutions. They are meant to work across platforms (Dnn ☢️, Oqtane \uD83E\uDE78, NopCommerce \uD83D\uDD35 etc.) Versioned Base Classes All the base classes in this have a version number, so it will become easier to document differences between versions and also to give guidance how to upgrade in case of future breaking changes or security issues. Classes Api12 The base class for hybrid APIs. They internally inherit either from from DnnApiController or from Microsoft.AspNetCore.Mvc.Controller and in addition to all the DynamicCode properties also have all the features of that base class - but you should be careful using base-class properties, as they will probably not be hybrid any more. Code12 The base class for custom hybrid code. If you inherit from this class, you'll automatically have all the properties from DynamicCode. Razor12 The base class for custom Razor. If you inherit from this class, you'll automatically have all the properties from DynamicCode. Classes Api12 This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. Api14 Base class for v14 Dynamic WebAPI files. Will provide the ServiceKit14 on property Kit. This contains all the popular services used in v14, so that your code can be lighter. ApiTyped Base class for v16 Typed WebAPI files. Use it to create custom WebAPI endpoints in your App. It provides the ServiceKit16 on property Kit which contains all the popular services to create amazing stuff. Code12 This is the base class for custom code (.cs) files in your Apps. By inheriting from this base class, you will automatically have the context like the App object etc. available. Tip This is an old base class and works, but you should use a newer one such as CodeTyped Code14 Base class for v14 Dynamic Code files. Will provide the ServiceKit14 on property Kit. This contains all the popular services used in v14, so that your code can be lighter. CodeTyped Base class for v16 Typed CSharp files. Use it to create custom CS code in your App. It provides the ServiceKit16 on property Kit which contains all the popular services to create amazing stuff. Razor12 The base class for Hybrid Razor-Components in 2sxc 12 Provides context objects like CmsContext, helpers like Edit and much more. Razor14 Base class for v14 Dynamic Razor files. Will provide the ServiceKit14 on property Kit. This contains all the popular services used in v14, so that your code can be lighter. RazorTyped Base class for v16 Typed Razor files. Use it to create custom CS code in your App. It provides the ServiceKit16 on property Kit which contains all the popular services to create amazing stuff. RazorTyped<TModel> New base class with custom model. The rest of this is identical to RazorTyped."
  },
  "api/dot-net/Custom.html": {
    "href": "api/dot-net/Custom.html",
    "title": "Custom Namespace for Dnn ☢️ & Oqtane \uD83E\uDE78 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace Custom The starting point for custom code in your App for both Dnn ☢️ & Oqtane \uD83E\uDE78. Latest Recommended Base Classes Tip This area contains all the latest base classes. For compatibility reasons, it also contains older base classes which continue to work. We recommend to use the latest base classes, as they are more powerful and easier to use. Razor: use RazorTyped C# Code: use CodeTyped API: use ApiTyped Custom DataSource: use DataSource16 Namespaces Custom.Data Custom.DataSource Base classes for your custom DataSources in Dnn ☢️ & Oqtane \uD83E\uDE78. Custom.Dnn Base classes for custom Razor / C# which only runs on Dnn ☢️. Custom.Hybrid Recommended Base Classes for all your Razor and C# files which work on Dnn ☢️ & Oqtane \uD83E\uDE78."
  },
  "api/dot-net/System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute.html": {
    "href": "api/dot-net/System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute.html",
    "title": "Class SetsRequiredMembersAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SetsRequiredMembersAttribute Namespace System.Diagnostics.CodeAnalysis Assembly ToSic.Sxc.dll [AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false, Inherited = false)] public sealed class SetsRequiredMembersAttribute : Attribute, _Attribute Inheritance object Attribute SetsRequiredMembersAttribute Implements _Attribute"
  },
  "api/dot-net/System.Diagnostics.CodeAnalysis.html": {
    "href": "api/dot-net/System.Diagnostics.CodeAnalysis.html",
    "title": "Namespace System.Diagnostics.CodeAnalysis | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace System.Diagnostics.CodeAnalysis Classes SetsRequiredMembersAttribute"
  },
  "api/dot-net/System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.html": {
    "href": "api/dot-net/System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.html",
    "title": "Class CompilerFeatureRequiredAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CompilerFeatureRequiredAttribute Namespace System.Runtime.CompilerServices Assembly ToSic.Sxc.dll public class CompilerFeatureRequiredAttribute : Attribute, _Attribute Inheritance object Attribute CompilerFeatureRequiredAttribute Implements _Attribute Constructors CompilerFeatureRequiredAttribute(string) public CompilerFeatureRequiredAttribute(string name) Parameters name string"
  },
  "api/dot-net/System.Runtime.CompilerServices.RequiredMemberAttribute.html": {
    "href": "api/dot-net/System.Runtime.CompilerServices.RequiredMemberAttribute.html",
    "title": "Class RequiredMemberAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class RequiredMemberAttribute Namespace System.Runtime.CompilerServices Assembly ToSic.Sxc.dll public class RequiredMemberAttribute : Attribute, _Attribute Inheritance object Attribute RequiredMemberAttribute Implements _Attribute"
  },
  "api/dot-net/System.Runtime.CompilerServices.html": {
    "href": "api/dot-net/System.Runtime.CompilerServices.html",
    "title": "Namespace System.Runtime.CompilerServices | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace System.Runtime.CompilerServices Classes CompilerFeatureRequiredAttribute RequiredMemberAttribute"
  },
  "api/dot-net/System.html": {
    "href": "api/dot-net/System.html",
    "title": "Namespace System | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace System Namespaces System.Diagnostics.CodeAnalysis System.Runtime.CompilerServices"
  },
  "api/dot-net/ToSic.Eav.Apps.AppBase-1.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppBase-1.html",
    "title": "Class AppBase<TServices> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AppBase<TServices> Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Core.dll Base object for things that have a full app-identity (app-id and zone-id) and can also log their state. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class AppBase<TServices> : ServiceBase<TServices>, IHasLog, IAppIdentity, IZoneIdentity, IAppIdentityLight where TServices : MyServicesBase Type Parameters TServices Inheritance object ServiceBase ServiceBase<TServices> AppBase<TServices> Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight Constructors AppBase(TServices, string, object[]) Base object for things that have a full app-identity (app-id and zone-id) and can also log their state. protected AppBase(TServices services, string logName, object[] connect) Parameters services TServices logName string connect object[] Properties AppId The app id as used internally public int AppId { get; } Property Value int The App ID this thing belongs to ZoneId ID of the zone (EAV Tenant) public int ZoneId { get; } Property Value int The zone ID this thing belongs to Methods InitAppBaseIds(IAppIdentity) App identity containing zone/app combination protected void InitAppBaseIds(IAppIdentity app) Parameters app IAppIdentity the identity"
  },
  "api/dot-net/ToSic.Eav.Apps.AppIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppIdentity.html",
    "title": "Class AppIdentity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AppIdentity Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Core.dll A full App-Identity. This is either used to pass identities around, or as a base class for more extensive objects which know their full identity. [PublicApi] public class AppIdentity : IAppIdentity, IZoneIdentity, IAppIdentityLight Inheritance object AppIdentity Implements IAppIdentity IZoneIdentity IAppIdentityLight Constructors AppIdentity(int, int) App identity containing zone/app combination public AppIdentity(int zoneId, int appId) Parameters zoneId int appId int AppIdentity(IAppIdentity) This is just for extracting the Identity-part of something that may have much more information public AppIdentity(IAppIdentity parent) Parameters parent IAppIdentity Properties AppId The app id as used internally public int AppId { get; } Property Value int The App ID this thing belongs to ZoneId ID of the zone (EAV Tenant) public int ZoneId { get; } Property Value int The zone ID this thing belongs to"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IAsset.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IAsset.html",
    "title": "Interface IAsset | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAsset Namespace ToSic.Eav.Apps.Assets Assembly ToSic.Eav.Apps.dll Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common [PublicApi] public interface IAsset Properties Created The creation date of the item, as reported by the environment. DateTime Created { get; } Property Value DateTime The date-time when the file was created. Id The ID of the item, if the underlying environment uses int IDs int Id { get; } Property Value int an int with the id used by the environment to track this item Modified The modified date of the file, as reported by the environment. DateTime Modified { get; } Property Value DateTime The date-time when the file was modified last. Name The asset name typically the folder or the file name string Name { get; } Property Value string ParentId The folder ID of the file, or parent-folder of a folder, if the underlying environment uses int IDs int ParentId { get; } Property Value int an int with the id used by the environment to track this item Path The relative physical path of the item in the file system of the environment. This is usually relative to the site root. string Path { get; } Property Value string The path of this item PhysicalPath The full physical path to folder or file to access them on the local server. string PhysicalPath { get; } Property Value string The full physical path to this asset, such as c:\\inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IFile.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IFile.html",
    "title": "Interface IFile | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFile Namespace ToSic.Eav.Apps.Assets Assembly ToSic.Eav.Apps.dll Describes a file asset as provided by the underlying environment (like DNN and Oqtane). [PublicApi] public interface IFile : IAsset Inherited Members IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath Remarks All APIs retrieving such a file always begin in either an App or ADAM context. So any relative path information begins there, as these paths are usually meant to be used either relative to that location, or for generating URLs. Properties Extension The file extension of the real underlying file, without the leading dot. string Extension { get; } Property Value string The extension, like \"pdf\" or \"jpg\". pdf for C:\\Inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf Folder The full folder of the file beginning from the root (App or ADAMA), with trailing slash. string Folder { get; } Property Value string The folder name. assets/docs/terms/ for C:\\Inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf FolderId The folder ID of the file, if the underlying environment uses int IDs int FolderId { get; } Property Value int The id used by the environment to track this item. 19350 for C:\\Inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf FullName The full file name of the original file string FullName { get; } Property Value string The full file name with extension. file.pdf for C:\\Inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf Size The file size of the file, IF the underlying environment provides this. int Size { get; } Property Value int The size in bytes. 18273 for C:\\Inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf SizeInfo Size information object for files with specific properties to get the size in bytes, kilobytes, megabytes, etc. ISizeInfo SizeInfo { get; } Property Value ISizeInfo Remarks Added in v14.04"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IFolder.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IFolder.html",
    "title": "Interface IFolder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFolder Namespace ToSic.Eav.Apps.Assets Assembly ToSic.Eav.Apps.dll Describes a folder as provided by the underlying environment (like DNN) [PublicApi] public interface IFolder : IAsset Inherited Members IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath Properties HasChildren Information if this folder has things inside it - other folders, files etc. bool HasChildren { get; } Property Value bool true if it has items inside it, false if not"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.ISizeInfo.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.ISizeInfo.html",
    "title": "Interface ISizeInfo | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ISizeInfo Namespace ToSic.Eav.Apps.Assets Assembly ToSic.Eav.Apps.dll Size information for files [PublicApi] public interface ISizeInfo Remarks Added in v14.04 as class, changed to interface in v17 Properties BestSize Best size based on the number. Will be in KB, MB or GB. The unit is found on BestUnit decimal BestSize { get; } Property Value decimal BestUnit Best unit to use based on the effective size. string BestUnit { get; } Property Value string Bytes Size in bytes int Bytes { get; } Property Value int Gb Size in GB decimal Gb { get; } Property Value decimal Kb Size in KB decimal Kb { get; } Property Value decimal Mb Size in MB decimal Mb { get; } Property Value decimal"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.html",
    "title": "Namespace ToSic.Eav.Apps.Assets | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Apps.Assets Everything related to assets in an EAV/2sxc App. It's the foundation for ToSic.Sxc.Adam. You will probably not use most of this. Interfaces IAsset Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common IFile Describes a file asset as provided by the underlying environment (like DNN and Oqtane). IFolder Describes a folder as provided by the underlying environment (like DNN) ISizeInfo Size information for files"
  },
  "api/dot-net/ToSic.Eav.Apps.IApp.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IApp.html",
    "title": "Interface IApp | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IApp Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Apps.dll An App in memory - for quickly getting things done with the app data, queries etc. [PublicApi] public interface IApp : IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId Properties Data Data of the app IAppData Data { get; } Property Value IAppData Folder App Folder string Folder { get; } Property Value string The folder as configured in the app configuration. Metadata The app metadata - like settings, resources etc. IMetadataOf Metadata { get; } Property Value IMetadataOf A metadata provider for the app Name App Name string Name { get; } Property Value string The name as configured in the app configuration. NameId NameId of the App - usually a string-GUID string NameId { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppData.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppData.html",
    "title": "Interface IAppData | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppData Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Apps.dll An App-DataSource which also provides direct commands to edit/update/delete data. [PublicApi] public interface IAppData : IDataSource, IDataSourceLinkable, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IMetadataGet Inherited Members IDataSource.Out IDataSource.this[string] IDataSource.GetStream(string, NoParamOrder, bool, bool) IDataSource.List IDataSource.In IDataSource.Configuration IDataSource.Error IDataSource.Immutable IDataSourceLinkable.Link IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheExpiring.CacheChanged(long) ITimestamped.CacheTimestamp IHasLog.Log IMetadataGet.GetMetadata<TKey>(int, TKey, string) IMetadataGet.GetMetadata<TKey>(TargetTypes, TKey, string) Methods Create(string, Dictionary<string, object>, string, ITarget) Create a new entity in the storage. IEntity Create(string contentTypeName, Dictionary<string, object> values, string userName = null, ITarget target = null) Parameters contentTypeName string The type name values Dictionary<string, object> a dictionary of values to be stored userName string the current user name - will be logged as the author target ITarget information if this new item is to be metadata for something Returns IEntity Remarks Changed in 2sxc 10.30 - now returns the id of the created items Create(string, IEnumerable<Dictionary<string, object>>, string) Create a bunch of new entities in one single call (much faster, because cache doesn't need to repopulate in the mean time). IEnumerable<IEntity> Create(string contentTypeName, IEnumerable<Dictionary<string, object>> multiValues, string userName = null) Parameters contentTypeName string The type name multiValues IEnumerable<Dictionary<string, object>> many dictionaries, each will become an own item when stored userName string the current user name - will be logged as the author Returns IEnumerable<IEntity> Remarks You can't create items which are metadata with this, for that, please use the Create-one overload Changed in 2sxc 10.30 - now returns the id of the created items Delete(int, string) Delete an existing item void Delete(int entityId, string userName = null) Parameters entityId int The item ID userName string the current user name - will be logged as the author of the change GetCustomMetadata<TKey>(TKey, string) Get metadata of TargetType.Custom - which is the most common way your code will need Metadata. IEnumerable<IEntity> GetCustomMetadata<TKey>(TKey key, string contentTypeName = null) Parameters key TKey The target identifier - a number, string or Guid contentTypeName string Optional name of Content-Type, if you only want items of a specific type Returns IEnumerable<IEntity> Type Parameters TKey Key data type Update(int, Dictionary<string, object>, string) Update an existing item. void Update(int entityId, Dictionary<string, object> values, string userName = null) Parameters entityId int The item ID values Dictionary<string, object> a dictionary of values to be updated userName string the current user name - will be logged as the author of the change"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppIdentity.html",
    "title": "Interface IAppIdentity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppIdentity Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Core.dll Marks thing which belongs to an App and a Zone and know their full identity. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IAppIdentity : IZoneIdentity, IAppIdentityLight Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppIdentityLight.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppIdentityLight.html",
    "title": "Interface IAppIdentityLight | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppIdentityLight Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Core.dll Marks things which belongs to an App - but it may only know about the app, not about the zone. For a full identity, see IAppIdentity. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppIdentityLight Properties AppId The app id as used internally int AppId { get; } Property Value int The App ID this thing belongs to"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppReaderFactory.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppReaderFactory.html",
    "title": "Interface IAppReaderFactory | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppReaderFactory Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Core.dll Internal system to retrieve AppReaders for accessing app state/data directly. It is documented but not meant to be used outside the core team. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IAppReaderFactory Remarks This was introduced in 2sxc 18 to replace older AppStates mechanisms. It ensures that the reading actions are done in a controlled way, and that the app state is always up-to-date. Methods AppIdentity(int) IAppIdentityPure AppIdentity(int appId) Parameters appId int Returns IAppIdentityPure Get(int) Get a reader for the specified app. IAppReader Get(int appId) Parameters appId int Returns IAppReader Get(IAppIdentity) Get a reader for the specified app. IAppReader Get(IAppIdentity app) Parameters app IAppIdentity Returns IAppReader GetOrKeep(IAppIdentity) Helper for internal purposes. Sometimes code will get an app identity, but it could also be a Reader. For performance reasons, this will get you the reader, but possibly without having to create a new one. IAppReader GetOrKeep(IAppIdentity appOrReader) Parameters appOrReader IAppIdentity Returns IAppReader GetSystemPreset(NoParamOrder, bool) Get the preset App of the system. In a very special case, it should skip this if it's not loaded. IAppReader GetSystemPreset(NoParamOrder protector = default, bool nullIfNotLoaded = false) Parameters protector NoParamOrder nullIfNotLoaded bool Returns IAppReader GetZonePrimary(int) Get a reader of the zone's primary app. Typically, this is he site-primary app, which contains site metadata and settings. IAppReader GetZonePrimary(int zoneId) Parameters zoneId int Returns IAppReader"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppsCatalog.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppsCatalog.html",
    "title": "Interface IAppsCatalog | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppsCatalog Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Core.dll Global service providing information about apps and zones. [PublicApi] public interface IAppsCatalog Properties Zones List of all zones. IReadOnlyDictionary<int, Zone> Zones { get; } Property Value IReadOnlyDictionary<int, Zone> Methods AppIdentity(int) Get the full AppIdentity with Zone for the given appId. IAppIdentityPure AppIdentity(int appId) Parameters appId int Returns IAppIdentityPure AppNameId(IAppIdentity) Get the NameId of an App - typically a GUID or in rare cases the word \"Content\". string AppNameId(IAppIdentity appIdentity) Parameters appIdentity IAppIdentity Returns string Apps(int) List of all apps inside a specific zone. IReadOnlyDictionary<int, string> Apps(int zoneId) Parameters zoneId int Returns IReadOnlyDictionary<int, string> DefaultAppIdentity(int) Get the identity of the \"Default\" (aka \"Content\") App of a Zone. IAppIdentityPure DefaultAppIdentity(int zoneId) Parameters zoneId int Returns IAppIdentityPure PrimaryAppIdentity(int) Get the identity of the \"Primary\" (aka \"Site\") App of a Zone. IAppIdentityPure PrimaryAppIdentity(int zoneId) Parameters zoneId int Returns IAppIdentityPure Zone(int) Information about a specific zone. Zone Zone(int zoneId) Parameters zoneId int Returns Zone"
  },
  "api/dot-net/ToSic.Eav.Apps.IZoneIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IZoneIdentity.html",
    "title": "Interface IZoneIdentity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IZoneIdentity Namespace ToSic.Eav.Apps Assembly ToSic.Eav.Core.dll Marks things which belongs to a Zone [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IZoneIdentity Properties ZoneId ID of the zone (EAV Tenant) int ZoneId { get; } Property Value int The zone ID this thing belongs to"
  },
  "api/dot-net/ToSic.Eav.Apps.Internal.IHas-1.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Internal.IHas-1.html",
    "title": "Interface IHas<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHas<T> Namespace ToSic.Eav.Apps.Internal Assembly ToSic.Eav.Core.dll Experimental interface to mark objects which have a value. ATM to better handle App-State-Like objects without showing the underlying data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IHas<out T> where T : class Type Parameters T Properties Value T Value { get; } Property Value T"
  },
  "api/dot-net/ToSic.Eav.Apps.Internal.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Internal.html",
    "title": "Namespace ToSic.Eav.Apps.Internal | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Apps.Internal Interfaces IHas<T> Experimental interface to mark objects which have a value. ATM to better handle App-State-Like objects without showing the underlying data."
  },
  "api/dot-net/ToSic.Eav.Apps.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.html",
    "title": "Namespace ToSic.Eav.Apps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Apps The EAV App System. It's responsible for taking data and bundling it into virtual segments called Apps, and providing nice APIs to work with the apps. Namespaces ToSic.Eav.Apps.Assets Everything related to assets in an EAV/2sxc App. It's the foundation for ToSic.Sxc.Adam. You will probably not use most of this. ToSic.Eav.Apps.Internal Classes AppBase<TServices> Base object for things that have a full app-identity (app-id and zone-id) and can also log their state. AppIdentity A full App-Identity. This is either used to pass identities around, or as a base class for more extensive objects which know their full identity. Interfaces IApp An App in memory - for quickly getting things done with the app data, queries etc. IAppData An App-DataSource which also provides direct commands to edit/update/delete data. IAppIdentity Marks thing which belongs to an App and a Zone and know their full identity. IAppIdentityLight Marks things which belongs to an App - but it may only know about the app, not about the zone. For a full identity, see IAppIdentity. IAppReaderFactory Internal system to retrieve AppReaders for accessing app state/data directly. It is documented but not meant to be used outside the core team. IAppsCatalog Global service providing information about apps and zones. IZoneIdentity Marks things which belongs to a Zone"
  },
  "api/dot-net/ToSic.Eav.Caching.AppsCacheBase.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.AppsCacheBase.html",
    "title": "Class AppsCacheBase | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AppsCacheBase Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll The Apps Cache is the main cache for App States. This is just the abstract base implementation. The real cache must implement this and also provide platform specific adjustments so that the caching is in sync with the Environment. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class AppsCacheBase : IAppsCache, IHasIdentityNameId Inheritance object AppsCacheBase Implements IAppsCache IHasIdentityNameId Properties NameId Primary identifier of an object which has this property. It will be unique and used as an ID where needed. public virtual string NameId { get; } Property Value string Priority public virtual int Priority { get; } Property Value int Methods Get(IAppIdentity, IAppLoaderTools) Retrieve an app from the cache or build it if not yet available. public IAppStateCache Get(IAppIdentity app, IAppLoaderTools tools) Parameters app IAppIdentity App identifier. tools IAppLoaderTools Current service provider, in case the app must be retrieved / generated Returns IAppStateCache The ToSic.Eav.Apps.State.IAppStateCache of the app. Has(IAppIdentity) Check if something is already in the cache public bool Has(IAppIdentity app) Parameters app IAppIdentity App identifier. Returns bool IsViable() public virtual bool IsViable() Returns bool Load(IAppIdentity, string, IAppLoaderTools) Load an app into cache, specifying the primary language. This is used in scenarios, where the primary language cannot be auto-detected, so it's set explicitly. public void Load(IAppIdentity app, string primaryLanguage, IAppLoaderTools tools) Parameters app IAppIdentity App identifier. primaryLanguage string Primary language, lower case. tools IAppLoaderTools Purge(IAppIdentity) Clean cache for specific Zone and App public void Purge(IAppIdentity app) Parameters app IAppIdentity PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. public abstract void PurgeZones() Update(IAppIdentity, IEnumerable<int>, ILog, IAppLoaderTools) Tell the cache that an app has done a partial update. Only relevant for farm scenarios, where other nodes must be informed. public virtual IAppStateCache Update(IAppIdentity appIdentity, IEnumerable<int> entities, ILog log, IAppLoaderTools tools) Parameters appIdentity IAppIdentity entities IEnumerable<int> List of entities which need to be updates. log ILog Log object to log what's happening. tools IAppLoaderTools Returns IAppStateCache The updated ToSic.Eav.Apps.State.IAppStateCache or null, if it wasn't in the cache so didn't need updating. Zones(IAppLoaderTools) public abstract IReadOnlyDictionary<int, Zone> Zones(IAppLoaderTools tools) Parameters tools IAppLoaderTools Returns IReadOnlyDictionary<int, Zone>"
  },
  "api/dot-net/ToSic.Eav.Caching.IAppsCache.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.IAppsCache.html",
    "title": "Interface IAppsCache | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppsCache Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll Marks the objects which are responsible for caching ToSic.Eav.Apps.State.IAppStateCache in memory. This is a very powerful system ensuring performance and more. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppsCache Methods Get(IAppIdentity, IAppLoaderTools) Retrieve an app from the cache or build it if not yet available. IAppStateCache Get(IAppIdentity app, IAppLoaderTools tools) Parameters app IAppIdentity App identifier. tools IAppLoaderTools Current service provider, in case the app must be retrieved / generated Returns IAppStateCache The ToSic.Eav.Apps.State.IAppStateCache of the app. Has(IAppIdentity) Check if something is already in the cache bool Has(IAppIdentity app) Parameters app IAppIdentity App identifier. Returns bool Load(IAppIdentity, string, IAppLoaderTools) Load an app into cache, specifying the primary language. This is used in scenarios, where the primary language cannot be auto-detected, so it's set explicitly. void Load(IAppIdentity app, string primaryLanguage, IAppLoaderTools tools) Parameters app IAppIdentity App identifier. primaryLanguage string Primary language, lower case. tools IAppLoaderTools Purge(IAppIdentity) Clean cache for specific Zone and App void Purge(IAppIdentity app) Parameters app IAppIdentity PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. void PurgeZones() Update(IAppIdentity, IEnumerable<int>, ILog, IAppLoaderTools) Tell the cache that an app has done a partial update. Only relevant for farm scenarios, where other nodes must be informed. IAppStateCache Update(IAppIdentity app, IEnumerable<int> entities, ILog log, IAppLoaderTools tools) Parameters app IAppIdentity App identifier. entities IEnumerable<int> List of entities which need to be updates. log ILog Log object to log what's happening. tools IAppLoaderTools Returns IAppStateCache The updated ToSic.Eav.Apps.State.IAppStateCache or null, if it wasn't in the cache so didn't need updating."
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheDependent.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheDependent.html",
    "title": "Interface ICacheDependent | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICacheDependent Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheDependent : ITimestamped Inherited Members ITimestamped.CacheTimestamp Methods CacheChanged() Find out if the source it depends on has changed. bool CacheChanged() Returns bool True if the upstream cache returns a newer timestamp"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheExpiring.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheExpiring.html",
    "title": "Interface ICacheExpiring | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICacheExpiring Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll Marks objects which are cache-based, and which may contain obsolete cached data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheExpiring : ITimestamped Inherited Members ITimestamped.CacheTimestamp Methods CacheChanged(long) Detect if the cache has newer data. It's called using the TimeStamp of the dependent object which may still have old data. bool CacheChanged(long dependentTimeStamp) Parameters dependentTimeStamp long New time stamp of a dependent object, which could have an older timestamp. Returns bool True if the timestamps differ, false if it's the same Remarks This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object."
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheKey.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheKey.html",
    "title": "Interface ICacheKey | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICacheKey Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheKey"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheKeyManager.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheKeyManager.html",
    "title": "Interface ICacheKeyManager | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICacheKeyManager Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll Generates cache-keys for certain objects and combines them with CacheKeys of parent-objects which this object relies on. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheKeyManager : ICacheKey Properties SubKeys string[] SubKeys { get; } Property Value string[]"
  },
  "api/dot-net/ToSic.Eav.Caching.ITimestamped.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ITimestamped.html",
    "title": "Interface ITimestamped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITimestamped Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll Provides a time stamp when something was created / updated for caching. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ITimestamped Properties CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. long CacheTimestamp { get; } Property Value long A timestamp as a long number"
  },
  "api/dot-net/ToSic.Eav.Caching.SynchronizedList-1.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.SynchronizedList-1.html",
    "title": "Class SynchronizedList<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SynchronizedList<T> Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class SynchronizedList<T> : SynchronizedObject<IImmutableList<T>>, ICacheDependent, ICacheExpiring, ITimestamped, IEnumerable<T>, IEnumerable Type Parameters T The type which is enumerated, usually an IEntity Inheritance object SynchronizedObject<IImmutableList<T>> SynchronizedList<T> Implements ICacheDependent ICacheExpiring ITimestamped IEnumerable<T> IEnumerable Inherited Members SynchronizedObject<IImmutableList<T>>.Upstream SynchronizedObject<IImmutableList<T>>.Cache SynchronizedObject<IImmutableList<T>>.RebuildCache SynchronizedObject<IImmutableList<T>>.RebuildCount SynchronizedObject<IImmutableList<T>>.Value SynchronizedObject<IImmutableList<T>>.CacheTimestamp SynchronizedObject<IImmutableList<T>>.CacheChanged(long) SynchronizedObject<IImmutableList<T>>.CacheChanged() Constructors SynchronizedList(ICacheExpiring, Func<List<T>>) Initialized a new list which depends on another source [Obsolete(\"You should prefer the Func<Immutable> signature\")] public SynchronizedList(ICacheExpiring upstream, Func<List<T>> rebuild) Parameters upstream ICacheExpiring the upstream cache which can tell us if a refresh is necessary rebuild Func<List<T>> the method which rebuilds the list SynchronizedList(ICacheExpiring, Func<IImmutableList<T>>) Initialized a new list which depends on another source public SynchronizedList(ICacheExpiring upstream, Func<IImmutableList<T>> rebuild) Parameters upstream ICacheExpiring the upstream cache which can tell us if a refresh is necessary rebuild Func<IImmutableList<T>> the method which rebuilds the list"
  },
  "api/dot-net/ToSic.Eav.Caching.SynchronizedObject-1.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.SynchronizedObject-1.html",
    "title": "Class SynchronizedObject<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SynchronizedObject<T> Namespace ToSic.Eav.Caching Assembly ToSic.Eav.Core.dll WIP 12.03 [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class SynchronizedObject<T> : ICacheDependent, ICacheExpiring, ITimestamped Type Parameters T The type which is enumerated, usually an IEntity Inheritance object SynchronizedObject<T> Implements ICacheDependent ICacheExpiring ITimestamped Derived SynchronizedList<T> Constructors SynchronizedObject(ICacheExpiring, Func<T>) Initialized a new list which depends on another source public SynchronizedObject(ICacheExpiring upstream, Func<T> rebuild) Parameters upstream ICacheExpiring the upstream cache which can tell us if a refresh is necessary rebuild Func<T> the method which rebuilds the list Fields Cache The cached object/result protected T Cache Field Value T RebuildCache A callback to rebuild the cache which is provided when this object is created protected readonly Func<T> RebuildCache Field Value Func<T> RebuildCount Counter to see how often the cache had been reset. public int RebuildCount Field Value int Upstream Upstream source which implements ICacheExpiring to tell this object when the data must be refreshed protected readonly ICacheExpiring Upstream Field Value ICacheExpiring Properties CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. public long CacheTimestamp { get; } Property Value long A timestamp as a long number Value Retrieves the list - either the cache one, or if timestamp has changed, rebuild and return that public virtual T Value { get; } Property Value T Methods CacheChanged() Find out if the source it depends on has changed. public bool CacheChanged() Returns bool True if the upstream cache returns a newer timestamp CacheChanged(long) Detect if the cache has newer data. It's called using the TimeStamp of the dependent object which may still have old data. public bool CacheChanged(long dependentTimeStamp) Parameters dependentTimeStamp long New time stamp of a dependent object, which could have an older timestamp. Returns bool True if the timestamps differ, false if it's the same Remarks This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object."
  },
  "api/dot-net/ToSic.Eav.Caching.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.html",
    "title": "Namespace ToSic.Eav.Caching | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Caching Everything related to how the EAV caches stuff. Fairly internal tidbits, you probably won't need them. Classes AppsCacheBase The Apps Cache is the main cache for App States. This is just the abstract base implementation. The real cache must implement this and also provide platform specific adjustments so that the caching is in sync with the Environment. SynchronizedList<T> This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. SynchronizedObject<T> WIP 12.03 Interfaces IAppsCache Marks the objects which are responsible for caching ToSic.Eav.Apps.State.IAppStateCache in memory. This is a very powerful system ensuring performance and more. ICacheDependent Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. ICacheExpiring Marks objects which are cache-based, and which may contain obsolete cached data. ICacheKey Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. ICacheKeyManager Generates cache-keys for certain objects and combines them with CacheKeys of parent-objects which this object relies on. ITimestamped Provides a time stamp when something was created / updated for caching."
  },
  "api/dot-net/ToSic.Eav.Data.Build.DataFactoryOptions.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Build.DataFactoryOptions.html",
    "title": "Class DataFactoryOptions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataFactoryOptions Namespace ToSic.Eav.Data.Build Assembly ToSic.Eav.Core.dll Options how Entities should be generated from the initial data. [PublicApi] public record DataFactoryOptions : IEquatable<DataFactoryOptions> Inheritance object DataFactoryOptions Implements IEquatable<DataFactoryOptions> Remarks Tip This is a record since v19.01, which makes it simpler to use and understand. all the properties are init only, but the docs and the DNN DLLs require that they are set as well. This will not be supported in future, so ensure that you only set the properties on init. History Added in v15.x but made public in v16.00 Changed to be a record in v19.01 to make things simpler; this could be a breaking change, because the old constructor was removed. Properties AllowUnknownValueTypes public bool AllowUnknownValueTypes { get; set; } Property Value bool AppId The App-ID which will be assigned to the generated entities. By default, it will be 0 public int AppId { get; set; } Property Value int AutoId Determines if Zero IDs are auto-incremented. Default is true. public bool AutoId { get; set; } Property Value bool IdSeed ID seed for all items which must be auto-numbered. Default is 1. If the seed is -1 or less, then it will automatically decrement the count. This is to clearly indicate virtual IDs which will not be the same in the next run. public int IdSeed { get; set; } Property Value int TitleField The field in the data which is the default title. Defaults to Title if not set. public string TitleField { get; set; } Property Value string Type public Type Type { get; set; } Property Value Type TypeName The type name to use for a generated Entity. public string TypeName { get; set; } Property Value string WithMetadata public bool WithMetadata { get; set; } Property Value bool"
  },
  "api/dot-net/ToSic.Eav.Data.Build.EntityPair-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Build.EntityPair-1.html",
    "title": "Class EntityPair<TPartner> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class EntityPair<TPartner> Namespace ToSic.Eav.Data.Build Assembly ToSic.Eav.Core.dll Special object to carry an IEntity and another object which belong together. This is mainly used in scenarios where you create new Entities and must keep the original tied to the Entity because you may still need the original later on for further processing. [InternalApi_DoNotUse_MayChangeWithoutNotice] public record EntityPair<TPartner> : IEntityPair<TPartner>, IEquatable<EntityPair<TPartner>> Type Parameters TPartner Inheritance object EntityPair<TPartner> Implements IEntityPair<TPartner> IEquatable<EntityPair<TPartner>> Remarks Added in 15.04 Constructors EntityPair(IEntity, TPartner) Special object to carry an IEntity and another object which belong together. This is mainly used in scenarios where you create new Entities and must keep the original tied to the Entity because you may still need the original later on for further processing. public EntityPair(IEntity Entity, TPartner Partner) Parameters Entity IEntity Partner TPartner Remarks Added in 15.04 Properties Entity The entity. public IEntity Entity { get; init; } Property Value IEntity Partner The partner object. For example an ToSic.Eav.Data.Raw.IRawEntity which was used to create this entity. public TPartner Partner { get; init; } Property Value TPartner"
  },
  "api/dot-net/ToSic.Eav.Data.Build.IDataFactory.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Build.IDataFactory.html",
    "title": "Interface IDataFactory | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataFactory Namespace ToSic.Eav.Data.Build Assembly ToSic.Eav.Core.dll A data builder which will generate items for a specific type. In many cases it will also take care of auto increasing the id and more. [PublicApi] public interface IDataFactory Remarks Added in v15 to replace the previous IDataBuilder Properties ContentType The generated ContentType. This will only be generated once, for better performance. IContentType ContentType { get; } Property Value IContentType IdCounter A counter for the ID in case the data provided doesn't have an ID to use. Default is 1 int IdCounter { get; } Property Value int Relationships TODO: ILookup<object, IEntity> Relationships { get; } Property Value ILookup<object, IEntity> Methods Create(IDictionary<string, object>, int, Guid, DateTime, DateTime, EntityPartsBuilder) Create a single entity based on values passed in. IEntity Create(IDictionary<string, object> values, int id = 0, Guid guid = default, DateTime created = default, DateTime modified = default, EntityPartsBuilder partsBuilder = null) Parameters values IDictionary<string, object> id int guid Guid created DateTime modified DateTime partsBuilder EntityPartsBuilder Returns IEntity Create(IRawEntity) Create an entity from a single ToSic.Eav.Data.Raw.IRawEntity IEntity Create(IRawEntity rawEntity) Parameters rawEntity IRawEntity Returns IEntity Create<T>(IEnumerable<IHasRawEntity<T>>) Build a complete stream of ToSic.Eav.Data.Raw.IRawEntitys. This is the method to use when you don't plan on doing any post-processing. If you need post-processing, call Prepare instead and finish using WrapUp. IImmutableList<IEntity> Create<T>(IEnumerable<IHasRawEntity<T>> list) where T : IRawEntity Parameters list IEnumerable<IHasRawEntity<T>> Returns IImmutableList<IEntity> Type Parameters T Create<T>(IEnumerable<T>) Create a complete list of ToSic.Eav.Data.Raw.IRawEntitys. This is the method to use when you don't plan on doing any post-processing. If you need post-processing, call Prepare instead and finish using WrapUp. IImmutableList<IEntity> Create<T>(IEnumerable<T> list) where T : IRawEntity Parameters list IEnumerable<T> Returns IImmutableList<IEntity> Type Parameters T New(NoParamOrder, DataFactoryOptions, ILookup<object, IEntity>, RawConvertOptions) Spawn a new IDataFactory with an initial configuration. This returns a new IDataFactory and will not modify the original/parent. Uses the Spawn New convention. IDataFactory New(NoParamOrder noParamOrder = default, DataFactoryOptions options = null, ILookup<object, IEntity> relationships = null, RawConvertOptions rawConvertOptions = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters options DataFactoryOptions All the options which are relevant for the DataFactory relationships ILookup<object, IEntity> rawConvertOptions RawConvertOptions Optional special options which create-raw might use Returns IDataFactory Itself, to make call chaining easier Prepare<T>(IEnumerable<IHasRawEntity<T>>) This will create IEntity but return it in a dictionary mapped to the original. This is useful when you intend to do further processing and need to know which original matches the generated entity. IMPORTANT: WIP THIS ALREADY RUNS FullClone, so the resulting IEntities are properly modifiable and shouldn't be cloned again IList<EntityPair<T>> Prepare<T>(IEnumerable<IHasRawEntity<T>> data) where T : IRawEntity Parameters data IEnumerable<IHasRawEntity<T>> Returns IList<EntityPair<T>> Type Parameters T Prepare<T>(IEnumerable<T>) This will create IEntity but return it in a dictionary mapped to the original. This is useful when you intend to do further processing and need to know which original matches the generated entity. IMPORTANT: WIP THIS ALREADY RUNS FullClone, so the resulting IEntities are properly modifiable and shouldn't be cloned again IList<EntityPair<T>> Prepare<T>(IEnumerable<T> list) where T : IRawEntity Parameters list IEnumerable<T> Returns IList<EntityPair<T>> Type Parameters T Prepare<T>(IHasRawEntity<T>) For objects which delegate the ToSic.Eav.Data.Raw.IRawEntity to a property. EntityPair<T> Prepare<T>(IHasRawEntity<T> withRawEntity) where T : IRawEntity Parameters withRawEntity IHasRawEntity<T> Returns EntityPair<T> Type Parameters T Prepare<T>(T) For objects which themselves are ToSic.Eav.Data.Raw.IRawEntity EntityPair<T> Prepare<T>(T rawEntity) where T : IRawEntity Parameters rawEntity T Returns EntityPair<T> Type Parameters T WrapUp(IEnumerable<ICanBeEntity>) Finalize the work of building something, using prepared materials. IImmutableList<IEntity> WrapUp(IEnumerable<ICanBeEntity> rawList) Parameters rawList IEnumerable<ICanBeEntity> Returns IImmutableList<IEntity>"
  },
  "api/dot-net/ToSic.Eav.Data.Build.IEntityPair-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Build.IEntityPair-1.html",
    "title": "Interface IEntityPair<TPartner> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IEntityPair<TPartner> Namespace ToSic.Eav.Data.Build Assembly ToSic.Eav.Core.dll Interface marking EntityPair<TPartner>s. This is for internal use, to ensure covariance. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IEntityPair<out TPartner> Type Parameters TPartner Remarks Added in 15.04 Properties Partner TPartner Partner { get; } Property Value TPartner"
  },
  "api/dot-net/ToSic.Eav.Data.Build.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Build.html",
    "title": "Namespace ToSic.Eav.Data.Build | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Data.Build Classes DataFactoryOptions Options how Entities should be generated from the initial data. EntityPair<TPartner> Special object to carry an IEntity and another object which belong together. This is mainly used in scenarios where you create new Entities and must keep the original tied to the Entity because you may still need the original later on for further processing. Interfaces IDataFactory A data builder which will generate items for a specific type. In many cases it will also take care of auto increasing the id and more. IEntityPair<TPartner> Interface marking EntityPair<TPartner>s. This is for internal use, to ensure covariance."
  },
  "api/dot-net/ToSic.Eav.Data.IAttribute-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttribute-1.html",
    "title": "Interface IAttribute<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAttribute<T> Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents an Attribute (Property), but strongly typed [PublicApi] public interface IAttribute<out T> : IAttribute, IAttributeBase Type Parameters T Type of the Value Inherited Members IAttribute.Values IAttributeBase.Name IAttributeBase.Type Remarks We recommend you read about the Understanding Data... Properties Typed Gets the typed Value Objects - so the same as Values, but with the correct type IEnumerable<IValue<out T>> Typed { get; } Property Value IEnumerable<IValue<T>> TypedContents Gets the typed first/default value T TypedContents { get; } Property Value T"
  },
  "api/dot-net/ToSic.Eav.Data.IAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttribute.html",
    "title": "Interface IAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAttribute Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. [PublicApi] public interface IAttribute : IAttributeBase Inherited Members IAttributeBase.Name IAttributeBase.Type Remarks We recommend you read about the Understanding Data... Properties Values Gets a list of all IValues of this Entity's Attribute. To get the typed objects, use the Typed IEnumerable<IValue> Values { get; } Property Value IEnumerable<IValue>"
  },
  "api/dot-net/ToSic.Eav.Data.IAttributeBase.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttributeBase.html",
    "title": "Interface IAttributeBase | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAttributeBase Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) [PublicApi] public interface IAttributeBase Remarks We recommend you read about the Understanding Data... Properties Name Name of the Attribute string Name { get; } Property Value string Type The official type, as a controlled (enum) value. ValueTypes Type { get; } Property Value ValueTypes"
  },
  "api/dot-net/ToSic.Eav.Data.IContentType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IContentType.html",
    "title": "Interface IContentType | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IContentType Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents a Content Type information (the schema) used for IEntity objects. [PublicApi] public interface IContentType : IAppIdentityLight, IHasMetadata Inherited Members IAppIdentityLight.AppId Properties Attributes All Attribute Definitions IEnumerable<IContentTypeAttribute> Attributes { get; } Property Value IEnumerable<IContentTypeAttribute> ContentTypeId Old name for Id, please use Id instead [Obsolete(\"Deprecated in V13, please use Id instead.\")] int ContentTypeId { get; } Property Value int Remarks Deprecated in v13 Id Get the id of the Content Type - you usually don't need this! int Id { get; } Property Value int IsDynamic Determines if the data for this type is dynamic (spontaneously created) or real an EAV (split into sql-tables) or json somewhere To detect if it's just a global json-type, find out what repository the type is from (RepositoryType) bool IsDynamic { get; } Property Value bool this[string] A simple indexer to get an attribute IContentTypeAttribute this[string fieldName] { get; } Parameters fieldName string Property Value IContentTypeAttribute The IContentTypeAttribute of the field name or null if not found Metadata Get the metadata for this content-type ContentTypeMetadata Metadata { get; } Property Value ContentTypeMetadata Remarks The metadata is either already prepared, from the same app, or from a remote app Name Gets the Display Name of the Content Type string Name { get; } Property Value string NameId A unique id/name of the content-type. Previously called StaticName. string NameId { get; } Property Value string Remarks New in v13 RepositoryAddress Information / ID / URL to this content-type where it was stored in the repository string RepositoryAddress { get; } Property Value string RepositoryType Information where the Content-Type was stored (file system, DB, etc.) RepositoryTypes RepositoryType { get; } Property Value RepositoryTypes Scope Get the scope of the Content Type (like sections in a DB) string Scope { get; } Property Value string StaticName Static name - can be a GUID or a system-term for special types [Obsolete(\"Deprecated in v13, please use NameId instead\")] string StaticName { get; } Property Value string Remarks being deprecated in V13, to be replaced with NameId Methods Is(string) Check if this type is the same as a name given. Will check both the name and the static name bool Is(string name) Parameters name string Returns bool"
  },
  "api/dot-net/ToSic.Eav.Data.IContentTypeAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IContentTypeAttribute.html",
    "title": "Interface IContentTypeAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IContentTypeAttribute Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType [PublicApi] public interface IContentTypeAttribute : IAttributeBase, IHasPermissions, IAppIdentityLight, IHasMetadata Inherited Members IAttributeBase.Name IAttributeBase.Type IHasPermissions.Permissions IAppIdentityLight.AppId IHasMetadata.Metadata Properties AttributeId additional info for the persistence layer int AttributeId { get; } Property Value int IsTitle tells us if this attribute is the title bool IsTitle { get; } Property Value bool SortOrder position of this attribute in the list of attributes int SortOrder { get; } Property Value int"
  },
  "api/dot-net/ToSic.Eav.Data.IConvert-2.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IConvert-2.html",
    "title": "Interface IConvert<TFrom, TTo> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IConvert<TFrom, TTo> Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Interface which converts one type into another, or a list of that type into a list of the resulting type. Commonly used to convert entities to dictionaries etc. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Just FYI to understand the internals. It will probably be moved elsewhere in the namespace some day. \")] public interface IConvert<in TFrom, out TTo> Type Parameters TFrom The source type of this conversion TTo The target type for this conversion Methods Convert(IEnumerable<TFrom>) Return a list of converted objects - usually prepared for serialization or similar IEnumerable<out TTo> Convert(IEnumerable<in TFrom> list) Parameters list IEnumerable<TFrom> Returns IEnumerable<TTo> Convert(TFrom) Convert a single item to the target type - usually prepared for serialization or similar TTo Convert(TFrom item) Parameters item TFrom Returns TTo"
  },
  "api/dot-net/ToSic.Eav.Data.IConvertEntity-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IConvertEntity-1.html",
    "title": "Interface IConvertEntity<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IConvertEntity<T> Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Convert an entity into another format [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IConvertEntity<out T> : IConvert<IEntity, T>, IConvert<IEntityWrapper, T>, IConvert<object, T> Type Parameters T The target format we'll convert into Inherited Members IConvert<IEntity, T>.Convert(IEnumerable<IEntity>) IConvert<IEntity, T>.Convert(IEntity) IConvert<IEntityWrapper, T>.Convert(IEnumerable<IEntityWrapper>) IConvert<IEntityWrapper, T>.Convert(IEntityWrapper) IConvert<object, T>.Convert(IEnumerable<object>) IConvert<object, T>.Convert(object) Properties Languages Languages to prefer when looking up the values string[] Languages { get; set; } Property Value string[]"
  },
  "api/dot-net/ToSic.Eav.Data.IDecorator-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDecorator-1.html",
    "title": "Interface IDecorator<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDecorator<T> Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just fyi\")] public interface IDecorator<T> : IDecorator Type Parameters T"
  },
  "api/dot-net/ToSic.Eav.Data.IDecorator.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDecorator.html",
    "title": "Interface IDecorator | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDecorator Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just fyi\")] public interface IDecorator"
  },
  "api/dot-net/ToSic.Eav.Data.IDimension.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDimension.html",
    "title": "Interface IDimension | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDimension Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents a Dimension to assign values to. Dimensions are usually languages (ILanguage), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IDimension Properties DimensionId Gets the internal DimensionId as it is stored in the DB. This is only used for scenarios where the dimensions are defined in relational data. int DimensionId { get; } Property Value int Key Gets the dimension Key. For languages it's usually values like en-US or de-DE string Key { get; } Property Value string ReadOnly Gets whether Dimension is assigned read only. This affects the UI, so that the value cannot be edited in these dimensions. bool ReadOnly { get; } Property Value bool"
  },
  "api/dot-net/ToSic.Eav.Data.IEntity.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntity.html",
    "title": "Interface IEntity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IEntity Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. We recommend you read about the Understanding Data... [PublicApi] public interface IEntity : IHasMetadata, IEntityLight, IAppIdentityLight, IHasPermissions Inherited Members IEntityLight.EntityId IEntityLight.EntityGuid IEntityLight.MetadataFor IEntityLight.Type IEntityLight.Modified IEntityLight.Created IEntityLight.Relationships IEntityLight.Owner IEntityLight.OwnerId IAppIdentityLight.AppId IHasPermissions.Permissions Properties Attributes All the attributes of the current Entity. IImmutableDictionary<string, IAttribute> Attributes { get; } Property Value IImmutableDictionary<string, IAttribute> this[string] Gets an Attribute using its StaticName IAttribute this[string attributeName] { get; } Parameters attributeName string StaticName of the Attribute Property Value IAttribute A typed Attribute Object Metadata Get the metadata for this item IMetadataOf Metadata { get; } Property Value IMetadataOf A typed Metadata provider for this Entity Remarks The metadata is either already prepared, from the same app, or from a remote app Title Gets the \"official\" Title-Attribute IAttribute<T> IAttribute Title { get; } Property Value IAttribute The title of this Entity. The field used is determined in the IContentType. If you need a string, use GetBestTitle() instead. Version version of this entity in the repository int Version { get; } Property Value int The version number. Methods Children(string, string) Get all the children IEntity items - optionally only of a specific field and/or type List<IEntity> Children(string field = null, string type = null) Parameters field string Optional field name to access type string Optional type to filter for Returns List<IEntity> List of children, or empty list if not found Get(string) Get a value typed as object from this entity. [PublicApi] object Get(string name) Parameters name string the field/attribute name Returns object Remarks Introduced as beta in 15.06, published in v17 If you want to supply a fallback it will automatically use the generic version of this method Get(string, NoParamOrder, string, string[]) Get a value typed as object from this entity. [PublicApi] object Get(string name, NoParamOrder noParamOrder = default, string language = null, string[] languages = null) Parameters name string the field/attribute name noParamOrder NoParamOrder see Convention: Named Parameters language string optional language like en-us languages string[] optional list of language IDs which can be a list which is checked in the order provided Returns object Remarks Introduced as beta in 15.06, published in v17 If you want to supply a fallback it will automatically use the generic version of this method GetBestTitle() Best way to get the current entities title. The field used is determined in the IContentType. If you need the attribute-object, use the Title instead. string GetBestTitle() Returns string The entity title as a string. GetBestTitle(string[]) Best way to get the current entities title string GetBestTitle(string[] dimensions) Parameters dimensions string[] Array of dimensions/languages to use in the lookup Returns string The entity title as a string Get<TValue>(string) Get a value in the expected type from this entity. [PublicApi] TValue Get<TValue>(string name) Parameters name string the field/attribute name Returns TValue Type Parameters TValue The type to try-convert the result to Remarks Introduced as beta in 15.06, published in v17 If you want to supply a fallback it will automatically use the other version of this method Get<TValue>(string, NoParamOrder, TValue, string, string[]) Get a value in the expected type from this entity - or a fallback value instead. [PublicApi] TValue Get<TValue>(string name, NoParamOrder noParamOrder = default, TValue fallback = default, string language = null, string[] languages = null) Parameters name string the field/attribute name noParamOrder NoParamOrder see Convention: Named Parameters fallback TValue value to be returned if finding or conversion it didn't succeed language string optional language like en-us languages string[] optional list of language IDs which can be a list which is checked in the order provided Returns TValue Type Parameters TValue The type to try-convert the result to Remarks Introduced as beta in 15.06, published in v17 If you want to supply a fallback it will automatically use the generic version of this method Parents(string, string) Get all the parent IEntity items - optionally only of a specific type and/or referenced in a specific field List<IEntity> Parents(string type = null, string field = null) Parameters type string The type name to filter for field string The field name where a parent references this item Returns List<IEntity> List of children, or empty list if not found Value(string) Get the value of this field as an object. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. object Value(string fieldName) Parameters fieldName string Returns object The value or null if not found Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc. Value<T>(string) Get the value of this field in a type-safe way. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. T Value<T>(string fieldName) Parameters fieldName string Returns T The typed value or the (default) value - so a null for strings, false for boolean etc. Type Parameters T The type, usually string, int, bool, etc. Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc."
  },
  "api/dot-net/ToSic.Eav.Data.IEntityLight.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityLight.html",
    "title": "Interface IEntityLight | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IEntityLight Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEntityLight : IAppIdentityLight Inherited Members IAppIdentityLight.AppId Properties Created Gets the Created DateTime DateTime Created { get; } Property Value DateTime A date-time object. EntityGuid Gets the EntityGuid Guid EntityGuid { get; } Property Value Guid The GUID of the Entity EntityId Gets the EntityId int EntityId { get; } Property Value int The internal EntityId - usually for reference in the DB, but not quite always (like when this is a draft entity). MetadataFor Information which is relevant if this current entity is actually mapped to something else. If it is mapped, then it's describing another thing, which is identified in this MetadataFor. ITarget MetadataFor { get; } Property Value ITarget A ToSic.Eav.Metadata.ITarget object describing the target. Modified Gets the Last Modified DateTime DateTime Modified { get; } Property Value DateTime A date-time object. Owner Owner of this entity string Owner { get; } Property Value string A string identifying the owner. Uses special encoding to work with various user-ID providers. OwnerId Owner of this entity - as an int-ID int OwnerId { get; } Property Value int This is based on the Owner but will only return the ID Remarks Added in v15.03 Relationships Relationship-helper object, important to navigate to children and parents IEntityRelationships Relationships { get; } Property Value IEntityRelationships The IEntityRelationships in charge of relationships for this Entity. Type Gets the ContentType of this Entity IContentType Type { get; } Property Value IContentType The content-type object."
  },
  "api/dot-net/ToSic.Eav.Data.IEntityRelationships.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityRelationships.html",
    "title": "Interface IEntityRelationships | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IEntityRelationships Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Manages relationships of an entity - to its children and parents. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEntityRelationships Properties AllChildren Get all Child Entities IEnumerable<IEntity> AllChildren { get; } Property Value IEnumerable<IEntity> List of all Entities referenced by this Entity. AllParents Get all Parent Entities IEnumerable<IEntity> AllParents { get; } Property Value IEnumerable<IEntity> List of all Entities referencing this Entity. Methods FindChildren(string, string, ILog) Find the children with optional criteria. List<IEntity> FindChildren(string field = null, string type = null, ILog log = null) Parameters field string Get only the children of a specific field type string Restrict the results to a specific ContentType log ILog Optional logger, to debug what happens internally Returns List<IEntity> Always returns a list - empty or containing results FindParents(string, string, ILog) Find the parents with optional criteria. List<IEntity> FindParents(string type = null, string field = null, ILog log = null) Parameters type string Restrict the results to a specific ContentType field string Get only the children of a specific field log ILog Optional logger, to debug what happens internally Returns List<IEntity> Always returns a list - empty or containing results"
  },
  "api/dot-net/ToSic.Eav.Data.IHasDecorators-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IHasDecorators-1.html",
    "title": "Interface IHasDecorators<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHasDecorators<T> Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll This marks objects which carry additional decorator information [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Marks objects which have decorator information\")] public interface IHasDecorators<T> Type Parameters T Properties Decorators IEnumerable<IDecorator<T>> Decorators { get; } Property Value IEnumerable<IDecorator<T>>"
  },
  "api/dot-net/ToSic.Eav.Data.ILanguage.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ILanguage.html",
    "title": "Interface ILanguage | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILanguage Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents a Language Dimension. It's identical to an IDimension for now. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ILanguage : IDimension Inherited Members IDimension.DimensionId IDimension.Key IDimension.ReadOnly"
  },
  "api/dot-net/ToSic.Eav.Data.IRelationshipManager.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IRelationshipManager.html",
    "title": "Interface IRelationshipManager | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IRelationshipManager Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Manages relationships of an entity - to it's children and parents. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IRelationshipManager Properties AllChildren Get all Child Entities IEnumerable<IEntity> AllChildren { get; } Property Value IEnumerable<IEntity> List of all Entities referenced by this Entity. AllParents Get all Parent Entities IEnumerable<IEntity> AllParents { get; } Property Value IEnumerable<IEntity> List of all Entities referencing this Entity. Methods FindChildren(string, string, ILog) Find the children with optional criteria. List<IEntity> FindChildren(string field = null, string type = null, ILog log = null) Parameters field string Get only the children of a specific field type string Restrict the results to a specific ContentType log ILog Optional logger, to debug what happens internally Returns List<IEntity> Always returns a list - empty or containing results FindParents(string, string, ILog) Find the parents with optional criteria. List<IEntity> FindParents(string type = null, string field = null, ILog log = null) Parameters type string Restrict the results to a specific ContentType field string Get only the children of a specific field log ILog Optional logger, to debug what happens internally Returns List<IEntity> Always returns a list - empty or containing results"
  },
  "api/dot-net/ToSic.Eav.Data.IValue-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValue-1.html",
    "title": "Interface IValue<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IValue<T> Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents a Value with a specific type (string, decimal, etc.). [PublicApi] public interface IValue<out T> : IValue Type Parameters T Type of the actual Value Inherited Members IValue.Languages Properties TypedContents Typed contents of the value T TypedContents { get; } Property Value T"
  },
  "api/dot-net/ToSic.Eav.Data.IValue.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValue.html",
    "title": "Interface IValue | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IValue Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. [PublicApi] public interface IValue Properties Languages Gets the Language (ILanguage) assigned to this Value. Can be one or many. IEnumerable<ILanguage> Languages { get; } Property Value IEnumerable<ILanguage> Remarks This was an IList up until 15.04. Since it's very internal, we felt safe to change it to immutable"
  },
  "api/dot-net/ToSic.Eav.Data.IValueConverter.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValueConverter.html",
    "title": "Interface IValueConverter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IValueConverter Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Marks objects that can convert values - like \"file:22\" to \"/images/logo.jpg\" and back. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IValueConverter Methods ToReference(string) Resolve a value to a reference which is managed by the environment string ToReference(string value) Parameters value string the full value, like \"image/logo.jpg\" Returns string The reference, like \"file:22\". ToValue(string, Guid) Resolve a reference to a value using the environment resolver string ToValue(string reference, Guid itemGuid = default) Parameters reference string Reference code (or something else) - if not a code, will not resolve itemGuid Guid Guid of the item/entity which was using the reference. The Guid is used when security setting only allow resolving within the own item. This ensures that external requests cannot just number through all possible IDs. If you use Guid.Empty or don't supply it, it will usually work, except on systems where the security has been extra-hardened. Returns string The value, like the url."
  },
  "api/dot-net/ToSic.Eav.Data.Raw.IHasRawEntity-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Raw.IHasRawEntity-1.html",
    "title": "Interface IHasRawEntity<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHasRawEntity<T> Namespace ToSic.Eav.Data.Raw Assembly ToSic.Eav.Core.dll Marks objects which are not ToSic.Eav.Data.Raw.IRawEntity but can provide one for automatic conversion. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP for DataSources\")] public interface IHasRawEntity<out T> where T : IRawEntity Type Parameters T Remarks Added in 15.04 Properties RawEntity T RawEntity { get; } Property Value T"
  },
  "api/dot-net/ToSic.Eav.Data.Raw.RawConvertOptions.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Raw.RawConvertOptions.html",
    "title": "Class RawConvertOptions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class RawConvertOptions Namespace ToSic.Eav.Data.Raw Assembly ToSic.Eav.Core.dll Options which may be needed to create new IEntitys from ToSic.Eav.Data.Raw.IRawEntity. [PublicApi] public class RawConvertOptions Inheritance object RawConvertOptions Remarks Added in 15.04 Constructors RawConvertOptions(NoParamOrder, IEnumerable<string>) public RawConvertOptions(NoParamOrder noParamOrder = default, IEnumerable<string> addKeys = null) Parameters noParamOrder NoParamOrder addKeys IEnumerable<string> Properties KeysToAdd List of keys to add. These are keys which would not be added by default, either because they take computing resources or because they are often not needed. This should happen at the RawEntity-level which generates the dictionary as it's more efficient. public ImmutableHashSet<string> KeysToAdd { get; } Property Value ImmutableHashSet<string> Methods ShouldAddKey(string) public bool ShouldAddKey(string key) Parameters key string Returns bool"
  },
  "api/dot-net/ToSic.Eav.Data.Raw.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Raw.html",
    "title": "Namespace ToSic.Eav.Data.Raw | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Data.Raw Classes RawConvertOptions Options which may be needed to create new IEntitys from ToSic.Eav.Data.Raw.IRawEntity. Interfaces IHasRawEntity<T> Marks objects which are not ToSic.Eav.Data.Raw.IRawEntity but can provide one for automatic conversion."
  },
  "api/dot-net/ToSic.Eav.Data.ValueTypes.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ValueTypes.html",
    "title": "Enum ValueTypes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum ValueTypes Namespace ToSic.Eav.Data Assembly ToSic.Eav.Core.dll Value / Attribute Type List [PublicApi] public enum ValueTypes Fields Boolean = 1 Boolean Value Type Custom = 8 Custom data-type - for custom serialization, will store string DateTime = 2 DateTime Value Type Empty = 7 Empty for titles etc. Entity = 3 Entity Value Type Hyperlink = 4 Hyperlink Value Type Json = 9 Json data-type, will usually have various help to ensure that dynamic code is optimized Number = 5 Number Value Type Object = 10 Object Value Type, e.g. from an external DataSource String = 6 String Value Type Undefined = 0 Used for unknown cases, where you would otherwise use null"
  },
  "api/dot-net/ToSic.Eav.Data.html": {
    "href": "api/dot-net/ToSic.Eav.Data.html",
    "title": "Namespace ToSic.Eav.Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Data The EAV Data system underlying 2sxc is the core data management system, in charge of Entities and such. For long term stability, we only use interfaces in the API. To better understand this stuff, best read about the Understanding Data.... In most cases you only care about the IEntity interface and things below that. Namespaces ToSic.Eav.Data.Build ToSic.Eav.Data.Raw Interfaces IAttribute Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. IAttributeBase Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) IAttribute<T> Represents an Attribute (Property), but strongly typed IContentType Represents a Content Type information (the schema) used for IEntity objects. IContentTypeAttribute Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType IConvertEntity<T> Convert an entity into another format IConvert<TFrom, TTo> Interface which converts one type into another, or a list of that type into a list of the resulting type. Commonly used to convert entities to dictionaries etc. IDecorator This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing IDecorator<T> This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing IDimension Represents a Dimension to assign values to. Dimensions are usually languages (ILanguage), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. IEntity The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. We recommend you read about the Understanding Data... IEntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity. IEntityRelationships Manages relationships of an entity - to its children and parents. IHasDecorators<T> This marks objects which carry additional decorator information ILanguage Represents a Language Dimension. It's identical to an IDimension for now. IValue Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. IValueConverter Marks objects that can convert values - like \"file:22\" to \"/images/logo.jpg\" and back. IValue<T> Represents a Value with a specific type (string, decimal, etc.). Enums ValueTypes Value / Attribute Type List"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntity.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntity.html",
    "title": "Class EavLightEntity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class EavLightEntity Namespace ToSic.Eav.DataFormats.EavLight Assembly ToSic.Eav.ImportExport.dll DTO for the most basic JSON format of EAV. It's a simple dictionary with name-value pairs. It is for export/serialization only, there is no official way to re-import an entity of this type. It is only meant to hold values of one language. Note that keys are always InvariantCultureIgnoreCase [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Internal DTO objects are documented for better understanding, but can change with time. You usually will not need them in your code. \")] public class EavLightEntity : Dictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IDictionary, ICollection, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable Inheritance object Dictionary<string, object> EavLightEntity Implements IDictionary<string, object> ICollection<KeyValuePair<string, object>> IDictionary ICollection IReadOnlyDictionary<string, object> IReadOnlyCollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable Inherited Members Dictionary<string, object>.Add(string, object) Dictionary<string, object>.Clear() Dictionary<string, object>.ContainsKey(string) Dictionary<string, object>.ContainsValue(object) Dictionary<string, object>.GetEnumerator() Dictionary<string, object>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<string, object>.OnDeserialization(object) Dictionary<string, object>.Remove(string) Dictionary<string, object>.TryGetValue(string, out object) Dictionary<string, object>.Comparer Dictionary<string, object>.Count Dictionary<string, object>.Keys Dictionary<string, object>.Values Dictionary<string, object>.this[string] Remarks Introduced ca. 2sxc 4.0 just as a Dictionary, but for the documentation we created an own IJsonEntity type in 2sxc 12.05 Constructors EavLightEntity() DTO for the most basic JSON format of EAV. It's a simple dictionary with name-value pairs. It is for export/serialization only, there is no official way to re-import an entity of this type. It is only meant to hold values of one language. Note that keys are always InvariantCultureIgnoreCase public EavLightEntity() Remarks Introduced ca. 2sxc 4.0 just as a Dictionary, but for the documentation we created an own IJsonEntity type in 2sxc 12.05"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntityReference.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntityReference.html",
    "title": "Class EavLightEntityReference | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class EavLightEntityReference Namespace ToSic.Eav.DataFormats.EavLight Assembly ToSic.Eav.ImportExport.dll DTO for a relationship pointer to other entities. Used in preparing Entities for Basic-JSON serialization. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"DTO objects are only publicly documented but can change with time. You usually will not need them in your code. \")] public class EavLightEntityReference Inheritance object EavLightEntityReference Fields Guid [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public Guid? Guid Field Value Guid? Id [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? Id Field Value int? Title [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string Title Field Value string"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.IConvertToEavLight.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.IConvertToEavLight.html",
    "title": "Interface IConvertToEavLight | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IConvertToEavLight Namespace ToSic.Eav.DataFormats.EavLight Assembly ToSic.Eav.WebApi.dll Helper / Service to prepare Entities, Streams and DataSources to ToSic.Eav.DataFormats.EavLight for automatic serialization in WebApis. It can prepare single items like IEntity and ToSic.Eav.Data.IEntityWrapper like DynamicEntities. It can also prepare IEnumerable/List of these types, as well as DataStream and DataSource objects. In Custom Code / Razor / WebApi you can get this service with Dependency Injection like var converter = GetService<IConvertToEavLight>(); [PublicApi] public interface IConvertToEavLight : IConvertEntity<EavLightEntity>, IConvert<IEntity, EavLightEntity>, IConvert<IEntityWrapper, EavLightEntity>, IConvert<object, EavLightEntity>, IHasLog Inherited Members IConvertEntity<EavLightEntity>.Languages IConvert<IEntity, EavLightEntity>.Convert(IEnumerable<IEntity>) IConvert<IEntity, EavLightEntity>.Convert(IEntity) IConvert<IEntityWrapper, EavLightEntity>.Convert(IEnumerable<IEntityWrapper>) IConvert<IEntityWrapper, EavLightEntity>.Convert(IEntityWrapper) IConvert<object, EavLightEntity>.Convert(IEnumerable<object>) IConvert<object, EavLightEntity>.Convert(object) IHasLog.Log Remarks We're standardizing how conversions are done using the IConvert<TFrom, TTo> interface. This is why you don't see any methods on this interface in the docs. In most cases you'll just do var prepared = converter.Convert(someEntityObjectOrList); Methods Convert(IEnumerable<object>) IEnumerable<EavLightEntity> Convert(IEnumerable<object> list) Parameters list IEnumerable<dynamic> Returns IEnumerable<EavLightEntity> Convert(IEnumerable<IEntityWrapper>) IEnumerable<EavLightEntity> Convert(IEnumerable<IEntityWrapper> list) Parameters list IEnumerable<IEntityWrapper> Returns IEnumerable<EavLightEntity> Convert(IEnumerable<IEntity>) IEnumerable<EavLightEntity> Convert(IEnumerable<IEntity> entities) Parameters entities IEnumerable<IEntity> Returns IEnumerable<EavLightEntity> Convert(object) EavLightEntity Convert(object item) Parameters item object Returns EavLightEntity Convert(IEntity) EavLightEntity Convert(IEntity entity) Parameters entity IEntity Returns EavLightEntity Convert(IEntityWrapper) EavLightEntity Convert(IEntityWrapper item) Parameters item IEntityWrapper Returns EavLightEntity Convert(IDataSource, IEnumerable<string>) IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource source, IEnumerable<string> streams = null) Parameters source IDataSource streams IEnumerable<string> Returns IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource, IEnumerable<string>, string[]) IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource source, IEnumerable<string> streams, string[] filterGuids) Parameters source IDataSource streams IEnumerable<string> filterGuids string[] Returns IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource, string) IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource source, string streams) Parameters source IDataSource streams string Returns IDictionary<string, IEnumerable<EavLightEntity>>"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.html",
    "title": "Namespace ToSic.Eav.DataFormats.EavLight | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.DataFormats.EavLight The ToSic.Eav.Formats Namespace contain DTO-style objects which are meant for transferring or import/export of data. Most of the formats are currently not publicly documented, as they can still change a bit. Note that the formats themselves are more like DTO objects, so they can be serialized to JSON, XML or other future data formats. EavLight The EAV Light data format is very trivial, basically a dictionary with values. It's mainly used to serialize entities for use in JS etc. Internally it's used for some admin-dialogs, and custom Razor and Web-APIs usually use this to provide one or more entities for direct use - either as inline-JSON or to then automatically serialize. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Classes EavLightEntity DTO for the most basic JSON format of EAV. It's a simple dictionary with name-value pairs. It is for export/serialization only, there is no official way to re-import an entity of this type. It is only meant to hold values of one language. Note that keys are always InvariantCultureIgnoreCase EavLightEntityReference DTO for a relationship pointer to other entities. Used in preparing Entities for Basic-JSON serialization. Interfaces IConvertToEavLight Helper / Service to prepare Entities, Streams and DataSources to ToSic.Eav.DataFormats.EavLight for automatic serialization in WebApis. It can prepare single items like IEntity and ToSic.Eav.Data.IEntityWrapper like DynamicEntities. It can also prepare IEnumerable/List of these types, as well as DataStream and DataSource objects. In Custom Code / Razor / WebApi you can get this service with Dependency Injection like var converter = GetService<IConvertToEavLight>();"
  },
  "api/dot-net/ToSic.Eav.DataSource.ConfigurationAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.ConfigurationAttribute.html",
    "title": "Class ConfigurationAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ConfigurationAttribute Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll Marks an attribute of a DataSource as a Configuration attribute. This means that the internal system which loads configurations from a config-entity will automatically retrieve the value as specified. Note that Usage [ConfigurationData] - simple case, just get it from configuration, no fallback [ConfigurationData(Fallback = True)] [PublicApi] [AttributeUsage(AttributeTargets.Property)] public class ConfigurationAttribute : Attribute Inheritance object Attribute ConfigurationAttribute Remarks New in v16. Constructors ConfigurationAttribute() Default, empty constructor. All properties must be added in a named fashion to ensure long-term API consistency. public ConfigurationAttribute() Properties CacheRelevant Determine if the configuration is cache relevant. It usually is. But anything that doesn't change the output should be set to false, to avoid cache bloat. public bool CacheRelevant { get; set; } Property Value bool Fallback The fallback value to use, if code/configuration don't give this another value. Note that internally it will be converted to a string, because Tokens work that way. public object Fallback { get; set; } Property Value object Field Optional field name to use, if you must override the default. The default is that it uses the same name as the property, and this is highly recommended. You should only set the field, if you are renaming the property and it must still get data from old configurations. public string Field { get; set; } Property Value string Token The Token is the most complicated way to create a field mask. You should normally not use this It must have the full syntax inside [...]. Examples: [Source:Key] [Source:Key|format] [Source:Key||Fallback] [Source:Key|format|Fallback] [Source:Key||[SubSource:SubKey||FinalFallback]] etc. public string Token { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSource.CustomDataSource.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.CustomDataSource.html",
    "title": "Class CustomDataSource | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CustomDataSource Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll Very lightweight DataSource base for data sources which are very simple and convention based. [PublicApi] public class CustomDataSource : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced CustomDataSource Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Derived Apps ContentTypes Features Licenses Scopes Sites Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Constructors CustomDataSource(MyServices, string) Constructor for creating a Custom DataSource. protected CustomDataSource(CustomDataSource.MyServices services, string logName = null) Parameters services CustomDataSource.MyServices All the needed services - see Convention: MyServices logName string Optional name for logging such as My.JsonDS Properties Immutable Every new DataSource based on this is immutable. public override bool Immutable { get; } Property Value bool Methods GetDefault() protected virtual IEnumerable<IRawEntity> GetDefault() Returns IEnumerable<IRawEntity> ProvideOut(Func<object>, NoParamOrder, string, Func<DataFactoryOptions>) Provide data on the Out of this DataSource. This is a very generic version which takes any function that generates a list of something. Internally it will try to detect what the data was and convert it to the final format. Note that the source must create a list (IEnumerable) of any of the following (all items must have the same type): IEntity ToSic.Eav.Data.Raw.IRawEntity IHasRawEntity<T> If you know what data type you're creating, you should look at the other ProvideOut* methods. protected void ProvideOut(Func<object> data, NoParamOrder noParamOrder = default, string name = \"Default\", Func<DataFactoryOptions> options = null) Parameters data Func<object> noParamOrder NoParamOrder see Convention: Named Parameters name string optional name of the out-stream. options Func<DataFactoryOptions> Conversion options which are relevant for ToSic.Eav.Data.Raw.IRawEntity data"
  },
  "api/dot-net/ToSic.Eav.DataSource.CustomDataSourceAdvanced.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.CustomDataSourceAdvanced.html",
    "title": "Class CustomDataSourceAdvanced | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CustomDataSourceAdvanced Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. [PublicApi] public abstract class CustomDataSourceAdvanced : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Derived CustomDataSource Csv DataTable Sql AppAssets Pages UserRoles Users DnnUserProfile Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Constructors CustomDataSourceAdvanced(MyServices, string, object[]) Initializes an DataSource which will usually provide/generate external data. protected CustomDataSourceAdvanced(CustomDataSourceAdvanced.MyServices services, string logName = null, object[] connect = null) Parameters services CustomDataSourceAdvanced.MyServices Dependencies needed by this data source and/or the parent logName string The log name/identifier for insights logging. Optional, but makes debugging a bit easier when provided. connect object[] Remarks set the cache creation date to the moment the object is constructed this is important, because the date should stay fixed throughout the lifetime of this object but renew when it is updates CustomDataSourceAdvanced(MyServicesBase<MyServices>, string) protected CustomDataSourceAdvanced(MyServicesBase<CustomDataSourceAdvanced.MyServices> services, string logName = null) Parameters services MyServicesBase<CustomDataSourceAdvanced.MyServices> logName string Properties CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. public override long CacheTimestamp { get; } Property Value long A timestamp as a long number DataFactory [PublicApi] protected IDataFactory DataFactory { get; } Property Value IDataFactory"
  },
  "api/dot-net/ToSic.Eav.DataSource.DataSourceBase.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.DataSourceBase.html",
    "title": "Class DataSourceBase | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataSourceBase Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Just FYI for people who need to know more about the internal APIs\")] public abstract class DataSourceBase : ServiceBase<DataSourceBase.MyServices>, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Derived CustomDataSourceAdvanced App AppRoot AttributeFilter AttributeRename CacheAllStreams EntityIdFilter EntityTypeFilter Error ItemFilterDuplicates LanguageModeler OwnerFilter Paging PassThrough PublishingFilter QueryRun RelationshipFilter Serialization Shuffle StreamFallback StreamMerge StreamPick Attributes MetadataTargetTypes QueryInfo SystemStack Zones TreeModeler ValueFilter ValueSort CmsBlock Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties AppId The app id as used internally public virtual int AppId { get; protected set; } Property Value int The App ID this thing belongs to CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. public virtual long CacheTimestamp { get; } Property Value long A timestamp as a long number Configuration The configuration system of this data source. Keeps track of all values which the data source will need, and manages the LookUp engine which provides these values. public IDataSourceConfiguration Configuration { get; } Property Value IDataSourceConfiguration Error Special helper to generate error-streams. DataSources should never throw exceptions but instead return a stream containing the error information. [PublicApi] public DataSourceErrorHelper Error { get; } Property Value DataSourceErrorHelper Guid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. public Guid Guid { get; } Property Value Guid The guid of this data source which identifies the configuration IEntity of the data source. Immutable Information if the DataSource is Immutable. Reason is that starting in v15, everything should become immutable. So setting parameters or attaching other sources will not be possible any more after initial creation. But because a lot of code is still out there which assumes mutable objects, this is set depending on how the DataSource was created. Newer APIs will result in Immutable DataSources, while older APIs will get you a mutable DataSource. See Convention: Everything is Immutable. [InternalApi_DoNotUse_MayChangeWithoutNotice] public virtual bool Immutable { get; } Property Value bool Remarks New in 15.06 In List of all In connections. [PublicApi] public virtual IReadOnlyDictionary<string, IDataStream> In { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive this[string] Gets the Out-Stream with specified Name. public IDataStream this[string outName] { get; } Parameters outName string Property Value IDataStream an IDataStream of the desired name Exceptions NullReferenceException if the stream does not exist Link A link - or possibly many. In most cases, this references the parent object which provides this/these links. public virtual IDataSourceLink Link { get; } Property Value IDataSourceLink List The items in the data-source - to be exact, the ones in the Default stream. [PublicApi] public IEnumerable<IEntity> List { get; } Property Value IEnumerable<IEntity> A list of IEntity items in the Default stream. Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. [PublicApi] public virtual IReadOnlyDictionary<string, IDataStream> Out { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive ZoneId ID of the zone (EAV Tenant) public virtual int ZoneId { get; protected set; } Property Value int The zone ID this thing belongs to Methods Attach(string, IDataSource, string) Add a single named stream to the In [PublicApi] public void Attach(string streamName, IDataSource dataSource, string sourceName = \"Default\") Parameters streamName string In-name of the stream dataSource IDataSource The data source - will use it's default out sourceName string The stream name on the source, will default to \"Default\" Attach(string, IDataStream) Add a single named stream to the In [PublicApi] public void Attach(string streamName, IDataStream dataStream) Parameters streamName string In-name of the stream dataStream IDataStream The data stream to attach Attach(IDataSource) Attach a DataSource to In - replaces all existing in-streams. [PublicApi] public void Attach(IDataSource dataSource) Parameters dataSource IDataSource DataSource to attach CacheChanged(long) Detect if the cache has newer data. It's called using the TimeStamp of the dependent object which may still have old data. public virtual bool CacheChanged(long dependentTimeStamp) Parameters dependentTimeStamp long New time stamp of a dependent object, which could have an older timestamp. Returns bool True if the timestamps differ, false if it's the same Remarks This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. GetStream(string, NoParamOrder, bool, bool) Gets the Out-Stream with specified Name and allowing some error handling if not found. [PublicApi] public IDataStream GetStream(string name = null, NoParamOrder noParamOrder = default, bool nullIfNotFound = false, bool emptyIfNotFound = false) Parameters name string The desired stream name. If empty, will default to the default stream. noParamOrder NoParamOrder see Convention: Named Parameters nullIfNotFound bool In case the stream name isn't found, will return null. Ideal for chaining with ?? emptyIfNotFound bool In case the stream name isn't found, will return an empty stream. Ideal for using LINQ directly. Returns IDataStream an IDataStream of the desired name Remarks Added in 2sxc 12.05 for more in-depth checking if a stream exists, you can access the Out which is an IDictionary Exceptions NullReferenceException if the stream does not exist and nullIfNotFound is false ProvideOut(Func<IEnumerable<IEntity>>, string) Provide a function to get the data which this DataSource offers. This is the more generic IEnumerable implementation. We recommend using the IImmutableList overload as it allows the system to optimize more. [PublicApi] protected void ProvideOut(Func<IEnumerable<IEntity>> getList, string name = \"Default\") Parameters getList Func<IEnumerable<IEntity>> The function which will get the list. name string (optional) stream name, defaults to Default ProvideOut(Func<IImmutableList<IEntity>>, string) Provide a function to get the data which this DataSource offers. This is the ImmutableList implementation, which is recommended. [PublicApi] protected void ProvideOut(Func<IImmutableList<IEntity>> getList, string name = \"Default\") Parameters getList Func<IImmutableList<IEntity>> The function which will get the list. name string (optional) stream name, defaults to Default TryGetIn(string) Get a specific Stream from In. If it doesn't exist return false and place the error message in the list for returning to the caller. Usage usually like this in your GetList() function: private IImmutableList<IEntity> GetList() { var source = TryGetIn(); if (source is null) return Error.TryGetInFailed(this); var result = source.Where(s => ...).ToImmutableList(); return result; } Or if you're using Call Logging do something like this: private IImmutableList<IEntity> GetList() => Log.Func(l => { var source = TryGetIn(); if (source is null) return (Error.TryGetInFailed(this), \"error\"); var result = source.Where(s => ...).ToImmutableList(); return (result, $\"ok - found: {result.Count}\"); }); [PublicApi] protected IImmutableList<IEntity> TryGetIn(string name = \"Default\") Parameters name string Stream name - optional Returns IImmutableList<IEntity> A list containing the data, or null if not found / something breaks. Remarks Introduced in 2sxc 15.04 TryGetOut(string) Try get an out-stream. protected IImmutableList<IEntity> TryGetOut(string name = \"Default\") Parameters name string Returns IImmutableList<IEntity> Remarks Introduced in 2sxc 16.01"
  },
  "api/dot-net/ToSic.Eav.DataSource.DataSourceConstants.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.DataSourceConstants.html",
    "title": "Class DataSourceConstants | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataSourceConstants Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll Various constants typically used in/for DataSources. [PublicApi] public class DataSourceConstants Inheritance object DataSourceConstants Remarks History Created ca. v10 Accidentally marked private in 16.09 Re-published in 19.01 Fields InStreamDefaultRequired Marker for specifying that the Default In stream is required on the VisualQueryAttribute. [PublicApi] public const string InStreamDefaultRequired = \"Default*\" Field Value string InStreamRequiredSuffix Use this in the In stream names array of the VisualQueryAttribute to mark an in-stream as being required. [PublicApi] public const string InStreamRequiredSuffix = \"*\" Field Value string MyConfigurationSourceName Correct prefix to use when retrieving a value from the current data sources configuration entity. Always use this variable, don't ever write the name as a string, as it could change in the future. public const string MyConfigurationSourceName = \"MyConfiguration\" Field Value string ParamsSourceName The source name to get query parameters. Usually used in tokens like [Params:MyParamKey] [PublicApi] public const string ParamsSourceName = \"Params\" Field Value string StreamDefaultName Default In-/Out-Stream Name public const string StreamDefaultName = \"Default\" Field Value string StreamFallbackName Very common stream name for fallback streams. public const string StreamFallbackName = \"Fallback\" Field Value string"
  },
  "api/dot-net/ToSic.Eav.DataSource.DataSourceErrorHelper.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.DataSourceErrorHelper.html",
    "title": "Class DataSourceErrorHelper | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataSourceErrorHelper Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll An Errors-helper which is automatically available on all DataSourceBase objects. It helps create a stream of standardized error entities. [PublicApi] public class DataSourceErrorHelper Inheritance object DataSourceErrorHelper Remarks Constructor - to find out if it's used anywhere Constructors DataSourceErrorHelper(DataBuilder) An Errors-helper which is automatically available on all DataSourceBase objects. It helps create a stream of standardized error entities. public DataSourceErrorHelper(DataBuilder builder) Parameters builder DataBuilder Remarks Constructor - to find out if it's used anywhere Methods Create(NoParamOrder, string, string, Exception, IDataSource, string) Create a stream containing an error entity. public IImmutableList<IEntity> Create(NoParamOrder noParamOrder = default, string title = null, string message = null, Exception exception = null, IDataSource source = null, string streamName = \"Default\") Parameters noParamOrder NoParamOrder see Convention: Named Parameters title string Error title message string Error message exception Exception Exception (if there was an exception) source IDataSource The DataSource which created this error. If provided, will allow the message to contain more details. streamName string The stream name. If provided, will allow the message to contain more details. Returns IImmutableList<IEntity> TryGetInFailed(NoParamOrder, IDataSource, string) Create a stream of items showing a detailed error why an In stream was not found. public IImmutableList<IEntity> TryGetInFailed(NoParamOrder noParamOrder = default, IDataSource source = null, string name = \"Default\") Parameters noParamOrder NoParamOrder see Convention: Named Parameters source IDataSource name string Name of the stream. Returns IImmutableList<IEntity> Remarks Added v16.00 TryGetOutFailed(NoParamOrder, IDataSource, string) Create a stream of items showing a detailed error why an Out stream was not found. public IImmutableList<IEntity> TryGetOutFailed(NoParamOrder noParamOrder = default, IDataSource source = null, string name = \"Default\") Parameters noParamOrder NoParamOrder see Convention: Named Parameters source IDataSource name string Name of the stream. Returns IImmutableList<IEntity> Remarks Added v16.01"
  },
  "api/dot-net/ToSic.Eav.DataSource.IDataSource.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.IDataSource.html",
    "title": "Interface IDataSource | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataSource Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll Public interface for an Eav DataSource. All DataSource objects are based on this. [PublicApi] public interface IDataSource : IDataSourceLinkable, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog Inherited Members IDataSourceLinkable.Link IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheExpiring.CacheChanged(long) ITimestamped.CacheTimestamp IHasLog.Log Properties Configuration The configuration system of this data source. Keeps track of all values which the data source will need, and manages the LookUp engine which provides these values. IDataSourceConfiguration Configuration { get; } Property Value IDataSourceConfiguration Error Special helper to generate error-streams. DataSources should never throw exceptions but instead return a stream containing the error information. DataSourceErrorHelper Error { get; } Property Value DataSourceErrorHelper Immutable Information if the DataSource is Immutable. Reason is that starting in v15, everything should become immutable. So setting parameters or attaching other sources will not be possible any more after initial creation. But because a lot of code is still out there which assumes mutable objects, this is set depending on how the DataSource was created. Newer APIs will result in Immutable DataSources, while older APIs will get you a mutable DataSource. See Convention: Everything is Immutable. bool Immutable { get; } Property Value bool Remarks New in 15.06 In List of all In connections. IReadOnlyDictionary<string, IDataStream> In { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive this[string] Gets the Out-Stream with specified Name. IDataStream this[string outName] { get; } Parameters outName string Property Value IDataStream an IDataStream of the desired name Exceptions NullReferenceException if the stream does not exist List The items in the data-source - to be exact, the ones in the Default stream. IEnumerable<IEntity> List { get; } Property Value IEnumerable<IEntity> A list of IEntity items in the Default stream. Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. IReadOnlyDictionary<string, IDataStream> Out { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive Methods GetStream(string, NoParamOrder, bool, bool) Gets the Out-Stream with specified Name and allowing some error handling if not found. IDataStream GetStream(string name = null, NoParamOrder noParamOrder = default, bool nullIfNotFound = false, bool emptyIfNotFound = false) Parameters name string The desired stream name. If empty, will default to the default stream. noParamOrder NoParamOrder see Convention: Named Parameters nullIfNotFound bool In case the stream name isn't found, will return null. Ideal for chaining with ?? emptyIfNotFound bool In case the stream name isn't found, will return an empty stream. Ideal for using LINQ directly. Returns IDataStream an IDataStream of the desired name Remarks Added in 2sxc 12.05 for more in-depth checking if a stream exists, you can access the Out which is an IDictionary Exceptions NullReferenceException if the stream does not exist and nullIfNotFound is false"
  },
  "api/dot-net/ToSic.Eav.DataSource.IDataSourceConfiguration.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.IDataSourceConfiguration.html",
    "title": "Interface IDataSourceConfiguration | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataSourceConfiguration Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll This helps a data source get configured. It manages all the properties which the data source will want to look up, as well as the LookUp engine which will perform the token resolution [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IDataSourceConfiguration Properties IsParsed Tell us if the values have already been parsed or not. Ideal to check / avoid multiple calls to parse, which would just slow the system down. bool IsParsed { get; } Property Value bool Values The values (and keys) used in the data source which owns this Configuration IReadOnlyDictionary<string, string> Values { get; } Property Value IReadOnlyDictionary<string, string> Methods Get(string) string Get(string name) Parameters name string Returns string GetThis(string) Get a configuration value for a specific property. Just use GetThis() and the method name (which is the key) is added automatically by the compiler. string GetThis(string name = null) Parameters name string The configuration key. Do not set this; it's auto-added by the compiler. Returns string Remarks Added in v15.04 GetThis<T>(T, string) Get a configuration value for a specific property, or the fallback. Just use GetThis(5) and the method name (which is the key) is added automatically by the compiler. T GetThis<T>(T fallback, string name = null) Parameters fallback T Fallback value if the configuration is missing or can't be parsed into the expected data format. name string The configuration key. Do not set this; it's auto-added by the compiler. Returns T The configuration value or the fallback. Type Parameters T The data type of the result. Usually optional, because the fallback has this type so it's auto detected. Remarks Added in v15.04 Get<TValue>(string) Get a configuration as a typed (converted) value. It's usually better to use the overload which also provides a fallback. TValue Get<TValue>(string name) Parameters name string Returns TValue Type Parameters TValue Get<TValue>(string, NoParamOrder, TValue) Get a typed value but return the fallback if not found or if the conversion fails. TValue Get<TValue>(string name, NoParamOrder noParamOrder = default, TValue fallback = default) Parameters name string Name of the configuration noParamOrder NoParamOrder see Convention: Named Parameters fallback TValue Fallback value if the configuration is missing or can't be parsed into the expected data format. Returns TValue Type Parameters TValue Parse() Parse the values and change them so placeholders in the values are now the resolved value. This can only be called once - then the placeholder are gone. In scenarios where multiple parses are required, use the Parse(IDictionary) overload. void Parse() Parse(IDictionary<string, string>) This will parse a dictionary of values and return the result. It's used to resolve the values list without actually changing the values on the configuration object, in scenarios where multiple parses will be required. IDictionary<string, string> Parse(IDictionary<string, string> values) Parameters values IDictionary<string, string> Returns IDictionary<string, string>"
  },
  "api/dot-net/ToSic.Eav.DataSource.IDataSourceLink.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.IDataSourceLink.html",
    "title": "Interface IDataSourceLink | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataSourceLink Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll WIP interface to create one or many sources which can be attached when creating a new sources [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IDataSourceLink : IDataSourceLinkable Inherited Members IDataSourceLinkable.Link Methods Add(params IDataSourceLinkable[]) Add one or more Links to this link for use when attaching to this and more sources in one step. IDataSourceLink Add(params IDataSourceLinkable[] more) Parameters more IDataSourceLinkable[] Returns IDataSourceLink Rename(string, string, string) Rename aspects of the current link. IDataSourceLink Rename(string name = null, string outName = null, string inName = null) Parameters name string If provided, will rename both out and in outName string Rename the out-stream - rarely used since you would usually get the link from the correct Out by default inName string Rename the in-stream Returns IDataSourceLink"
  },
  "api/dot-net/ToSic.Eav.DataSource.IDataSourceLinkable.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.IDataSourceLinkable.html",
    "title": "Interface IDataSourceLinkable | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataSourceLinkable Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll This interface marks objects which can provide links to DataSources. In most cases, the link references the data source itself. The returned link will point to one or more DataSources, and can be extended to contain more links. This is important to connect DataSources together. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IDataSourceLinkable Remarks The name may be a bit misleading, it could also be IHasDataSourceLink. But because it's visible a lot in public APIs where one or many links could be provided, we believe this is the best name for this use case. Properties Link A link - or possibly many. In most cases, this references the parent object which provides this/these links. IDataSourceLink Link { get; } Property Value IDataSourceLink"
  },
  "api/dot-net/ToSic.Eav.DataSource.IDataStream.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.IDataStream.html",
    "title": "Interface IDataStream | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataStream Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. [PublicApi] public interface IDataStream : IEnumerable<IEntity>, IEnumerable, IDataSourceLinkable Inherited Members IEnumerable<IEntity>.GetEnumerator() IDataSourceLinkable.Link Properties List The list of items in this stream. IMPORTANT: This is actually an Immutable List - so you can read it but not change it. IEnumerable<IEntity> List { get; } Property Value IEnumerable<IEntity> An IEnumerable<T> of IEntity items. Name Name of this Stream string Name { get; } Property Value string The name - which would be used in the Source to get the same stream again. Source Underlying IDataSource providing the IEntity of this stream IDataSource Source { get; } Property Value IDataSource The underlying IDataSource"
  },
  "api/dot-net/ToSic.Eav.DataSource.IQuery.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.IQuery.html",
    "title": "Interface IQuery | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IQuery Namespace ToSic.Eav.DataSource Assembly ToSic.Eav.DataSources.dll Marks a special IDataSource which is a query. It has an underlying ToSic.Eav.DataSource.Internal.Query.QueryDefinition and Params which can be modified by code before running the query. [PublicApi] public interface IQuery : IDataSource, IDataSourceLinkable, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog Inherited Members IDataSource.Out IDataSource.this[string] IDataSource.GetStream(string, NoParamOrder, bool, bool) IDataSource.List IDataSource.In IDataSource.Configuration IDataSource.Error IDataSource.Immutable IDataSourceLinkable.Link IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheExpiring.CacheChanged(long) ITimestamped.CacheTimestamp IHasLog.Log Properties Definition The underlying definition for the current query so you can check what's inside. QueryDefinition Definition { get; } Property Value QueryDefinition Methods Params() Get the current list of params. IDictionary<string, string> Params() Returns IDictionary<string, string> The list of params as they are configured in this moment. Params(IDictionary<string, string>) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. void Params(IDictionary<string, string> values) Parameters values IDictionary<string, string> dictionary with values Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. Params(string) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. void Params(string list) Parameters list string list of key=value on many lines Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. Params(string, object) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Takes any value object and will simply ToString() it. void Params(string key, object value) Parameters key string Key - the part used in [Params:key] value object The value it will resolve to. Can also be another token. Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. History: Added in v15 Params(string, string) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. void Params(string key, string value) Parameters key string Key - the part used in [Params:key] value string The value it will resolve to. Can also be another token. Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first."
  },
  "api/dot-net/ToSic.Eav.DataSource.VisualQuery.Audience.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.VisualQuery.Audience.html",
    "title": "Enum Audience | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum Audience Namespace ToSic.Eav.DataSource.VisualQuery Assembly ToSic.Eav.DataSources.dll Marks a DataSource to be for a specific audience - Default or Advanced. Used to hide advanced data sources in the Visual Query editor. [PublicApi] public enum Audience Fields Advanced = 200 Advanced audience - this will be hidden to most normal users in Visual Query Default = 100 Default audience - nothing special configured"
  },
  "api/dot-net/ToSic.Eav.DataSource.VisualQuery.DataSourceType.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.VisualQuery.DataSourceType.html",
    "title": "Enum DataSourceType | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum DataSourceType Namespace ToSic.Eav.DataSource.VisualQuery Assembly ToSic.Eav.DataSources.dll Describes what a DataSource is for in the visual query (for logical grouping) [PublicApi] public enum DataSourceType Fields App = 0 DataSources of Type App only exist on the app. Cache = 1 Debug = 10 Filter = 2 Logic = 3 Lookup = 4 Modify = 5 Security = 6 Sort = 7 Source = 8 System = 11 Target = 9"
  },
  "api/dot-net/ToSic.Eav.DataSource.VisualQuery.VisualQueryAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.VisualQuery.VisualQueryAttribute.html",
    "title": "Class VisualQueryAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class VisualQueryAttribute Namespace ToSic.Eav.DataSource.VisualQuery Assembly ToSic.Eav.DataSources.dll Custom Attribute for DataSources and use in the VisualQuery Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool. Read more here: DataSource API: VisualQuery Attribute [PublicApi] [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface)] public class VisualQueryAttribute : Attribute, IHasIdentityNameId Inheritance object Attribute VisualQueryAttribute Implements IHasIdentityNameId Fields OutModeDynamic public const string OutModeDynamic = \"dynamic\" Field Value string OutModeMirrorIn public const string OutModeMirrorIn = \"mirror-in\" Field Value string OutModeStatic public const string OutModeStatic = \"static\" Field Value string Properties Audience This marks the audience of a DataSource. Specifically it allows hiding advanced DataSources from users who don't need them. public Audience Audience { get; set; } Property Value Audience Remarks Previously hidden/unofficial and called Difficulty. Made public and renamed to Audience in v15.03 ConfigurationType Name of the content-type used to configure this data-source in the visual-query designer. The UI will then open an edit-dialog for this content type. Should be a GUID. public string ConfigurationType { get; set; } Property Value string Remarks Older data sources have a name like \"|Config ToSic.Eav.DataSources.App\", but that's deprecated DynamicIn public bool DynamicIn { get; set; } Property Value bool DynamicOut Determine if this data sources can have many out-streams with custom names. Default is false. public bool DynamicOut { get; set; } Property Value bool True if this data source can also provide other named out-streams, false if it only has the defined list of out-streams. HelpLink The help-link to get help for this data source. The UI will offer a help-button if provided. public string HelpLink { get; set; } Property Value string Icon Optional custom icon, based on the icon-names from the Material Icons library. public string Icon { get; set; } Property Value string In List of in-streams expected by this data-source - will be shown in the UI. Default is empty []. public string[] In { get; set; } Property Value string[] NameId required this should be a unique id, ideally a GUID. public string NameId { get; set; } Property Value string Remarks important: old code use string names like a.net namespace. This should not be done any more and will be deprecated in future. Was renamed in 15.04 from GlobalName to the new NameId convention. NameIds Names this DataSource may have had previously. This was introduced when we standardized the names, and still had historic data using old names or old namespaces. public string[] NameIds { get; set; } Property Value string[] Remarks Was renamed in 15.04 to NameIds from PreviousNames NiceName Nice name shown in the UI If not specified, the UI will use the normal name instead. May contain spaces, slashes etc. public string NiceName { get; set; } Property Value string OutMode Provide more options for the Out-Mode, like \"mirror-in\" public string OutMode { get; set; } Property Value string Remarks Experimental ca. v20 Type A primary type of this source, which determines a default icon + some standard help-text public DataSourceType Type { get; set; } Property Value DataSourceType The type, from the DataSourceType enum UiHint A hint to help the user better understand what this does - in case the nice name isn't enough. public string UiHint { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSource.VisualQuery.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.VisualQuery.html",
    "title": "Namespace ToSic.Eav.DataSource.VisualQuery | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.DataSource.VisualQuery Classes VisualQueryAttribute Custom Attribute for DataSources and use in the VisualQuery Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool. Read more here: DataSource API: VisualQuery Attribute Enums Audience Marks a DataSource to be for a specific audience - Default or Advanced. Used to hide advanced data sources in the Visual Query editor. DataSourceType Describes what a DataSource is for in the visual query (for logical grouping)"
  },
  "api/dot-net/ToSic.Eav.DataSource.html": {
    "href": "api/dot-net/ToSic.Eav.DataSource.html",
    "title": "Namespace ToSic.Eav.DataSource | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.DataSource Namespaces ToSic.Eav.DataSource.VisualQuery Classes ConfigurationAttribute Marks an attribute of a DataSource as a Configuration attribute. This means that the internal system which loads configurations from a config-entity will automatically retrieve the value as specified. Note that Usage [ConfigurationData] - simple case, just get it from configuration, no fallback [ConfigurationData(Fallback = True)] CustomDataSource Very lightweight DataSource base for data sources which are very simple and convention based. CustomDataSourceAdvanced The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. DataSourceBase The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. DataSourceConstants Various constants typically used in/for DataSources. DataSourceErrorHelper An Errors-helper which is automatically available on all DataSourceBase objects. It helps create a stream of standardized error entities. Interfaces IDataSource Public interface for an Eav DataSource. All DataSource objects are based on this. IDataSourceConfiguration This helps a data source get configured. It manages all the properties which the data source will want to look up, as well as the LookUp engine which will perform the token resolution IDataSourceLink WIP interface to create one or many sources which can be attached when creating a new sources IDataSourceLinkable This interface marks objects which can provide links to DataSources. In most cases, the link references the data source itself. The returned link will point to one or more DataSources, and can be extended to contain more links. This is important to connect DataSources together. IDataStream Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. IQuery Marks a special IDataSource which is a query. It has an underlying ToSic.Eav.DataSource.Internal.Query.QueryDefinition and Params which can be modified by code before running the query."
  },
  "api/dot-net/ToSic.Eav.DataSources.App.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.App.html",
    "title": "Class App | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class App Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll All the data inside an App. For example, it has a variable amount of Out-streams, one for each content-type in the app. The App DataSource is part of the Standard EAV Data Sources. It provides all items of the current App or of another App if needed. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. In its initial state, the Default out stream will deliver all Entities of all Content-Types which you can then filter. \uD83D\uDD11 However, you can rename that or create more; the out-connections will automatically filter to the name of the matching content types, which looks like this: There are three common use cases: 1. Using App With The Current App You can either just use it without any In stream, then it will just deliver the published items. This is because without an In, the App will automatically build an In providing published only. If you do provide any kind of in, it will use that as the source. So if you provide a Publishing-Source on the in, which will cause the App DataSource to differ the result based on the user who is looking at it. So editors would see unpublished as well: 2. Using App with Other App The App-DataSource can also be configured to deliver data from another app. For this, to configure and set the ZoneId and AppId: You can also deliver data from different Apps by using multiple App sources: Programming With The App DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Important: to access data of the current App, please use the App.Data as it's a pre-build object with the same streams. For example, use App.Data[\"BlogPost\"] to get all the BlogPost items. An example code @{ var blog = CreateSource<ToSic.Eav.DataSources.App>(); blog.ZoneSwitch = 2; // go to Zone 2 blog.AppSwitch = 403; // go to App 403 } @foreach(var post in AsList(blog[\"BlogPost\"])) { <div>@post.EntityTitle</div> } The previous example creates an App source to the zone 2, app 403 and retrieves all items of type BlogPost to show in a loop. Important When Coding Note that data sources only retrieve data once, and then ignore any further configuration. So you must set Zone/App before accessing the data. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Razor examples using App.Data Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in ca. 2sxc 6.x API Documentation [PublicApi] [VisualQuery(NiceName = \"App\", UiHint = \"All data in an app with streams for type\", Icon = \"table_chart\", Type = DataSourceType.Source, NameId = \"ToSic.Eav.DataSources.App, ToSic.Eav.DataSources\", DynamicOut = true, In = new string[] { \"Default\" }, ConfigurationType = \"|Config ToSic.Eav.DataSources.App\", HelpLink = \"https://go.2sxc.org/DsApp\")] public class App : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase App Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Properties AppReader protected IAppReader AppReader { get; } Property Value IAppReader AppSwitch Use this to re-target the app-source to another app. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. [Configuration(Fallback = 0)] public int AppSwitch { get; set; } Property Value int Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. public override IReadOnlyDictionary<string, IDataStream> Out { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive ZoneSwitch Use this to re-target the app-source to another zone. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. [Configuration(Fallback = 0)] public int ZoneSwitch { get; set; } Property Value int"
  },
  "api/dot-net/ToSic.Eav.DataSources.AppRoot.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AppRoot.html",
    "title": "Class AppRoot | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AppRoot Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The App Root is the entry point for all data. It takes its data from a hidden AppState Cache. It's implemented as a DataSource so that other DataSources can easily attach to it. This is also the object returned as the root in any query. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class AppRoot : DataSourceBase, IAppRoot, IDataSource, IDataSourceLinkable, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase AppRoot Implements IAppRoot IDataSource IDataSourceLinkable IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.Configuration DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Properties CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. public override long CacheTimestamp { get; } Property Value long A timestamp as a long number Link A link - or possibly many. In most cases, this references the parent object which provides this/these links. public override IDataSourceLink Link { get; } Property Value IDataSourceLink Methods CacheChanged(long) Detect if the cache has newer data. It's called using the TimeStamp of the dependent object which may still have old data. public override bool CacheChanged(long dependentTimeStamp) Parameters dependentTimeStamp long New time stamp of a dependent object, which could have an older timestamp. Returns bool True if the timestamps differ, false if it's the same Remarks This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object."
  },
  "api/dot-net/ToSic.Eav.DataSources.AttributeFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AttributeFilter.html",
    "title": "Class AttributeFilter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AttributeFilter Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The AttributeFilter DataSource is part of the Standard EAV Data Sources. It removes values from items so that the result is smaller, and doesn't publish confidential data. It's primarily used when providing data as JSON, so that not all values are published. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. Now you can configure what properties you want and not. The following shows a demo which delivers both the data as-is, and also filtered to only deliver Name and Country: This is what you get on the default-case (unfiltered): \"Default\": [ { \"Name\": \"2sic\", \"Country\": \"Switzerland\", \"Notes\": \"<p>Secret notes</p>\", \"Categories\": [ { \"Id\": 38646, \"Title\": \"Second\" } ], \"Id\": 38653, \"Guid\": \"46a46d9e-f572-413c-a42e-a82ac40d929d\", \"Title\": \"2sic\", \"Modified\": \"2017-11-06T22:38:00.15Z\" }, ... ] This is what you get on the filtered stream: \"Cleaned\": [ { \"Name\": \"2sic\", \"Country\": \"Switzerland\", \"Id\": 38653, \"Guid\": \"46a46d9e-f572-413c-a42e-a82ac40d929d\", \"Title\": \"2sic\", \"Modified\": \"2017-11-06T22:38:00.15Z\" }, ... ] As you can see, the secret Notes and the Categories are not in the Cleaned stream any more. There are three common use cases: Programming With The Attribute Filter We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ca. v6 API Documentation [PublicApi] [VisualQuery(NiceName = \"Remove Attribute/Property\", UiHint = \"Remove attributes/properties to limit what is available\", Icon = \"delete_sweep\", Type = DataSourceType.Modify, NameId = \"ToSic.Eav.DataSources.AttributeFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"|Config ToSic.Eav.DataSources.AttributeFilter\", HelpLink = \"https://go.2sxc.org/DsAttributeFilter\")] public class AttributeFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase AttributeFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties AttributeNames A string containing one or more attribute names. like \"FirstName\" or \"FirstName,LastName,Birthday\" [Configuration] public string AttributeNames { get; set; } Property Value string Mode A string containing one or more attribute names. like \"FirstName\" or \"FirstName,LastName,Birthday\" [Configuration(Fallback = \"+\")] public string Mode { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.AttributeRename.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AttributeRename.html",
    "title": "Class AttributeRename | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AttributeRename Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. TODO: update the standard list with attribute rename and the StreamSwitch one I made last week The AttributeRename DataSource is part of the Standard EAV Data Sources. It renames attributes from items so that the result has more appropriate field/property names. Optionally it will also remove all fields which have not been renamed, in case you only want the smaller, renamed items. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. Now you can configure what properties you want and not. In this screenshot you can see: The DataSource which we're configuring The field map renaming fields Toggle to keep attributes which were not renamed - default is True The optional type name which you can give the modified entities - default is blank, resulting in the original type being used Programming With The AttributeRename DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV / 2sxc 10.27 API Documentation [PublicApi] [VisualQuery(NiceName = \"Rename Attribute/Property\", UiHint = \"Rename some attributes / properties\", Icon = \"edit_attributes\", Type = DataSourceType.Modify, NameId = \"ToSic.Eav.DataSources.AttributeRename, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"c5918cb8-d35a-48c7-9380-a437edde66d2\", HelpLink = \"https://go.2sxc.org/DsAttributeRename\")] public class AttributeRename : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase AttributeRename Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties AttributeMap A string containing one or more attribute maps. The syntax is \"NewName=OldName\" - one mapping per line [Configuration] public string AttributeMap { get; set; } Property Value string KeepOtherAttributes True/false if attributes not renamed should be preserved. [Configuration(Fallback = true)] public bool KeepOtherAttributes { get; set; } Property Value bool TypeName A string containing one or more attribute maps. The syntax is \"NewName=OldName\" - one mapping per line [Configuration] public string TypeName { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.CacheAllStreams.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.CacheAllStreams.html",
    "title": "Class CacheAllStreams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CacheAllStreams Namespace ToSic.Eav.DataSources.Caching Assembly ToSic.Eav.DataSources.dll Special DataSource which automatically caches everything it's given. It's Used to optimize queries, so that heavier calculations don't need to be repeated if another request with the same signature is used. Internally it asks all up-stream DataSources what factors would determine their caching. So if part of the supplying DataSources would have a changed parameter (like a different filter), it will still run the full query and cache the results again. [VisualQuery(NiceName = \"Cache Streams\", UiHint = \"Cache all streams based on some rules\", Icon = \"history_toggle_off\", Type = DataSourceType.Cache, NameId = \"ToSic.Eav.DataSources.Caching.CacheAllStreams, ToSic.Eav.DataSources\", DynamicIn = true, DynamicOut = true, OutMode = \"mirror-in\", ConfigurationType = \"|Config ToSic.Eav.DataSources.Caches.CacheAllStreams\", NameIds = new string[] { \"ToSic.Eav.DataSources.Caches.CacheAllStreams, ToSic.Eav.DataSources\" }, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-CacheAllStreams\")] [PublicApi] public class CacheAllStreams : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CacheAllStreams Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Changed in v15.05 to use the immutable convention note that the above change is actually a breaking change, but since this is such an advanced DataSource, we assume it's not used in dynamic code. Properties CacheDurationInSeconds How long to keep these streams in the cache. Default is 0 - meaning fall back to 1 day [Configuration(Fallback = 0, CacheRelevant = false)] public int CacheDurationInSeconds { get; } Property Value int CacheErrorDurationInSeconds Special cache duration for streams returning an error. Default to 0. Possible values: 0 cache for 3 times as-long-as-it-takes to generate source data (delay retry on slow source) -1 don't cache at all and retry immediately any other number: cache longer, e.g. if the source needs long to generate. [Configuration(Fallback = 0, CacheRelevant = false)] public int CacheErrorDurationInSeconds { get; } Property Value int Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. public override IReadOnlyDictionary<string, IDataStream> Out { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive RefreshOnSourceRefresh If a source-refresh should trigger a cache rebuild [Configuration(Fallback = true, CacheRelevant = false)] public bool RefreshOnSourceRefresh { get; } Property Value bool"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.html",
    "title": "Namespace ToSic.Eav.DataSources.Caching | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.DataSources.Caching DataSources need various kinds of caching mechanisms, like... to cache the AppState once loaded to cache resulting streams in a cpu intensive query The Caching system is in charge of all this, and will also take care of clearing caches as well as updating downstream caches if an underlying source has been updated. History Introduced in 2sxc 04.00 Classes CacheAllStreams Special DataSource which automatically caches everything it's given. It's Used to optimize queries, so that heavier calculations don't need to be repeated if another request with the same signature is used. Internally it asks all up-stream DataSources what factors would determine their caching. So if part of the supplying DataSources would have a changed parameter (like a different filter), it will still run the full query and cache the results again."
  },
  "api/dot-net/ToSic.Eav.DataSources.Children.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Children.html",
    "title": "Class Children | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Children Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Get Children Entities (child-relationships) of the Entities coming into this DataSource [VisualQuery(NiceName = \"Children\", UiHint = \"Get the item's children\", Icon = \"escalator_warning\", Type = DataSourceType.Lookup, NameId = \"9f8de7ee-d1aa-4055-9bf9-8f183259cb05\", In = new string[] { \"Default*\" }, DynamicOut = false, ConfigurationType = \"832cd470-49f2-4909-a08a-77644457713e\", HelpLink = \"https://go.2sxc.org/DsChildren\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class Children : RelationshipDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase RelationshipDataSourceBase Children Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Constructors Children(MyServices, IContextResolverUserPermissions) Get Children Entities (child-relationships) of the Entities coming into this DataSource public Children(DataSourceBase.MyServices services, IContextResolverUserPermissions userPermissions) Parameters services DataSourceBase.MyServices userPermissions IContextResolverUserPermissions Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Properties ContentTypeName Name of the content-type to get. If specified, would only keep the children of this content-type. Can usually be left empty (recommended). public override string ContentTypeName { get; } Property Value string FieldName Name of the field pointing to the children. If left blank, will use get all children. public override string FieldName { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Csv.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Csv.html",
    "title": "Class Csv | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Csv Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll DataSource for importing/reading CSV files. The CSV DataSource is part of the Standard EAV Data Sources. It will load data from a CSV file which is usually located in the App folder (but can also be in ADAM). These docs are not complete, check out the feature description for now. History Introduced in 2sxc 7.2 API Documentation [PublicApi] [VisualQuery(NiceName = \"CSV Data\", UiHint = \"Load data from a CSV file\", Icon = \"description\", Type = DataSourceType.Source, NameId = \"ToSic.Eav.DataSources.CsvDataSource, ToSic.Eav.DataSources\", DynamicOut = false, ConfigurationType = \"|Config ToSic.Eav.DataSources.CsvDataSource\", HelpLink = \"https://go.2sxc.org/DsCsv\")] public class Csv : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced Csv Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Renamed from CsvDataSource to Csv in v15.06 for consistency. Believe this should not affect anybody. Properties ContentType Name of the content type which the imported entities have. This is fake, but may be necessary for later filtering of the types. Defaults to \"CSV\" [Configuration(Fallback = \"CSV\")] public string ContentType { get; set; } Property Value string Remarks Before v15.03 it defaulted to \"Anonymous\" Delimiter Delimiter character in the CSV, usually a ',' or ';' but could also be a tab or something. Default is tab. [Configuration(Fallback = \"\\t\")] public string Delimiter { get; set; } Property Value string FilePath Path to the CSV file, relative to the website root [Configuration] public string FilePath { get; set; } Property Value string IdColumnName Column in the CSV which contains the ID. [Configuration] public string IdColumnName { get; set; } Property Value string TitleColumnName The CSV column containing the title of the item - for dropdowns etc. and the EntityTitle property. [Configuration] public string TitleColumnName { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.DataTable.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.DataTable.html",
    "title": "Class DataTable | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataTable Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. [PublicApi] public class DataTable : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced DataTable Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Properties ContentType Name of the ContentType. Defaults to Data [Configuration(Fallback = \"Data\")] public string ContentType { get; set; } Property Value string Remarks in v15 changed default name to Data, previously was just empty. EntityIdField Name of the Column used as EntityId [Configuration(Fallback = \"entityid\")] public string EntityIdField { get; set; } Property Value string ModifiedField Name of the field which would contain a modified timestamp (date/time) [Configuration] public string ModifiedField { get; set; } Property Value string Source Source DataTable public DataTable Source { get; set; } Property Value DataTable TitleField Name of the Title Attribute of the Source DataTable [Configuration(Fallback = \"entitytitle\")] public string TitleField { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.EntityIdFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.EntityIdFilter.html",
    "title": "Class EntityIdFilter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class EntityIdFilter Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The ItemIdFilter DataSource is part of the Standard EAV Data Sources. It will only return the items with the id specified. Warning: You should always use it in combination with a Content-Type filter, as you want to be sure nobody can just crawl any entity you have in your system! How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: You can also use multiple values: Or URL-parameters: Programming With The ItemIdFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Item Id Filter\", UiHint = \"Find items based on one or more IDs\", Icon = \"fingerprint\", Type = DataSourceType.Filter, NameId = \"ToSic.Eav.DataSources.EntityIdFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"|Config ToSic.Eav.DataSources.EntityIdFilter\", HelpLink = \"https://go.2sxc.org/DsIdFilter\")] public class EntityIdFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase EntityIdFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties EntityIds A string containing one or more entity-ids. like \"27\" or \"27,40,3063,30306\" [Configuration] public string EntityIds { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.EntityTypeFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.EntityTypeFilter.html",
    "title": "Class EntityTypeFilter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class EntityTypeFilter Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Data Source: ContentType EntityType Filter Note this data source used to be called EntityTypeFilter, we renamed it in 2sxc 9.8 for consistency The ContentTypeFilter DataSource is part of the Standard EAV Data Sources. It will only let items pass through, which are of a specific type. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. In the settings you'll specify the type-name. The resulting query will usually be a bit like this: The above example shows: a two content-type filters, each filtering a different type Programming With The ContentTypeFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Type-Filter\", UiHint = \"Only keep items of the specified type\", Icon = \"alt_route\", Type = DataSourceType.Filter, NameId = \"ToSic.Eav.DataSources.EntityTypeFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"|Config ToSic.Eav.DataSources.EntityTypeFilter\", HelpLink = \"https://go.2sxc.org/DsTypeFilter\")] public class EntityTypeFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase EntityTypeFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties TypeName The name of the type to filter for. Either the normal name or the 'StaticName' which is usually a GUID. [Configuration] public string TypeName { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Error.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Error.html",
    "title": "Class Error | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Error Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Internal DataSource to generate an error on purpose. This is to test / verify error handling in VisualQuery. See also VisualQuery 3: Debugging [VisualQuery(NiceName = \"Error DataSource\", UiHint = \"Generate an error - primarily for debugging\", Icon = \"warning\", Type = DataSourceType.Debug, Audience = Audience.Advanced, NameId = \"e19ee6c4-5209-4c3d-8ae1-f4cbcf875c0a\")] [PublicApi] public class Error : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase Error Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks In advanced programming scenarios you can also use this DataSource instead of another one to provide a stream of errors. Constructors Error(MyServices) Constructor to tell the system what out-streams we have. In this case it's just the \"Default\" containing a fake exception. public Error(DataSourceBase.MyServices services) Parameters services DataSourceBase.MyServices Properties DelaySeconds Delay the result by this many seconds. Meant for testing scenarios where the error needs time - like waiting for a connection timeout. [Configuration(Fallback = 0, CacheRelevant = false)] public int DelaySeconds { get; } Property Value int Message The error message. Defaults to \"Demo message of the Error DataSource\" public string Message { get; set; } Property Value string Title The error title. Defaults to \"Demo Error\" public string Title { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.IAppRoot.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IAppRoot.html",
    "title": "Interface IAppRoot | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppRoot Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Interface for the App Root - usually the very first node in any data-delivery or query. It's just like a normal IDataSource but will internally access the ToSic.Eav.Apps.IAppReader from the Cache/>. [VisualQuery(NiceName = \"App Root Cache\", UiHint = \"All App data from the Cache\", Icon = \"table_chart\", Type = DataSourceType.Source, Audience = Audience.Advanced, NameId = \"ToSic.Eav.DataSources.IAppRoot, ToSic.Eav.DataSources\", NameIds = new string[] { \"ToSic.Eav.DataSources.Caches.ICache, ToSic.Eav.DataSources\", \"ToSic.Eav.DataSources.Caching.IRootCache, ToSic.Eav.DataSources\" }, HelpLink = \"https://go.2sxc.org/DsAppRoot\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppRoot : IDataSource, IDataSourceLinkable, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog Inherited Members IDataSource.Out IDataSource.this[string] IDataSource.GetStream(string, NoParamOrder, bool, bool) IDataSource.List IDataSource.In IDataSource.Configuration IDataSource.Error IDataSource.Immutable IDataSourceLinkable.Link IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheExpiring.CacheChanged(long) ITimestamped.CacheTimestamp IHasLog.Log"
  },
  "api/dot-net/ToSic.Eav.DataSources.ItemFilterDuplicates.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ItemFilterDuplicates.html",
    "title": "Class ItemFilterDuplicates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ItemFilterDuplicates Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The ItemFilterDuplicates DataSource is part of the Standard EAV Data Sources. It will provide two streams, one with all the items (but without the duplicates) and one with all the duplicates, in case you need these. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows two filters finding items and delivering them on the same stream. Because 1 item would have been delivered 2x (2sic is in Switzerland), the default-stream now only contains each item once, and the duplicates can also be retrieved from the Duplicates stream if needed. Example Using StreamMerge A common scenario will also combine this using the StreamMerge. It's demonstrated there. No Settings The ItemFilterDuplicates DataSource has no settings to configure. Note that it will automatically merge the streams in A-Z order of the In-Stream names. Programming With The ItemFilterDuplicates DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc 9.10 API Documentation [PublicApi] [VisualQuery(NiceName = \"Filter duplicates\", UiHint = \"Remove items which occur multiple times\", Icon = \"filter_1\", Type = DataSourceType.Logic, NameId = \"ToSic.Eav.DataSources.ItemFilterDuplicates, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default\" }, HelpLink = \"https://go.2sxc.org/DsFilterDuplicates\")] public sealed class ItemFilterDuplicates : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase ItemFilterDuplicates Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources."
  },
  "api/dot-net/ToSic.Eav.DataSources.LanguageModeler.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.LanguageModeler.html",
    "title": "Class LanguageModeler | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LanguageModeler Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Remodels multi-language values in own fields (like NameDe, NameEn) to single multi-language fields like Name [VisualQuery(NameId = \"f390e460-46ff-4a6e-883f-f50fdeb363ee\", NiceName = \"Language Modeler\", UiHint = \"Combine values to multi-language values\", Icon = \"translate\", NameIds = new string[] { \"f390e460-46ff-4a6e-883f-f50fdeb363ee\", \"ToSic.Eav.DataSources.FieldMapping, ToSic.Eav.DataSources.SharePoint\" }, Type = DataSourceType.Modify, ConfigurationType = \"7b4fce73-9c29-4517-af14-0a704da5b958\", In = new string[] { \"Default*\" }, HelpLink = \"https://go.2sxc.org/DsLanguageModeler\")] [PublicApi(\"Brand new in v11.20, WIP, may still change a bit\")] public sealed class LanguageModeler : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase LanguageModeler Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks New in v11.20 Changed in v15.05 to use the immutable convention Properties FieldMap Contains the field map which configures how fields should be connected. [Configuration] public string FieldMap { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Metadata.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Metadata.html",
    "title": "Class Metadata | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Metadata Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Get Metadata (metadata Entities) of the Entities coming into this DataSource [VisualQuery(NiceName = \"Metadata\", UiHint = \"Get the item's metadata\", Icon = \"local_offer\", Type = DataSourceType.Lookup, NameId = \"3ab4b010-2daa-4a7f-b882-635d2d9fa0a0\", In = new string[] { \"Default*\" }, DynamicOut = false, ConfigurationType = \"d7858b36-1ef1-4c3d-b15c-c567b0d7bdd4\", HelpLink = \"https://go.2sxc.org/DsMetadata\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class Metadata : MetadataDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase MetadataDataSourceBase Metadata Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Constructors Metadata(MyServices) Get Metadata (metadata Entities) of the Entities coming into this DataSource public Metadata(DataSourceBase.MyServices services) Parameters services DataSourceBase.MyServices Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Properties ContentTypeName Optional Type Name restriction to only get Metadata of this Content Type. [Configuration] public override string ContentTypeName { get; } Property Value string Methods SpecificGet(IImmutableList<IEntity>, string) protected override IEnumerable<IEntity> SpecificGet(IImmutableList<IEntity> originals, string typeName) Parameters originals IImmutableList<IEntity> typeName string Returns IEnumerable<IEntity>"
  },
  "api/dot-net/ToSic.Eav.DataSources.MetadataTargets.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.MetadataTargets.html",
    "title": "Class MetadataTargets | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class MetadataTargets Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Get Target Entities (metadata targets) of the Entities coming into this DataSource [VisualQuery(NiceName = \"Metadata Targets\", UiHint = \"Get the item's targets (if they are metadata)\", Icon = \"loyalty\", Type = DataSourceType.Lookup, NameId = \"afaf73d9-775c-4932-aebd-23e898b1643e\", In = new string[] { \"Default*\" }, DynamicOut = false, ConfigurationType = \"7dcd26eb-a70c-4a4f-bb3b-5bd5da304232\", HelpLink = \"https://go.2sxc.org/DsMetadataTargets\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class MetadataTargets : MetadataDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase MetadataDataSourceBase MetadataTargets Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Constructors MetadataTargets(MyServices, IAppReaderFactory, IDataFactory) Get Target Entities (metadata targets) of the Entities coming into this DataSource public MetadataTargets(DataSourceBase.MyServices services, IAppReaderFactory appReaders, IDataFactory dataFactory) Parameters services DataSourceBase.MyServices appReaders IAppReaderFactory dataFactory IDataFactory Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Properties ContentTypeName Optional TypeName restrictions to only get Targets of this Content Type. [Configuration] public override string ContentTypeName { get; } Property Value string FilterDuplicates If it should filter duplicates. Default is true. [Configuration(Fallback = true)] public bool FilterDuplicates { get; } Property Value bool Methods SpecificGet(IImmutableList<IEntity>, string) protected override IEnumerable<IEntity> SpecificGet(IImmutableList<IEntity> originals, string typeName) Parameters originals IImmutableList<IEntity> typeName string Returns IEnumerable<IEntity>"
  },
  "api/dot-net/ToSic.Eav.DataSources.OwnerFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.OwnerFilter.html",
    "title": "Class OwnerFilter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class OwnerFilter Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The OwnerFilter DataSource is part of the Standard EAV Data Sources. It will only let items pass through, which a specific user (often the current one) has created initially. You will typically use the OwnerFilter in scenarios where users create their own data, and should only see/edit items which they own (usually in combination with security settings, which only allow the owner to modify their own items). How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. You must then edit the settings once - and usually you will use the recommended prefilled-form. But you can also do something different. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company an owner-filter which receives 5 items, but only lets 3 pass, because the Test Settings have a demo-value of the user who only created 3 of the 5 items. Programming With The OwnerFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Owner Filter\", UiHint = \"Keep only item owned / created by a specified user\", Icon = \"attribution\", Type = DataSourceType.Security, NameId = \"ToSic.Eav.DataSources.OwnerFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"|Config ToSic.Eav.DataSources.OwnerFilter\", HelpLink = \"https://go.2sxc.org/DsOwnerFilter\")] public class OwnerFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase OwnerFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties Identity The identity of the user to filter by. Uses the Identity-token convention like dnn:1 is the user #1 in the DNN DB [Configuration(Field = \"IdentityCode\")] public string Identity { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Paging.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Paging.html",
    "title": "Class Paging | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Paging Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The Paging DataSource is part of the Standard EAV Data Sources. It will limit the items returned to a page containing just a few items, and will also provide a paging-information so that the UI knows what page it's on and how many pages remain. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company a Paging which only passes on the first 3 companies of page 1 Using Url Parameters for Paging This example shows how you can use the Url Parameter to page through the results: ...you could also set the page size from other tokens like url or app-configuration, like this: Programming With The Paging DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Paging\", UiHint = \"Split data into pages and forward just one batch\", Icon = \"auto_stories\", Type = DataSourceType.Logic, NameId = \"ToSic.Eav.DataSources.Paging, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"|Config ToSic.Eav.DataSources.Paging\", HelpLink = \"https://go.2sxc.org/DsPaging\")] public sealed class Paging : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase Paging Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties PageNumber The Page number to show - defaults to 1 [Configuration(Fallback = 1)] public int PageNumber { get; set; } Property Value int PageSize The Page size in the paging. Defaults to 10. [Configuration(Fallback = 10)] public int PageSize { get; set; } Property Value int"
  },
  "api/dot-net/ToSic.Eav.DataSources.Parents.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Parents.html",
    "title": "Class Parents | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Parents Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Get Parent Entities (parent-relationships) of the Entities coming into this DataSource [VisualQuery(NiceName = \"Parents\", UiHint = \"Get the item's parents\", Icon = \"family_restroom\", Type = DataSourceType.Lookup, NameId = \"915217e5-7957-4303-a19c-a15505f2ad1d\", In = new string[] { \"Default*\" }, DynamicOut = false, ConfigurationType = \"a72cb2f4-52bb-41e6-9281-10e69aeb0310\", HelpLink = \"https://go.2sxc.org/DsParents\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class Parents : RelationshipDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase RelationshipDataSourceBase Parents Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Constructors Parents(MyServices, IContextResolverUserPermissions) Get Parent Entities (parent-relationships) of the Entities coming into this DataSource public Parents(DataSourceBase.MyServices services, IContextResolverUserPermissions userPermissions) Parameters services DataSourceBase.MyServices userPermissions IContextResolverUserPermissions Remarks Added in v12.10 Changed in v15.05 to use the immutable convention Properties ContentTypeName Name of the content-type to get. Will only get parents of the specified type. Example: If a person is referenced by books (as author) as by companies) as employee, then you may want to only find companies referencing this book. public override string ContentTypeName { get; } Property Value string FieldName Name of the field (in the parent) pointing to the child. If left blank, will use get all children. Example: If a person is referenced by books as both Author and Illustrator then leaving this empty will get both relationships, but specifying Author will only get this person if it's the author. public override string FieldName { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.PassThrough.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.PassThrough.html",
    "title": "Class PassThrough | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class PassThrough Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. [PublicApi] [VisualQuery(NiceName = \"Pass-Through\", UiHint = \"Technical DataSource, doesn't do anything\", Icon = \"copy_all\", Type = DataSourceType.Source, Audience = Audience.Advanced, NameId = \"ToSic.Eav.DataSources.PassThrough, ToSic.Eav.DataSources\", DynamicOut = true, OutMode = \"mirror-in\", DynamicIn = true)] public class PassThrough : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase PassThrough Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties Out The Out is the same as the In. public override IReadOnlyDictionary<string, IDataStream> Out { get; } Property Value IReadOnlyDictionary<string, IDataStream>"
  },
  "api/dot-net/ToSic.Eav.DataSources.PublishingFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.PublishingFilter.html",
    "title": "Class PublishingFilter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class PublishingFilter Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The PublishingFilter DataSource is part of the Standard EAV Data Sources. It will hide unpublished items for non-editors and provide these drafts if an editor is viewing the results. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. Here's a picture showing app data with or without publishing filter: Configuring the PublishingFilter DataSource The PublishingFilter has no configuration. How does it work? Since the published/unpublished is a very common query, internally the cache actually already provides different streams for this - and the PublishingFilter simply chooses the stream based on the current permissions. Programming With The PublishingDataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Publishing Filter\", UiHint = \"Keep data based on user roles (editor sees draft items)\", Icon = \"visibility\", Type = DataSourceType.Security, NameId = \"ToSic.Eav.DataSources.PublishingFilter, ToSic.Eav.DataSources\", In = new string[] { \"Published*\", \"Default*\", \"Drafts*\" }, DynamicOut = false, HelpLink = \"https://go.2sxc.org/DsPublishingFilter\")] public class PublishingFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase PublishingFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties ShowDrafts Indicates whether to show drafts or only Published Entities. [Configuration(Fallback = null)] public bool? ShowDrafts { get; set; } Property Value bool?"
  },
  "api/dot-net/ToSic.Eav.DataSources.QueryRun.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.QueryRun.html",
    "title": "Class QueryRun | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class QueryRun Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Run another query and provide the resulting data. The settings will provide the params for the inner query. The QueryRun DataSource is part of the Standard EAV Data Sources. It will run another query and give it parameters if needed. Read more about it here: Sub-Queries: Re-Use Queries in Other Queries How to use with the VisualQuery When using the VisualQuery you can just drag it into your query and set the parameters. History Introduced in 2sxc 10.24 API Documentation [PublicApi] [VisualQuery(NiceName = \"Query Run\", UiHint = \"Get data from another Query\", Icon = \"launch\", Type = DataSourceType.Source, NameId = \"ToSic.Eav.DataSources.QueryRun, ToSic.Eav.DataSources\", DynamicOut = true, ConfigurationType = \"78d25ea6-66cc-44a2-b45d-77749cd9420a\", HelpLink = \"https://go.2sxc.org/QueryRun\")] public class QueryRun : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase QueryRun Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Properties Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. public override IReadOnlyDictionary<string, IDataStream> Out { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive"
  },
  "api/dot-net/ToSic.Eav.DataSources.RelationshipFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.RelationshipFilter.html",
    "title": "Class RelationshipFilter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class RelationshipFilter Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The RelationshipFilter DataSource is part of the Standard EAV Data Sources. It will return only the items which have a relationship to another item - like books having an author, or blog-posts with the tag grunt. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: Using Url Parameters You can of course also use URL parameters for both the value as well as the field: Using the Fallback In case none of the items match the reqiurement, then either no items are returned, or those in the fallback stream: You can find more fallback examples like chaining them in the ValueFilter DataSource Separators for Multiple Criterias (2sxc 9.9+) Until 2sxc 9.8 you could only check for 1 related item, so you could only say \"give me all items which have this one author\". In 2sxc 9.9 we are now able to specify multiple authors, allowing queries like \"give me all items which have all these authors\" or \"give me all items which have any of these authors\". This works using the separation-character, which is usually a comma , but could be something different (in case your items have commas in the texts you're comparing). If you don't specify a separator, none will be used and the whole Filter criteria is treated as one value. Here's where you set it: All Operators (2sxc 9.9+) Untill 2sxc 9.8, you could not specify an operator, and contains was the assumed operator. In 9.9 we added a lot more. To explain what each does, assume that our main stream contains items of BlogPost and we only want to keep the posts having certain Tags. Here's the list, each is explained more below: contains - will return all items (BlogPosts), having all the children (tags) specified containsany - will return all items (BlogPosts) having any of the children (tags) specified not-contains will return all items (BlogPosts) not-having-all of the children (tags). So it will also return those items, having some of the children. not-containsany will return all items (BlogPosts) having none of the children (tags) specified. any will return all items (BlogPosts) having any children at all (tags). So the filter is ignored. This is the same as count=0. not-any will return all items (BlogPosts) having no children (tags). first will return all items (BlogPosts) where the first child (tag) is one of the filter-options. This is for scenarios where you say the first tag is a primary-category or similar. not-first will return all items (BlogPosts) where the first children (tags) is not one of the filter values. count will return all items (BlogPosts) having a specific amount of children (tags) not-count will return all items (BlogPosts) not having a specific amount of children (tags) Filtering On Fields other than Title and ID (9.9+) In 2sxc 9.9 we added the ability to specify which field you want to compare (before it was always Id or Title). Here's an example: Filtering by Relationship-Count (9.9+) In 2sxc 9.9 we added the ability to filter by amount of relationships - so you could say \"give me all blog-posts with exactly 2 tags\": Note: you can also reverse this, so instead of count you can use not-count to get all the items that don't match this requirement. Filtering by Has-Any (9.9+) In 2sxc 9.9 we added the ability to filter by Limitations of the RelationshipFilter Note that as of now (2sxc 9.9) the RelationshipFilter: can only seek child-items Programming With The RelationshipFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? Added AttributeOnRelationship (to compare other fields that title/id) in 2sxc 9.9 Added separator to enable multi-filter in 2sxc 9.9 Added various operators like count, first, containsany, any, not-* in 2sxc 9.9 API Documentation [PublicApi] [VisualQuery(NiceName = \"Relationship Filter\", UiHint = \"Keep items having a relationship matching a criteria\", Icon = \"share\", Type = DataSourceType.Filter, NameId = \"ToSic.Eav.DataSources.RelationshipFilter, ToSic.Eav.DataSources\", In = new string[] { \"Default*\", \"Fallback\" }, DynamicOut = false, ConfigurationType = \"|Config ToSic.Eav.DataSources.RelationshipFilter\", HelpLink = \"https://go.2sxc.org/DsRelationshipFilter\")] public sealed class RelationshipFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase RelationshipFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties ChildOrParent Determines if the relationship we're looking into is a 'child'-relationship (default) or 'parent' relationship. [Configuration(Field = \"Direction\", Fallback = \"child\")] public string ChildOrParent { get; set; } Property Value string CompareAttribute The attribute we're looking into, in this case it would be 'Country' because we're checking what Authors are from Switzerland. [Configuration(Field = \"AttributeOnRelationship\", Fallback = \"entitytitle\")] public string CompareAttribute { get; set; } Property Value string CompareMode Comparison mode. \"default\" and \"contains\" will check if such a relationship is available other modes like \"equals\" or \"exclude\" not implemented [Configuration(Field = \"Comparison\", Fallback = \"contains\")] public string CompareMode { get; set; } Property Value string Filter The filter-value that will be used - for example \"Switzerland\" when looking for authors from there [Configuration] public string Filter { get; set; } Property Value string Relationship Relationship-attribute - in the example this would be 'Author' as we're checking values in related Author items. [Configuration] public string Relationship { get; set; } Property Value string Separator Separator value where we have multiple values / IDs to compare. Default is 'ignore' = no separator [Configuration(Fallback = \"ignore\")] public string Separator { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Serialization.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Serialization.html",
    "title": "Class Serialization | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Serialization Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. [PublicApi] [VisualQuery(NiceName = \"Serialization Configuration\", UiHint = \"Determine how this data is Serialized\", Icon = \"settings_ethernet\", Type = DataSourceType.Modify, NameId = \"2952e680-4aaa-4a12-adf7-325cb2854358\", DynamicOut = true, OutMode = \"mirror-in\", In = new string[] { \"Default\" }, ConfigurationType = \"5c84cd3f-f853-40b3-81cf-dee6a07dc411\", HelpLink = \"https://go.2sxc.org/DsSerializationConfiguration\")] public class Serialization : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase Serialization Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties DropFalseValues todo [Configuration(Field = \"RemoveFalseValues\")] public string DropFalseValues { get; } Property Value string IncludeAppId Should the AppId be included in serialization. Especially for scenarios where data is retrieved from multiple Apps [Configuration] public string IncludeAppId { get; } Property Value string IncludeCreated Should the Created date be included in serialization [Configuration] public string IncludeCreated { get; } Property Value string IncludeGuid Should the GUID be included in serialization [Configuration] public string IncludeGuid { get; } Property Value string IncludeId Should the ID be included in serialization [Configuration] public string IncludeId { get; } Property Value string IncludeMetadata Should the Metadata ID be included in serialization [Configuration] public string IncludeMetadata { get; } Property Value string IncludeMetadataFor Should the Metadata target/for information be included in serialization [Configuration] public string IncludeMetadataFor { get; } Property Value string IncludeMetadataForId Should the Metadata target/for information be included in serialization [Configuration] public string IncludeMetadataForId { get; } Property Value string IncludeMetadataForType Should the Metadata target/for information be included in serialization [Configuration] public string IncludeMetadataForType { get; } Property Value string IncludeMetadataGuid Should the Metadata GUID be included in serialization [Configuration] public string IncludeMetadataGuid { get; } Property Value string IncludeMetadataId Should the Metadata ID be included in serialization [Configuration] public string IncludeMetadataId { get; } Property Value string IncludeMetadataTitle Should the default Title of the Metadata be included as \"Title\" in serialization [Configuration] public string IncludeMetadataTitle { get; } Property Value string IncludeModified Should the Modified date be included in serialization [Configuration] public string IncludeModified { get; } Property Value string IncludeRelationshipGuid Should the Relationship GUID be included in serialization [Configuration] public string IncludeRelationshipGuid { get; } Property Value string IncludeRelationshipId Should the Relationship ID be included in serialization [Configuration] public string IncludeRelationshipId { get; } Property Value string IncludeRelationshipTitle Should the default Title of the Relationship be included as \"Title\" in serialization [Configuration] public string IncludeRelationshipTitle { get; } Property Value string IncludeRelationships Should the Relationships be included in serialization [Configuration] public string IncludeRelationships { get; } Property Value string IncludeRelationshipsAsCsv Should the Relationships be included as CSV like \"42,27,999\". Possible values null or false: they are sub-objects true or \"csv\": they are CSV strings \"array\" return array of ID or GUID [Configuration(Fallback = false)] public string IncludeRelationshipsAsCsv { get; } Property Value string Remarks adding in v15.03 extended purpose in v18.00 to also have \"array\" as possible value IncludeTitle Should the default Title be included as \"Title\" in serialization [Configuration] public string IncludeTitle { get; } Property Value string IncludeTypeAs Values probably empty (default) - don't include \"object\" make an object \"flat\" [Configuration] public string IncludeTypeAs { get; } Property Value string IncludeTypeId [Configuration] public string IncludeTypeId { get; } Property Value string IncludeTypeName [Configuration] public string IncludeTypeName { get; } Property Value string IncludeZoneId Should the AppId be included in serialization. Especially for scenarios where data is retrieved from multiple Apps [Configuration] public string IncludeZoneId { get; } Property Value string Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. public override IReadOnlyDictionary<string, IDataStream> Out { get; } Property Value IReadOnlyDictionary<string, IDataStream> A dictionary of named IDataStream objects, case insensitive RemoveEmptyStrings todo [Configuration(Field = \"RemoveEmptyStringValues\")] public string RemoveEmptyStrings { get; } Property Value string RemoveNullValues todo [Configuration] public string RemoveNullValues { get; } Property Value string RemoveZeroValues todo [Configuration] public string RemoveZeroValues { get; } Property Value string TypePropertyNames [Configuration(Fallback = \"Type\")] public string TypePropertyNames { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Shuffle.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Shuffle.html",
    "title": "Class Shuffle | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Shuffle Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The Shuffle DataSource is part of the Standard EAV Data Sources. It will randomize the order of items which came in. This is common for components which show \"3 random quotes\" and similar scenarios. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company a shuffle which only passes on 3 random companies Programming With The Shuffle DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Shuffle\", UiHint = \"Mix/randomize the order of items\", Icon = \"shuffle\", Type = DataSourceType.Sort, NameId = \"ToSic.Eav.DataSources.Shuffle, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"38e7822b-1049-4539-bb3f-f99949b1b1d1\", HelpLink = \"https://go.2sxc.org/DsShuffle\")] public sealed class Shuffle : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase Shuffle Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties Take Amount of items to take / return when shuffling. Defaults to 0 meaning take-all. [Configuration(Fallback = 0)] public int Take { get; set; } Property Value int"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sql.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sql.html",
    "title": "Class Sql | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Sql Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Provide Entities from a SQL Server The SqlDataSource DataSource is part of the Standard EAV Data Sources. It lets you use data from SQL databases as if they were entities. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. The Default out will contain the items from the DB: We recommend that you rename it so you know what it's for: You can then configure your connection to the DB and Query as you need it: Understanding the Settings Title & Notes This is just for your notes, to remind you what this is for and to put notes about anything you wanted to remember. Connection There are two ways to connect to SQL databases: using a Connection Name (which points to a detailed connection string in the web.config) or using a detailed Connection String as you need it. We recommend to use connection names where possible. If you provide both, the connection name will be used: The SQL-Query The Query section has quite a lot of options, most of which are not required but are important for this to work: Here's what you need to know Content Type all entities must have a type-name - so you can just enter something here - in most cases the exact name isn't important, because you usually don't refer back to this, unless further processing will try to filter this or something EntityId and EntityTitle when using entities in 2sxc / EAV, each entity must be able to supply a title and an ID which is an integer. This is important for internal data processing to work. For this to work with SQL, the source needs to know what data-fields to use for this. By default it will use a field called EntityId and EntityTitle, but you can also use any other field - in which case you must supply the names in the following fields. Using URL Parameters in Queries The SQL DataSource can also use queries which use URL Parameters. It's safe and automatically prevent SQL Injection. For example, you can do the following: SELECT TOP (1000) PortalId as EntityId, HomeDirectory as EntityTitle,PortalID,ExpiryDate, AdministratorRoleId,GUID,HomeDirectory, CreatedOnDate,PortalGroupID FROM [Portals] Where PortalId = [QueryString:Id] This will automatically use the id parameter from the URL to filter the result. Using Another Entity As SQL Parameter You can of course use the In stream to provide entities which configure the SQL. The following example has a content-type SqlSetting with only one item (to make the example easier to understand). The App DataSource delivers this in the AppSetting stream, which also goes into the Sql as AppSetting and is then used as a token in the SQL: Using A Value from a Module-Instance as SQL Parameter This works like in the App-example: Provide the data from the ModuleDataSource as an In stream to the SqlDataSource, and use that to filter: Programming With The SqlDataSource DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. An example code @{ var sql = CreateSource<ToSic.Eav.DataSources.Sql>(); sql.ConnectionString = \"SiteSqlServer\"; // use Dnn sql.SelectCommand = \"Select ... From\"; // your sql here } @foreach(var post in AsList(sql[\"Default\"])) { <div>@post.EntityTitle</div> } Important When Coding Note that data sources only retrieve data once, and then ignore any further configuration. So you must set everything before accessing the data. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"SQL Data\", UiHint = \"Get data from a database using SQL\", Icon = \"dynamic_form\", Type = DataSourceType.Source, NameId = \"ToSic.Eav.DataSources.Sql, ToSic.Eav.DataSources\", DynamicOut = false, ConfigurationType = \"c76901b5-0345-4866-9fa3-6208de7f8543\", NameIds = new string[] { \"ToSic.Eav.DataSources.SqlDataSource, ToSic.Eav.DataSources\" }, HelpLink = \"https://go.2sxc.org/DsSql\")] public class Sql : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced Sql Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Derived DnnSql Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Properties ConnectionString ConnectionString to the DB [Configuration] public string ConnectionString { get; set; } Property Value string ConnectionStringName Name of the ConnectionString in the Application.Config to use [Configuration] public string ConnectionStringName { get; set; } Property Value string ContentType Name of the ContentType which we'll pretend the items have. [Configuration(Fallback = \"SqlData\")] public string ContentType { get; set; } Property Value string EntityIdField Name of the Column used as EntityId [Configuration(Fallback = \"entityid\")] public string EntityIdField { get; set; } Property Value string SelectCommand SQL Command for selecting data. [Configuration] public string SelectCommand { get; set; } Property Value string TitleField Name of the Title Attribute of the Source DataTable [Configuration(Field = \"EntityTitleField\", Fallback = \"entitytitle\")] public string TitleField { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamFallback.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamFallback.html",
    "title": "Class StreamFallback | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class StreamFallback Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The StreamFallback DataSource is part of the Standard EAV Data Sources. It will pass on the first stream which has results. The order of evaluation is based on the names of the streams as they enter the StreamFallback. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows a query from the blog app: a stream-fallback with 4 in-streams the first stream which would filter by tag, if the URL had a tag in it - as the test-data has no tag, this stream delivers no results the second stream filters by author - as the url would have an author (specified in the test-values), it does return items The StreamFallback therefor passes on the items provided by the author-filter. Note that while using the VisualQuery, all other streams are also processed to show what's happening. At runtime it will stop processing other streams once it's found a first match. Programming With The StreamFallback DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Stream Fallback\", UiHint = \"Find the first stream which has data\", Icon = \"call_merge\", Type = DataSourceType.Logic, NameId = \"ToSic.Eav.DataSources.StreamFallback, ToSic.Eav.DataSources\", DynamicOut = false, DynamicIn = true, HelpLink = \"https://go.2sxc.org/DsStreamFallback\")] public sealed class StreamFallback : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase StreamFallback Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources."
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamMerge.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamMerge.html",
    "title": "Class StreamMerge | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class StreamMerge Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The StreamMerge DataSource is part of the Standard EAV Data Sources. It will create a new stream containing everything which came into this data source. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows two filters finding items and delivering them on the same stream. Example Using ItemFilterDuplicates A common scenario will also combine this using the ItemFilterDuplicates, in case various in-streams deliver the same item: No Settings The StreamMerge DataSource has no settings to configure. Note that it will automatically merge the streams in A-Z order of the In-Stream names. Programming With The StreamMerge DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc 9.10 API Documentation [PublicApi] [VisualQuery(NiceName = \"Merge Streams\", UiHint = \"Combine multiple streams into one\", Icon = \"merge_type\", Type = DataSourceType.Logic, NameId = \"ToSic.Eav.DataSources.StreamMerge, ToSic.Eav.DataSources\", DynamicOut = false, DynamicIn = true, HelpLink = \"https://go.2sxc.org/DsStreamMerge\")] public sealed class StreamMerge : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase StreamMerge Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources."
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamPick.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamPick.html",
    "title": "Class StreamPick | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class StreamPick Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The StreamPick DataSource is part of the Standard EAV Data Sources. It will pick a stream from In and pass that on to Out. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: In this screenshot you can see: The DataSource which we are configuring The stream called True The stream called False The configuration which will resolve a token to True or False and thereby pick the stream Programming With The StreamPick DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV / 2sxc 10.26 API Documentation [PublicApi] [VisualQuery(NiceName = \"Pick Stream\", UiHint = \"Choose a stream\", Icon = \"call_merge\", Type = DataSourceType.Logic, NameId = \"ToSic.Eav.DataSources.StreamPick, ToSic.Eav.DataSources\", ConfigurationType = \"67b19864-df6d-400b-9f37-f41f1dd69c4a\", DynamicOut = false, DynamicIn = true, HelpLink = \"https://go.2sxc.org/DsStreamPick\")] public sealed class StreamPick : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase StreamPick Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties StreamName The stream name to lookup. [Configuration(Fallback = \"Default\")] public string StreamName { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Apps.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Apps.html",
    "title": "Class Apps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Apps Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.Apps.dll Very lightweight DataSource base for data sources which are very simple and convention based. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Apps\", UiHint = \"Apps of a Zone\", Icon = \"apps\", Type = DataSourceType.System, NameId = \"ToSic.Eav.DataSources.System.Apps, ToSic.Eav.Apps\", DynamicOut = false, Audience = Audience.Advanced, ConfigurationType = \"fabc849e-b426-42ea-8e1c-c04e69facd9b\", NameIds = new string[] { \"ToSic.Eav.DataSources.System.Apps, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.Apps, ToSic.Eav.Apps\" }, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Apps\")] public sealed class Apps : CustomDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced CustomDataSource Apps Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSource.Immutable CustomDataSourceAdvanced.CacheTimestamp DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Changed in v15.05 to use the immutable convention note that the above change is actually a breaking change, but since this is such an advanced DataSource, we assume it's not used in dynamic code. Properties OfZoneId The attribute whose value will be filtered [Configuration(Field = \"ZoneId\")] public int OfZoneId { get; } Property Value int"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Attributes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Attributes.html",
    "title": "Class Attributes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Attributes Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Attributes of Type\", UiHint = \"Attributes/fields of a Content-Type\", Icon = \"dns\", Type = DataSourceType.System, NameId = \"ToSic.Eav.DataSources.System.Attributes, ToSic.Eav.DataSources\", Audience = Audience.Advanced, DynamicOut = false, ConfigurationType = \"5461d34d-7dc6-4d38-9250-a0729cc8ead3\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Attributes\")] public sealed class Attributes : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase Attributes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Constructors Attributes(IAppReaderFactory, MyServices, IDataFactory) Constructs a new Attributes DS public Attributes(IAppReaderFactory appReaders, DataSourceBase.MyServices services, IDataFactory dataFactory) Parameters appReaders IAppReaderFactory services DataSourceBase.MyServices dataFactory IDataFactory Properties ContentTypeName The content-type name [Configuration(Fallback = \"not-configured-try-in\")] public string ContentTypeName { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.ContentTypes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.ContentTypes.html",
    "title": "Class ContentTypes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ContentTypes Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.Apps.dll Very lightweight DataSource base for data sources which are very simple and convention based. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Content Types\", UiHint = \"Types of an App\", Icon = \"dns\", Type = DataSourceType.System, NameId = \"ToSic.Eav.DataSources.System.ContentTypes, ToSic.Eav.Apps\", Audience = Audience.Advanced, DynamicOut = false, ConfigurationType = \"37b25044-29bb-4c78-85e4-7b89f0abaa2c\", NameIds = new string[] { \"ToSic.Eav.DataSources.System.ContentTypes, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.ContentTypes, ToSic.Eav.Apps\" }, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ContentTypes\")] public sealed class ContentTypes : CustomDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced CustomDataSource ContentTypes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSource.Immutable CustomDataSourceAdvanced.CacheTimestamp DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks New in v11.20 Changed in v15.05 to use the immutable convention Properties OfAppId The app id [Configuration(Field = \"AppId\")] public int OfAppId { get; } Property Value int Scope The scope to get the content types of - normally it's only the default scope [Configuration(Fallback = \"Default\")] public string Scope { get; } Property Value string Remarks Renamed to Scope in v15, previously was called OfScope"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Features.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Features.html",
    "title": "Class Features | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Features Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.Apps.dll Very lightweight DataSource base for data sources which are very simple and convention based. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Features\", UiHint = \"List all features\", Icon = \"table_chart\", Type = DataSourceType.System, NameId = \"398d0b9f-044f-48f7-83ef-307872f7ed93\", Audience = Audience.Advanced, DynamicOut = false)] public sealed class Features : CustomDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced CustomDataSource Features Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSource.Immutable CustomDataSourceAdvanced.CacheTimestamp DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream)"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Licenses.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Licenses.html",
    "title": "Class Licenses | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Licenses Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.Apps.dll Very lightweight DataSource base for data sources which are very simple and convention based. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Licenses\", UiHint = \"List all licenses\", Icon = \"table_chart\", Type = DataSourceType.System, NameId = \"402fa226-5584-46d1-a763-e63ba0774c31\", Audience = Audience.Advanced, DynamicOut = false)] public sealed class Licenses : CustomDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced CustomDataSource Licenses Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSource.Immutable CustomDataSourceAdvanced.CacheTimestamp DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream)"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.MetadataTargetTypes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.MetadataTargetTypes.html",
    "title": "Class MetadataTargetTypes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class MetadataTargetTypes Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.Apps.dll Get Metadata Target Types [VisualQuery(NiceName = \"Metadata Target Types\", UiHint = \"Get Target Types which determine what kind of thing/target the metadata is for.\", Icon = \"interests\", Type = DataSourceType.System, NameId = \"fba0d40d-f6af-4593-9ccb-54cfd73d8217\", Audience = Audience.Advanced, DynamicOut = false)] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class MetadataTargetTypes : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase MetadataTargetTypes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks Added in v12.10 Constructors MetadataTargetTypes(MyServices, IDataFactory) public MetadataTargetTypes(DataSourceBase.MyServices services, IDataFactory dataFactory) Parameters services DataSourceBase.MyServices dataFactory IDataFactory"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.QueryInfo.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.QueryInfo.html",
    "title": "Class QueryInfo | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class QueryInfo Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"DataSources\", UiHint = \"List the DataSources available in the system\", Icon = \"present_to_all\", Type = DataSourceType.System, NameId = \"ToSic.Eav.DataSources.System.QueryInfo, ToSic.Eav.DataSources\", Audience = Audience.Advanced, DynamicOut = false, ConfigurationType = \"4638668f-d506-4f5c-ae37-aa7fdbbb5540\", HelpLink = \"https://docs.2sxc.org/api/dot-net/ToSic.Eav.DataSources.System.QueryInfo.html\")] public sealed class QueryInfo : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase QueryInfo Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Constructors QueryInfo(MyServices, LazySvc<QueryManager>, QueryBuilder, IDataFactory, IDataSourceGenerator<Attributes>) Constructs a new Attributes DS public QueryInfo(DataSourceBase.MyServices services, LazySvc<QueryManager> queryManager, QueryBuilder queryBuilder, IDataFactory dataFactory, IDataSourceGenerator<Attributes> attributesGenerator) Parameters services DataSourceBase.MyServices queryManager LazySvc<QueryManager> queryBuilder QueryBuilder dataFactory IDataFactory attributesGenerator IDataSourceGenerator<Attributes> Properties QueryBuilder public QueryBuilder QueryBuilder { get; } Property Value QueryBuilder QueryName The content-type name [Configuration(Fallback = \"not-configured\")] public string QueryName { get; } Property Value string StreamName [Configuration(Fallback = \"Default\")] public string StreamName { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Scopes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Scopes.html",
    "title": "Class Scopes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Scopes Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.Apps.dll Very lightweight DataSource base for data sources which are very simple and convention based. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(ConfigurationType = \"\", NameId = \"f134e3c1-f09f-4fbc-85be-de43a64c6eed\", Icon = \"workspaces\", NiceName = \"Data Scopes\", Type = DataSourceType.System, UiHint = \"Data Scopes group Content-Types by topic\", Audience = Audience.Advanced, DynamicOut = false)] public sealed class Scopes : CustomDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced CustomDataSource Scopes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSource.Immutable CustomDataSourceAdvanced.CacheTimestamp DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream)"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.SystemStack.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.SystemStack.html",
    "title": "Class SystemStack | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SystemStack Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.DataSources.dll [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"System Stacks\", UiHint = \"Settings and/or Resources as a Stack\", Icon = \"dns\", Type = DataSourceType.System, NameId = \"60806cb1-0c76-4c1e-8dfe-dcec94726f8d\", Audience = Audience.Advanced, ConfigurationType = \"f9aca0f0-1b1b-4414-b42e-b337de124124\")] public class SystemStack : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase SystemStack Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Constructors SystemStack(MyServices, AppDataStackService, IAppReaderFactory, IZoneCultureResolver, IDataFactory) public SystemStack(DataSourceBase.MyServices services, AppDataStackService dataStackService, IAppReaderFactory appReadFac, IZoneCultureResolver zoneCulture, IDataFactory dataFactory) Parameters services DataSourceBase.MyServices dataStackService AppDataStackService appReadFac IAppReaderFactory zoneCulture IZoneCultureResolver dataFactory IDataFactory Properties AddValues [Configuration(Fallback = true)] public bool AddValues { get; } Property Value bool Keys [Configuration] public string Keys { get; } Property Value string StackNames [Configuration] public string StackNames { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Zones.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Zones.html",
    "title": "Class Zones | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Zones Namespace ToSic.Eav.DataSources.Sys Assembly ToSic.Eav.Apps.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Zones\", UiHint = \"Zones of an installation\", Icon = \"border_outer\", Type = DataSourceType.System, NameId = \"ToSic.Eav.DataSources.System.Zones, ToSic.Eav.Apps\", Audience = Audience.Advanced, DynamicOut = false, NameIds = new string[] { \"ToSic.Eav.DataSources.System.Zones, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.Zones, ToSic.Eav.Apps\" }, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Zones\")] public sealed class Zones : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase Zones Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources."
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.html",
    "title": "Namespace ToSic.Eav.DataSources.Sys | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.DataSources.Sys Classes Apps Very lightweight DataSource base for data sources which are very simple and convention based. Attributes The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. ContentTypes Very lightweight DataSource base for data sources which are very simple and convention based. Features Very lightweight DataSource base for data sources which are very simple and convention based. Licenses Very lightweight DataSource base for data sources which are very simple and convention based. MetadataTargetTypes Get Metadata Target Types QueryInfo The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Scopes Very lightweight DataSource base for data sources which are very simple and convention based. SystemStack Zones The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources."
  },
  "api/dot-net/ToSic.Eav.DataSources.TreeModeler.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.TreeModeler.html",
    "title": "Class TreeModeler | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class TreeModeler Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll Use this to take imported data from elsewhere which is a table but would have a tree-like structure (folders, etc.). Tell it where/how the relationships are mapped, and it will create Entities that have navigable relationships for this. [VisualQuery(NameId = \"58cfcbd6-e2ae-40f7-9acf-ac8d758adff9\", NiceName = \"Relationship/Tree Modeler\", UiHint = \"Connect items to create relationships or trees\", Icon = \"account_tree\", NameIds = new string[] { \"58cfcbd6-e2ae-40f7-9acf-ac8d758adff9\", \"ToSic.Eav.DataSources.TreeBuilder, ToSic.Eav.DataSources.SharePoint\" }, Type = DataSourceType.Modify, ConfigurationType = \"d167054a-fe0f-4e98-b1f1-0a9990873e86\", In = new string[] { \"Default*\" }, HelpLink = \"https://go.2sxc.org/DsTreeModeler\")] [PublicApi(\"Brand new in v11.20, WIP, may still change a bit\")] public sealed class TreeModeler : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase TreeModeler Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks New in v11.20 Changed in v15.05 to use the immutable convention note that the above change is actually a breaking change, but since this is such an advanced DataSource, we assume it's not used in dynamic code. Properties Identifier This determines what property is used as ID on the parent. Currently only allows \"EntityId\" and \"EntityGuid\" [Configuration(Field = \"ParentIdentifierAttribute\", Fallback = \"entityid\")] public string Identifier { get; } Property Value string NewChildrenField The name of the new field on the parent, which will reference the children [Configuration(Field = \"TargetChildrenAttribute\", Fallback = \"Children\")] public string NewChildrenField { get; } Property Value string NewParentField Name of the new field on a child, which will reference the parent. [Configuration(Field = \"TargetParentAttribute\", Fallback = \"Parent\")] public string NewParentField { get; } Property Value string ParentReferenceField The property on a child which contains the parent ID [Configuration(Field = \"ChildParentAttribute\", Fallback = \"ParentId\")] public string ParentReferenceField { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.ValueFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ValueFilter.html",
    "title": "Class ValueFilter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ValueFilter Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The ValueFilter DataSource is part of the Standard EAV Data Sources. It will filter items based on the values - and if none are found, will optionally return a fallback-list. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows that 2 of the 5 items fulfilled the filters requirements. Using Url Parameter for Filtering You can also filter using values from the URL, like this: Using Multiple URL Parameters ...and of course you can also use url parameters to specify field-names and value: ... or field, value and operator: Comparison Operators There are many operators possible - see the in-UI help bubble for that. Using Fallback Streams The filter will return the items which match the requirement, but sometimes none will match. This is common when you have a parameter from the Url, which may not match anything. In the simple version this looks like this: ...this previous example used a filter criteria which didn't match any items, so it resulted in delivering all. This is very useful when you want to cascade optional filters, like this: ...this example shows two filters - the first didn't match anything (it was blank), so it delivered all items, the second one then worked, and reduced the remaining items to 2. Programming With The ValueFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // filter by FullName var someAuthors = CreateSource<ValueFilter>(allAuthors); someAuthors.Attribute = \"FullName\"; someAuthors.Value = \"Daniel Mettler\"; Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? Enhanced in 2sxc 8.12 with fallback API Documentation [PublicApi] [VisualQuery(NiceName = \"Value Filter\", UiHint = \"Keep items which have a property with the expected value\", Icon = \"filter_list\", Type = DataSourceType.Filter, NameId = \"ToSic.Eav.DataSources.ValueFilter, ToSic.Eav.DataSources\", In = new string[] { \"Default*\", \"Fallback\" }, DynamicOut = false, ConfigurationType = \"|Config ToSic.Eav.DataSources.ValueFilter\", HelpLink = \"https://go.2sxc.org/DsValueFilter\")] public sealed class ValueFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase ValueFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties Attribute The attribute whose value will be scanned / filtered. [Configuration] public string Attribute { get; set; } Property Value string Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" [Configuration(Fallback = \"default\")] public string Languages { get; set; } Property Value string Operator The comparison operator, == by default, many possibilities exist depending on the original types we're comparing [Configuration(Fallback = \"==\")] public string Operator { get; set; } Property Value string Take Amount of items to take - then stop filtering. For performance optimization. [Configuration] public string Take { get; set; } Property Value string Value The filter that will be used - for example \"Daniel\" when looking for an entity w/the value Daniel [Configuration] public string Value { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.ValueSort.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ValueSort.html",
    "title": "Class ValueSort | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ValueSort Namespace ToSic.Eav.DataSources Assembly ToSic.Eav.DataSources.dll The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. The ValueSort DataSource is part of the Standard EAV Data Sources. It will reorder items passing through A-Z or Z-A based on a value of each item. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows the same items being sorted in two different ways and delivered to the target. Example Using Multi-Sort You can also sort multiple fields, so \"first sort by xyz, then by xyz\" and use different sort-orders.: Example Using URL Parameters ...and of course you can also use url parameters to specify field-names or sort order: Sorting Direction For sorting direction you can use either words or numbers asc/desc 1/0 Programming With The ValueSort DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // Sort by FullName var sortedAuthors = CreateSource<ValueSort>(allAuthors); sortedAuthors.Attributes = \"FullName\"; Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Value Sort\", UiHint = \"Sort items by a property\", Icon = \"sort\", Type = DataSourceType.Sort, NameId = \"ToSic.Eav.DataSources.ValueSort, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[] { \"Default*\" }, ConfigurationType = \"|Config ToSic.Eav.DataSources.ValueSort\", HelpLink = \"https://go.2sxc.org/DsValueSort\")] public sealed class ValueSort : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase ValueSort Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Remarks Had a major, breaking update in v15. Consult the guide to upgrade your custom data sources. Properties Attributes The attribute whose value will be sorted by. [Configuration] public string Attributes { get; set; } Property Value string Directions The sorting direction like 'asc' or 'desc', can also be 0, 1 [Configuration] public string Directions { get; set; } Property Value string Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" [Configuration(Fallback = \"default\")] public string Languages { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.DataSources.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.html",
    "title": "Namespace ToSic.Eav.DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.DataSources DataSources are objects which deliver one or many DataStreams, which contain a bunch of content-items. They are then attached to each other (from one sources Out to another ones In) creating a Query. Queries can be customized at will. The whole system is used to prepare/process data for views, WebApi or anything else. In most cases there will be a VisualQuery which connects all the parts automatically, but when you want to work with them programatically, here you'll find the API. Note We've hidden the constructors for all DataSource objects in these docs, because you should usually use the CreateSource<T>(...) command on the Razor template or WebApi, which will auto-configure things behind the scenes. Tip Read about DataSources here. It also explains how the configuration system works and how to create custom DataSources to deliver your data to EAV/2sxc. Namespaces ToSic.Eav.DataSources.Caching ToSic.Eav.DataSources.Sys Classes App All the data inside an App. For example, it has a variable amount of Out-streams, one for each content-type in the app. AppRoot The App Root is the entry point for all data. It takes its data from a hidden AppState Cache. It's implemented as a DataSource so that other DataSources can easily attach to it. This is also the object returned as the root in any query. AttributeFilter The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. AttributeRename The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Children Get Children Entities (child-relationships) of the Entities coming into this DataSource Csv DataSource for importing/reading CSV files. DataTable Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. EntityIdFilter The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. EntityTypeFilter The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Error Internal DataSource to generate an error on purpose. This is to test / verify error handling in VisualQuery. See also VisualQuery 3: Debugging ItemFilterDuplicates The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. LanguageModeler Remodels multi-language values in own fields (like NameDe, NameEn) to single multi-language fields like Name Metadata Get Metadata (metadata Entities) of the Entities coming into this DataSource MetadataTargets Get Target Entities (metadata targets) of the Entities coming into this DataSource OwnerFilter The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Paging The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Parents Get Parent Entities (parent-relationships) of the Entities coming into this DataSource PassThrough The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. PublishingFilter The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. QueryRun Run another query and provide the resulting data. The settings will provide the params for the inner query. RelationshipFilter The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Serialization The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Shuffle The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Sql Provide Entities from a SQL Server StreamFallback The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. StreamMerge The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. StreamPick The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. TreeModeler Use this to take imported data from elsewhere which is a table but would have a tree-like structure (folders, etc.). Tell it where/how the relationships are mapped, and it will create Entities that have navigable relationships for this. ValueFilter The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. ValueSort The base class for all DataSources, especially custom DataSources. It must always be inherited. It provides a lot of core functionality to get configurations, ensure caching and more. Important: in most cases you will inherit the CustomDataSource DataSource for custom data sources. Interfaces IAppRoot Interface for the App Root - usually the very first node in any data-delivery or query. It's just like a normal IDataSource but will internally access the ToSic.Eav.Apps.IAppReader from the Cache/>."
  },
  "api/dot-net/ToSic.Eav.Factory.html": {
    "href": "api/dot-net/ToSic.Eav.Factory.html",
    "title": "Class Factory | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Factory Namespace ToSic.Eav Assembly ToSic.Sxc.Dnn.Core.dll The Eav DI Factory, used to construct various objects through Dependency Injection. If possible avoid using this, as it's a workaround for code which is outside the normal Dependency Injection and therefor a bad pattern. [PublicApi(\"Careful - obsolete!\")] [Obsolete(\"Deprecated, please use Dnn 9 DI instead https://go.2sxc.org/brc-13-eav-factory\")] public class Factory Inheritance object Factory"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUp.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUp.html",
    "title": "Interface ILookUp | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILookUp Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context. Read more about this in LookUp System [PublicApi] public interface ILookUp Properties Description Additional description to better understand what each LookUp is for. string Description { get; } Property Value string Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings string Name { get; } Property Value string The name which is used to identify this LookUp, like in a ILookUpEngine Methods Get(string) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. string Get(string key) Parameters key string Returns string The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. Get(string, string) Gets a value by Name/key and tries to format it in a special way (like for dates) string Get(string key, string format) Parameters key string Name of the Property format string Format String Returns string"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUpEngine.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUpEngine.html",
    "title": "Interface ILookUpEngine | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILookUpEngine Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll Resolves Configurations from LookUps. Common use is for configurable DataSources [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ILookUpEngine : IHasLog Inherited Members IHasLog.Log Properties Downstream [InternalApi_DoNotUse_MayChangeWithoutNotice] ILookUpEngine Downstream { get; } Property Value ILookUpEngine Sources Property Sources this Provider can use. Sources are various dictionaries which can resolve a key to a value. Read more about this in LookUp System [InternalApi_DoNotUse_MayChangeWithoutNotice] IEnumerable<ILookUp> Sources { get; } Property Value IEnumerable<ILookUp> Methods FindSource(string) Find a source by name in the current engine or any downstream engines. [InternalApi_DoNotUse_MayChangeWithoutNotice] ILookUp FindSource(string name) Parameters name string the name we're looking for, invariant Returns ILookUp HasSource(string) Will check if the lookup engine - or any of it's downstream engines - have a source with the given name [InternalApi_DoNotUse_MayChangeWithoutNotice] bool HasSource(string name) Parameters name string the name we're looking for, invariant Returns bool LookUp(IDictionary<string, string>, NoParamOrder, IEnumerable<ILookUp>, int, Func<ITweakLookUp, ITweakLookUp>) This will go through a dictionary of strings (usually configuration values) and replace all tokens in that string with whatever the token-resolver delivers. It's usually needed to initialize a DataSource. IDictionary<string, string> LookUp(IDictionary<string, string> values, NoParamOrder noParamOrder = default, IEnumerable<ILookUp> overrides = null, int depth = 4, Func<ITweakLookUp, ITweakLookUp> tweak = null) Parameters values IDictionary<string, string> Dictionary of configuration strings. noParamOrder NoParamOrder see Convention: Named Parameters overrides IEnumerable<ILookUp> Optional override LookUps which would be consulted first. depth int Max recursion when looking up tokens which return other tokens. tweak Func<ITweakLookUp, ITweakLookUp> BETA 18.03 Returns IDictionary<string, string>"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUpEngineResolver.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUpEngineResolver.html",
    "title": "Interface ILookUpEngineResolver | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILookUpEngineResolver Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll An object implementing this interface can provide an engine for the current context. It's important so that code can easily ask for the current engine, but that the real implementation is dependency-injected later on, as each environment (DNN, Nop, etc.) can provide different initial engines. Read more about this in LookUp System [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ILookUpEngineResolver : IHasLog Inherited Members IHasLog.Log Methods GetLookUpEngine(int) Get the engine for the current execution instance. ILookUpEngine GetLookUpEngine(int moduleId) Parameters moduleId int The instance ID - should be 0 if unknown Returns ILookUpEngine"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpBase.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpBase.html",
    "title": "Class LookUpBase | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LookUpBase Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll Base Class to create your own LookUp Class - used by all Look-Ups. Read more about this in LookUp System [PublicApi] public abstract class LookUpBase : ILookUp Inheritance object LookUpBase Implements ILookUp Derived LookUpInDictionary LookUpInLookUps LookUpInNameValueCollection LookUpIn<T> Constructors LookUpBase(string, string) Base Class to create your own LookUp Class - used by all Look-Ups. Read more about this in LookUp System protected LookUpBase(string name, string description = \"\") Parameters name string description string Properties Description Additional description to better understand what each LookUp is for. public virtual string Description { get; } Property Value string Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings public string Name { get; } Property Value string The name which is used to identify this LookUp, like in a ILookUpEngine Methods Format(bool) public static string Format(bool value) Parameters value bool Returns string Format(DateTime) public static string Format(DateTime value) Parameters value DateTime Returns string FormatValue(object, string, string[]) Take a specific result object (usually from an IEntity property) and format as needed. protected string FormatValue(object valueObject, string format, string[] dimensions) Parameters valueObject object format string dimensions string[] Returns string Get(string) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. public virtual string Get(string key) Parameters key string Returns string The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. Get(string, string) Gets a value by Name/key and tries to format it in a special way (like for dates) public abstract string Get(string key, string format) Parameters key string Name of the Property format string Format String Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpIn-1.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpIn-1.html",
    "title": "Class LookUpIn<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LookUpIn<T> Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll [PublicApi] public abstract class LookUpIn<T> : LookUpBase, ILookUp Type Parameters T Inheritance object LookUpBase LookUpIn<T> Implements ILookUp Derived LookUpInEntity Inherited Members LookUpBase.Name LookUpBase.Description LookUpBase.Get(string, string) LookUpBase.Get(string) LookUpBase.Format(bool) LookUpBase.Format(DateTime) LookUpBase.FormatValue(object, string, string[]) LookUpBase.ToString() Constructors LookUpIn(T, string, string) protected LookUpIn(T data, string name = \"source without name\", string description = null) Parameters data T name string description string Properties Data protected T Data { get; } Property Value T Methods GetContents() The underlying, original object. Helpful for external objects which need the real, underlying item. Avoid using this property for use inside the real object, but create another property for this, so it's easier to spot dependencies. public T GetContents() Returns T SetData(T) protected void SetData(T newData) Parameters newData T"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInDictionary.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInDictionary.html",
    "title": "Class LookUpInDictionary | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LookUpInDictionary Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll Look Up values from a .net dictionary. Case-Insensitive. Read more about this in LookUp System [PublicApi] public class LookUpInDictionary : LookUpBase, ILookUp Inheritance object LookUpBase LookUpInDictionary Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Description LookUpBase.Get(string) LookUpBase.Format(bool) LookUpBase.Format(DateTime) LookUpBase.FormatValue(object, string, string[]) LookUpBase.ToString() Constructors LookUpInDictionary(string, IDictionary<string, string>, string) Look Up values from a .net dictionary. Case-Insensitive. Read more about this in LookUp System public LookUpInDictionary(string name, IDictionary<string, string> valueList = null, string description = null) Parameters name string Name to use valueList IDictionary<string, string> value list (dictionary) to reference - will convert to invariant; or create blank description string Properties Properties List with static properties and Test-Values public IDictionary<string, string> Properties { get; } Property Value IDictionary<string, string> Methods Get(string, string) Gets a value by Name/key and tries to format it in a special way (like for dates) public override string Get(string key, string format) Parameters key string Name of the Property format string Format String Returns string"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInEntity.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInEntity.html",
    "title": "Class LookUpInEntity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LookUpInEntity Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll Get Values from an IEntity. Read more about this in LookUp System [PublicApi] public class LookUpInEntity : LookUpIn<IEntity>, ILookUp Inheritance object LookUpBase LookUpIn<IEntity> LookUpInEntity Implements ILookUp Inherited Members LookUpIn<IEntity>.Data LookUpIn<IEntity>.SetData(IEntity) LookUpIn<IEntity>.GetContents() LookUpBase.Name LookUpBase.Description LookUpBase.Get(string) LookUpBase.Format(bool) LookUpBase.Format(DateTime) LookUpBase.FormatValue(object, string, string[]) LookUpBase.ToString() Constructors LookUpInEntity(string, IEntity, string[], string) Constructs a new Entity LookUp public LookUpInEntity(string name, IEntity source, string[] dimensions, string description = null) Parameters name string Name of the LookUp, e.g. Settings source IEntity dimensions string[] the languages / dimensions to use description string Methods Get(string, string) Special lookup command with format-provider. public override string Get(string key, string format) Parameters key string format string Returns string"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInLookUps.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInLookUps.html",
    "title": "Class LookUpInLookUps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LookUpInLookUps Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation. Read more about this in LookUp System [PublicApi] public class LookUpInLookUps : LookUpBase, ILookUp Inheritance object LookUpBase LookUpInLookUps Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(string) LookUpBase.Format(bool) LookUpBase.Format(DateTime) LookUpBase.FormatValue(object, string, string[]) LookUpBase.ToString() Constructors LookUpInLookUps(string, IEnumerable<ILookUp>) This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation. Read more about this in LookUp System public LookUpInLookUps(string name, IEnumerable<ILookUp> providers) Parameters name string Name to use - if stored in a list providers IEnumerable<ILookUp> list of providers Properties Description Additional description to better understand what each LookUp is for. public override string Description { get; } Property Value string Methods Get(string, string) Gets a value by Name/key and tries to format it in a special way (like for dates) public override string Get(string key, string format) Parameters key string Name of the Property format string Format String Returns string"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInNameValueCollection.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInNameValueCollection.html",
    "title": "Class LookUpInNameValueCollection | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LookUpInNameValueCollection Namespace ToSic.Eav.LookUp Assembly ToSic.Eav.Core.dll Look-Up helper to get something from a standard .net NameValueCollection. Read more about this in LookUp System [PublicApi] public class LookUpInNameValueCollection : LookUpBase, ILookUp Inheritance object LookUpBase LookUpInNameValueCollection Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Description LookUpBase.Get(string) LookUpBase.Format(bool) LookUpBase.Format(DateTime) LookUpBase.FormatValue(object, string, string[]) LookUpBase.ToString() Constructors LookUpInNameValueCollection(string, NameValueCollection) Look-Up helper to get something from a standard .net NameValueCollection. Read more about this in LookUp System public LookUpInNameValueCollection(string name, NameValueCollection list) Parameters name string list NameValueCollection Methods Get(string, string) Gets a value by Name/key and tries to format it in a special way (like for dates) public override string Get(string key, string format) Parameters key string Name of the Property format string Format String Returns string"
  },
  "api/dot-net/ToSic.Eav.LookUp.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.html",
    "title": "Namespace ToSic.Eav.LookUp | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.LookUp Sometimes objects need to get values from the context - like... a URL Parameter the current date/time an App Setting or Resource etc. This is done through ToSic.Eav.LookUp.ILookUp objects. In many cases, we need to look up a few - like when we have a configuration made with Tokens. These would look like [App:Path] or [QueryString:Ui]. The tool which takes a list of these and looks all of them up is the ToSic.Eav.LookUp.ILookupEngine. Tip Read more about this in [](Abyss.Parts.LookUp.Index Classes LookUpBase Base Class to create your own LookUp Class - used by all Look-Ups. Read more about this in LookUp System LookUpInDictionary Look Up values from a .net dictionary. Case-Insensitive. Read more about this in LookUp System LookUpInEntity Get Values from an IEntity. Read more about this in LookUp System LookUpInLookUps This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation. Read more about this in LookUp System LookUpInNameValueCollection Look-Up helper to get something from a standard .net NameValueCollection. Read more about this in LookUp System LookUpIn<T> Interfaces ILookUp A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context. Read more about this in LookUp System ILookUpEngine Resolves Configurations from LookUps. Common use is for configurable DataSources ILookUpEngineResolver An object implementing this interface can provide an engine for the current context. It's important so that code can easily ask for the current engine, but that the real implementation is dependency-injected later on, as each environment (DNN, Nop, etc.) can provide different initial engines. Read more about this in LookUp System"
  },
  "api/dot-net/ToSic.Eav.Metadata.IHasMetadata.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IHasMetadata.html",
    "title": "Interface IHasMetadata | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHasMetadata Namespace ToSic.Eav.Metadata Assembly ToSic.Eav.Core.dll Anything with this interface has a property Metadata which can give us more information about that object. [PublicApi] public interface IHasMetadata Properties Metadata Additional information, specs etc. about this thing which has metadata [JsonIgnore] IMetadataOf Metadata { get; } Property Value IMetadataOf"
  },
  "api/dot-net/ToSic.Eav.Metadata.IMetadataGet.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IMetadataGet.html",
    "title": "Interface IMetadataGet | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IMetadataGet Namespace ToSic.Eav.Metadata Assembly ToSic.Eav.Core.dll For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IMetadataGet Methods GetMetadata<TKey>(int, TKey, string) Get any metadata from the current data source (usually an app) IEnumerable<IEntity> GetMetadata<TKey>(int targetType, TKey key, string contentTypeName = null) Parameters targetType int The type-id of the target we're accessing, like 10=cms-object, 4=entity key TKey The key which is used for lookup contentTypeName string Optional content-type name, to only retrieve metadata of that type Returns IEnumerable<IEntity> A list (may be empty) of metadata items found for this target Type Parameters TKey Key-Type used - string, int or guid Remarks It does not return metadata describing the source (app), but metadata stored in this app, describing something else. GetMetadata<TKey>(TargetTypes, TKey, string) Get any metadata from the current data source (usually an app) IEnumerable<IEntity> GetMetadata<TKey>(TargetTypes targetType, TKey key, string contentTypeName = null) Parameters targetType TargetTypes The TargetTypes constant of the target we're accessing, like TargetTypes.Entity key TKey The key which is used for lookup contentTypeName string Optional content-type name, to only retrieve metadata of that type Returns IEnumerable<IEntity> A list (may be empty) of metadata items found for this target Type Parameters TKey Key-Type used - string, int or guid Remarks It does not return metadata describing the source (app), but metadata stored in this app, describing something else."
  },
  "api/dot-net/ToSic.Eav.Metadata.IMetadataOf.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IMetadataOf.html",
    "title": "Interface IMetadataOf | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IMetadataOf Namespace ToSic.Eav.Metadata Assembly ToSic.Eav.Core.dll A provider for metadata for something. So if an IEntity or an App has metadata, this will provide it. [PublicApi] public interface IMetadataOf : IEnumerable<IEntity>, IEnumerable, IHasPermissions Inherited Members IEnumerable<IEntity>.GetEnumerator() IHasPermissions.Permissions Remarks You can either loop through this object (since it's an IEnumerable) or ask for values of the metadata, no matter on what sub-entity the value is stored on. Properties Target The identifier which was used to retrieve the Metadata. It can be used as an address for creating further Metadata for the same target. ITarget Target { get; } Property Value ITarget Remarks Added in v13 Methods GetBestValue<TVal>(string, string) Get the best matching value in ALL the metadata items. TVal GetBestValue<TVal>(string name, string typeName = null) Parameters name string attribute name we're looking for typeName string optional type-name, if provided, will only look at metadata of that type; otherwise (or if null) will look at all metadata items and pick first match Returns TVal A typed value. Type Parameters TVal expected type, like string, int etc. GetBestValue<TVal>(string, string[]) Get the best matching value in the metadata items. TVal GetBestValue<TVal>(string name, string[] typeNames) Parameters name string attribute name we're looking for typeNames string[] list of type-name in the order to check. if one of the values is null, it will then check all items no matter what type Returns TVal A typed value. Type Parameters TVal expected type, like string, int etc. HasType(string) Determine if something has metadata of the specified type bool HasType(string typeName) Parameters typeName string Type Name Returns bool True if there is at least one item of this type Remarks Added in v13 OfType(string) Get all Metadata items of a specific type IEnumerable<IEntity> OfType(string typeName) Parameters typeName string Type Name Returns IEnumerable<IEntity> Remarks Added in v13"
  },
  "api/dot-net/ToSic.Eav.Metadata.TargetTypes.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.TargetTypes.html",
    "title": "Enum TargetTypes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum TargetTypes Namespace ToSic.Eav.Metadata Assembly ToSic.Eav.Core.dll Metadata targets specific things, and the TargetTypes determines what kind of thing this is. [PublicApi] public enum TargetTypes Fields [DocsWip(\"Apps (3). Used to give Apps additional properties.\")] App = 3 App metadata (3). Used to give Apps additional properties. [DocsWip(\"Attributes / Fields (2). This is used to store configuration like the field label, amount-of-rows, etc.\")] Attribute = 2 Metadata of attributes / fields (2). This is used to store configuration like the field label, amount-of-rows, etc. [DocsWip(\"CMS Items (10) such as files, folders, etc.\")] CmsItem = 10 Item / Object of the Platform, like a File or Folder etc. (10) [DocsWip(\"Content-Types (5)\")] ContentType = 5 Metadata of a content-type / data-schema (5). Used to give it a description etc. [DocsWip(\"Custom #0 (90) - Use for whatever you want.\")] Custom = 90 Custom target (90). This is what you should use for basic apps which have a custom target that's none of the other defaults. [DocsWip(\"Custom #1 (91) - Use for whatever you want.\")] Custom1 = 91 Custom target (91). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #2 (92) - Use for whatever you want.\")] Custom2 = 92 Custom target (92). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #3 (93) - Use for whatever you want.\")] Custom3 = 93 Custom target (93). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #4 (94) - Use for whatever you want.\")] Custom4 = 94 Custom target (94). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #5 (95) - Use for whatever you want.\")] Custom5 = 95 Custom target (95). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #6 (96) - Use for whatever you want.\")] Custom6 = 96 Custom target (96). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #7 (97) - Use for whatever you want.\")] Custom7 = 97 Custom target (97). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #8 (98) - Use for whatever you want.\")] Custom8 = 98 Custom target (98). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Custom #9 (99) - Use for whatever you want.\")] Custom9 = 99 Custom target (99). Use this for basic apps which need multiple different custom targets (advanced, rare use case) [DocsWip(\"Dimensions (8)\")] Dimension = 8 Dimension Metadata (8) - for languages and similar data-dimensions [DocsWip(\"Entities (4) - decorates Entities\")] Entity = 4 Metadata of entities / data-items (4). This lets us enhance entities with additional information. [DocsWip(\"Modules (16)\")] Module = 16 A Module - like a module containing some content (16) [DocsWip(\"(none) / not Metadata - Things that are not used as Metadata (1). This is the default for most Entities.\")] None = 1 Things that are not used as Metadata (1). This is the default for most Entities. [DocsWip(\"Pages (13)\")] Page = 14 A Page - like the current page (14) [DocsWip(\"Scopes (7)\")] Scope = 7 Scope metadata (7) - for data-scopes like \"System\" or \"System-Configuration\" etc. [DocsWip(\"Sites (12)\")] Site = 12 A Site - like the current site (12) [DocsWip(\"System (11)\")] System = 11 The entire system / platform - so Metadata for the current Dnn/Oqtane installation (11). [DocsWip(\"Users (18)\")] User = 18 A User - like the admin-user (18) [DocsWip(\"Zones (6)\")] Zone = 6 Zone metadata (6) - used to give a Zone additional information. Only used in very special cases, best not use."
  },
  "api/dot-net/ToSic.Eav.Metadata.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.html",
    "title": "Namespace ToSic.Eav.Metadata | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Metadata Everything related to the Metadata-system in EAV. \uD83D\uDC49 Read about it in Metadata - (advanced ⚠). Interfaces IHasMetadata Anything with this interface has a property Metadata which can give us more information about that object. IMetadataGet For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. IMetadataOf A provider for metadata for something. So if an IEntity or an App has metadata, this will provide it. Enums TargetTypes Metadata targets specific things, and the TargetTypes determines what kind of thing this is."
  },
  "api/dot-net/ToSic.Eav.Repositories.FolderBasedRepository.html": {
    "href": "api/dot-net/ToSic.Eav.Repositories.FolderBasedRepository.html",
    "title": "Class FolderBasedRepository | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FolderBasedRepository Namespace ToSic.Eav.Repositories Assembly ToSic.Eav.Core.dll Use this to tell the EAV at boot time that there is another folder based repository. This will cause the EAV to load that folders Content-Types and Queries. [PublicApi] public abstract class FolderBasedRepository : RepositoryBase, IHasLog Inheritance object ServiceBase RepositoryBase FolderBasedRepository Implements IHasLog Constructors FolderBasedRepository() Empty constructor is very important, as this is typically used by inheriting classes protected FolderBasedRepository() Properties RootPaths public abstract List<string> RootPaths { get; } Property Value List<string>"
  },
  "api/dot-net/ToSic.Eav.Repositories.html": {
    "href": "api/dot-net/ToSic.Eav.Repositories.html",
    "title": "Namespace ToSic.Eav.Repositories | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Repositories Classes FolderBasedRepository Use this to tell the EAV at boot time that there is another folder based repository. This will cause the EAV to load that folders Content-Types and Queries."
  },
  "api/dot-net/ToSic.Eav.Security.IHasPermissions.html": {
    "href": "api/dot-net/ToSic.Eav.Security.IHasPermissions.html",
    "title": "Interface IHasPermissions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHasPermissions Namespace ToSic.Eav.Security Assembly ToSic.Eav.Core.dll Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IHasPermissions Properties Permissions Permissions are also stored as entity items. IEnumerable<Permission> Permissions { get; } Property Value IEnumerable<Permission> List of permission entities for an item Remarks Currently still a private API, because the type could change to be a typed permission object"
  },
  "api/dot-net/ToSic.Eav.Security.Permission.html": {
    "href": "api/dot-net/ToSic.Eav.Security.Permission.html",
    "title": "Class Permission | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Permission Namespace ToSic.Eav.Security Assembly ToSic.Eav.Core.dll Helper object for constants related to the permissions-type [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class Permission : EntityBasedType, IHasDecorators<IEntity> Inheritance object EntityBasedType Permission Implements IHasDecorators<IEntity> Constructors Permission(IEntity) Helper object for constants related to the permissions-type public Permission(IEntity entity) Parameters entity IEntity Fields FieldCondition public const string FieldCondition = \"Condition\" Field Value string FieldGrant public const string FieldGrant = \"Grant\" Field Value string FieldIdentity public const string FieldIdentity = \"Identity\" Field Value string FieldOwner public const string FieldOwner = \"Owner\" Field Value string TypeName public const string TypeName = \"PermissionConfiguration\" Field Value string Properties Condition The condition in this permission - like \"this rule applies to admins\" The condition is usually a text-code by the hosting CMS public string Condition { get; } Property Value string Grant The rights granted by this permission, usually a series of characters like r=read, u=update, etc. public string Grant { get; } Property Value string Identity The identity this rule should apply to This is usually a user guid or group-id; exact specs vary based on the hosting CMS public string Identity { get; } Property Value string"
  },
  "api/dot-net/ToSic.Eav.Security.html": {
    "href": "api/dot-net/ToSic.Eav.Security.html",
    "title": "Namespace ToSic.Eav.Security | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Security Security is a first-class citizen in the EAV. It allows you to set custom read/write/update/draft-only etc. permissions on Apps, Content-Types, Entities and even allow/restrict asset management. Classes Permission Helper object for constants related to the permissions-type Interfaces IHasPermissions Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions."
  },
  "api/dot-net/ToSic.Eav.Services.IDataSourceGenerator-1.html": {
    "href": "api/dot-net/ToSic.Eav.Services.IDataSourceGenerator-1.html",
    "title": "Interface IDataSourceGenerator<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataSourceGenerator<T> Namespace ToSic.Eav.Services Assembly ToSic.Eav.DataSources.dll A factory/generator to create one specific kind of data source. Note: This is not meant for use in Razor code, but to be used in custom DataSources which may need other internal data sources to work. Where possible, use the Generator instead of the IDataSourcesService. The Generator makes it clearer when you only need to use a single typed DataSource and not need access to all kinds of DataSources. [PublicApi] public interface IDataSourceGenerator<out T> where T : IDataSource Type Parameters T The type of the data source to be created. Remarks Released in v15.06 Methods New(IDataSourceLinkable, IDataSourceOptions) Preferred way to create DataSources. T New(IDataSourceLinkable attach = null, IDataSourceOptions options = null) Parameters attach IDataSourceLinkable optional source to attach as in on the newly created data source. If provided, it can also provide appIdentity and configSource options IDataSourceOptions optional configuration Returns T"
  },
  "api/dot-net/ToSic.Eav.Services.IDataSourcesService.html": {
    "href": "api/dot-net/ToSic.Eav.Services.IDataSourcesService.html",
    "title": "Interface IDataSourcesService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataSourcesService Namespace ToSic.Eav.Services Assembly ToSic.Eav.DataSources.dll A factory to create / initialize data sources. Not meant for use in Razor code, but to be used in custom DataSources which may need other internal data sources to work. [PublicApi] public interface IDataSourcesService Remarks Released in v15.06 Methods Create(Type, IDataSourceLinkable, IDataSourceOptions) Get DataSource for specified sourceName/Type. Note that this is not the preferred way to do things - if possible, use the generic Create below. IDataSource Create(Type type, IDataSourceLinkable attach = null, IDataSourceOptions options = null) Parameters type Type the .net type of this data-source attach IDataSourceLinkable optional source to attach as in on the newly created data source. It can also provide AppIdentity and LookUp options IDataSourceOptions optional configuration lookup if needed Returns IDataSource A single DataSource Remarks Released in v15.04 CreateDefault(IDataSourceOptions) Gets a Default DataSource for a specific app. This is a PublishingFilter data source which returns the data the current user is allowed to see. IDataSource CreateDefault(IDataSourceOptions options) Parameters options IDataSourceOptions required configuration - must at least have an AppIdentity Returns IDataSource A PublishingFilter DataSource providing data for this app. Create<TDataSource>(IDataSourceLinkable, IDataSourceOptions) Preferred way to create DataSources. TDataSource Create<TDataSource>(IDataSourceLinkable attach = null, IDataSourceOptions options = null) where TDataSource : IDataSource Parameters attach IDataSourceLinkable optional source to attach as in on the newly created data source. It can also provide AppIdentity and LookUp options IDataSourceOptions optional configuration lookup if needed Returns TDataSource Type Parameters TDataSource The type of the data source to be created."
  },
  "api/dot-net/ToSic.Eav.Services.html": {
    "href": "api/dot-net/ToSic.Eav.Services.html",
    "title": "Namespace ToSic.Eav.Services | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav.Services Interfaces IDataSourceGenerator<T> A factory/generator to create one specific kind of data source. Note: This is not meant for use in Razor code, but to be used in custom DataSources which may need other internal data sources to work. Where possible, use the Generator instead of the IDataSourcesService. The Generator makes it clearer when you only need to use a single typed DataSource and not need access to all kinds of DataSources. IDataSourcesService A factory to create / initialize data sources. Not meant for use in Razor code, but to be used in custom DataSources which may need other internal data sources to work."
  },
  "api/dot-net/ToSic.Eav.html": {
    "href": "api/dot-net/ToSic.Eav.html",
    "title": "Namespace ToSic.Eav | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Eav ToSic.Eav is the namespace for the EAV (Entity-Attribute-Value) data system underlying 2sxc. Namespaces ToSic.Eav.Apps The EAV App System. It's responsible for taking data and bundling it into virtual segments called Apps, and providing nice APIs to work with the apps. ToSic.Eav.Caching ToSic.Eav.Data ToSic.Eav.DataFormats.EavLight ToSic.Eav.DataSource ToSic.Eav.DataSources ToSic.Eav.LookUp ToSic.Eav.Metadata ToSic.Eav.Repositories ToSic.Eav.Security ToSic.Eav.Services"
  },
  "api/dot-net/ToSic.Lib.Coding.NoParamOrder.html": {
    "href": "api/dot-net/ToSic.Lib.Coding.NoParamOrder.html",
    "title": "Struct NoParamOrder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Struct NoParamOrder Namespace ToSic.Lib.Coding Assembly ToSic.Lib.Core.dll Special placeholder to indicate that all parameters following this should be named. It is really important that all parameters following this are named, since the API won't guarantee the order of the parameter names. Example: This signature: ...Save(string name, NoParamOrder noParamOrder = default, string title = title, string description = default) allows: Save(\"MyName\", title: \"MyTitle\") Save(\"MyName\", description: \"MyDescription\") Save(\"MyName\") - without additional parameters See Convention: Named Parameters. [PublicApi] public struct NoParamOrder Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() Fields HelpLink public const string HelpLink = \"https://go.2sxc.org/named-params\" Field Value string"
  },
  "api/dot-net/ToSic.Lib.Coding.html": {
    "href": "api/dot-net/ToSic.Lib.Coding.html",
    "title": "Namespace ToSic.Lib.Coding | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib.Coding Structs NoParamOrder Special placeholder to indicate that all parameters following this should be named. It is really important that all parameters following this are named, since the API won't guarantee the order of the parameter names. Example: This signature: ...Save(string name, NoParamOrder noParamOrder = default, string title = title, string description = default) allows: Save(\"MyName\", title: \"MyTitle\") Save(\"MyName\", description: \"MyDescription\") Save(\"MyName\") - without additional parameters See Convention: Named Parameters."
  },
  "api/dot-net/ToSic.Lib.DI.Generator-1.html": {
    "href": "api/dot-net/ToSic.Lib.DI.Generator-1.html",
    "title": "Class Generator<TService> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Generator<TService> Namespace ToSic.Lib.DI Assembly ToSic.Lib.Core.dll Lazy generator to create multiple new services/objects of a specific type. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class Generator<TService> : IHasLog Type Parameters TService Inheritance object Generator<TService> Implements IHasLog Constructors Generator(IServiceProvider) Constructor should only be used in DI context and never be called directly. public Generator(IServiceProvider sp) Parameters sp IServiceProvider Properties Log The parent log, which is attached to newly generated objects if they support logging. public ILog Log { get; } Property Value ILog Methods New() Factory method to generate a new service public TService New() Returns TService SetInit(Action<TService>) Set the init-command as needed public Generator<TService> SetInit(Action<TService> newInitCall) Parameters newInitCall Action<TService> Returns Generator<TService>"
  },
  "api/dot-net/ToSic.Lib.DI.LazyImplementation-1.html": {
    "href": "api/dot-net/ToSic.Lib.DI.LazyImplementation-1.html",
    "title": "Class LazyImplementation<TService> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LazyImplementation<TService> Namespace ToSic.Lib.DI Assembly ToSic.Lib.Core.dll Enables lazy requesting of objects - won't be available until needed. This is a classic plain-vanilla implementation of Lazy for ServiceProviders. Note that most code in the ToSic Namespace will prefer LazySvc<TService> [InternalApi_DoNotUse_MayChangeWithoutNotice] public class LazyImplementation<TService> : Lazy<TService> Type Parameters TService Inheritance object Lazy<TService> LazyImplementation<TService> Inherited Members Lazy<TService>.ToString() Lazy<TService>.IsValueCreated Lazy<TService>.Value Constructors LazyImplementation(IServiceProvider) Enables lazy requesting of objects - won't be available until needed. This is a classic plain-vanilla implementation of Lazy for ServiceProviders. Note that most code in the ToSic Namespace will prefer LazySvc<TService> public LazyImplementation(IServiceProvider sp) Parameters sp IServiceProvider"
  },
  "api/dot-net/ToSic.Lib.DI.LazySvc-1.html": {
    "href": "api/dot-net/ToSic.Lib.DI.LazySvc-1.html",
    "title": "Class LazySvc<TService> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LazySvc<TService> Namespace ToSic.Lib.DI Assembly ToSic.Lib.Core.dll Helps us create lazy Service objects. It has some special features: It will automatically lazy-attach a logger when used correctly It can also be configured with a lazy init function to keep code clean. This reduces the amount of plumbing in many code files. It will detect if the provided object/service supports these features. So if it's used for anything that doesn't support logging it will just behave like Lazy. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class LazySvc<TService> : IHasLog where TService : class Type Parameters TService Service type, ideally based on ToSic.Lib.Services.ServiceBase Inheritance object LazySvc<TService> Implements IHasLog Remarks Constructor, should never be called as it's only meant to be used with Dependency Injection. Constructors LazySvc(IServiceProvider) Helps us create lazy Service objects. It has some special features: It will automatically lazy-attach a logger when used correctly It can also be configured with a lazy init function to keep code clean. This reduces the amount of plumbing in many code files. It will detect if the provided object/service supports these features. So if it's used for anything that doesn't support logging it will just behave like Lazy. public LazySvc(IServiceProvider sp) Parameters sp IServiceProvider Service provider, in case we need to debug something Remarks Constructor, should never be called as it's only meant to be used with Dependency Injection. Properties IsValueCreated public bool IsValueCreated { get; } Property Value bool Log The parent log, which is attached to newly generated objects if they support logging. public ILog Log { get; } Property Value ILog Value public TService Value { get; } Property Value TService Methods Inject(TService) EXPERIMENTAL - replace a service with an already prepared one, to bypass the default factory in edge cases public void Inject(TService replacement) Parameters replacement TService SetInit(Action<TService>) Set the init-command as needed public LazySvc<TService> SetInit(Action<TService> newInitCall) Parameters newInitCall Action<TService> Returns LazySvc<TService>"
  },
  "api/dot-net/ToSic.Lib.DI.html": {
    "href": "api/dot-net/ToSic.Lib.DI.html",
    "title": "Namespace ToSic.Lib.DI | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib.DI Classes Generator<TService> Lazy generator to create multiple new services/objects of a specific type. LazyImplementation<TService> Enables lazy requesting of objects - won't be available until needed. This is a classic plain-vanilla implementation of Lazy for ServiceProviders. Note that most code in the ToSic Namespace will prefer LazySvc<TService> LazySvc<TService> Helps us create lazy Service objects. It has some special features: It will automatically lazy-attach a logger when used correctly It can also be configured with a lazy init function to keep code clean. This reduces the amount of plumbing in many code files. It will detect if the provided object/service supports these features. So if it's used for anything that doesn't support logging it will just behave like Lazy."
  },
  "api/dot-net/ToSic.Lib.Data.IHasIdentityNameId.html": {
    "href": "api/dot-net/ToSic.Lib.Data.IHasIdentityNameId.html",
    "title": "Interface IHasIdentityNameId | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHasIdentityNameId Namespace ToSic.Lib.Data Assembly ToSic.Lib.Core.dll Special interface to ensure consistency across the code base. It's meant to ensure that any data which has an identity can also provide a string-based ID from that (could be a Guid.ToString()) or a real unique name. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IHasIdentityNameId Properties NameId Primary identifier of an object which has this property. It will be unique and used as an ID where needed. string NameId { get; } Property Value string"
  },
  "api/dot-net/ToSic.Lib.Data.html": {
    "href": "api/dot-net/ToSic.Lib.Data.html",
    "title": "Namespace ToSic.Lib.Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib.Data Interfaces IHasIdentityNameId Special interface to ensure consistency across the code base. It's meant to ensure that any data which has an identity can also provide a string-based ID from that (could be a Guid.ToString()) or a real unique name."
  },
  "api/dot-net/ToSic.Lib.Documentation.DocumentationPlaceholder.html": {
    "href": "api/dot-net/ToSic.Lib.Documentation.DocumentationPlaceholder.html",
    "title": "Class DocumentationPlaceholder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DocumentationPlaceholder Namespace ToSic.Lib.Documentation Assembly ToSic.Lib.Core.dll This is a placeholder class, to make sure the namespace is included in the documentation. It is used in namespaces where there are no public classes. [PublicApi] public class DocumentationPlaceholder Inheritance object DocumentationPlaceholder Derived DocsPlaceholder DocsPlaceholder"
  },
  "api/dot-net/ToSic.Lib.Documentation.InternalApi_DoNotUse_MayChangeWithoutNotice.html": {
    "href": "api/dot-net/ToSic.Lib.Documentation.InternalApi_DoNotUse_MayChangeWithoutNotice.html",
    "title": "Class InternalApi_DoNotUse_MayChangeWithoutNotice | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class InternalApi_DoNotUse_MayChangeWithoutNotice Namespace ToSic.Lib.Documentation Assembly ToSic.Lib.Core.dll This attribute serves as metadata for other things to mark them as internal APIs. Use this on objects/properties/methods you want to document publicly for example to improve understanding of the system - but still mark as internal so people are warned [PublicApi] [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public class InternalApi_DoNotUse_MayChangeWithoutNotice : Attribute Inheritance object Attribute InternalApi_DoNotUse_MayChangeWithoutNotice Constructors InternalApi_DoNotUse_MayChangeWithoutNotice() public InternalApi_DoNotUse_MayChangeWithoutNotice() InternalApi_DoNotUse_MayChangeWithoutNotice(string) public InternalApi_DoNotUse_MayChangeWithoutNotice(string comment = null) Parameters comment string"
  },
  "api/dot-net/ToSic.Lib.Documentation.PrivateApi.html": {
    "href": "api/dot-net/ToSic.Lib.Documentation.PrivateApi.html",
    "title": "Class PrivateApi | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class PrivateApi Namespace ToSic.Lib.Documentation Assembly ToSic.Lib.Core.dll This attribute marks classes, methods, etc. as private APIs So they should not be publicly documented. By default, all APIs are private, so you only need this attribute on children of classes marked with [PublicApi] see PublicApi. [PublicApi] [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public class PrivateApi : Attribute Inheritance object Attribute PrivateApi Constructors PrivateApi() The [PrivateApi] attribute can be used without additional comment. public PrivateApi() PrivateApi(string) Constructor with optional comment [PrivateApi(some-comment)]. public PrivateApi(string comment) Parameters comment string Reason why it's private, optional"
  },
  "api/dot-net/ToSic.Lib.Documentation.PublicApi.html": {
    "href": "api/dot-net/ToSic.Lib.Documentation.PublicApi.html",
    "title": "Class PublicApi | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class PublicApi Namespace ToSic.Lib.Documentation Assembly ToSic.Lib.Core.dll This attribute marks classes, properties etc. as public APIs. Any API / code with this attribute will be published in the docs. You can apply it to anything, but usually you will only need it on classes. [PublicApi] [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public class PublicApi : Attribute Inheritance object Attribute PublicApi Constructors PublicApi() The [PublicApi] attribute can be used without additional comment. public PublicApi() PublicApi(string) Constructor with optional comment [PublicApi(some-comment)] public PublicApi(string comment) Parameters comment string Reason why it's public, optional"
  },
  "api/dot-net/ToSic.Lib.Documentation.html": {
    "href": "api/dot-net/ToSic.Lib.Documentation.html",
    "title": "Namespace ToSic.Lib.Documentation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib.Documentation Classes DocumentationPlaceholder This is a placeholder class, to make sure the namespace is included in the documentation. It is used in namespaces where there are no public classes. InternalApi_DoNotUse_MayChangeWithoutNotice This attribute serves as metadata for other things to mark them as internal APIs. Use this on objects/properties/methods you want to document publicly for example to improve understanding of the system - but still mark as internal so people are warned PrivateApi This attribute marks classes, methods, etc. as private APIs So they should not be publicly documented. By default, all APIs are private, so you only need this attribute on children of classes marked with [PublicApi] see PublicApi. PublicApi This attribute marks classes, properties etc. as public APIs. Any API / code with this attribute will be published in the docs. You can apply it to anything, but usually you will only need it on classes."
  },
  "api/dot-net/ToSic.Lib.Helpers.GetOnce-1.html": {
    "href": "api/dot-net/ToSic.Lib.Helpers.GetOnce-1.html",
    "title": "Class GetOnce<TResult> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class GetOnce<TResult> Namespace ToSic.Lib.Helpers Assembly ToSic.Lib.Core.dll Simple helper class to use on object properties which should be generated once. Important for properties which can also return null, because then checking for null won't work to determine if we already tried to retrieve it. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class GetOnce<TResult> Type Parameters TResult Inheritance object GetOnce<TResult> Constructors GetOnce() Construct an empty GetOnce object for use later on. In case you're wondering why we can't pass the generator in on the constructor: Reason is that in most cases we need real objects in the generator function, which doesn't work in a static context. This means that if the = new GetOnce() is run on the private property (which is the most common case) most generators can't be added. public GetOnce() Properties IsValueCreated Determines if value has been created. The name IsValueCreated is the same as in a Lazy() object public bool IsValueCreated { get; } Property Value bool Methods Get(Func<TResult>) Get the value. If not yet retrieved, use the generator function (but only once). public TResult Get(Func<TResult> generator) Parameters generator Func<TResult> Function which will generate the value on first use. Returns TResult Get(ILog, Func<TResult>, bool, bool, string, string, string, string, int) Getter with will log it's actions when it retrieves the property the first time. public TResult Get(ILog log, Func<TResult> generator, bool timer = false, bool enabled = true, string parameters = null, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog Log object to use when logging generator Func<TResult> Function which will generate the value on first use. The function must return the expected value/type. timer bool enable a timer from call/close enabled bool can be set to false if you want to disable logging parameters string message string cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line Returns TResult GetL(ILog, Func<ILog, TResult>, bool, bool, string, string, string, string, int) Getter with will log when it gets the property the first time. This will also provide the logger to the generator as a first function parameter. public TResult GetL(ILog log, Func<ILog, TResult> generator, bool timer = false, bool enabled = true, string parameters = null, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog Log object to use when logging generator Func<ILog, TResult> Function which will generate the value on first use. The function must return the expected value/type. timer bool enable a timer from call/close enabled bool can be set to false if you want to disable logging parameters string message string cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line Returns TResult GetM(ILog, Func<ILog, (TResult Result, string Message)>, bool, bool, string, string, string, string, int) Getter with will log when it gets the property the first time. It provides the logger as a first function in the parameter. public TResult GetM(ILog log, Func<ILog, (TResult Result, string Message)> generator, bool timer = false, bool enabled = true, string parameters = null, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog Log object to use when logging generator Func<ILog, (TResult Result, string Message)> Function which will generate the value on first use. The function must return a Tuple (TResult Result, string Message) which it uses to log when done. timer bool enable a timer from call/close enabled bool can be set to false if you want to disable logging parameters string message string cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line Returns TResult Reset(ILog) Reset the state and value so it will be re-generated next time it's needed. public void Reset(ILog log = null) Parameters log ILog Reset(TResult) Reset the state and value so it will be re-generated next time it's needed. public void Reset(TResult newValue) Parameters newValue TResult"
  },
  "api/dot-net/ToSic.Lib.Helpers.GetOnceNamed-1.html": {
    "href": "api/dot-net/ToSic.Lib.Helpers.GetOnceNamed-1.html",
    "title": "Class GetOnceNamed<TResult> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class GetOnceNamed<TResult> Namespace ToSic.Lib.Helpers Assembly ToSic.Lib.Core.dll [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Experimental\")] public class GetOnceNamed<TResult> Type Parameters TResult Inheritance object GetOnceNamed<TResult> Constructors GetOnceNamed() Construct an empty GetOnceNamed object for use later on. In case you're wondering why we can't pass the generator in on the constructor: Reason is that in most cases we need real objects in the generator function, which doesn't work in a static context. This means that if the = new GetOnce() is run on the private property (which is the most common case) most generators can't be added. public GetOnceNamed() Fields Cache public IDictionary<string, TResult> Cache Field Value IDictionary<string, TResult> Methods Get(string, Func<TResult>) Get the value. If not yet retrieved, use the generator function (but only once). public TResult Get(string name, Func<TResult> generator) Parameters name string Name of named instance, to use for caching generator Func<TResult> Function which will generate the value on first use. Returns TResult IsValueCreated(string) public bool IsValueCreated(string name) Parameters name string Returns bool Reset() public void Reset() Reset(string) public void Reset(string name) Parameters name string"
  },
  "api/dot-net/ToSic.Lib.Helpers.html": {
    "href": "api/dot-net/ToSic.Lib.Helpers.html",
    "title": "Namespace ToSic.Lib.Helpers | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib.Helpers Classes GetOnceNamed<TResult> GetOnce<TResult> Simple helper class to use on object properties which should be generated once. Important for properties which can also return null, because then checking for null won't work to determine if we already tried to retrieve it."
  },
  "api/dot-net/ToSic.Lib.Logging.CodeRef.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.CodeRef.html",
    "title": "Class CodeRef | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CodeRef Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Reference to source code. It contains the path to the file, the method name and the line in the code. This is used to track the exact location in the code where a log was added/created. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"This is just FYI\")] public class CodeRef Inheritance object CodeRef Remarks This is a very internal plumbing-object important for referencing code in log entries. Constructors CodeRef(string, string, int) Reference to source code. It contains the path to the file, the method name and the line in the code. This is used to track the exact location in the code where a log was added/created. public CodeRef(string cPath = null, string cName = null, int cLine = 0) Parameters cPath string auto pre-filled by the compiler - path to the code file cName string auto pre-filled by the compiler - method name cLine int auto pre-filled by the compiler - code line number Remarks This is a very internal plumbing-object important for referencing code in log entries. Fields Line Line of code where the code was running public readonly int Line Field Value int Message public const string Message = \"Message\" Field Value string Name Name of the method/property accessed public readonly string Name Field Value string Path Path to the code file public readonly string Path Field Value string Methods Create(string, string, int) Manually create a CodeRef using an already available set of path/name/line. Mainly used for very internal APIs. public static CodeRef Create(string cPath, string cName, int cLine) Parameters cPath string cName string cLine int Returns CodeRef A new CodeRef object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. UseOrCreate(CodeRef, string, string, int) Special helper to choose from an already existing CodeRef object or to create a new one if it was null. public static CodeRef UseOrCreate(CodeRef codeRef, string cPath, string cName, int cLine) Parameters codeRef CodeRef Exiting CodeRef object or null cPath string auto pre-filled by the compiler - path to the code file cName string auto pre-filled by the compiler - method name cLine int auto pre-filled by the compiler - code line number Returns CodeRef"
  },
  "api/dot-net/ToSic.Lib.Logging.ICanDebug.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ICanDebug.html",
    "title": "Interface ICanDebug | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICanDebug Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Trivial interface just to ensure that we have debug on/off consistent [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ICanDebug Properties Debug Debug state on/off bool Debug { get; set; } Property Value bool"
  },
  "api/dot-net/ToSic.Lib.Logging.ICanDump.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ICanDump.html",
    "title": "Interface ICanDump | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICanDump Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Interface to mark classes which can dump their state into the log as a string. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ICanDump Methods Dump() Create a string dump of the current objects state/contents. string Dump() Returns string"
  },
  "api/dot-net/ToSic.Lib.Logging.IHasLog.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.IHasLog.html",
    "title": "Interface IHasLog | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHasLog Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just FYI\")] public interface IHasLog Properties Log The log object which contains the log and can add more logs to the list. ILog Log { get; } Property Value ILog"
  },
  "api/dot-net/ToSic.Lib.Logging.IHasLogExtensions.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.IHasLogExtensions.html",
    "title": "Class IHasLogExtensions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class IHasLogExtensions Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Extension to objects having a Log, to connect them to parent logs. [InternalApi_DoNotUse_MayChangeWithoutNotice] public static class IHasLogExtensions Inheritance object IHasLogExtensions"
  },
  "api/dot-net/ToSic.Lib.Logging.ILog.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILog.html",
    "title": "Interface ILog | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILog Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights. To add messages/logs of all kinds you must use null-safe extension methods. It will require you to add the namespace ToSic.Lib.Logging. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just FYI\")] public interface ILog Extension Methods ILogExtensions.Try(ILog, Func<string>, string) ILog_Actions.Do(ILog, Action, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Action<ILogCall>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Func<string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Func<ILogCall, string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Action, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Action<ILogCall>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Func<string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Func<ILogCall, string>, bool, bool, string, string, string, int) ILog_Properties.GetterL<TProperty>(ILog, Func<ILogCall, TProperty>, bool, bool, string, string, string, string, int) ILog_Properties.GetterM<TProperty>(ILog, Func<(TProperty Result, string FinalMessage)>, bool, bool, string, string, string, int) ILog_Properties.GetterM<TProperty>(ILog, Func<ILogCall, (TProperty Result, string Message)>, bool, bool, string, string, string, string, int) ILog_Properties.Getter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, string, int) ILog_Properties.Setter(ILog, Action, bool, bool, string, string, string, int) ILog_Properties.Setter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, int) Properties NameId A unique identifier containing a special Scp.NameOf[id] name. This consists of Scp Scope - up to 3 characters NameOf Name - up to 6 characters id A random id 2 characters long string NameId { get; } Property Value string"
  },
  "api/dot-net/ToSic.Lib.Logging.ILogCall-1.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILogCall-1.html",
    "title": "Interface ILogCall<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILogCall<T> Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll A mini logger for a function call, which should be closed using a form of Return(...) when the function completes. [PublicApi] public interface ILogCall<T> : ILogCall, ILog Type Parameters T Type of data to return at the end of the call. Note that you cannot use dynamic for T, so if your result is dynamic, use object Inherited Members ILogCall.Entry ILogCall.Timer ILogCall.Log ILog.NameId Extension Methods ILogExtensions.Try(ILog, Func<string>, string) ILog_Actions.Do(ILog, Action, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Action<ILogCall>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Func<string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Func<ILogCall, string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Action, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Action<ILogCall>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Func<string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Func<ILogCall, string>, bool, bool, string, string, string, int) ILog_Properties.GetterL<TProperty>(ILog, Func<ILogCall, TProperty>, bool, bool, string, string, string, string, int) ILog_Properties.GetterM<TProperty>(ILog, Func<(TProperty Result, string FinalMessage)>, bool, bool, string, string, string, int) ILog_Properties.GetterM<TProperty>(ILog, Func<ILogCall, (TProperty Result, string Message)>, bool, bool, string, string, string, string, int) ILog_Properties.Getter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, string, int) ILog_Properties.Setter(ILog, Action, bool, bool, string, string, string, int) ILog_Properties.Setter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, int) ILogCallExtensions.Done(ILogCall) ILogCallExtensions.Done(ILogCall, string) ILogCallExtensions.Done<T>(ILogCall, T) ILogCallExtensions.ReturnAndLogIfNull<T>(ILogCall<T>, T) ILogCallExtensions.ReturnAndLog<T>(ILogCall<T>, T) ILogCallExtensions.ReturnAndLog<T>(ILogCall<T>, T, string) ILogCallExtensions.ReturnAsError<T>(ILogCall<T>, T, string) ILogCallExtensions.ReturnAsOk<T>(ILogCall<T>, T) ILogCallExtensions.ReturnNull<T>(ILogCall<T>) ILogCallExtensions.ReturnNull<T>(ILogCall<T>, string) ILogCallExtensions.Return<T>(ILogCall<T>, T) ILogCallExtensions.Return<T>(ILogCall<T>, T, string) Remarks It's important to note that all Return commands are extension methods. Certain types such as bool have their own custom Return... commands, such as ReturnFalse()"
  },
  "api/dot-net/ToSic.Lib.Logging.ILogCall.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILogCall.html",
    "title": "Interface ILogCall | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILogCall Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll A log object used to log the activity of a specific function call. It is usually created in the beginning of the call and closed on various return calls or at the end of the function. Note that most of the methods used to complete a call are extension methods. [PublicApi] public interface ILogCall : ILog Inherited Members ILog.NameId Extension Methods ILogExtensions.Try(ILog, Func<string>, string) ILog_Actions.Do(ILog, Action, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Action<ILogCall>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Func<string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, Func<ILogCall, string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Action, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Action<ILogCall>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Func<string>, bool, bool, string, string, string, int) ILog_Actions.Do(ILog, string, Func<ILogCall, string>, bool, bool, string, string, string, int) ILog_Properties.GetterL<TProperty>(ILog, Func<ILogCall, TProperty>, bool, bool, string, string, string, string, int) ILog_Properties.GetterM<TProperty>(ILog, Func<(TProperty Result, string FinalMessage)>, bool, bool, string, string, string, int) ILog_Properties.GetterM<TProperty>(ILog, Func<ILogCall, (TProperty Result, string Message)>, bool, bool, string, string, string, string, int) ILog_Properties.Getter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, string, int) ILog_Properties.Setter(ILog, Action, bool, bool, string, string, string, int) ILog_Properties.Setter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, int) ILogCallExtensions.Done(ILogCall) ILogCallExtensions.Done(ILogCall, string) ILogCallExtensions.Done<T>(ILogCall, T) Remarks Normal code will never create this object, but get such an object when calling ILog.Fn(...) extensions ILogExtensions. Properties Entry The main log-entry for this call, which will also receive the final value at the end of the call. Entry Entry { get; } Property Value Entry Log Reference to the parent log. ILog Log { get; } Property Value ILog Timer A stopwatch object which is used for timing purposes on this call. Stopwatch Timer { get; } Property Value Stopwatch"
  },
  "api/dot-net/ToSic.Lib.Logging.ILogCallExtensions.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILogCallExtensions.html",
    "title": "Class ILogCallExtensions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ILogCallExtensions Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Extensions for ILogCall objects which don't need to return a value. [PublicApi] public static class ILogCallExtensions Inheritance object ILogCallExtensions Methods Done(ILogCall) Complete/close an ILogCall without returning a value. public static void Done(this ILogCall logCall) Parameters logCall ILogCall The log call or null Done(ILogCall, string) Complete/close an ILogCall without returning a value, and also add a message. public static void Done(this ILogCall logCall, string message) Parameters logCall ILogCall The log call or null message string Done<T>(ILogCall, T) Complete/close an ILogCall without returning a value, and also add a message. public static T Done<T>(this ILogCall logCall, T exception) where T : Exception Parameters logCall ILogCall The log call or null exception T Returns T Type Parameters T ReturnAndLogIfNull<T>(ILogCall<T>, T) public static T ReturnAndLogIfNull<T>(this ILogCall<T> logCall, T result) Parameters logCall ILogCall<T> result T Returns T Type Parameters T ReturnAndLog<T>(ILogCall<T>, T) Return a value and log the result as well. Note that if the object supports ICanDump it will use that dump to log it's value. public static T ReturnAndLog<T>(this ILogCall<T> logCall, T result) Parameters logCall ILogCall<T> The log call or null result T Returns T Type Parameters T ReturnAndLog<T>(ILogCall<T>, T, string) Return a value and log the result as well + add a message. Note that if the object supports ICanDump it will use that dump to log it's value. public static T ReturnAndLog<T>(this ILogCall<T> logCall, T result, string message) Parameters logCall ILogCall<T> The log call or null result T message string Returns T Type Parameters T ReturnAsError<T>(ILogCall<T>, T, string) Return a value with the standard message \"error\" public static T ReturnAsError<T>(this ILogCall<T> logCall, T result, string message = null) Parameters logCall ILogCall<T> The log call or null result T message string Returns T Type Parameters T ReturnAsOk<T>(ILogCall<T>, T) Return a value with the standard message \"ok\" public static T ReturnAsOk<T>(this ILogCall<T> logCall, T result) Parameters logCall ILogCall<T> The log call or null result T Returns T Type Parameters T ReturnEmpty(ILogCall<string>) Return true for ILogCall bool objects. public static string ReturnEmpty(this ILogCall<string> logCall) Parameters logCall ILogCall<string> The log call or null Returns string ReturnEmpty(ILogCall<string>, string) Return true for ILogCall bool objects. public static string ReturnEmpty(this ILogCall<string> logCall, string message) Parameters logCall ILogCall<string> The log call or null message string Message to add to the log Returns string ReturnFalse(ILogCall<bool>) Return false for ILogCall bool objects. public static bool ReturnFalse(this ILogCall<bool> logCall) Parameters logCall ILogCall<bool> The log call or null Returns bool ReturnFalse(ILogCall<bool>, string) Return false for ILogCall bool objects with a message. public static bool ReturnFalse(this ILogCall<bool> logCall, string message) Parameters logCall ILogCall<bool> The log call or null message string Returns bool ReturnNull<T>(ILogCall<T>) Return a null or the default value (like a zero for int) without further messages. public static T ReturnNull<T>(this ILogCall<T> logCall) Parameters logCall ILogCall<T> The log call or null Returns T Type Parameters T ReturnNull<T>(ILogCall<T>, string) Return a null or the default value (like a zero for int) with specified message. public static T ReturnNull<T>(this ILogCall<T> logCall, string message) Parameters logCall ILogCall<T> The log call or null message string Message to add to the log Returns T Type Parameters T ReturnTrue(ILogCall<bool>) Return true for ILogCall bool objects. public static bool ReturnTrue(this ILogCall<bool> logCall) Parameters logCall ILogCall<bool> The log call or null Returns bool ReturnTrue(ILogCall<bool>, string) Return true for ILogCall bool objects with a message. public static bool ReturnTrue(this ILogCall<bool> logCall, string message) Parameters logCall ILogCall<bool> The log call or null message string Returns bool Return<T>(ILogCall<T>, T) Close the log call and return a specific result, without adding any message. public static T Return<T>(this ILogCall<T> logCall, T result) Parameters logCall ILogCall<T> The log call or null result T The result to return Returns T The result specified Type Parameters T Return<T>(ILogCall<T>, T, string) Close the log call and return a specific result, without adding any message. public static T Return<T>(this ILogCall<T> logCall, T result, string message) Parameters logCall ILogCall<T> The log call or null result T The result to return message string Message to add to the log Returns T The result specified Type Parameters T"
  },
  "api/dot-net/ToSic.Lib.Logging.ILogExtensions.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILogExtensions.html",
    "title": "Class ILogExtensions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ILogExtensions Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Various extensions for ILog objects to add logs. They are all implemented as extension methods, so that they will not fail even if the log object is null. [PublicApi] public static class ILogExtensions Inheritance object ILogExtensions Methods Try(ILog, Func<string>, string) Special helper to use a function to create a message, but ignore any errors to avoid problems when only logging. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"will probably be moved elsewhere some day\")] public static string Try(this ILog log, Func<string> messageMaker, string errorMessage = null) Parameters log ILog The log object - not used, just for syntax messageMaker Func<string> Function to generate the message. errorMessage string Message to show if it fails Returns string"
  },
  "api/dot-net/ToSic.Lib.Logging.ILogStore.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILogStore.html",
    "title": "Interface ILogStore | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILogStore Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Interface to add ILogs to the log storage. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ILogStore Methods Add(string, ILog) Add a log to the current history. LogStoreEntry Add(string segment, ILog log) Parameters segment string Segment name, like webapi or module log ILog Returns LogStoreEntry"
  },
  "api/dot-net/ToSic.Lib.Logging.ILog_Actions.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILog_Actions.html",
    "title": "Class ILog_Actions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ILog_Actions Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Extension methods for Actions (functions which don't return a value). [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP\")] public static class ILog_Actions Inheritance object ILog_Actions Methods Do(ILog, Action, bool, bool, string, string, string, int) Run code / action and just log that it happened. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, Action action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog action Action timer bool enabled bool message string cPath string Code file path, auto-added by compiler cName string Code method name, auto-added by compiler cLine int Code line number, auto-added by compiler Do(ILog, Action<ILogCall>, bool, bool, string, string, string, int) Run code / action which expects the inner logger as parameter, for further logging. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, Action<ILogCall> action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog action Action<ILogCall> timer bool enabled bool message string cPath string Code file path, auto-added by compiler cName string Code method name, auto-added by compiler cLine int Code line number, auto-added by compiler Do(ILog, Func<string>, bool, bool, string, string, string, int) Do something and the inner call can return a message which will be logged. The result of the inner call will just be logged. Ideal for calls which have a lot of logic and want to have a final message as to what case applied [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, Func<string> action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog action Func<string> The method called, whose return value will be logged but not passed on timer bool enabled bool message string cPath string Code file path, auto-added by compiler cName string Code method name, auto-added by compiler cLine int Code line number, auto-added by compiler Do(ILog, Func<ILogCall, string>, bool, bool, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, Func<ILogCall, string> action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog action Func<ILogCall, string> timer bool enabled bool message string cPath string cName string cLine int Do(ILog, string, Action, bool, bool, string, string, string, int) Run code / action and just log that it happened. This overload also accepts parameters to log and optional message. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, string parameters, Action action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog parameters string action Action timer bool enabled bool message string cPath string Code file path, auto-added by compiler cName string Code method name, auto-added by compiler cLine int Code line number, auto-added by compiler Do(ILog, string, Action<ILogCall>, bool, bool, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, string parameters, Action<ILogCall> action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog parameters string action Action<ILogCall> timer bool enabled bool message string cPath string cName string cLine int Do(ILog, string, Func<string>, bool, bool, string, string, string, int) Do something and the inner call can return a message which will be logged. The result of the inner call will just be logged. Ideal for calls which have a lot of logic and want to have a final message as to what case applied [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, string parameters, Func<string> action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog parameters string action Func<string> The method called, whose return value will be logged but not passed on timer bool enabled bool message string cPath string Code file path, auto-added by compiler cName string Code method name, auto-added by compiler cLine int Code line number, auto-added by compiler Do(ILog, string, Func<ILogCall, string>, bool, bool, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP but probably final\")] public static void Do(this ILog log, string parameters, Func<ILogCall, string> action, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog parameters string action Func<ILogCall, string> timer bool enabled bool message string cPath string cName string cLine int"
  },
  "api/dot-net/ToSic.Lib.Logging.ILog_Add.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILog_Add.html",
    "title": "Class ILog_Add | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ILog_Add Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Various extensions for ILog objects to add logs. They are all implemented as extension methods, so that they will not fail even if the log object is null. [PublicApi] public static class ILog_Add Inheritance object ILog_Add"
  },
  "api/dot-net/ToSic.Lib.Logging.ILog_Properties.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.ILog_Properties.html",
    "title": "Class ILog_Properties | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ILog_Properties Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll Extension methods for property getters and setters. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still experimental\")] public static class ILog_Properties Inheritance object ILog_Properties Methods GetterL<TProperty>(ILog, Func<ILogCall, TProperty>, bool, bool, string, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"2dm: Experimental, don't use yet\")] public static TProperty GetterL<TProperty>(this ILog log, Func<ILogCall, TProperty> getter, bool timer = false, bool enabled = true, string parameters = null, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog getter Func<ILogCall, TProperty> timer bool enabled bool parameters string message string cPath string cName string cLine int Returns TProperty Type Parameters TProperty GetterM<TProperty>(ILog, Func<(TProperty Result, string FinalMessage)>, bool, bool, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"2dm: Experimental, don't use yet\")] public static TProperty GetterM<TProperty>(this ILog log, Func<(TProperty Result, string FinalMessage)> getter, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog getter Func<(TProperty Result, string FinalMessage)> timer bool enabled bool message string cPath string cName string cLine int Returns TProperty Type Parameters TProperty GetterM<TProperty>(ILog, Func<ILogCall, (TProperty Result, string Message)>, bool, bool, string, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"2dm: Experimental, don't use yet\")] public static TProperty GetterM<TProperty>(this ILog log, Func<ILogCall, (TProperty Result, string Message)> getter, bool timer = false, bool enabled = true, string parameters = null, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog getter Func<ILogCall, (TProperty Result, string Message)> timer bool enabled bool parameters string message string cPath string cName string cLine int Returns TProperty Type Parameters TProperty Getter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, string, int) Short wrapper for PropertyGet calls which only return the value. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"2dm: Experimental, don't use yet\")] public static TProperty Getter<TProperty>(this ILog log, Func<TProperty> getter, bool timer = false, bool enabled = true, string message = null, string parameters = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog getter Func<TProperty> timer bool enabled bool message string parameters string cPath string cName string cLine int Returns TProperty Type Parameters TProperty Type of return value Setter(ILog, Action, bool, bool, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"2dm: Experimental, don't use yet\")] public static void Setter(this ILog log, Action setter, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog setter Action timer bool enabled bool message string cPath string cName string cLine int Setter<TProperty>(ILog, Func<TProperty>, bool, bool, string, string, string, int) [InternalApi_DoNotUse_MayChangeWithoutNotice(\"2dm: Experimental, don't use yet\")] public static void Setter<TProperty>(this ILog log, Func<TProperty> setter, bool timer = false, bool enabled = true, string message = null, string cPath = null, string cName = null, int cLine = 0) Parameters log ILog setter Func<TProperty> timer bool enabled bool message string cPath string cName string cLine int Type Parameters TProperty"
  },
  "api/dot-net/ToSic.Lib.Logging.LogConstants.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.LogConstants.html",
    "title": "Class LogConstants | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LogConstants Namespace ToSic.Lib.Logging Assembly ToSic.Lib.Core.dll [InternalApi_DoNotUse_MayChangeWithoutNotice] public class LogConstants Inheritance object LogConstants Fields ErrorPrefix public const string ErrorPrefix = \"ERROR: \" Field Value string FullNameUnknown public const string FullNameUnknown = \"tdo.unknwn\" Field Value string LiveStoreMaxItems public const int LiveStoreMaxItems = 500 Field Value int LiveStoreSegmentSize Size of a segment in the log history. public const int LiveStoreSegmentSize = 100 Field Value int NameMaxLength Max length of the name part after the scope prefix. public const int NameMaxLength = 6 Field Value int NameUnknown Name to use in situations where the name wasn't provided. public const string NameUnknown = \"unknwn\" Field Value string ScopeMaxLength Max length of the scope (prefix) in the name. public const int ScopeMaxLength = 3 Field Value int StoreWarningsPrefix Special prefix in the log history to ensure warnings can be extracted easily to show in a consolidated way. public const string StoreWarningsPrefix = \"warnings-\" Field Value string WarningPrefix public const string WarningPrefix = \"WARNING: \" Field Value string"
  },
  "api/dot-net/ToSic.Lib.Logging.html": {
    "href": "api/dot-net/ToSic.Lib.Logging.html",
    "title": "Namespace ToSic.Lib.Logging | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib.Logging The EAV system has a powerful internal logging system. It's the backbone to Insights. This is where it resides - usually you don't want to know about it ;). If you do, here a short conceptual background: Any object can have a property - usually called Log which is an ILog . Using this the object can call the Log.Add(...) to add messages. Many other commands help in various scenarios. The real power comes from chaining these - because each logger can know what parent-logger it reports to. This allows us to reproduce the chain of events in the original code, because you can track where loggers were made, and how they relate. The really amazing bit is that the logger will also pick up the class names, code-file names and line of code where it was logged \uD83D\uDE0E. Most objects which use the Log, implement the IHasLog, often by inheriting ToSic.Lib.Logging.HasLog which automates things when initializing - like the chaining of the Loggers. Classes CodeRef Reference to source code. It contains the path to the file, the method name and the line in the code. This is used to track the exact location in the code where a log was added/created. IHasLogExtensions Extension to objects having a Log, to connect them to parent logs. ILogCallExtensions Extensions for ILogCall objects which don't need to return a value. ILogExtensions Various extensions for ILog objects to add logs. They are all implemented as extension methods, so that they will not fail even if the log object is null. ILog_Actions Extension methods for Actions (functions which don't return a value). ILog_Add Various extensions for ILog objects to add logs. They are all implemented as extension methods, so that they will not fail even if the log object is null. ILog_Properties Extension methods for property getters and setters. LogConstants Interfaces ICanDebug Trivial interface just to ensure that we have debug on/off consistent ICanDump Interface to mark classes which can dump their state into the log as a string. IHasLog Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. ILog A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights. To add messages/logs of all kinds you must use null-safe extension methods. It will require you to add the namespace ToSic.Lib.Logging. ILogCall A log object used to log the activity of a specific function call. It is usually created in the beginning of the call and closed on various return calls or at the end of the function. Note that most of the methods used to complete a call are extension methods. ILogCall<T> A mini logger for a function call, which should be closed using a form of Return(...) when the function completes. ILogStore Interface to add ILogs to the log storage."
  },
  "api/dot-net/ToSic.Lib.Services.MyServicesBase-1.html": {
    "href": "api/dot-net/ToSic.Lib.Services.MyServicesBase-1.html",
    "title": "Class MyServicesBase<T> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class MyServicesBase<T> Namespace ToSic.Lib.Services Assembly ToSic.Lib.Core.dll Special type of MyServices (dependency helpers). This one is used to extend dependencies of a base classes MyServicesBase<T>. They must then still have the original Dependencies to get them. [PublicApi] public class MyServicesBase<T> : MyServicesBase Type Parameters T Inheritance object MyServicesBase MyServicesBase<T> Inherited Members MyServicesBase.ConnectLogs(object[]) MyServicesBase.ConnectServices(params object[]) MyServicesBase.ConnectService<TService>(TService) Constructors MyServicesBase(T, NoParamOrder, object[]) Special type of MyServices (dependency helpers). This one is used to extend dependencies of a base classes MyServicesBase<T>. They must then still have the original Dependencies to get them. public MyServicesBase(T parentServices, NoParamOrder protect = default, object[] connect = null) Parameters parentServices T protect NoParamOrder connect object[] Properties ParentServices public T ParentServices { get; } Property Value T"
  },
  "api/dot-net/ToSic.Lib.Services.MyServicesBase.html": {
    "href": "api/dot-net/ToSic.Lib.Services.MyServicesBase.html",
    "title": "Class MyServicesBase | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class MyServicesBase Namespace ToSic.Lib.Services Assembly ToSic.Lib.Core.dll Base class for all MyServices. These are helper objects to get dependencies for a class. It should be used when the owning-class is expected to be inherited. This is important for inheriting classes to keep a stable constructor. Can collect all objects which need the log and init that. [PublicApi] public abstract class MyServicesBase Inheritance object MyServicesBase Derived MyServicesBase<T> Constructors MyServicesBase(NoParamOrder, object[]) protected MyServicesBase(NoParamOrder protect = default, object[] connect = null) Parameters protect NoParamOrder connect object[] Methods ConnectLogs(object[]) Add objects to various queues to be auto-initialized when ConnectServices<TDependencies>(TDependencies, ILog) is called later on protected void ConnectLogs(object[] services) Parameters services object[] One or more services which could implement ToSic.Lib.DI.ILazyInitLog or IHasLog ConnectService<TService>(TService) Experimental Connect-one, may be removed again. protected TService ConnectService<TService>(TService service) Parameters service TService Returns TService the service passed in Type Parameters TService ConnectServices(params object[]) [Obsolete(\"Avoid using, will be removed soon. Use ConnectLogs([...])\")] protected void ConnectServices(params object[] services) Parameters services object[]"
  },
  "api/dot-net/ToSic.Lib.Services.html": {
    "href": "api/dot-net/ToSic.Lib.Services.html",
    "title": "Namespace ToSic.Lib.Services | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib.Services Classes MyServicesBase Base class for all MyServices. These are helper objects to get dependencies for a class. It should be used when the owning-class is expected to be inherited. This is important for inheriting classes to keep a stable constructor. Can collect all objects which need the log and init that. MyServicesBase<T> Special type of MyServices (dependency helpers). This one is used to extend dependencies of a base classes MyServicesBase<T>. They must then still have the original Dependencies to get them."
  },
  "api/dot-net/ToSic.Lib.html": {
    "href": "api/dot-net/ToSic.Lib.html",
    "title": "Namespace ToSic.Lib | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Lib ToSic.Lib is for internal helpers and base classes which are just FYI. Namespaces ToSic.Lib.Coding ToSic.Lib.DI ToSic.Lib.Data ToSic.Lib.Documentation ToSic.Lib.Helpers ToSic.Lib.Logging ToSic.Lib.Services"
  },
  "api/dot-net/ToSic.Sxc.Adam.FileTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.FileTyped.html",
    "title": "Class FileTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FileTyped Namespace ToSic.Sxc.Adam Assembly ToSic.Sxc.dll A File Entity for typed use. It defines the schema for a file as returned by the AppAssets DataSource. [PublicApi] public class FileTyped : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FileTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. public string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. public FolderTyped Folder { get; } Property Value FolderTyped FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Adam.Internal.IFileEntity.Name public string FullName { get; } Property Value string Guid An empty Guid, since files/folders don't have a Guid. public Guid Guid { get; } Property Value Guid Id The ID of this asset (file/folder). In the case of App files/folders, these IDs will usually be negative, to indicate that they are not stable and can change at any time. public int Id { get; } Property Value int Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The file name without extension. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Size The size in bytes. public int Size { get; } Property Value int SizeInfo public ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string Remarks It hides the base method ITypedItem.Url."
  },
  "api/dot-net/ToSic.Sxc.Adam.FolderTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.FolderTyped.html",
    "title": "Class FolderTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FolderTyped Namespace ToSic.Sxc.Adam Assembly ToSic.Sxc.dll A Folder Entity for typed use. It defines the schema for a folder as returned by the AppAssets DataSource. [PublicApi] public class FolderTyped : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FolderTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Files All files in this folder. public IEnumerable<FileTyped> Files { get; } Property Value IEnumerable<FileTyped> Folder Reference to the parent folder. Returns null on the root folder. public FolderTyped Folder { get; } Property Value FolderTyped Folders All sub folders in this folder. public IEnumerable<FolderTyped> Folders { get; } Property Value IEnumerable<FolderTyped> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name public string FullName { get; } Property Value string Guid An empty Guid, since files/folders don't have a Guid. public Guid Guid { get; } Property Value Guid Id The ID of this asset (file/folder). In the case of App files/folders, these IDs will usually be negative, to indicate that they are not stable and can change at any time. public int Id { get; } Property Value int Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string Remarks It hides the base method ITypedItem.Url."
  },
  "api/dot-net/ToSic.Sxc.Adam.IAsset.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IAsset.html",
    "title": "Interface IAsset | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAsset Namespace ToSic.Sxc.Adam Assembly ToSic.Sxc.dll Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common in addition to what they inherit from the EAV [PublicApi] public interface IAsset : IHasMetadata Properties HasMetadata Tells you if this asset has real metadata attached or not. bool HasMetadata { get; } Property Value bool true if this asset has metadata, false if it doesn't (in which case the Metadata property still works, but won't deliver any real values) Metadata List of metadata items - will automatically contain a fake item, even if no metadata exits to help in razor template etc. IMetadata Metadata { get; } Property Value IMetadata An IMetadata which contains the metadata, or an empty IMetadata which still works if no metadata exists. Type The type of this asset (folder, file, etc.) - typically for adding icons or similar when listing assets. string Type { get; } Property Value string folder, image, document, file depending on what it is. document for C:\\Inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf Url The path to this asset as used from external access. Must be a full url beginning with a \"/\" like \"/Portals/0/adam/...\" string Url { get; } Property Value string The url to this asset. /Portals/0/2sxc/content/assets/docs/terms/file.pdf for C:\\Inetpub\\wwwroot\\www.2sic.com\\Portals\\0\\2sxc\\content\\assets\\docs\\terms\\file.pdf"
  },
  "api/dot-net/ToSic.Sxc.Adam.IFile.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IFile.html",
    "title": "Interface IFile | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFile Namespace ToSic.Sxc.Adam Assembly ToSic.Sxc.dll An ADAM (Automatic Digital Asset Management) file This simple interface assumes that it uses int-IDs. [PublicApi] public interface IFile : IAsset, IHasMetadata, IFile, IAsset Inherited Members IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type IFile.Extension IFile.Folder IFile.FolderId IFile.FullName IFile.Size IFile.SizeInfo IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath"
  },
  "api/dot-net/ToSic.Sxc.Adam.IFolder.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IFolder.html",
    "title": "Interface IFolder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFolder Namespace ToSic.Sxc.Adam Assembly ToSic.Sxc.dll An ADAM (Automatic Digital Asset Management) folder. This simple interface assumes that it uses int-IDs. [PublicApi] public interface IFolder : IFolder, IAsset, IAsset, IHasMetadata Inherited Members IFolder.HasChildren IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type Properties Files Get the files in this folder IEnumerable<IFile> Files { get; } Property Value IEnumerable<IFile> A list of files in this folder as IFile Folders Get the sub-folders in this folder IEnumerable<IFolder> Folders { get; } Property Value IEnumerable<IFolder> A list of folders inside this folder - as IFolder."
  },
  "api/dot-net/ToSic.Sxc.Adam.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.html",
    "title": "Namespace ToSic.Sxc.Adam | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Adam Everything related to ADAM - the automatic digital asset system in 2sxc. When you use AsAdam on any dynamic entity, you'll get IFolder objects which will also contain IFile files. Tip Read about adam in the ADAM specs Interfaces IAsset Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common in addition to what they inherit from the EAV IFile An ADAM (Automatic Digital Asset Management) file This simple interface assumes that it uses int-IDs. IFolder An ADAM (Automatic Digital Asset Management) folder. This simple interface assumes that it uses int-IDs."
  },
  "api/dot-net/ToSic.Sxc.Apps.AppFileTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.AppFileTyped.html",
    "title": "Class AppFileTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AppFileTyped Namespace ToSic.Sxc.Apps Assembly ToSic.Sxc.dll An App File Entity for typed use. It defines the schema for a file as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta in v19 as the final name may change.\")] public class AppFileTyped : CustomItem, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomItem AppFileTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomItem._item CustomItem.ToString() CustomItem.ContainsKey(string) CustomItem.Keys(NoParamOrder, IEnumerable<string>) CustomItem.IsEmpty(string, NoParamOrder, string) CustomItem.IsNotEmpty(string, NoParamOrder, string) CustomItem.Get(string, NoParamOrder, bool?, string) CustomItem.Get<TValue>(string, NoParamOrder, TValue, bool?, string) CustomItem.Bool(string, NoParamOrder, bool, bool?) CustomItem.DateTime(string, NoParamOrder, DateTime, bool?) CustomItem.String(string, NoParamOrder, string, bool?, object) CustomItem.Int(string, NoParamOrder, int, bool?) CustomItem.Long(string, NoParamOrder, long, bool?) CustomItem.Float(string, NoParamOrder, float, bool?) CustomItem.Decimal(string, NoParamOrder, decimal, bool?) CustomItem.Double(string, NoParamOrder, double, bool?) CustomItem.Url(string, NoParamOrder, string, bool?) CustomItem.IsDemoItem CustomItem.Attribute(string, NoParamOrder, string, bool?) CustomItem.Html(string, NoParamOrder, object, bool?, object, bool?, bool, Func<ITweakInput<string>, ITweakInput<string>>) CustomItem.Picture(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, string, object, object, object) CustomItem.Img(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, object, object) CustomItem.Folder(string, NoParamOrder, bool?) CustomItem.File(string, NoParamOrder, bool?) CustomItem.Child(string, NoParamOrder, bool?) CustomItem.Children(string, NoParamOrder, string, bool?) CustomItem.Parent(NoParamOrder, bool?, string, string) CustomItem.Parents(NoParamOrder, string, string) CustomItem.IsPublished CustomItem.Publishing CustomItem.Presentation CustomItem.Metadata CustomItem.Field(string, NoParamOrder, bool?) CustomItem.Id CustomItem.Guid CustomItem.Title CustomItem.Type CustomItem.Child<T>(string, NoParamOrder, bool?) CustomItem.Children<T>(string, NoParamOrder, string, bool?) CustomItem.Parent<T>(NoParamOrder, bool?, string, string) CustomItem.Parents<T>(NoParamOrder, string, string) CustomItem.Gps(string, NoParamOrder, bool?) CustomItem.As<T>(ITypedItem) CustomItem.AsList<T>(IEnumerable<ITypedItem>, NoParamOrder, bool) CustomItem.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. public string Extension { get; } Property Value string Folder Reference to the folder this file is in. public AppFolderTyped Folder { get; } Property Value AppFolderTyped FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Apps.Internal.Assets.IAppFileEntity.Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The file name without extension. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Size The size in bytes. public int Size { get; } Property Value int SizeInfo public ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string Remarks It hides the base method ITypedItem.Url."
  },
  "api/dot-net/ToSic.Sxc.Apps.AppFolderTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.AppFolderTyped.html",
    "title": "Class AppFolderTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AppFolderTyped Namespace ToSic.Sxc.Apps Assembly ToSic.Sxc.dll An App Folder Entity for typed use. It defines the schema for a folder as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta in v19 as the final name may change.\")] public class AppFolderTyped : CustomItem, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomItem AppFolderTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomItem._item CustomItem.ToString() CustomItem.ContainsKey(string) CustomItem.Keys(NoParamOrder, IEnumerable<string>) CustomItem.IsEmpty(string, NoParamOrder, string) CustomItem.IsNotEmpty(string, NoParamOrder, string) CustomItem.Get(string, NoParamOrder, bool?, string) CustomItem.Get<TValue>(string, NoParamOrder, TValue, bool?, string) CustomItem.Bool(string, NoParamOrder, bool, bool?) CustomItem.DateTime(string, NoParamOrder, DateTime, bool?) CustomItem.String(string, NoParamOrder, string, bool?, object) CustomItem.Int(string, NoParamOrder, int, bool?) CustomItem.Long(string, NoParamOrder, long, bool?) CustomItem.Float(string, NoParamOrder, float, bool?) CustomItem.Decimal(string, NoParamOrder, decimal, bool?) CustomItem.Double(string, NoParamOrder, double, bool?) CustomItem.Url(string, NoParamOrder, string, bool?) CustomItem.IsDemoItem CustomItem.Attribute(string, NoParamOrder, string, bool?) CustomItem.Html(string, NoParamOrder, object, bool?, object, bool?, bool, Func<ITweakInput<string>, ITweakInput<string>>) CustomItem.Picture(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, string, object, object, object) CustomItem.Img(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, object, object) CustomItem.Folder(string, NoParamOrder, bool?) CustomItem.File(string, NoParamOrder, bool?) CustomItem.Child(string, NoParamOrder, bool?) CustomItem.Children(string, NoParamOrder, string, bool?) CustomItem.Parent(NoParamOrder, bool?, string, string) CustomItem.Parents(NoParamOrder, string, string) CustomItem.IsPublished CustomItem.Publishing CustomItem.Presentation CustomItem.Metadata CustomItem.Field(string, NoParamOrder, bool?) CustomItem.Id CustomItem.Guid CustomItem.Title CustomItem.Type CustomItem.Child<T>(string, NoParamOrder, bool?) CustomItem.Children<T>(string, NoParamOrder, string, bool?) CustomItem.Parent<T>(NoParamOrder, bool?, string, string) CustomItem.Parents<T>(NoParamOrder, string, string) CustomItem.Gps(string, NoParamOrder, bool?) CustomItem.As<T>(ITypedItem) CustomItem.AsList<T>(IEnumerable<ITypedItem>, NoParamOrder, bool) CustomItem.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Files All files in this folder. public IEnumerable<AppFileTyped> Files { get; } Property Value IEnumerable<AppFileTyped> Folder Reference to the parent folder. public AppFolderTyped Folder { get; } Property Value AppFolderTyped Folders All sub folders in this folder. public IEnumerable<AppFolderTyped> Folders { get; } Property Value IEnumerable<AppFolderTyped> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string Remarks It hides the base method ITypedItem.Url."
  },
  "api/dot-net/ToSic.Sxc.Apps.IApp.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.IApp.html",
    "title": "Interface IApp | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IApp Namespace ToSic.Sxc.Apps Assembly ToSic.Sxc.dll An app-object as is available in a razor template or WebApi when in classic/dynamic mode. [PublicApi] public interface IApp : IApp, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Inherited Members IApp.Name IApp.Folder IApp.NameId IApp.Data IApp.Metadata IZoneIdentity.ZoneId IAppIdentityLight.AppId Properties Configuration Configuration object with information about the App. This contains things like app version, path etc. IAppConfiguration Configuration { get; } Property Value IAppConfiguration Path The path to the current app, for linking JS/CSS files and images in the app folder. string Path { get; } Property Value string Path usually starting with /portals/... PathShared The path to the current apps shared/global folder, for linking JS/CSS files and images in the app folder. string PathShared { get; } Property Value string Path usually starting with /portals/_default/... Remarks Added v13.01 PhysicalPath The path on the server hard disk for the current app. string PhysicalPath { get; } Property Value string Path usually starting with c:... PhysicalPathShared The path on the server hard disk for the current apps shared/global folder. string PhysicalPathShared { get; } Property Value string Path usually starting with c:... Remarks Added v13.01 Query All queries of the app, to access like App.Query[\"name\"] IDictionary<string, IQuery> Query { get; } Property Value IDictionary<string, IQuery> A dictionary with all queries. Internally the dictionary will not be built unless accessed. Resources All the app resources (usually used for multi-language labels etc.) dynamic Resources { get; } Property Value dynamic An IDynamicEntity object Settings All the app settings which are custom for each app. dynamic Settings { get; } Property Value dynamic An IDynamicEntity object Thumbnail The thumbnail path for the current app. string Thumbnail { get; } Property Value string path + app-icon.png if there is an icon there."
  },
  "api/dot-net/ToSic.Sxc.Apps.IAppDataTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.IAppDataTyped.html",
    "title": "Interface IAppDataTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppDataTyped Namespace ToSic.Sxc.Apps Assembly ToSic.Sxc.dll Data object of an App in Typed mode [PublicApi] public interface IAppDataTyped : IDataSource, IDataSourceLinkable, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog Inherited Members IDataSource.Out IDataSource.this[string] IDataSource.GetStream(string, NoParamOrder, bool, bool) IDataSource.List IDataSource.In IDataSource.Configuration IDataSource.Error IDataSource.Immutable IDataSourceLinkable.Link IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheExpiring.CacheChanged(long) ITimestamped.CacheTimestamp IHasLog.Log Remarks Added v17 Methods Create(string, Dictionary<string, object>, string, ITarget) Create a new entity in the storage. IEntity Create(string contentTypeName, Dictionary<string, object> values, string userName = null, ITarget target = null) Parameters contentTypeName string The type name values Dictionary<string, object> a dictionary of values to be stored userName string the current user name - will be logged as the author target ITarget information if this new item is to be metadata for something Returns IEntity Remarks Changed in 2sxc 10.30 - now returns the id of the created items Create(string, IEnumerable<Dictionary<string, object>>, string) Create a bunch of new entities in one single call (much faster, because cache doesn't need to repopulate in the mean time). IEnumerable<IEntity> Create(string contentTypeName, IEnumerable<Dictionary<string, object>> multiValues, string userName = null) Parameters contentTypeName string The type name multiValues IEnumerable<Dictionary<string, object>> many dictionaries, each will become an own item when stored userName string the current user name - will be logged as the author Returns IEnumerable<IEntity> Remarks You can't create items which are metadata with this, for that, please use the Create-one overload Changed in 2sxc 10.30 - now returns the id of the created items Delete(int, string) Delete an existing item void Delete(int entityId, string userName = null) Parameters entityId int The item ID userName string the current user name - will be logged as the author of the change GetAll<T>(NoParamOrder, string, bool) Get all data from the app of the specified type. It will detect the expected Content-Type based on the name of the class used. So in most cases you will not add any parameters except for the type parameter T. This is usually a type of your AppCode.Data namespace. IEnumerable<T> GetAll<T>(NoParamOrder protector = default, string typeName = null, bool nullIfNotFound = false) where T : class, ICanWrapData Parameters protector NoParamOrder see Convention: Named Parameters typeName string optional type name which is used as the stream name when retrieving the data, as each stream contains entities of one type. nullIfNotFound bool if set, will return null if the type doesn't exist - default is empty list. Returns IEnumerable<T> Type Parameters T The type to get and convert to - usually inheriting CustomItem Remarks Released in v17.03. GetContentType(string) Get a single content type by name (display name or NameId). IContentType GetContentType(string name) Parameters name string the name, either the normal name or the NameId which looks like a GUID Returns IContentType Remarks Added v17 GetContentTypes() All content types of the app. IEnumerable<IContentType> GetContentTypes() Returns IEnumerable<IContentType> Remarks Added v17 GetOne<T>(Guid, NoParamOrder, bool) Get a single item from the app of the specified type. T GetOne<T>(Guid id, NoParamOrder protector = default, bool skipTypeCheck = false) where T : class, ICanWrapData Parameters id Guid the ID as GUID protector NoParamOrder see Convention: Named Parameters skipTypeCheck bool allow get even if the Content-Type of the item with the ID doesn't match the type specified in the parameter T Returns T Type Parameters T The type to get and convert to - usually inheriting CustomItem Remarks Released in v17.03. GetOne<T>(int, NoParamOrder, bool) Get a single item from the app of the specified type. T GetOne<T>(int id, NoParamOrder protector = default, bool skipTypeCheck = false) where T : class, ICanWrapData Parameters id int the ID as an int protector NoParamOrder see Convention: Named Parameters skipTypeCheck bool allow get even if the Content-Type of the item with the ID doesn't match the type specified in the parameter T Returns T Type Parameters T The type to get and convert to - usually inheriting CustomItem Remarks Released in v17.03. Update(int, Dictionary<string, object>, string) Update an existing item. void Update(int entityId, Dictionary<string, object> values, string userName = null) Parameters entityId int The item ID values Dictionary<string, object> a dictionary of values to be updated userName string the current user name - will be logged as the author of the change"
  },
  "api/dot-net/ToSic.Sxc.Apps.IAppTyped-2.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.IAppTyped-2.html",
    "title": "Interface IAppTyped<TSettings, TResources> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppTyped<TSettings, TResources> Namespace ToSic.Sxc.Apps Assembly ToSic.Sxc.dll A strongly typed app, which has settings and resources as strongly typed objects. [PublicApi] public interface IAppTyped<out TSettings, out TResources> : IAppTyped, IAppIdentity, IZoneIdentity, IAppIdentityLight where TSettings : class, ICanWrapData, new() where TResources : class, ICanWrapData, new() Type Parameters TSettings Custom class for Settings TResources Custom class for Resources Inherited Members IAppTyped.Name IAppTyped.Data IAppTyped.GetQuery(string, NoParamOrder, IDataSourceLinkable, object) IAppTyped.Configuration IAppTyped.Folder IAppTyped.FolderAdvanced(NoParamOrder, string) IAppTyped.Thumbnail IZoneIdentity.ZoneId IAppIdentityLight.AppId Remarks New v17.03 Properties Resources All the app resources (usually used for multi-language labels etc.). /// These are typed - typically to AppCode.Data.AppResources TResources Resources { get; } Property Value TResources Settings All the app settings which are custom for each app. These are typed - typically to AppCode.Data.AppSettings TSettings Settings { get; } Property Value TSettings"
  },
  "api/dot-net/ToSic.Sxc.Apps.IAppTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.IAppTyped.html",
    "title": "Interface IAppTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAppTyped Namespace ToSic.Sxc.Apps Assembly ToSic.Sxc.dll An app-object as is available in a razor template or WebApi when in Typed mode. [PublicApi] public interface IAppTyped : IAppIdentity, IZoneIdentity, IAppIdentityLight Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId Properties Configuration Configuration object with information about the App. This contains things like app version, path etc. IAppConfiguration Configuration { get; } Property Value IAppConfiguration Data Data of the app IAppDataTyped Data { get; } Property Value IAppDataTyped Folder IFolder Folder { get; } Property Value IFolder Name App Name string Name { get; } Property Value string The name as configured in the app configuration. Resources All the app resources (usually used for multi-language labels etc.) ITypedItem Resources { get; } Property Value ITypedItem Settings All the app settings which are custom for each app. ITypedItem Settings { get; } Property Value ITypedItem Thumbnail IFile Thumbnail { get; } Property Value IFile Methods FolderAdvanced(NoParamOrder, string) Get the folder of the current app, usually for creating links to assets etc. IFolder FolderAdvanced(NoParamOrder noParamOrder = default, string location = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters location string name of the app location - either auto (default), site or shared Returns IFolder an IFolder object which can then use .Url, .PhysicalPath etc. Remarks Despite being of type IFolder, the object is currently not able to traverse children folders/files. We may add this some day in future. Previously the Folder property returned containing the name. This is now on .Folder().Name. GetQuery(string, NoParamOrder, IDataSourceLinkable, object) Get a query in this App, optionally with more parameters and sources. IDataSource GetQuery(string name = null, NoParamOrder noParamOrder = default, IDataSourceLinkable attach = null, object parameters = null) Parameters name string noParamOrder NoParamOrder attach IDataSourceLinkable parameters object Returns IDataSource"
  },
  "api/dot-net/ToSic.Sxc.Apps.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.html",
    "title": "Namespace ToSic.Sxc.Apps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Apps This extends the ToSic.Eav.Apps with things relevant in a CMS. Most of this isn't documented yet. Interfaces IApp An app-object as is available in a razor template or WebApi when in classic/dynamic mode. IAppDataTyped Data object of an App in Typed mode IAppTyped An app-object as is available in a razor template or WebApi when in Typed mode. IAppTyped<TSettings, TResources> A strongly typed app, which has settings and resources as strongly typed objects."
  },
  "api/dot-net/ToSic.Sxc.Assets.IFileModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Assets.IFileModel.html",
    "title": "Interface IFileModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFileModel Namespace ToSic.Sxc.Assets Assembly ToSic.Sxc.dll A File Model which describes a file as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public interface IFileModel : ICanWrapData Remarks History Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. IFolderModel Folder { get; } Property Value IFolderModel FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Assets.Internal.IFileModelSync.Name string FullName { get; } Property Value string Modified When the file/folder was modified. DateTime Modified { get; } Property Value DateTime Name The file name without extension. string Name { get; } Property Value string Path Starting in the App-Root string Path { get; } Property Value string Size The size in bytes. int Size { get; } Property Value int SizeInfo ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Assets.IFolderModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Assets.IFolderModel.html",
    "title": "Interface IFolderModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFolderModel Namespace ToSic.Sxc.Assets Assembly ToSic.Sxc.dll A Folder Model which describes a folder as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public interface IFolderModel : ICanWrapData Remarks History Introduced (BETA) in v19.01 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. DateTime Created { get; } Property Value DateTime Files All files in this folder. IEnumerable<IFileModel> Files { get; } Property Value IEnumerable<IFileModel> Folder Reference to the parent folder. Returns null on the root folder. IFolderModel Folder { get; } Property Value IFolderModel Folders All sub folders in this folder. IEnumerable<IFolderModel> Folders { get; } Property Value IEnumerable<IFolderModel> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name string FullName { get; } Property Value string Modified When the file/folder was modified. DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. string Name { get; } Property Value string Path Starting in the App-Root string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Assets.html": {
    "href": "api/dot-net/ToSic.Sxc.Assets.html",
    "title": "Namespace ToSic.Sxc.Assets | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Assets Interfaces IFileModel A File Model which describes a file as returned by the AppAssets DataSource. IFolderModel A Folder Model which describes a folder as returned by the AppAssets DataSource."
  },
  "api/dot-net/ToSic.Sxc.Blocks.Render.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.Render.html",
    "title": "Class Render | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Render Namespace ToSic.Sxc.Blocks Assembly ToSic.Sxc.Dnn.Core.dll Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content) [InternalApi_DoNotUse_MayChangeWithoutNotice] [Obsolete(\"Deprecated in v12 - please use IRenderService instead - will not work in v12 Base classes like Razor12\")] public class Render Inheritance object Render Methods All(DynamicEntity, NoParamOrder, string, string, int, string) Render content-blocks into a larger html-block containing placeholders public static IRawHtmlString All(DynamicEntity parent, NoParamOrder noParamOrder = default, string field = null, string apps = null, int max = 100, string merge = null) Parameters parent DynamicEntity The parent-item containing the content-blocks and providing edit-context noParamOrder NoParamOrder see Convention: Named Parameters field string Required: Field containing the content-blocks. apps string BETA / WIP max int BETA / WIP merge string Optional: html-text containing special placeholders. Returns IRawHtmlString Remarks Changed result object to IRawHtmlString in v16.02 from IHybridHtmlString One(DynamicEntity, NoParamOrder, ICanBeEntity, string, Guid?) Render one content block This is accessed through DynamicEntity.Render() At the moment it MUST stay internal, as it's not clear what API we want to surface public static IRawHtmlString One(DynamicEntity parent, NoParamOrder noParamOrder = default, ICanBeEntity item = null, string field = null, Guid? newGuid = null) Parameters parent DynamicEntity The parent-item containing the content-blocks and providing edit-context noParamOrder NoParamOrder see Convention: Named Parameters item ICanBeEntity The content-block item to render. Optional, by default the same item is used as the context. field string Optional: newGuid Guid? Internal: this is the guid given to the item when being created in this block. Important for the inner-content functionality to work. Returns IRawHtmlString Remarks Changed result object to IRawHtmlString in v16.02 from IHybridHtmlString"
  },
  "api/dot-net/ToSic.Sxc.Blocks.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.html",
    "title": "Namespace ToSic.Sxc.Blocks | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Blocks A unit of output it 2sxc is called a Block. In Dnn-Link, this can be like a Module, except that blocks can be inside other blocks. Looking at it from the Platform like Dnn, the entry object is an ICmsBlock which contains context information (in Dnn's case, ModuleId etc.). Inside it is an IBlock which can itself contain more IBlocks. Note that each Block itself has Views ICmsView and data specific to that block. Classes Render Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content)"
  },
  "api/dot-net/ToSic.Sxc.Cms.Assets.IFileModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Assets.IFileModel.html",
    "title": "Interface IFileModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFileModel Namespace ToSic.Sxc.Cms.Assets Assembly ToSic.Sxc.dll BETA: A File Model which describes a file as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public interface IFileModel : ICanWrapData Remarks History Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. IFolderModel Folder { get; } Property Value IFolderModel FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Cms.Assets.Internal.IFileModelSync.Name string FullName { get; } Property Value string Modified When the file/folder was modified. DateTime Modified { get; } Property Value DateTime Name The file name without extension. string Name { get; } Property Value string Path Starting in the App-Root string Path { get; } Property Value string Size The size in bytes. int Size { get; } Property Value int SizeInfo ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Cms.Assets.IFolderModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Assets.IFolderModel.html",
    "title": "Interface IFolderModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFolderModel Namespace ToSic.Sxc.Cms.Assets Assembly ToSic.Sxc.dll BETA: A Folder Model which describes a folder as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public interface IFolderModel : ICanWrapData Remarks History Introduced (BETA) in v19.01 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. DateTime Created { get; } Property Value DateTime Files All files in this folder. IEnumerable<IFileModel> Files { get; } Property Value IEnumerable<IFileModel> Folder Reference to the parent folder. Returns null on the root folder. IFolderModel Folder { get; } Property Value IFolderModel Folders All sub folders in this folder. IEnumerable<IFolderModel> Folders { get; } Property Value IEnumerable<IFolderModel> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name string FullName { get; } Property Value string Modified When the file/folder was modified. DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. string Name { get; } Property Value string Path Starting in the App-Root string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Cms.Assets.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Assets.html",
    "title": "Namespace ToSic.Sxc.Cms.Assets | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Cms.Assets Interfaces IFileModel BETA: A File Model which describes a file as returned by the AppAssets DataSource. IFolderModel BETA: A Folder Model which describes a folder as returned by the AppAssets DataSource."
  },
  "api/dot-net/ToSic.Sxc.Cms.Data.GpsCoordinates.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Data.GpsCoordinates.html",
    "title": "Class GpsCoordinates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class GpsCoordinates Namespace ToSic.Sxc.Cms.Data Assembly ToSic.Sxc.dll Represents GPS coordinates. [PublicApi] public class GpsCoordinates Inheritance object GpsCoordinates Remarks Released in v17.03, still BETA. Properties Latitude The latitude (North is +, South is -) of the GPS coordinates. public double Latitude { get; set; } Property Value double Longitude The longitude (East is +, West is -) of the GPS coordinates. public double Longitude { get; set; } Property Value double"
  },
  "api/dot-net/ToSic.Sxc.Cms.Data.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Data.html",
    "title": "Namespace ToSic.Sxc.Cms.Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Cms.Data Classes GpsCoordinates Represents GPS coordinates."
  },
  "api/dot-net/ToSic.Sxc.Cms.Pages.IPageModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Pages.IPageModel.html",
    "title": "Interface IPageModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IPageModel Namespace ToSic.Sxc.Cms.Pages Assembly ToSic.Sxc.dll BETA Data Model as is returned by the ToSic.Sxc.Cms.Pages DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IPageModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn TabInfo Oqtane Page History Released v19.01 the previous internal implementation had a property called Visible which we finalized to IsNavigation to better clarify it purpose. the previous internal implementation had a property called Clickable which we finalized to IsClickable to better clarify it purpose. Properties Children IEnumerable<IPageModel> Children { get; } Property Value IEnumerable<IPageModel> Created The page creation date/time. In Dnn it's from TabInfo.CreatedOnDate in Oqtane it's from Page.CreatedOn DateTime Created { get; } Property Value DateTime Guid The page GUID. In Dnn it's from TabInfo.UniqueId In Oqtane it's Guid.Empty as Oqtane doesn't have page GUIDs Guid Guid { get; } Property Value Guid HasChildren Info if the page has sub-pages. In Dnn it's from TabInfo.HasChildren in Oqtane it's from Page.HasChildren bool HasChildren { get; } Property Value bool Remarks Added in v15.01 Id The page ID. In Dnn it's from TabInfo.TabID In Oqtane it's Page.PageId int Id { get; } Property Value int IsClickable Determines if this item is clickable in the menu. In Dnn it's from !TabInfo.DisableLink in Oqtane it's from Page.IsClickable bool IsClickable { get; } Property Value bool Remarks Added in v15.01 IsDeleted The page delete-status. Normally you will only see not-deleted pages, so it should usually be false. In Dnn it's from TabInfo.IsDeleted in Oqtane it's from Page.IsDeleted bool IsDeleted { get; } Property Value bool Remarks Added in v15.01 IsNavigation The page visibility - if it should be shown in the menu. In Dnn it's from TabInfo.IsVisible in Oqtane it's from Page.IsNavigation bool IsNavigation { get; } Property Value bool Level How deep this page is in the breadcrumb. The number is 1 based, so the top level is 1. In Dnn it's from TabInfo.Level (+1) in Oqtane it's from Page.Level (+1) int Level { get; } Property Value int Remarks Added in v15.01 LinkTarget WIP In Dnn it's from TabInfo.TabSettings[\"LinkNewWindow\"]and will be either _blank or `` (empty string) In Oqtane it's not implemented an will be an empty string string LinkTarget { get; } Property Value string Remarks Added in v15.02 Modified The page modification date/time. In Dnn it's from TabInfo.LastModifiedOnDate in Oqtane it's from Page.ModifiedOn DateTime Modified { get; } Property Value DateTime Name The page name. In Dnn it's from TabInfo.Name in Oqtane it's from Page.Name string Name { get; } Property Value string Order Order of this item in a menu. It is 1 based, so the first item has Order 1. In Dnn it's from TabInfo.TabOrder in Oqtane it's from Page.Order int Order { get; } Property Value int Remarks Added in v15.01 ParentId The parent page ID. It's usually 0 if it's a top level page. In Dnn it's from TabInfo.ParentId in Oqtane it's from Page.ParentId int ParentId { get; } Property Value int Path The path with slashes to this page. In Dnn it's from TabInfo.TabPath in Oqtane it's from Page.Path string Path { get; } Property Value string Title The page title. In Dnn it's from TabInfo.Title in Oqtane it's from Page.Title string Title { get; } Property Value string Url The public url to this page (without any trailing slashes) In Dnn it's from TabInf.FullUrl (last slash removed) in Oqtane it's a combination of protocol, site-alias and path string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Cms.Pages.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Pages.html",
    "title": "Namespace ToSic.Sxc.Cms.Pages | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Cms.Pages Interfaces IPageModel BETA Data Model as is returned by the ToSic.Sxc.Cms.Pages DataSource."
  },
  "api/dot-net/ToSic.Sxc.Cms.Sites.ISiteModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Sites.ISiteModel.html",
    "title": "Interface ISiteModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ISiteModel Namespace ToSic.Sxc.Cms.Sites Assembly ToSic.Sxc.dll BETA Site model for entities returned by the ToSic.Sxc.Cms.Sites DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ISiteModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn Site Oqtane Site History Introduced in v19.01 Properties ContentAppId The Content App Id of this Site and Zone. int ContentAppId { get; } Property Value int Created The site creation date/time. In Dnn it's from PortalInfo.CreatedOnDate in Oqtane it's from Site.CreatedOn DateTime Created { get; } Property Value DateTime DefaultLanguage The site Culture Code. In Dnn it's from PortalInfo.CultureCode in Oqtane it's from Site.CultureCode string DefaultLanguage { get; } Property Value string Guid The site GUID. In Dnn it's from PortalInfo.GUID In Oqtane it's Guid.Empty as Oqtane doesn't have site GUIDs Guid Guid { get; } Property Value Guid Id The site ID. In Dnn it's from PortalInfo.PortalID In Oqtane it's Site.SiteId int Id { get; } Property Value int Languages The site languages, comma separated. Can be empty ever if a DefaultLanguage is set, if the site itself is not multi-language. string Languages { get; } Property Value string Modified The site modification date/time. In Dnn it's from PortalInfo.LastModifiedOnDate in Oqtane it's from Site.ModifiedOn DateTime Modified { get; } Property Value DateTime Name The site name. In Dnn it's from PageInfo.PortalName in Oqtane it's from Site.Name string Name { get; } Property Value string PrimaryAppId The (technical) primary App, which contains things such as site metadata. int PrimaryAppId { get; } Property Value int Url The public url to this site (without any trailing slashes) In Dnn it's from PortalAliasInfo.FullUrl (last slash removed) in Oqtane it's a combination of protocol, site-alias and path string Url { get; } Property Value string ZoneId The Zone ID, which is the ID of the 2sxc/EAV zone which applies to this site. It's usually different from the site ID, and in rare cases can be shared among multiple sites. int ZoneId { get; } Property Value int"
  },
  "api/dot-net/ToSic.Sxc.Cms.Sites.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Sites.html",
    "title": "Namespace ToSic.Sxc.Cms.Sites | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Cms.Sites Interfaces ISiteModel BETA Site model for entities returned by the ToSic.Sxc.Cms.Sites DataSource."
  },
  "api/dot-net/ToSic.Sxc.Cms.Users.IUserModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Users.IUserModel.html",
    "title": "Interface IUserModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IUserModel Namespace ToSic.Sxc.Cms.Users Assembly ToSic.Sxc.dll BETA User Model for data returned by the ToSic.Sxc.Cms.Users DataSource or other sources. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IUserModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn UserInfo Oqtane User History Introduced in v19.01 Properties Created When the user was first created. DateTime Created { get; } Property Value DateTime Email User E-Mail Address, aka PreferredEmail string Email { get; } Property Value string Guid An optional user GUID. On systems which don't give the user a unique guid, it will be Guid.Empty. Guid Guid { get; } Property Value Guid Id User Id as int. Works in DNN and Oqtane int Id { get; } Property Value int IsAnonymous True if the user is anonymous / not logged in. bool IsAnonymous { get; } Property Value bool IsContentAdmin True if the user is a content admin / editor. If the user only has this role, then he/she can only edit pages and content, but not users. bool IsContentAdmin { get; } Property Value bool IsContentEditor Determines if the user is a content editor. In DNN 10, ContentEditors cannot publish pages (unless they are also ContentAdmins). bool IsContentEditor { get; } Property Value bool IsSiteAdmin True if the user is admin - allowing full content-management and user-management. bool IsSiteAdmin { get; } Property Value bool IsSiteDeveloper True if a user is in the SxcDesigners group. Such a person can actually do a lot more, like access the advanced toolbars. bool IsSiteDeveloper { get; } Property Value bool IsSystemAdmin True if the user has super-user rights. This kind of user can do everything, incl. create apps. bool IsSystemAdmin { get; } Property Value bool Modified When the user was last modified. DateTime Modified { get; } Property Value DateTime Name Nice name aka DisplayName. string Name { get; } Property Value string NameId string NameId { get; } Property Value string Roles Roles of the user. IEnumerable<IUserRoleModel> Roles { get; } Property Value IEnumerable<IUserRoleModel> Username UserName used for login. string Username { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Cms.Users.IUserRoleModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Users.IUserRoleModel.html",
    "title": "Interface IUserRoleModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IUserRoleModel Namespace ToSic.Sxc.Cms.Users Assembly ToSic.Sxc.dll BETA Model to return role information as provided by the UserRoles DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IUserRoleModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn RoleInfo Oqtane UserRole History Introduced in v19.01 Properties Created When the user role was first created. DateTime Created { get; } Property Value DateTime Id The Role ID in the database. int Id { get; } Property Value int Modified When the user role was last modified. DateTime Modified { get; } Property Value DateTime Name The Role Name as it is displayed everywhere. string Name { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Cms.Users.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.Users.html",
    "title": "Namespace ToSic.Sxc.Cms.Users | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Cms.Users Interfaces IUserModel BETA User Model for data returned by the ToSic.Sxc.Cms.Users DataSource or other sources. IUserRoleModel BETA Model to return role information as provided by the UserRoles DataSource."
  },
  "api/dot-net/ToSic.Sxc.Cms.html": {
    "href": "api/dot-net/ToSic.Sxc.Cms.html",
    "title": "Namespace ToSic.Sxc.Cms | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Cms Namespaces ToSic.Sxc.Cms.Assets ToSic.Sxc.Cms.Data ToSic.Sxc.Cms.Pages ToSic.Sxc.Cms.Sites ToSic.Sxc.Cms.Users"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.GenerateConstants.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.GenerateConstants.html",
    "title": "Class GenerateConstants | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class GenerateConstants Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll Constants used in the code generation process. [WorkInProgressApi(\"still being standardized\")] public class GenerateConstants Inheritance object GenerateConstants Remarks WIP v17.04 Fields PathPlaceholderAppRoot Placeholder for the root of the app, which will be replaced with the actual path. It's usually used to prefix the target path of a generated file. public const string PathPlaceholderAppRoot = \"[app:root]\" Field Value string PathPlaceholderEdition Placeholder for the edition of the app, which will be replaced with the actual edition. It's usually used in the path of the generated file, to create edition-specific files. public const string PathPlaceholderEdition = \"[target:edition]\" Field Value string PathToAppCode public const string PathToAppCode = \"[app:root]/[target:edition]/AppCode\" Field Value string"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.GeneratedFile.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.GeneratedFile.html",
    "title": "Class GeneratedFile | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class GeneratedFile Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll Represents a generated file. It's usually provided in a IGeneratedFileSet, which contains additional specs. [WorkInProgressApi(\"still being standardized\")] public class GeneratedFile : IGeneratedFile, IGeneratedFileInfo Inheritance object GeneratedFile Implements IGeneratedFile IGeneratedFileInfo Properties Body The body of the file, which will be written to the file. public string Body { get; init; } Property Value string Dependencies List of dependencies which are required to create this file. For example, if we generate a PersonList.cshtml which will inherit the AppRazor, then the AppRazor should be in the list. Note: not implemented yet - this is for later when users may want to select which files to generate. public IReadOnlyCollection<IGeneratedFileInfo> Dependencies { get; init; } Property Value IReadOnlyCollection<IGeneratedFileInfo> FileName The file name of the final code file, with extension. May not contain any slashes. public string FileName { get; init; } Property Value string Path The path to put the file in, relative to the root which is determined elsewhere. May not begin or end with a slash. Example: if path is \"Data\" and the root is \"AppCode\", the file will be saved to \"AppCode\\Data\\FileName.cs\" public string Path { get; init; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.GeneratedFileSet.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.GeneratedFileSet.html",
    "title": "Class GeneratedFileSet | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class GeneratedFileSet Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll WIP - should contain a list of code-files and additional specs [WorkInProgressApi(\"still being standardized\")] public class GeneratedFileSet : IGeneratedFileSet Inheritance object GeneratedFileSet Implements IGeneratedFileSet Properties Description Description to show in the UI public string Description { get; init; } Property Value string Files List of files to generate public IReadOnlyCollection<IGeneratedFile> Files { get; init; } Property Value IReadOnlyCollection<IGeneratedFile> Generator Name of the generator, possibly with version public string Generator { get; init; } Property Value string Name Name for easy identification. public string Name { get; init; } Property Value string Path The path, but not sure yet how to do, especially if it will be relative or contain editions. public string Path { get; init; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.IFileGenerator.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.IFileGenerator.html",
    "title": "Interface IFileGenerator | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFileGenerator Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll Describes a file generator which can generate (code) files. [WorkInProgressApi(\"still being standardized\")] public interface IFileGenerator : IHasIdentityNameId Inherited Members IHasIdentityNameId.NameId Properties Description Generator description for selecting the generator. string Description { get; } Property Value string DescriptionHtml string DescriptionHtml { get; } Property Value string Name Generator name, to select it in a list of generators string Name { get; } Property Value string OutputLanguage Language this generator creates, e.g. \"CSharp\", \"TypeScript\", \"JavaScript\" string OutputLanguage { get; } Property Value string OutputType WIP, string name for what kind of output we'll generate. Not final yet, should be used in dialogs to only provide generators with the correct output type. string OutputType { get; } Property Value string Version Generator version for additional info when selecting the generator. string Version { get; } Property Value string Methods Generate(IFileGeneratorSpecs) Call to run the generator and get the files IGeneratedFileSet[] Generate(IFileGeneratorSpecs specs) Parameters specs IFileGeneratorSpecs Returns IGeneratedFileSet[]"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.IFileGeneratorSpecs.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.IFileGeneratorSpecs.html",
    "title": "Interface IFileGeneratorSpecs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFileGeneratorSpecs Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll Specs for a file generator. An object containing these specs - and sometimes more - is passed to the file generator. [WorkInProgressApi(\"still being standardized\")] public interface IFileGeneratorSpecs Remarks WIP v17.04 Properties AppId The AppId of the app for which the file is generated. int AppId { get; } Property Value int DateTime DateTime DateTime { get; } Property Value DateTime Edition The Edition for which we're generating the file. string Edition { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.IGeneratedFile.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.IGeneratedFile.html",
    "title": "Interface IGeneratedFile | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IGeneratedFile Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll Data which is meant to create a new file. The file will usually be saved directly to the file system of the App. This is WIP - goal is to make it more standard so others could create generators too. [WorkInProgressApi(\"still being standardized\")] public interface IGeneratedFile : IGeneratedFileInfo Inherited Members IGeneratedFileInfo.FileName IGeneratedFileInfo.Path Remarks Introduced in v17.05 Properties Body The body of the file, which will be written to the file. string Body { get; } Property Value string Dependencies List of dependencies which are required to create this file. For example, if we generate a PersonList.cshtml which will inherit the AppRazor, then the AppRazor should be in the list. Note: not implemented yet - this is for later when users may want to select which files to generate. IReadOnlyCollection<IGeneratedFileInfo> Dependencies { get; } Property Value IReadOnlyCollection<IGeneratedFileInfo>"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.IGeneratedFileInfo.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.IGeneratedFileInfo.html",
    "title": "Interface IGeneratedFileInfo | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IGeneratedFileInfo Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll Data which describes a code file which will be created or may already exist. It's used as the foundation for IGeneratedFile but also to reference dependencies to other files created or which should be created in tandem. [WorkInProgressApi(\"still being standardized\")] public interface IGeneratedFileInfo Properties FileName The file name of the final code file, with extension. May not contain any slashes. string FileName { get; } Property Value string Path The path to put the file in, relative to the root which is determined elsewhere. May not begin or end with a slash. Example: if path is \"Data\" and the root is \"AppCode\", the file will be saved to \"AppCode\\Data\\FileName.cs\" string Path { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.IGeneratedFileSet.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.IGeneratedFileSet.html",
    "title": "Interface IGeneratedFileSet | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IGeneratedFileSet Namespace ToSic.Sxc.Code.Generate Assembly ToSic.Sxc.Code.Generate.dll Set of code files to generate, including some information about the generator. [WorkInProgressApi(\"still being standardized\")] public interface IGeneratedFileSet Properties Description Description to show in the UI string Description { get; } Property Value string Files List of files to generate IReadOnlyCollection<IGeneratedFile> Files { get; } Property Value IReadOnlyCollection<IGeneratedFile> Generator Name of the generator, possibly with version string Generator { get; } Property Value string Name Name for easy identification. string Name { get; } Property Value string Path The path, but not sure yet how to do, especially if it will be relative or contain editions. string Path { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Code.Generate.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.Generate.html",
    "title": "Namespace ToSic.Sxc.Code.Generate | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Code.Generate Classes GenerateConstants Constants used in the code generation process. GeneratedFile Represents a generated file. It's usually provided in a IGeneratedFileSet, which contains additional specs. GeneratedFileSet WIP - should contain a list of code-files and additional specs Interfaces IFileGenerator Describes a file generator which can generate (code) files. IFileGeneratorSpecs Specs for a file generator. An object containing these specs - and sometimes more - is passed to the file generator. IGeneratedFile Data which is meant to create a new file. The file will usually be saved directly to the file system of the App. This is WIP - goal is to make it more standard so others could create generators too. IGeneratedFileInfo Data which describes a code file which will be created or may already exist. It's used as the foundation for IGeneratedFile but also to reference dependencies to other files created or which should be created in tandem. IGeneratedFileSet Set of code files to generate, including some information about the generator."
  },
  "api/dot-net/ToSic.Sxc.Code.ICodeCustomizer.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.ICodeCustomizer.html",
    "title": "Interface ICodeCustomizer | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICodeCustomizer Namespace ToSic.Sxc.Code Assembly ToSic.Sxc.dll Helper object to use on Razor, Code, APIs to create more app-specific helper objects. Like the App object, View object etc. It will usually be provided on a protected Customize property on RazorTyped etc. [PublicApi] public interface ICodeCustomizer Remarks New v17.03 (BETA!) Methods App<TSettings, TResources>() Create (and cache for reuse) a strongly typed App instance for the App object. IAppTyped<TSettings, TResources> App<TSettings, TResources>() where TSettings : class, ICanWrapData, new() where TResources : class, ICanWrapData, new() Returns IAppTyped<TSettings, TResources> Type Parameters TSettings Type to use for Settings. TResources Type to use for Resources MyHeader<TCustomType>() Create (and cache for reuse) a strongly typed Header instance for the MyHeader object. TCustomType MyHeader<TCustomType>() where TCustomType : class, ICanWrapData, new() Returns TCustomType Type Parameters TCustomType Type to use for MyHeader. MyItem<TCustomType>() Create (and cache for reuse) a strongly typed Item instance for the MyItem object. TCustomType MyItem<TCustomType>() where TCustomType : class, ICanWrapData, new() Returns TCustomType Type Parameters TCustomType Type to use for MyItem. MyItems<TCustomType>() Create (and cache for reuse) a strongly typed Items instance for the MyItems object. IEnumerable<TCustomType> MyItems<TCustomType>() where TCustomType : class, ICanWrapData, new() Returns IEnumerable<TCustomType> Type Parameters TCustomType Type to use for MyItems. MyView<TSettings, TResources>() Create (and cache for reuse) a strongly typed View instance for the MyView object. ICmsView<TSettings, TResources> MyView<TSettings, TResources>() where TSettings : class, ICanWrapData, new() where TResources : class, ICanWrapData, new() Returns ICmsView<TSettings, TResources> Type Parameters TSettings Type to use for Settings. TResources Type to use for Resources"
  },
  "api/dot-net/ToSic.Sxc.Code.ICodeLog.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.ICodeLog.html",
    "title": "Interface ICodeLog | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICodeLog Namespace ToSic.Sxc.Code Assembly ToSic.Sxc.dll A special logger for dynamic code (Razor, WebApi). It is always available to add messages to insights. [PublicApi] public interface ICodeLog Remarks Added in v15, replaces the then removed ILog interface. Properties Preserve Determines if this log should be preserved in the short term. Like for live-analytics / live-insights. Default is true. In scenarios like search-indexing it will default to false. You can then do Log.Preserve = true; to temporarily activate it while debugging. bool Preserve { get; set; } Property Value bool Methods Add(string, string, string, int) Add a message log entry string Add(string message, string cPath = null, string cName = null, int cLine = 0) Parameters message string Message to log cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line Returns string Call(string, string, bool, string, string, int) Add a log entry for method call, returning a method to call when done Action<string> Call(string parameters = null, string message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters parameters string what was passed to the call in the brackets message string the message to log useTimer bool enable a timer from call/close cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line Returns Action<string> Call<T>(string, string, bool, string, string, int) Add a log entry for method call, returning a method to call when done Func<T, string, T> Call<T>(string parameters = null, string message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters parameters string what was passed to the call in the brackets message string the message to log useTimer bool enable a timer from call/close cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line Returns Func<T, string, T> Type Parameters T Remarks Not used much, but major change in V15 - the first value in the result is the data, the second is the string to log. Before in the ILog it was (message, data), new is (data, message) Exception(Exception, string, string, int) Add an exception as special log entry void Exception(Exception ex, string cPath = null, string cName = null, int cLine = 0) Parameters ex Exception The Exception object cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line Warn(string, string, string, int) Add a warning log entry void Warn(string message, string cPath = null, string cName = null, int cLine = 0) Parameters message string cPath string auto pre filled by the compiler - the path to the code file cName string auto pre filled by the compiler - the method name cLine int auto pre filled by the compiler - the code line"
  },
  "api/dot-net/ToSic.Sxc.Code.IDevTools.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.IDevTools.html",
    "title": "Interface IDevTools | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDevTools Namespace ToSic.Sxc.Code Assembly ToSic.Sxc.dll WIP!!! This should provide special APIs to assist developers. It will probably change from version to version, so the use should be limited to quick debugs and similar, but never remain in the code. [WorkInProgressApi(\"Not yet in use\")] public interface IDevTools Methods Debug(object, NoParamOrder, bool) Enable debugging on a specific object, if it supports it. void Debug(object target, NoParamOrder noParamOrder = default, bool debug = true) Parameters target object noParamOrder NoParamOrder debug bool"
  },
  "api/dot-net/ToSic.Sxc.Code.ITypedModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.ITypedModel.html",
    "title": "Interface ITypedModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITypedModel Namespace ToSic.Sxc.Code Assembly ToSic.Sxc.dll Object in partial Razor files to access parameters handed in. Example caller: @Html.Partial(someFile, new { blogPost, file = mainFile, title = \"hello\" } Example partial: var blogPost = MyModel.Item(\"BlogPost\"); var file = MyModel.File(\"File\"); var title = MyModel.String(\"Title\"); Tip The common data types such as string or ITypedItem have methods to quickly get them in the desired type. This allows things such as var message = MyModel.String(\"Message\"); For less common types you'll need to use Get(string, NoParamOrder, bool?) and cast it as needed, like this: string message = MyModel.Get(\"Message\");. [PublicApi] public interface ITypedModel Remarks Introduced in v16.02 Methods Bool(string, NoParamOrder, bool?, bool?) Will get the value and return in the desired type. bool Bool(string name, NoParamOrder protector = default, bool? fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback bool? The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns bool typed result if found, false if not found. Code(string, NoParamOrder, object, bool?) Get code forwarded to the current razor. Code was usually created in the caller using GetCode(...) and may need to be passed around. dynamic Code(string name, NoParamOrder protector = default, object fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback object A fallback to use if not found - not commonly used here. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns dynamic The resulting object is dynamic which is necessary for making calls to methods etc. Remarks New in 16.05 ContainsKey(string) Check if this typed object has a property of this specified name. It's case-insensitive. bool ContainsKey(string name) Parameters name string the name like Image; some objects also support path to sub-property like Author.Name Returns bool Remarks Adding in 16.03 (WIP) DateTime(string, NoParamOrder, DateTime?, bool?) Will get the value and return in the desired type. DateTime DateTime(string name, NoParamOrder protector = default, DateTime? fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback DateTime? The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns DateTime typed result if found, default-date if not found. Decimal(string, NoParamOrder, decimal?, bool?) Will get the value and return in the desired type. decimal Decimal(string name, NoParamOrder protector = default, decimal? fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback decimal? The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns decimal int result if found, 0 if not found/convertible. Exceptions ArgumentException if the name is not found and no fallback provided and required not false Double(string, NoParamOrder, double?, bool?) Will get the value and return in the desired type. double Double(string name, NoParamOrder protector = default, double? fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback double? The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns double int result if found, 0 if not found/convertible. Exceptions ArgumentException if the name is not found and no fallback provided and required not false File(string, NoParamOrder, IFile, bool?) Will get the value if specified. If the value is a list of files, then this will only return the first one. IFile File(string name, NoParamOrder protector = default, IFile fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IFile The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns IFile typed result if found, null if not found. Files(string, NoParamOrder, IEnumerable<IFile>, bool?) Will get the value if specified. If the value is a single file, will return a list containing that file. IEnumerable<IFile> Files(string name, NoParamOrder protector = default, IEnumerable<IFile> fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IEnumerable<IFile> The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns IEnumerable<IFile> typed result if found, empty-list if not found. Float(string, NoParamOrder, float?, bool?) Will get the value and return in the desired type. float Float(string name, NoParamOrder protector = default, float? fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback float? The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns float int result if found, 0 if not found/convertible. Exceptions ArgumentException if the name is not found and no fallback provided and required not false Folder(string, NoParamOrder, IFolder, bool?) Will get the value if specified. If the value is a list of folders, then this will only return the first one. IFolder Folder(string name, NoParamOrder protector = default, IFolder fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IFolder The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns IFolder typed result if found, null if not found. Folders(string, NoParamOrder, IEnumerable<IFolder>, bool?) Will get the value if specified. If the value is a single folder, will return a list containing that folder. IEnumerable<IFolder> Folders(string name, NoParamOrder protector = default, IEnumerable<IFolder> fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IEnumerable<IFolder> The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns IEnumerable<IFolder> typed result if found, empty-list if not found. Get(string, NoParamOrder, bool?) Will get the value and return as object, since the type isn't known. object Get(string name, NoParamOrder protector = default, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns object Object if found, null if not found. Get<T>(string, NoParamOrder, T, bool?) Will get the value and return as type T as specified. T Get<T>(string name, NoParamOrder protector = default, T fallback = default, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback T The fallback value. If provided, the type is automatically determined. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is provided which is not the default. So like Get<string>(..., fallback: false) can't be detected, but ..., fallback: \"hello\" can. Returns T Object of type T if found, null if not found. Type Parameters T The returned type Gps(string, NoParamOrder, GpsCoordinates, bool?) Will get the value and return in the desired type. GpsCoordinates Gps(string name, NoParamOrder protector = default, GpsCoordinates fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback GpsCoordinates The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns GpsCoordinates GpsCoordinates if found, null if not found/convertible. Remarks Added in 17.08 Exceptions ArgumentException if the name is not found and no fallback provided and required not false Guid(string, NoParamOrder, Guid?, bool?) Will get the value and return in the desired type. Guid Guid(string name, NoParamOrder protector = default, Guid? fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback Guid? The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns Guid typed result if found, empty-guid if not found. HtmlTag(string, NoParamOrder, IHtmlTag, bool?) Will get the value being an IHtmlTag as specified (RazorBlade objects) IHtmlTag HtmlTag(string name, NoParamOrder protector = default, IHtmlTag fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IHtmlTag The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns IHtmlTag typed result if found, null if not found HtmlTags(string, NoParamOrder, IEnumerable<IHtmlTag>, bool?) Will get the value being an list (IEnumerable) of IHtmlTag as specified (RazorBlade objects) IEnumerable<IHtmlTag> HtmlTags(string name, NoParamOrder protector = default, IEnumerable<IHtmlTag> fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IEnumerable<IHtmlTag> The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns IEnumerable<IHtmlTag> typed result if found, null if not found Int(string, NoParamOrder, int?, bool?) Will get the value and return in the desired type. int Int(string name, NoParamOrder protector = default, int? fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback int? The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns int int result if found, 0 if not found/convertible. Exceptions ArgumentException if the name is not found and no fallback provided and required not false Item(string, NoParamOrder, ITypedItem, bool?) Will get the value if specified. If the value is a list of items, then this will only return the first one. ITypedItem Item(string name, NoParamOrder protector = default, ITypedItem fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback ITypedItem The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns ITypedItem typed result if found, null if not found. Items(string, NoParamOrder, IEnumerable<ITypedItem>, bool?) Will get the value if specified. If the value is a single item, will return a list containing that item. IEnumerable<ITypedItem> Items(string name, NoParamOrder protector = default, IEnumerable<ITypedItem> fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IEnumerable<ITypedItem> The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns IEnumerable<ITypedItem> typed result if found, empty-list if not found. Keys(NoParamOrder, IEnumerable<string>) Get all the keys available in this Model (all the parameters passed in). This is used to sometimes run early checks if all the expected parameters have been provided. IEnumerable<string> Keys(NoParamOrder protector = default, IEnumerable<string> only = null) Parameters protector NoParamOrder only IEnumerable<string> Only return the keys specified here, if found. Typical use: only: new [] { \"Key1\", \"Key2\" }. Useful to check if all or any specific keys exist. Returns IEnumerable<string> Remarks Added in 16.03 String(string, NoParamOrder, string, bool?) Will get the value and return in the desired type. string String(string name, NoParamOrder protector = default, string fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback string The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is not null. Returns string typed result if found, null if not found. Toolbar(string, NoParamOrder, IToolbarBuilder, bool?) Will get the value being a toolbar as specified. IToolbarBuilder Toolbar(string name, NoParamOrder protector = default, IToolbarBuilder fallback = null, bool? required = null) Parameters name string Property name on the passed in data object protector NoParamOrder see Convention: Named Parameters fallback IToolbarBuilder The optional fallback value. required bool? Throw error if name doesn't exist, see Convention: Property Required Name Checks. It is automatically false if a fallback is set / not null. Returns IToolbarBuilder typed result if found, null if not found"
  },
  "api/dot-net/ToSic.Sxc.Code.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.html",
    "title": "Namespace ToSic.Sxc.Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Code Namespaces ToSic.Sxc.Code.Generate Interfaces ICodeCustomizer Helper object to use on Razor, Code, APIs to create more app-specific helper objects. Like the App object, View object etc. It will usually be provided on a protected Customize property on RazorTyped etc. ICodeLog A special logger for dynamic code (Razor, WebApi). It is always available to add messages to insights. IDevTools WIP!!! This should provide special APIs to assist developers. It will probably change from version to version, so the use should be limited to quick debugs and similar, but never remain in the code. ITypedModel Object in partial Razor files to access parameters handed in. Example caller: @Html.Partial(someFile, new { blogPost, file = mainFile, title = \"hello\" } Example partial: var blogPost = MyModel.Item(\"BlogPost\"); var file = MyModel.File(\"File\"); var title = MyModel.String(\"Title\"); Tip The common data types such as string or ITypedItem have methods to quickly get them in the desired type. This allows things such as var message = MyModel.String(\"Message\"); For less common types you'll need to use Get(string, NoParamOrder, bool?) and cast it as needed, like this: string message = MyModel.Get(\"Message\");."
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsBlock.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsBlock.html",
    "title": "Interface ICmsBlock | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsBlock Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll Information about the block - similar to a module. The block is the 2sxc-internal definition of a unit of content. In most cases each module has one block, but there are edge cases such as: modules which show the same block - different module-id, same block-id modules showing multiple blocks such as inner-content. [PublicApi] public interface ICmsBlock : IHasMetadata Inherited Members IHasMetadata.Metadata Remarks Was added somewhere in 2sxc 13, but not documented/published till 2sxc 17. Properties Guid The Guid of this Block - corresponds to the EntityGuid in 2sxc which stores the block. Guid Guid { get; } Property Value Guid Remarks Added in v17.08. If exported and re-imported, this Guid will stay the same, so it's a better reference than the Id. Id The ID of this Block - corresponds to the EntityId in 2sxc which stores the block. int Id { get; } Property Value int Remarks If exported and re-imported, this ID will change, so consider using the Guid instead. IsRoot Determines if this is the root block, meaning it's the main block inside a module. Will be true in most cases, but false on inner-content bool IsRoot { get; } Property Value bool"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsContext.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsContext.html",
    "title": "Interface ICmsContext | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsContext Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll This is the runtime context of your code in the CMS. It can tell you about the site, page, module etc. that you're on. Note that it it Platform Agnostic so it's the same on Dnn, Oqtane etc. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext \uD83E\uDE92 In Typed Razor it's found on MyContext, but many objects are directly available, like MyPage CMS Context in your Code All your Razor and WebApi code will have a property CmsContext which provides you information about the environment you're running in. Here's a Code Snippet for Razor, showing you what page etc. your code is running on: ModuleId: @CmsContext.Module.Id History Added in 2sxc 11.11 [PublicApi] public interface ICmsContext Properties Block Information about the current block, similar to the module but a bit different. ICmsBlock Block { get; } Property Value ICmsBlock Remarks Added ca. v13, but not documented/published till v17. Culture Information about languages / culture of the current request ICmsCulture Culture { get; } Property Value ICmsCulture Module Information about the Module / Container which holds a 2sxc content block in the CMS ICmsModule Module { get; } Property Value ICmsModule Page Information about the current Page (called Tab in DNN). It's especially useful to get current URL Parameters. ICmsPage Page { get; } Property Value ICmsPage Platform Information about the platform that's currently running. ICmsPlatform Platform { get; } Property Value ICmsPlatform Site Information about the Site (called Portal in DNN) ICmsSite Site { get; } Property Value ICmsSite User Information about the current user. It's especially useful to see if the user has any kind of Admin privileges. ICmsUser User { get; } Property Value ICmsUser View View-information such as the view Name, Identity or Edition. ICmsView View { get; } Property Value ICmsView Remarks New in v12.02"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsCulture.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsCulture.html",
    "title": "Interface ICmsCulture | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsCulture Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll Information about the cultures/languages used. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Culture \uD83E\uDE92 In Typed Razor it's found on MyContext.Culture [PublicApi] public interface ICmsCulture Properties CurrentCode The current culture / language code like \"de-ch\". It's the language-code used by the translation environment. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Culture.CurrentCode \uD83E\uDE92 Use in Typed Razor: MyContext.Culture.CurrentCode string CurrentCode { get; } Property Value string Remarks It's always lower-case. In the case of DNN, this corresponds to PortalSettings.CurrentAlias.CultureCode DefaultCode The default language code like \"en-us\" or \"\" (empty string). If the system is single-language, it will often just be an empty string \"\". \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Culture.DefaultCode \uD83E\uDE92 Use in Typed Razor: MyContext.Culture.DefaultCode string DefaultCode { get; } Property Value string Remarks It's always lower-case. In the case of DNN, this corresponds to PortalSettings.DefaultCulture"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsModule.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsModule.html",
    "title": "Interface ICmsModule | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsModule Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll Information about the module context the code is running in. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Module \uD83E\uDE92 In Typed Razor it's found on MyContext.Module [PublicApi] public interface ICmsModule : IHasMetadata Inherited Members IHasMetadata.Metadata Remarks Note that the module context is the module for which the code is currently running. In some scenarios (like Web-API scenarios) the code is running for this module but not on this module, as it would then be running on a WebApi. Properties Block Information about the root block in the module. ICmsBlock Block { get; } Property Value ICmsBlock Remarks Added ca. v13, but not documented/published till 2sxc 17. Id The module id on the page. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Module.Id \uD83E\uDE92 Use in Typed Razor: MyContext.Module.Id Tip This Module ID is often used to give DOM elements a unique name. For example: id=\"my-app-wrapper-@CmsContext.Module.Id\". But since v16.04 there is a new property UniqueKey which is better suited for this. int Id { get; } Property Value int The ID, unless unknown, in which case it's a negative number Remarks Corresponds to the Dnn ModuleId or the Oqtane Module Id. In some systems a module can be re-used on multiple pages, and possibly have different settings for re-used modules. 2sxc doesn't use that, so the module id corresponds to the Dnn ModuleId and not the PageModuleId."
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsPage.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsPage.html",
    "title": "Interface ICmsPage | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsPage Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll Information about the page which is the context for the currently running code. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Page \uD83E\uDE92 In Typed Razor it's found on MyPage [PublicApi] public interface ICmsPage : IHasMetadata Remarks Note that the module context is the module for which the code is currently running. In some scenarios (like Web-API scenarios) the code is running for this page but not on this page, as it would then be running on a WebApi. Properties Id The Id of the page. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Page.Id \uD83E\uDE92 Use in Typed Razor: MyPage.Id int Id { get; } Property Value int Remarks Corresponds to the Dnn TabId or the Oqtane Page.PageId Metadata Metadata of the current page [JsonIgnore] IMetadata Metadata { get; } Property Value IMetadata Remarks Added in v13.12 Parameters The page parameters, cross-platform. Use this for easy access to url parameters like ?id=xyz with CmsContext.Page.Parameters[\"id\"] as a replacement for Request.QueryString[\"id\"] \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Page.Parameters \uD83E\uDE92 Use in Typed Razor: MyPage.Parameters IParameters Parameters { get; } Property Value IParameters Url The resource specific Url, like the one to this page or portal. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Page.Url \uD83E\uDE92 Use in Typed Razor: MyPage.Url string Url { get; } Property Value string Remarks Added ca. v12."
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsPlatform.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsPlatform.html",
    "title": "Interface ICmsPlatform | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsPlatform Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll General platform information \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Platform \uD83E\uDE92 In Typed Razor it's found on MyContext.Platform [PublicApi] public interface ICmsPlatform Properties Name A nice name ID, like \"Dnn\" or \"Oqtane\" \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Platform.Name \uD83E\uDE92 Use in Typed Razor: MyContext.Platform.Name string Name { get; } Property Value string Remarks Please be aware that platform names may change with time - like Dnn was once DotNetNuke So to safely ensure you are detecting the right platform you should focus on the Type attribute. Type The platform type Id from the enumerator - so stored as an int. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Platform.Type \uD83E\uDE92 Use in Typed Razor: MyContext.Platform.Type PlatformType Type { get; } Property Value PlatformType Version The platform version \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Platform.Version \uD83E\uDE92 Use in Typed Razor: MyContext.Platform.Version Version Version { get; } Property Value Version Remarks Added in v13"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsSite.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsSite.html",
    "title": "Interface ICmsSite | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsSite Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll The site context of the code - so basically which website / portal it's running on. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Site \uD83E\uDE92 In Typed Razor it's found on MyContext.Site [PublicApi] public interface ICmsSite : IHasMetadata Properties Id The Id of the site in systems like DNN and Oqtane. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Site.Id \uD83E\uDE92 Use in Typed Razor: MyContext.Site.Name int Id { get; } Property Value int Remarks In DNN this is the same as the PortalId Metadata Metadata of the current site [JsonIgnore] IMetadata Metadata { get; } Property Value IMetadata Remarks Added in v13.12 Url The site url with protocol. Can be variation of any such examples: https://website.org https://www.website.org https://website.org/products https://website.org/en-us https://website.org/products/en-us \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Site.Url \uD83E\uDE92 Use in Typed Razor: MyContext.Site.Url string Url { get; } Property Value string UrlRoot The url root which identifies the current site / portal as is. It does not contain a protocol, but can contain subfolders. This is mainly used to clearly identify a site in a multi-site system or a language-variation in a multi-language setup. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Site.UrlRoot \uD83E\uDE92 Use in Typed Razor: MyContext.Site.UrlRoot string UrlRoot { get; } Property Value string Remarks introduced in 2sxc 13"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsUser.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsUser.html",
    "title": "Interface ICmsUser | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsUser Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll The user context of your code - so it's information about the user your code is using. [PublicApi] public interface ICmsUser : IHasMetadata Examples \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.User \uD83E\uDE92 In Typed Razor it's found on MyUser Remarks History v18 enhanced to serialize - so it can be returned by a WebApi Controller Properties Email The user e-mail. If anonymous/not logged in, would be an empty string. string Email { get; } Property Value string Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.Email \uD83E\uDE92 Use in Typed Razor: MyUser.Email Remarks History: Added in v.14.09 Id User Id as int. Works in DNN and Oqtane. int Id { get; } Property Value int The ID or 0 (zero) if anonymous Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.UrlRoot \uD83E\uDE92 Use in Typed Razor: MyUser.Id IsAnonymous Information if the user is anonymous (not logged in) bool IsAnonymous { get; } Property Value bool Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.IsAnonymous \uD83E\uDE92 Use in Typed Razor: MyUser.IsAnonymous Remarks History: This was added fairly late in v14.08 IsContentAdmin Information if the current user is Site Content Administrator. bool IsContentAdmin { get; } Property Value bool Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.IsContentAdmin \uD83E\uDE92 Use in Typed Razor: MyUser.IsContentAdmin Remarks Basically this means a user has Admin permissions, but may not have all admin permissions if excluded through special 2sxc-groups. These are not the highest possible privileges For the site it would be IsSiteDeveloper For the entire system that would be IsSystemAdmin. History: New in 2sxc 14.09 IsSiteAdmin Information if the current user is Site Administrator. bool IsSiteAdmin { get; } Property Value bool Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.IsSiteAdmin \uD83E\uDE92 Use in Typed Razor: MyUser.IsSiteAdmin Remarks Basically this means a user has very high permissions - incl. the ability to create users in a site etc. But these are not the highest possible privileges For the site it would be IsSiteDeveloper For the entire system that would be IsSystemAdmin. History: New in 2sxc 12 IsSiteDeveloper Information if the current user is Developer on the current site. bool IsSiteDeveloper { get; } Property Value bool Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.IsSiteDeveloper \uD83E\uDE92 Use in Typed Razor: MyUser.IsSiteDeveloper Remarks Basically this means a user has maximum site permissions - incl. the ability to install additional components or do dangerous things like edit razor. These are almost the highest possible privileges For the entire system that would be IsSystemAdmin. History: New in 2sxc 12 IsSystemAdmin Information if the current user is System Administrator. bool IsSystemAdmin { get; } Property Value bool Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.IsSystemAdmin \uD83E\uDE92 Use in Typed Razor: MyUser.IsSystemAdmin Remarks Basically this means a user has maximum permissions - incl. the ability to install additional components or do dangerous things like edit razor. History: New in 2sxc 12 Metadata Metadata of the current user [JsonIgnore] IMetadata Metadata { get; } Property Value IMetadata Remarks History: Added in v13.12 Name The username as should be displayed. string Name { get; } Property Value string The name or an empty string if anonymous Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.Name \uD83E\uDE92 Use in Typed Razor: MyUser.Name Remarks History: Added in v.14.09 Username The username used on the login. string Username { get; } Property Value string The username or an empty string if anonymous Examples \uD83E\uDE92 Use in Dynamic Razor: CmsContext.User.Username \uD83E\uDE92 Use in Typed Razor: MyUser.Username Remarks History: Added in v.14.09"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsView-2.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsView-2.html",
    "title": "Interface ICmsView<TSettings, TResources> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsView<TSettings, TResources> Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll Special Views for strongly typed code. It supplies the Settings and Resources as strongly typed objects. [PublicApi] public interface ICmsView<out TSettings, out TResources> : ICmsView, IHasMetadata where TSettings : class, ICanWrapData, new() where TResources : class, ICanWrapData, new() Type Parameters TSettings Custom class for Settings TResources Custom class for Resources Inherited Members ICmsView.Id ICmsView.Name ICmsView.Identifier ICmsView.Edition ICmsView.Metadata ICmsView.Folder Remarks New v17.03 Properties Resources All the app resources (usually used for multi-language labels etc.). /// These are typed - typically to AppCode.Data.AppResources TResources Resources { get; } Property Value TResources Settings All the app settings which are custom for each app. These are typed - typically to AppCode.Data.AppSettings TSettings Settings { get; } Property Value TSettings"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsView.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsView.html",
    "title": "Interface ICmsView | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICmsView Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll View context information. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.View \uD83E\uDE92 In Typed Razor it's found on MyView [PublicApi] public interface ICmsView : IHasMetadata Remarks Added in 2sxc 12.02 Properties Edition Edition used - if any. Otherwise, empty string. \uD83E\uDE92 Use in Razor: CmsContext.View.Edition \uD83E\uDE92 Use in Typed Razor: MyView.Edition string Edition { get; } Property Value string Folder This is the preferred way to get the Url or Path to the current view. This is different from the App.Folder, because it will also contain the edition (if there is an edition) \uD83E\uDE92 Use in Razor: CmsContext.View.Folder - like CmsContext.View.Folder.Url \uD83E\uDE92 Use in Typed Razor: MyView.Edition - like MyView.Folder.Url IFolder Folder { get; } Property Value IFolder Remarks Added in v16.04 Id View configuration ID \uD83E\uDE92 Use in Dynamic Razor: CmsContext.View.Id \uD83E\uDE92 Use in Typed Razor: MyView.Id int Id { get; } Property Value int Identifier An optional identifier which the View configuration can provide. Use this when you want to use the same template but make minor changes based on the View selected (like change the number of columns). Usually you will use either this OR the Settings \uD83E\uDE92 Use in Razor: CmsContext.View.Identifier \uD83E\uDE92 Use in Typed Razor: MyView.Identifier string Identifier { get; } Property Value string Metadata Metadata of the current view [JsonIgnore] IMetadata Metadata { get; } Property Value IMetadata Remarks Added in v13.12 Name Name of the view as configured - note that because of i18n it could be different depending on the language. To clearly identify a view, use the Identifier or use Settings \uD83E\uDE92 Use in Dynamic Razor: CmsContext.View.Name \uD83E\uDE92 Use in Typed Razor: MyView.Name string Name { get; } Property Value string Resources Settings of this view. This property only works in the new typed code. Note that many views don't have their own settings, so this would be empty = null. ITypedItem Resources { get; } Property Value ITypedItem Remarks Resources added to API in v17.04 Settings Settings of this view. This property only works in the new typed code. Note that many views don't have their own settings, so this would be empty = null. ITypedItem Settings { get; } Property Value ITypedItem"
  },
  "api/dot-net/ToSic.Sxc.Context.IParameters.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.IParameters.html",
    "title": "Interface IParameters | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IParameters Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll Collection of url parameters of the current page Note: Has a special ToString() implementation, which gives you the parameters for re-use in other scenarios. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Page.Parameters \uD83E\uDE92 In Typed Razor it's found on MyPage.Parameters [PublicApi] public interface IParameters : IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable, ITyped Inherited Members IReadOnlyDictionary<string, string>.ContainsKey(string) IReadOnlyDictionary<string, string>.TryGetValue(string, out string) IReadOnlyDictionary<string, string>.this[string] IReadOnlyDictionary<string, string>.Keys IReadOnlyDictionary<string, string>.Values IReadOnlyCollection<KeyValuePair<string, string>>.Count IEnumerable<KeyValuePair<string, string>>.GetEnumerator() IEnumerable.GetEnumerator() ITyped.Bool(string, NoParamOrder, bool, bool?) ITyped.DateTime(string, NoParamOrder, DateTime, bool?) ITyped.String(string, NoParamOrder, string, bool?, object) ITyped.Int(string, NoParamOrder, int, bool?) ITyped.Long(string, NoParamOrder, long, bool?) ITyped.Float(string, NoParamOrder, float, bool?) ITyped.Decimal(string, NoParamOrder, decimal, bool?) ITyped.Double(string, NoParamOrder, double, bool?) ITyped.Url(string, NoParamOrder, string, bool?) ITyped.Attribute(string, NoParamOrder, string, bool?) ITyped.IsEmpty(string, NoParamOrder, string) ITyped.IsNotEmpty(string, NoParamOrder, string) ITyped.Keys(NoParamOrder, IEnumerable<string>) ITyped.Get(string, NoParamOrder, bool?, string) ITyped.Get<TValue>(string, NoParamOrder, TValue, bool?, string) Remarks uses the Convention: Functional API (Immutable) Added typed accessors such as Int(...) etc. in v16.03 implementing ITyped Made order of parameters automatically sort in 18.06 because of crawler-load issues Added Prioritize in v19.00 Added Flush in 19.00 Methods Add(string) Add another URL parameter and return a new IParameters. If the name/key already exists, it will extend it, add a simple Otherwise please use Set(string, string) IParameters Add(string key) Parameters key string Returns IParameters A new IParameters, the original is not modified. Add(string, object) Add another URL parameter and return a new IParameters. If the name/key already exists, it will extend it, so the parameter will have 2 values. Otherwise, please use Set(string, string) Note also that this takes an object and will do some special conversions. For example, bool values are lower case true|false, numbers are culture invariant and dates are treated as is with time removed if it has no time. IParameters Add(string key, object value) Parameters key string the key value object object! value Returns IParameters A new IParameters, the original is not modified. Remarks Added in v15.0 Add(string, string) Add another URL parameter and return a new IParameters. If the name/key already exists, it will extend it, so the parameter will have 2 values. Otherwise, please use Set(string, string) IParameters Add(string key, string value) Parameters key string the key value string the value Returns IParameters A new IParameters, the original is not modified. ContainsKey(string) Check if this typed object has a property of this specified name. It's case-insensitive. bool ContainsKey(string name) Parameters name string the name like Image; some objects also support path to sub-property like Author.Name Returns bool Remarks Adding in 16.03 (WIP) Filter(string) Filter all parameters to only keep the keys listed in names. IParameters Filter(string names) Parameters names string one or more names to keep, comma-separated. Returns IParameters A new IParameters, the original is not modified. Remarks Added in v17.01 Flush() Flush all parameters and start anew. Note that it does preserve other settings like prioritization. IParameters Flush() Returns IParameters Remarks New v19.00 Get(string) Get a parameter. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Page.Parameters.Get(\"SortOrder\") \uD83E\uDE92 Use in Typed Razor: MyPage.Parameters.Get(\"SortOrder\") string Get(string name) Parameters name string the key/name in the url Returns string a string or null Remarks Added v15.04 Get<TValue>(string) Get a parameter and convert to the needed type - or return the default. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Page.Parameters.Get<int>(\"id\") \uD83E\uDE92 Use in Typed Razor: MyPage.Parameters.Get<int>(\"id\") TValue Get<TValue>(string name) Parameters name string Key/name of the parameter Returns TValue Type Parameters TValue Remarks Added v15.04 Get<TValue>(string, NoParamOrder, TValue) Get a parameter and convert to the needed type - or return the fallback. \uD83E\uDE92 Use in Dynamic Razor: CmsContext.Page.Parameters.Get(\"id\", fallback: 0) \uD83E\uDE92 Use in Typed Razor: MyPage.Parameters.Get(\"SortOrder\", fallback: 0) TValue Get<TValue>(string name, NoParamOrder noParamOrder = default, TValue fallback = default) Parameters name string Key/name of the parameter noParamOrder NoParamOrder see Convention: Named Parameters fallback TValue Optional fallback value to use if not found Returns TValue Type Parameters TValue Remarks Added v15.04 Prioritize(string) Prioritize the order of parameters. This allows you to order the parameters in a certain way, which can be important for some systems. Remember: If a parameter doesn't exist, it still won't appear in the list If you order the parameters, this can have an unexpected effect on the amount of URLs you generate, possibly causing high server load when crawlers visit. IParameters Prioritize(string fields = null) Parameters fields string CSV of names to prioritize, in the specified order Returns IParameters Remarks New in v19.00 Remove(string) Remove a parameter and return a new IParameters. IParameters Remove(string name) Parameters name string Returns IParameters A new IParameters, the original is not modified. Remove(string, object) Remove a parameter value and return a new IParameters. This only removes a specific value, for example if you start with id=27&id=42 and remove id=27, then the result will be id=42. IParameters Remove(string name, object value) Parameters name string value object Returns IParameters A new IParameters, the original is not modified. Remarks Added in v17.01 Set(string) Add another URL parameter and return a new IParameters. If the name/key already exists, it will just overwrite it. IParameters Set(string name) Parameters name string Returns IParameters A new IParameters, the original is not modified. Set(string, object) Add another URL parameter and return a new IParameters. If the name/key already exists, it will just overwrite it. Note also that this takes an object and will do some special conversions. For example, bool values are lower case true|false, numbers are culture invariant and dates are treated as is with time removed if it has no time. IParameters Set(string name, object value) Parameters name string the key value object object! value Returns IParameters A new IParameters, the original is not modified. Remarks Added in v15.0 Set(string, string) Add another URL parameter and return a new IParameters. If the name/key already exists, it will just overwrite it. IParameters Set(string name, string value) Parameters name string value string Returns IParameters A new IParameters, the original is not modified. ToString() ToString() is specially implemented, to give you the parameters again as they were originally given on the page. string ToString() Returns string Toggle(string, object) Toggle a parameter value and return a new IParameters. This means that if the parameter was previously set with the same value, it will be un-set, otherwise it will be added. IParameters Toggle(string name, object value) Parameters name string value object Returns IParameters A new IParameters, the original is not modified. Remarks Added in v17.01"
  },
  "api/dot-net/ToSic.Sxc.Context.PlatformType.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.PlatformType.html",
    "title": "Enum PlatformType | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum PlatformType Namespace ToSic.Sxc.Context Assembly ToSic.Sxc.dll The types of platforms which 2sxc could be running on [PublicApi] [Flags] public enum PlatformType : long Fields Custom = 72057594037927936 Custom platform - this should never occur in production code but could during automated testing Dnn = 4 Dnn aka. DotNetNuke - see https://dnncommunity.org/ Hybrid = 2 All platforms / hybrid. This should never be used to publish what a platform is, but to mark things that work on all platforms None = 1 No platform - this should never occur NopCommerce = 16 NopCommerce using .net Core 5 (not implemented yet) - see https://www.nopcommerce.com/ Oqtane = 8 Oqtane using .net Core 5 - see https://oqtane.org/ Test = 144115188075855872 Test platform - this should never occur in production code but could during automated testing Unknown = 0 Unknown platform - this should never occur"
  },
  "api/dot-net/ToSic.Sxc.Context.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.html",
    "title": "Namespace ToSic.Sxc.Context | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Context Context information for the current request / scenario. The Context gives your code information about the page / site / module etc. it's currently running in. All your code (Razor, WebApi) will have a property CmsContext which is of type ICmsContext. Note Your code will always have these objects, but they may sometimes be referencing unknown information. For example, if the current context doesn't have a known Module (like in API scenarios) then CmsContext.Module will return a valid object, but the ID will be < 0. Interfaces ICmsBlock Information about the block - similar to a module. The block is the 2sxc-internal definition of a unit of content. In most cases each module has one block, but there are edge cases such as: modules which show the same block - different module-id, same block-id modules showing multiple blocks such as inner-content. ICmsContext This is the runtime context of your code in the CMS. It can tell you about the site, page, module etc. that you're on. Note that it it Platform Agnostic so it's the same on Dnn, Oqtane etc. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext \uD83E\uDE92 In Typed Razor it's found on MyContext, but many objects are directly available, like MyPage ICmsCulture Information about the cultures/languages used. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Culture \uD83E\uDE92 In Typed Razor it's found on MyContext.Culture ICmsModule Information about the module context the code is running in. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Module \uD83E\uDE92 In Typed Razor it's found on MyContext.Module ICmsPage Information about the page which is the context for the currently running code. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Page \uD83E\uDE92 In Typed Razor it's found on MyPage ICmsPlatform General platform information \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Platform \uD83E\uDE92 In Typed Razor it's found on MyContext.Platform ICmsSite The site context of the code - so basically which website / portal it's running on. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Site \uD83E\uDE92 In Typed Razor it's found on MyContext.Site ICmsUser The user context of your code - so it's information about the user your code is using. ICmsView View context information. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.View \uD83E\uDE92 In Typed Razor it's found on MyView ICmsView<TSettings, TResources> Special Views for strongly typed code. It supplies the Settings and Resources as strongly typed objects. IParameters Collection of url parameters of the current page Note: Has a special ToString() implementation, which gives you the parameters for re-use in other scenarios. \uD83E\uDE92 In Dynamic Razor it's found on CmsContext.Page.Parameters \uD83E\uDE92 In Typed Razor it's found on MyPage.Parameters Enums PlatformType The types of platforms which 2sxc could be running on"
  },
  "api/dot-net/ToSic.Sxc.Data.ICanWrap-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ICanWrap-1.html",
    "title": "Interface ICanWrap<TSource> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICanWrap<TSource> Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Marks objects such as custom items or data models, which can receive a specific data-type (entity or typed item) and wrap it. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface ICanWrap<in TSource> : ICanWrapData Type Parameters TSource The data type which can be accepted. Must be IEntity or ITypedItem (other types not supported for now). Remarks This is more specific than the ICanWrapData, since that is just a marker interface. This one specifies that the object has the necessary Setup() method to receive the data of the expected type. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01 The Setup() method is still internal, as the signature may still change"
  },
  "api/dot-net/ToSic.Sxc.Data.ICanWrapData.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ICanWrapData.html",
    "title": "Interface ICanWrapData | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICanWrapData Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Marks objects such as custom items or data models, which can wrap data (usually Entities or TypedItems). [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface ICanWrapData Remarks Most 2sxc base classes such as Razor files or WebApi files have some methods which will return a typed data model. This is usually As<TModel>() or AsList<TModel>(). To help the developer understand what is allowed for TModel we must mark all objects which are supported, and this is done with this interface. So any class which is meant to wrap data from an IEntity or ITypedItem should implement this interface. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Data.IDataModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDataModel.html",
    "title": "Interface IDataModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataModel Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Interface to mark objects which can receive data such as IEntity or ITypedItem objects and wrap them, usually into a strongly typed model. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataModel Remarks Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Data.IDataModelOf-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDataModelOf-1.html",
    "title": "Interface IDataModelOf<TContents> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataModelOf<TContents> Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Interface to mark objects which can receive ITypedItem objects and wrap them. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataModelOf<in TContents> : IDataModel Type Parameters TContents Remarks Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01 The Setup() method is still internal, as the signature may still change"
  },
  "api/dot-net/ToSic.Sxc.Data.IDataWrapper-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDataWrapper-1.html",
    "title": "Interface IDataWrapper<TModel> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataWrapper<TModel> Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Marks objects such as custom items or data models, which can receive a specific data-object and wrap it. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataWrapper<in TModel> : IDataWrapper Type Parameters TModel Remarks This is more specific than the IDataWrapper, since that is just a marker interface. This one specifies that the object has the necessary Setup() method to receive the data of the expected type. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01 The Setup() method is still internal, as the signature may still change"
  },
  "api/dot-net/ToSic.Sxc.Data.IDataWrapper.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDataWrapper.html",
    "title": "Interface IDataWrapper | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataWrapper Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Marks objects such as custom items or data models, which can wrap data (usually Entities or TypedItems). [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataWrapper Remarks Most 2sxc base classes such as Razor files or WebApi files have some methods which will return a typed data model. This is usually As<TModel>() or AsList<TModel>(). To help the developer understand what is allowed for TModel we must mark all objects which are supported, and this is done with this interface. So any class which is meant to wrap data from an IEntity or ITypedItem should implement this interface. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Data.IDataWrapperForType.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDataWrapperForType.html",
    "title": "Interface IDataWrapperForType | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataWrapperForType Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Interface to mark objects which can receive data such as IEntity or ITypedItem objects and wrap them. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataWrapperForType : IDataModel Remarks Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Data.IDynamicEntity.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDynamicEntity.html",
    "title": "Interface IDynamicEntity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDynamicEntity Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll This is an older dynamic wrapper for IEntity objects. It provides dynamic access to underlying properties. [PublicApi] public interface IDynamicEntity : IHasDecorators<IEntity>, ICanDebug Inherited Members IHasDecorators<IEntity>.Decorators ICanDebug.Debug Remarks It provides nicer access to underlying properties and automatically handles things like multi-language etc. The underlying IEntity IEntity is in the Entity property. This is an older way to work with entities and not recommended anymore. You should use a newer base class such as `RazorTyped`, there Dynamic objects are not used anymore. Normally you will use it without caring about these internals. Please check @HowTo.DynamicCode.DynamicEntity Properties AnyProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .IsFemale or whatever other property your item has. It is treated as a dynamic so you can just output it, or cast it to the expected type. dynamic AnyProperty { get; } Property Value dynamic EntityGuid The guid of the underlying entity. Guid EntityGuid { get; } Property Value Guid Remarks If the entity doesn't exist, it will return an empty guid EntityId The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. int EntityId { get; } Property Value int Remarks If the entity doesn't exist, it will return 0 EntityTitle The title of this item. This is always available no matter what the underlying field for the title is. string EntityTitle { get; } Property Value string The title of the underlying entity. In rare cases where no title-field is known, it can be null. It can also be null if there is no underlying entity. Remarks This returns a string which is usually what's expected. In previous versions (before v15) 2sxc it returned an object. EntityType The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName string EntityType { get; } Property Value string IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use .IsDemoItem. bool IsDemoItem { get; } Property Value bool True if this is the item configured in the view-settings, false if not. Remarks New in 10.07 on IDynamicEntity, new in 16.02 on ITypedEntity IsPublished Tells us if this data item is published or still draft. Default is true. bool IsPublished { get; } Property Value bool Metadata The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName IMetadata Metadata { get; } Property Value IMetadata Remarks Added in v13 Changed type name to IMetadata from IDynamicMetadata in 16.02; same type, different type name Presentation Contains presentation settings for an item - if they exist. This is a functionality of the CMS, where an instance of an item can be configured to show in a specific way. Normally it's used when something like an address has various show-settings (like how the map should visualize this address). The presentation-info is therefor not-null IF the content belongs to this module instance the view-configuration of this module is configured to have presentation items there is either a default presentation configured in the view, or the user has manually edited the presentation settings dynamic Presentation { get; } Property Value dynamic An IDynamicEntity with the presentation item (or the demo-presentation), otherwise null. Methods Children(string, string) A dynamic list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. List<IDynamicEntity> Children(string field = null, string type = null) Parameters field string Optional field filter - would only return items that point to the current item in a specific field name. type string Optional type filter - would only return items of this type. Returns List<IDynamicEntity> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 10.21.00 - note also that the parameter-order is reversed to the Parents() Field(string) Get a Field-object of a property of this entity, to use with services like the IImageService which also need more information like the metadata. IField Field(string name) Parameters name string Returns IField Remarks History: Added in v13.10 Get(string) Get a value of the entity. Usually you will prefer the quick access like @content.FirstName - which will give you the same things as content.Get(\"FirstName\"). There are two cases to use this: when you dynamically assemble the field name in your code, like when using App.Resources or similar use cases. to access a field which has a conflicting name with this object, like Get(\"Parents\") dynamic Get(string name) Parameters name string Returns dynamic An object which can be either a string, number, boolean or List<IDynamicEntity>, depending on the field type. Will return null if the field was not found. Get(string, NoParamOrder, string, bool, bool?) dynamic Get(string name, NoParamOrder noParamOrder = default, string language = null, bool convertLinks = true, bool? debug = null) Parameters name string noParamOrder NoParamOrder language string convertLinks bool debug bool? Returns dynamic GetDraft() Get the draft item of this item if this is a content-item which is published, and has a draft. dynamic GetDraft() Returns dynamic Returns a dynamic entity if there is a draft, or null if there is no draft. GetPublished() Get the published item of this item if this is a content-item which is draft, and has a published. dynamic GetPublished() Returns dynamic Returns a dynamic entity if there is a draft, or null if there is no draft. Get<TValue>(string) Get a value using the name - and cast it to the expected strong type. For example to get an int even though it's stored as decimal. TValue Get<TValue>(string name) Parameters name string the property name like Image - or path like Author.Name (new v15) Returns TValue The typed value, or the default like null or 0 if casting isn't possible. Type Parameters TValue The expected type, like string, int, etc. Remarks Added in v15 Get<TValue>(string, NoParamOrder, TValue) TValue Get<TValue>(string name, NoParamOrder noParamOrder = default, TValue fallback = default) Parameters name string noParamOrder NoParamOrder fallback TValue Returns TValue Type Parameters TValue Html(string, NoParamOrder, object, bool?, object, bool) Show a field in the expected / best possible way. As of now it's meant for WYSIWYG fields with Very-Rich Text. See DynamicEntity / TypedItem .Html(...) Method new v16.01 IHtmlTag Html(string name, NoParamOrder noParamOrder = default, object container = null, bool? toolbar = null, object imageSettings = null, bool debug = false) Parameters name string the field name noParamOrder NoParamOrder see Convention: Named Parameters container object A wrapper tag for the result. It's either a RazorBlade tag such as Kit.HtmlTag.Div(), a string such as span or an empty string `` to indicate no container. If not set it will default to to a div-tag. See docs toolbar bool? Override default toolbar behavior on this field. See docs imageSettings object Settings for resizing. Default is Wysiwyg but it can also be Content or a settings object. debug bool Activate debug visualization to better see alignments and such. Returns IHtmlTag Remarks Added in 2sxc 16.01 Only works on Razor files inheriting from Hybrid14 or newer Parents(string, string) A dynamic list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. List<IDynamicEntity> Parents(string type = null, string field = null) Parameters type string Optional type filter - would only return items of this type. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns List<IDynamicEntity> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 9.42 - note also that the parameter-order is reversed to the Children()"
  },
  "api/dot-net/ToSic.Sxc.Data.IDynamicStack.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDynamicStack.html",
    "title": "Interface IDynamicStack | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDynamicStack Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll This is a dynamic object which contains multiple dynamic objects (Sources). [PublicApi] public interface IDynamicStack : ICanDebug Inherited Members ICanDebug.Debug Remarks It will try to find a value inside each source in the order of the provided Sources. History: Introduced in 12.02 Properties AnyProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .IsFemale or whatever other property your item has. It is treated as a dynamic so you can just output it, or cast it to the expected type. dynamic AnyProperty { get; } Property Value dynamic Methods Get(string) Get a value of the entity. Usually you will prefer the quick access like @content.FirstName - which will give you the same things as content.Get(\"FirstName\"). There are two cases to use this: when you dynamically assemble the field name in your code, like when using App.Resources or similar use cases. to access a field which has a conflicting name with this object, like Get(\"Parents\") dynamic Get(string name) Parameters name string Returns dynamic An object which can be either a string, number, boolean or List<IDynamicEntity>, depending on the field type. Will return null if the field was not found. Get(string, NoParamOrder, string, bool, bool?) Get a property using the string name. Only needed in special situations, as most cases can use the object.name directly dynamic Get(string name, NoParamOrder noParamOrder = default, string language = null, bool convertLinks = true, bool? debug = null) Parameters name string the property name like Image - or path like Author.Name (new v15) noParamOrder NoParamOrder see Convention: Named Parameters language string Optional language code - like \"de-ch\" to prioritize that language convertLinks bool Optionally turn off if links like file:72 are looked up to a real link. Default is true. debug bool? Set true to see more details in Insights how the value was retrieved. Returns dynamic a dynamically typed result, can be string, bool, etc. Get<TValue>(string) Get a value using the name - and cast it to the expected strong type. For example to get an int even though it's stored as decimal. TValue Get<TValue>(string name) Parameters name string the property name like Image - or path like Author.Name (new v15) Returns TValue The typed value, or the default like null or 0 if casting isn't possible. Type Parameters TValue The expected type, like string, int, etc. Remarks Added in v15 Get<TValue>(string, NoParamOrder, TValue) Get a value using the name - and cast it to the expected strong type. For example to get an int even though it's stored as decimal. Since the parameter fallback determines the type TValue you can just write this like `Content.Get(\"Title\", fallback: \"no title\") TValue Get<TValue>(string name, NoParamOrder noParamOrder = default, TValue fallback = default) Parameters name string the property name like Image - or path like Author.Name (new v15) noParamOrder NoParamOrder see Convention: Named Parameters fallback TValue the fallback value to provide if not found Returns TValue The typed value, or the default like null or 0 if casting isn't possible. Type Parameters TValue The expected type, like string, int, etc. Note that you don't need to specify it, if you specify the fallback property. Remarks Added in v15"
  },
  "api/dot-net/ToSic.Sxc.Data.IField.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IField.html",
    "title": "Interface IField | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IField Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll This describes a field-property of an item/entity. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"This is just FYI so you see how it works; you shouldn't use any of these properties in your code\")] public interface IField : IHasMetadata Remarks It's used for APIs which can need to know more about the field holding an item, like: The field name and parent reference The values in raw and converted Any metadata of the field History Created in v13.10, originally as IDynamicField In v16.02 renamed IField as it's not dynamic, and published In 16.02 changed types of Value and Raw to object - previously dynamic Properties Metadata Metadata of the thing in the field - if it has such metadata. The object will never be null, but it can of course not have any data if there is no metadata. IMetadata Metadata { get; } Property Value IMetadata Name The field name string Name { get; } Property Value string Parent The parent object of this field ITypedItem Parent { get; } Property Value ITypedItem"
  },
  "api/dot-net/ToSic.Sxc.Data.IMetadata.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IMetadata.html",
    "title": "Interface IMetadata | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IMetadata Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Metadata on Dynamic Objects - like IDynamicEntity or IAsset (files/folders). [PublicApi] public interface IMetadata : IHasMetadata, ITypedItem, ITyped, IEquatable<ITypedItem>, ICanDebug, IHasDecorators<IEntity> Inherited Members IHasMetadata.Metadata ITypedItem.Dyn ITypedItem.Presentation ITypedItem.Field(string, NoParamOrder, bool?) ITypedItem.Folder(string, NoParamOrder, bool?) ITypedItem.File(string, NoParamOrder, bool?) ITypedItem.Child(string, NoParamOrder, bool?) ITypedItem.Children(string, NoParamOrder, string, bool?) ITypedItem.Parent(NoParamOrder, bool?, string, string) ITypedItem.Parents(NoParamOrder, string, string) ITypedItem.Child<T>(string, NoParamOrder, bool?) ITypedItem.Children<T>(string, NoParamOrder, string, bool?) ITypedItem.Parent<T>(NoParamOrder, bool?, string, string) ITypedItem.Parents<T>(NoParamOrder, string, string) ITypedItem.IsPublished ITypedItem.Publishing ITypedItem.IsDemoItem ITypedItem.Html(string, NoParamOrder, object, bool?, object, bool?, bool, Func<ITweakInput<string>, ITweakInput<string>>) ITypedItem.Picture(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, string, object, object, object) ITypedItem.Img(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, object, object) ITypedItem.Gps(string, NoParamOrder, bool?) ITypedItem.Id ITypedItem.Guid ITypedItem.Title ITypedItem.Type ITyped.Bool(string, NoParamOrder, bool, bool?) ITyped.DateTime(string, NoParamOrder, DateTime, bool?) ITyped.String(string, NoParamOrder, string, bool?, object) ITyped.Int(string, NoParamOrder, int, bool?) ITyped.Long(string, NoParamOrder, long, bool?) ITyped.Float(string, NoParamOrder, float, bool?) ITyped.Decimal(string, NoParamOrder, decimal, bool?) ITyped.Double(string, NoParamOrder, double, bool?) ITyped.Url(string, NoParamOrder, string, bool?) ITyped.Attribute(string, NoParamOrder, string, bool?) ITyped.ContainsKey(string) ITyped.IsEmpty(string, NoParamOrder, string) ITyped.IsNotEmpty(string, NoParamOrder, string) ITyped.Keys(NoParamOrder, IEnumerable<string>) ITyped.Get(string, NoParamOrder, bool?, string) ITyped.Get<TValue>(string, NoParamOrder, TValue, bool?, string) IEquatable<ITypedItem>.Equals(ITypedItem) ICanDebug.Debug IHasDecorators<IEntity>.Decorators Remarks Behaves like a normal DynamicEntity, but has additional commands to detect if specific Metadata exists. History: Added in v13 Made compatible to ITypedItem in 16.02 to allow typed commands such as .String(...) Renamed in v16.02 from IDynamicMetadata to IMetadata since it's not necessarily dynamic any more (but still supports dynamic where needed) Note that this is a breaking change, but we believe the type is never directly mentioned in any code Methods HasType(string) Ask if there is metadata of the type specified. This is important in scenarios where an item could have a lot of metadata, but we only want one specific type to look at. bool HasType(string type) Parameters type string Returns bool true if metadata of that type exists OfType(string) Get all the metadata Entities of a specific type. IEnumerable<IEntity> OfType(string type) Parameters type string Returns IEnumerable<IEntity>"
  },
  "api/dot-net/ToSic.Sxc.Data.IPublishing.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IPublishing.html",
    "title": "Interface IPublishing | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IPublishing Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Publishing Information for ITypedItems. [PublicApi] public interface IPublishing Remarks New v17 Properties HasBoth True if this item branches meaning it has a published version and an unpublished draft version. bool HasBoth { get; } Property Value bool HasPublished True if this item has a published version. Note that this is also true if the current item is the published version. bool HasPublished { get; } Property Value bool HasUnpublished True if this item has an unpublished version. Note that this is also true if the current item is the unpublished version. bool HasUnpublished { get; } Property Value bool IsSupported Informs you if the current Item support publishing. Basically all real Items based on IEntity support publishing, but in some cases you will have ITypedItems which are not based on an entity, and those will not support publishing. By default, those objects will say IsPublished == true, HasPublished == true and HasUnpublished == false. bool IsSupported { get; } Property Value bool Methods GetOpposite() Get the opposite version of this item. So if your initial item was published, it will try to get the unpublished, and vice versa. ITypedItem GetOpposite() Returns ITypedItem the other version of this item or null GetPublished() Get the published version of this item. If the initial item was already published, it will return that item. ITypedItem GetPublished() Returns ITypedItem the published item or null GetUnpublished() Get the unpublished version of this item. If the initial item was already unpublished, it will return that item. ITypedItem GetUnpublished() Returns ITypedItem the unpublished item or null"
  },
  "api/dot-net/ToSic.Sxc.Data.ISecureData-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ISecureData-1.html",
    "title": "Interface ISecureData<TValue> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ISecureData<TValue> Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Objects which contain secure/encrypted data and can be decrypted / verified. [PublicApi] public interface ISecureData<out TValue> Type Parameters TValue Type of the value in this secure data. As of now it's always a string. Remarks This object contains decrypted data (if it was encrypted originally) and tells you if the data was encrypted, signed etc. It's still very basic, and will grow in functionality to assist in handling secure / encrypted / signed data. History: Introduced in 2sxc 12.05 Properties IsSecured Determines if the data is secure data, so it's either encrypted or signed bool IsSecured { get; } Property Value bool Remarks made public in v17.01 Value The value returned by the secure data - usually a string. TValue Value { get; } Property Value TValue Methods IsSecuredBy(string) Determines what authority secured this secure data. This is to figure out what certificate or source verified the decryption / signing As of 2sxc 12.05, it can only be \"preset\", other keys are currently not handled yet bool IsSecuredBy(string authorityName) Parameters authorityName string Returns bool ToString() This object explicitly has a ToString, so you can use the result in string concatenation like \"key:\" + secureResult string ToString() Returns string"
  },
  "api/dot-net/ToSic.Sxc.Data.ITyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ITyped.html",
    "title": "Interface ITyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITyped Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Objects which usually wrap other objects to provide strictly typed access to properties. [PublicApi] [JsonConverter(typeof(DynamicJsonConverter))] public interface ITyped Remarks The object will have typed Methods to read properties like .String(propName). It is usually the result of a AsTyped(something) or AsItem(...) command. It is meant to help Razor etc. access Entity and/or dynamic objects in a typed way. History: Introduced in 16.02. Methods Attribute(string, NoParamOrder, string, bool?) Return a value as a raw HTML string for using inside an attribute. Usage like title='@item.Attribute(\"Title\")' It will do a few things such as: Ensure dates are in the ISO format Ensure numbers are in a neutral format such as 14.27 and never 14,27 Html encode any characters which would cause trouble such as quotes IRawHtmlString Attribute(string name, NoParamOrder noParamOrder = default, string fallback = null, bool? required = null) Parameters name string Name of the property noParamOrder NoParamOrder see Convention: Named Parameters fallback string Value to use if the property specified by name doesn't exist required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IRawHtmlString Bool(string, NoParamOrder, bool, bool?) Get a property and return the value as a bool. If conversion fails, will return default false or what is specified in the fallback. bool Bool(string name, NoParamOrder noParamOrder = default, bool fallback = false, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback bool optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns bool Value as bool ContainsKey(string) Check if this typed object has a property of this specified name. It's case-insensitive. bool ContainsKey(string name) Parameters name string the name like Image; some objects also support path to sub-property like Author.Name Returns bool Remarks Adding in 16.03 (WIP) DateTime(string, NoParamOrder, DateTime, bool?) Get a property and return the value as a DateTime. If conversion fails, will return default 0001-01-01 or what is specified in the fallback. DateTime DateTime(string name, NoParamOrder noParamOrder = default, DateTime fallback = default, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback DateTime optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns DateTime Value as DateTime Decimal(string, NoParamOrder, decimal, bool?) Get a property and return the value as a decimal. If conversion fails, will return default 0 or what is specified in the fallback. decimal Decimal(string name, NoParamOrder noParamOrder = default, decimal fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback decimal optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns decimal Value as decimal Double(string, NoParamOrder, double, bool?) Get a property and return the value as a double. If conversion fails, will return default 0 or what is specified in the fallback. double Double(string name, NoParamOrder noParamOrder = default, double fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback double optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns double Value as double Float(string, NoParamOrder, float, bool?) Get a property and return the value as a float. If conversion fails, will return default 0 or what is specified in the fallback. float Float(string name, NoParamOrder noParamOrder = default, float fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback float optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns float Value as float Get(string, NoParamOrder, bool?, string) Get a property. object Get(string name, NoParamOrder noParamOrder = default, bool? required = null, string language = null) Parameters name string the property name like Image - or path to sub-property like Author.Name (new v15) noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns object The result if found or null; or error if the object is in strict mode Remarks parameter languages added in 17.10 Get<TValue>(string, NoParamOrder, TValue, bool?, string) Get a value using the name - and cast it to the expected strong type. For example to get an int even though it's stored as decimal. Since the parameter fallback determines the type TValue you can just write this like `something.Get(\"Title\", fallback: \"no title\") TValue Get<TValue>(string name, NoParamOrder noParamOrder = default, TValue fallback = default, bool? required = null, string language = null) Parameters name string the property name like Image - or path to sub-property like Author.Name (new v15) noParamOrder NoParamOrder see Convention: Named Parameters fallback TValue the fallback value to provide if not found required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns TValue The typed value, or the default like null or 0 if casting isn't possible. Type Parameters TValue The expected type, like string, int, etc. Note that you don't need to specify it, if you specify the fallback property. Remarks Added in v15 parameter languages added in 17.10 Int(string, NoParamOrder, int, bool?) Get a property and return the value as a int. If conversion fails, will return default 0 or what is specified in the fallback. int Int(string name, NoParamOrder noParamOrder = default, int fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback int optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns int Value as int IsEmpty(string, NoParamOrder, string) Check if this typed object has a property of this specified name, and has real data. The opposite version of this is IsNotEmpty(...) Important This method is optimized for use in Razor-like scenarios. It's behavior is super-useful but maybe not always expected. If the value is a string, and is empty or only contains whitespace (even &nbsp;) it is regarded as empty. If the returned value is an empty list (e.g. a field containing relationships, without any items in it) it is regarded as empty. If you need a different kind of check, just .Get(...) the value and perform the checks in your code. bool IsEmpty(string name, NoParamOrder noParamOrder = default, string language = null) Parameters name string the property name like Image; some objects also support path to sub-property like Author.Name noParamOrder NoParamOrder see Convention: Named Parameters language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns bool true if the property exists and has a real value. If it returned an empty list, it will also return false Remarks Added in 16.03 language parameter added in 17.10 IsNotEmpty(string, NoParamOrder, string) Check if this typed object has a property of this specified name, and has real data. The opposite version of this is IsEmpty(...) Important This method is optimized for use in Razor-like scenarios. It's behavior is super-useful but maybe not always expected. If the value is a string, and is empty or only contains whitespace (even &nbsp;) it is regarded as empty. If the returned value is an empty list (e.g. a field containing relationships, without any items in it) it is regarded as empty. If you need a different kind of check, just .Get(...) the value and perform the checks in your code. bool IsNotEmpty(string name, NoParamOrder noParamOrder = default, string language = null) Parameters name string the property name like Image; some objects also support path to sub-property like Author.Name noParamOrder NoParamOrder see Convention: Named Parameters language string Optional language like de, de-ch or de,en to determine which values to check. Will ignore languages not in the data model. On items that don't have ML data it will be ignored. new v17.10 Returns bool true if the property exists and has a real value. If it returned an empty list, it will also return false Remarks Added in 16.03 language parameter added in 17.10 Keys(NoParamOrder, IEnumerable<string>) Get all the keys available in this Model (all the parameters passed in). This is used to sometimes run early checks if all the expected parameters have been provided. IEnumerable<string> Keys(NoParamOrder noParamOrder = default, IEnumerable<string> only = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters only IEnumerable<string> Only return the keys specified here, if found. Typical use: only: new [] { \"Key1\", \"Key2\" }. Useful to check if all or any specific keys exist. Returns IEnumerable<string> Remarks Added in 16.03 Long(string, NoParamOrder, long, bool?) Get a property and return the value as a long. If conversion fails, will return default 0 or what is specified in the fallback. long Long(string name, NoParamOrder noParamOrder = default, long fallback = 0, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback long optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns long Value as long String(string, NoParamOrder, string, bool?, object) Get a property and return the value as a string. If conversion fails, will return default null or what is specified in the fallback. string String(string name, NoParamOrder noParamOrder = default, string fallback = null, bool? required = null, object scrubHtml = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters fallback string optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks scrubHtml object If true, will remove all HTML tags from the string. If p will remove all p tags, if div,span will remove these tags. This is the same as using Kit.Scrub.All(...) or .Only(...). For more detailed scrubbing, use the Kit.Scrub` Returns string Value as string Url(string, NoParamOrder, string, bool?) Get a url from a field. It will do sanitation / url-corrections for special characters etc. On TypedItems it will also auto-convert values such as file:72 or page:14. string Url(string name, NoParamOrder noParamOrder = default, string fallback = null, bool? required = null) Parameters name string The field name. noParamOrder NoParamOrder see Convention: Named Parameters fallback string optional fallback if conversion fails required bool? throw error if the name doesn't exist, see Convention: Property Required Name Checks Returns string A url converted if possible. If the field contains anything else such as hello then it will not be modified."
  },
  "api/dot-net/ToSic.Sxc.Data.ITypedItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ITypedItem.html",
    "title": "Interface ITypedItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITypedItem Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll A typed item to access IEntity data in a strongly typed way. [PublicApi] [JsonConverter(typeof(DynamicJsonConverter))] public interface ITypedItem : ITyped, IEquatable<ITypedItem> Inherited Members ITyped.Bool(string, NoParamOrder, bool, bool?) ITyped.DateTime(string, NoParamOrder, DateTime, bool?) ITyped.String(string, NoParamOrder, string, bool?, object) ITyped.Int(string, NoParamOrder, int, bool?) ITyped.Long(string, NoParamOrder, long, bool?) ITyped.Float(string, NoParamOrder, float, bool?) ITyped.Decimal(string, NoParamOrder, decimal, bool?) ITyped.Double(string, NoParamOrder, double, bool?) ITyped.Url(string, NoParamOrder, string, bool?) ITyped.Attribute(string, NoParamOrder, string, bool?) ITyped.ContainsKey(string) ITyped.IsEmpty(string, NoParamOrder, string) ITyped.IsNotEmpty(string, NoParamOrder, string) ITyped.Keys(NoParamOrder, IEnumerable<string>) ITyped.Get(string, NoParamOrder, bool?, string) ITyped.Get<TValue>(string, NoParamOrder, TValue, bool?, string) IEquatable<ITypedItem>.Equals(ITypedItem) Remarks Previously Razor code always used dynamic IDynamicEntity objects. This had some disadvantages when working with LINQ or advanced toolbars. History: Introduced in 2sxc 16.01 Properties Dyn A dynamic accessor for properties, to quickly get values when you don't care about type safety. This is often (but not always) a IDynamicEntity. Example: Dyn.FirstName might just work - and return the first name or null if not found. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"This should be avoided\")] [JsonIgnore] dynamic Dyn { get; } Property Value dynamic Guid The guid of the underlying entity. Guid Guid { get; } Property Value Guid Remarks If the entity doesn't exist, it will return an empty guid Id The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. int Id { get; } Property Value int Remarks If the entity doesn't exist, it will return 0 IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use .IsDemoItem. bool IsDemoItem { get; } Property Value bool True if this is the item configured in the view-settings, false if not. IsPublished True if this item version is published. This means that the item can exist as published, or published-with-draft, showing the published version. Note that by default, end-users only see the published version and don't see any draft version. bool IsPublished { get; } Property Value bool Remarks New in v17, see also Publishing Metadata Metadata of the current item, with special features. [JsonIgnore] IMetadata Metadata { get; } Property Value IMetadata Remarks Added in 16.02 Presentation The presentation item or null if it doesn't exist. [JsonIgnore] ITypedItem Presentation { get; } Property Value ITypedItem Publishing IPublishing Publishing { get; } Property Value IPublishing Title The title of this item. This is always available no matter what the underlying field for the title is. string Title { get; } Property Value string The title of the underlying entity. In rare cases where no title-field is known, it can be null. It can also be null if there is no underlying entity. Remarks This returns a string which is usually what's expected. In previous versions (before v15) 2sxc it returned an object. Type The Content-Type of the current entity. IContentType Type { get; } Property Value IContentType Methods Child(string, NoParamOrder, bool?) A single item from a field. ITypedItem Child(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string Name of the field noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns ITypedItem The ITypedItem. If the field doesn't exist or is empty, will return null. Child<T>(string, NoParamOrder, bool?) Get a child and return with specified custom type. T Child<T>(string name = null, NoParamOrder protector = default, bool? required = null) where T : class, ICanWrapData, new() Parameters name string Name of the field protector NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns T Type Parameters T Remarks New v17.05 Children(string, NoParamOrder, string, bool?) A typed list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", type: typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. IEnumerable<ITypedItem> Children(string field = null, NoParamOrder noParamOrder = default, string type = null, bool? required = null) Parameters field string Optional field filter - would only return items that point to the current item in a specific field name. noParamOrder NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IEnumerable<ITypedItem> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks Note that the parameter-order is reversed to the Parents() Children<T>(string, NoParamOrder, string, bool?) A strongly typed list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", type: typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. IEnumerable<T> Children<T>(string field = null, NoParamOrder protector = default, string type = null, bool? required = null) where T : class, ICanWrapData, new() Parameters field string Name of the field protector NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IEnumerable<T> Type Parameters T Remarks New v17.05 Field(string, NoParamOrder, bool?) Get a special info-object describing a specific field in this item. This is a rich object used by other operations which need a lot of context about the item and the field. IField Field(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string Name of the property noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IField File(string, NoParamOrder, bool?) Get the file of the current field. There are a few scenarios: If it's a file/hyperlink field pointing to a file such as file:27 it will retrieve the file itself. If it's a file/hyperlink field pointing to a url such as http://xyz it will return null. If it's a library field, it will just take the first file, as there is no value referencing a specific field If it's any other field, will return null IFile File(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IFile Remarks Added in 16.02 Folder(string, NoParamOrder, bool?) Get the ADAM (Automatic Digital Asset Manager) for this field. This is a folder which contains all the files and possibly folders which are uploaded on exactly this field. IFolder Folder(string name, NoParamOrder noParamOrder = default, bool? required = null) Parameters name string property name noParamOrder NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns IFolder The Folder object Remarks Added in 16.02 Gps(string, NoParamOrder, bool?) Get the GPS coordinates of a GPS field as a typed object. GpsCoordinates Gps(string name, NoParamOrder protector = default, bool? required = null) Parameters name string Name of a field protector NoParamOrder see Convention: Named Parameters required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks Returns GpsCoordinates Remarks New in v17.03 Html(string, NoParamOrder, object, bool?, object, bool?, bool, Func<ITweakInput<string>, ITweakInput<string>>) Show a field in the expected / best possible way. As of now it's meant for WYSIWYG fields with Very-Rich Text. See DynamicEntity / TypedItem .Html(...) Method new v16.01 IHtmlTag Html(string name, NoParamOrder noParamOrder = default, object container = null, bool? toolbar = null, object imageSettings = null, bool? required = null, bool debug = false, Func<ITweakInput<string>, ITweakInput<string>> tweak = null) Parameters name string the field name noParamOrder NoParamOrder see Convention: Named Parameters container object A wrapper tag for the result. It's either a RazorBlade tag such as Kit.HtmlTag.Div(), a string such as span or an empty string `` to indicate no container. If not set it will default to to a div-tag. See docs toolbar bool? Override default toolbar behavior on this field. See docs imageSettings object Settings for resizing. Default is Wysiwyg but it can also be Content or a settings object. required bool? throw error if name doesn't exist, see Convention: Property Required Name Checks debug bool Activate debug visualization to better see alignments and such. tweak Func<ITweakInput<string>, ITweakInput<string>> tweak behavior - ATM modify the input before it's processed new in v17 Returns IHtmlTag Remarks Added in 2sxc 16.01 Added tweak in v17 Only works on Razor files inheriting from Hybrid14 or newer Img(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, object, object) Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @pic or you can work with sub-properties as specified in the IResponsivePicture. Important: This call only allows you to set the most common parameters factor and width. For other parameters like height, aspectRatio, quality etc. create typed Settings Settings(object, NoParamOrder, Func<ITweakResize, ITweakResize>, object, object, object, object, string, string, string, object, string, object) and pass them in. Note This is the similar as using the Picture(object, object, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, string, string, string, object, string, object, object, object) just a bit simpler. An important difference is that it returns null if the field does not exist or is empty, allowing you to just show nothing or use ...Picture(...) ?? someFallback; IResponsiveImage Img(string name, NoParamOrder noParamOrder = default, Func<ITweakMedia, ITweakMedia> tweak = null, object settings = null, object factor = null, object width = null, string imgAlt = null, string imgAltFallback = null, string imgClass = null, object imgAttributes = null, object toolbar = null, object recipe = null) Parameters name string Name of a field noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakMedia, ITweakMedia> Tweak API to configure everything (new v18.03). This is recommended above using parameter names and all newer parameters will only be available on this. settings object The name of a settings configuration, like \"Content\", \"Screen\", \"Square\", etc. A standardized Image-Settings object like Settings.Child(\"Images.Content\") - see https://go.2sxc.org/settings A dynamic object containing settings properties (this can also be a merged custom + standard settings) A strictly typed IResizeSettings object containing all settings created using ResizeSettings factor object An optional multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. width object An optional, fixed width of the image imgAlt string Optional alt attribute on the created img tag for SEO etc. If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves. If you want to provide a fallback value (in case the metadata has no alt), use imgAltFallback imgAltFallback string Optional alt attribute which is only used if the imgAlt or the alt-text in the metadata are empty. imgClass string Optional class attribute on the created img tag imgAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) toolbar object Provide a custom toolbar or false to not show a toolbar recipe object Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns IResponsiveImage A IResponsivePicture object which can be rendered directly. See Responsive Images API in .net If the field does not exist, it will return null If the field exists, but is empty, it will return null Remarks Added to ITypedItem in v17.04 (previously only Picture was available) tweak added in 18.03 Parent(NoParamOrder, bool?, string, string) Get either the current parent or the first parent which would be found on .Parents(...). ITypedItem Parent(NoParamOrder noParamOrder = default, bool? current = null, string type = null, string field = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters current bool? if set to true, will get the Item which created the current item (the parent) which called .Child(...) or .Children(...) type string Optional type filter - would only return items of this type. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns ITypedItem either the current parent or the first parent returned by the same .Parents(...) call. Parent<T>(NoParamOrder, bool?, string, string) Get either the current parent or the first parent which would be found on .Parents(...) as strongly typed. T Parent<T>(NoParamOrder protector = default, bool? current = null, string type = null, string field = null) where T : class, ICanWrapData, new() Parameters protector NoParamOrder see Convention: Named Parameters current bool? if set to true, will get the Item which created the current item (the parent) which called .Child(...) or .Children(...) type string Optional type filter - would only return items of this type. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns T either the current parent or the first parent returned by the same .Parents(...) call. Type Parameters T Remarks New v17.06 Parents(NoParamOrder, string, string) A typed list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. IEnumerable<ITypedItem> Parents(NoParamOrder noParamOrder = default, string type = null, string field = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns IEnumerable<ITypedItem> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks Note that the parameter-order is reversed to the Children() Parents<T>(NoParamOrder, string, string) A typed list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. IEnumerable<T> Parents<T>(NoParamOrder protector = default, string type = null, string field = null) where T : class, ICanWrapData, new() Parameters protector NoParamOrder see Convention: Named Parameters type string Optional type filter - would only return items of this type. If not specified (null) will use the name of T. field string Optional field filter - would only return items that point to the current item in a specific field name. Returns IEnumerable<T> A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Type Parameters T Remarks Note that the parameter-order is reversed to the Children() Picture(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, string, object, object, object) Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @pic or you can work with sub-properties as specified in the IResponsivePicture. Important: This call only allows you to set the most common parameters factor and width. For other parameters like height, aspectRatio, quality etc. create typed Settings Settings(object, NoParamOrder, Func<ITweakResize, ITweakResize>, object, object, object, object, string, string, string, object, string, object) and pass them in. Note This is the similar as using the Picture(object, object, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, string, string, string, object, string, object, object, object) just a bit simpler. An important difference is that it returns null if the field does not exist or is empty, allowing you to just show nothing or use ...Picture(...) ?? someFallback; IResponsivePicture Picture(string name, NoParamOrder noParamOrder = default, Func<ITweakMedia, ITweakMedia> tweak = null, object settings = null, object factor = null, object width = null, string imgAlt = null, string imgAltFallback = null, string imgClass = null, object imgAttributes = null, string pictureClass = null, object pictureAttributes = null, object toolbar = null, object recipe = null) Parameters name string Name of a field noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakMedia, ITweakMedia> Tweak API to configure everything (new v18.03). This is recommended above using parameter names and all newer parameters will only be available on this. settings object The name of a settings configuration, like \"Content\", \"Screen\", \"Square\", etc. A standardized Image-Settings object like Settings.Child(\"Images.Content\") - see https://go.2sxc.org/settings A dynamic object containing settings properties (this can also be a merged custom + standard settings) A strictly typed IResizeSettings object containing all settings created using ResizeSettings factor object An optional multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. width object An optional, fixed width of the image imgAlt string Optional alt attribute on the created img tag for SEO etc. If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves. If you want to provide a fallback value (in case the metadata has no alt), use imgAltFallback imgAltFallback string Optional alt attribute which is only used if the imgAlt or the alt-text in the metadata are empty. imgClass string Optional class attribute on the created img tag imgAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) pictureClass string Optional class attribute on the created picture tag pictureAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) toolbar object Provide a custom toolbar or false to not show a toolbar recipe object Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns IResponsivePicture A IResponsivePicture object which can be rendered directly. See Responsive Images API in .net If the field does not exist, it will return null If the field exists, but is empty, it will return null Remarks Added to ITypedItem in v16.03 imgAttributes, picClass and picAttributes added in 16.07 tweak added in 18.03"
  },
  "api/dot-net/ToSic.Sxc.Data.ITypedItemWrapper.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ITypedItemWrapper.html",
    "title": "Interface ITypedItemWrapper | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITypedItemWrapper Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll Interface to mark objects which can receive ITypedItem objects and wrap them. Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface ITypedItemWrapper Remarks Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Data.ITypedStack.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ITypedStack.html",
    "title": "Interface ITypedStack | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITypedStack Namespace ToSic.Sxc.Data Assembly ToSic.Sxc.dll The stack as typed object. [PublicApi] public interface ITypedStack : ITypedItem, ITyped, IEquatable<ITypedItem>, ICanDebug Inherited Members ITypedItem.Dyn ITypedItem.Presentation ITypedItem.Metadata ITypedItem.Field(string, NoParamOrder, bool?) ITypedItem.Folder(string, NoParamOrder, bool?) ITypedItem.File(string, NoParamOrder, bool?) ITypedItem.Child(string, NoParamOrder, bool?) ITypedItem.Children(string, NoParamOrder, string, bool?) ITypedItem.Parent(NoParamOrder, bool?, string, string) ITypedItem.Parents(NoParamOrder, string, string) ITypedItem.Child<T>(string, NoParamOrder, bool?) ITypedItem.Children<T>(string, NoParamOrder, string, bool?) ITypedItem.Parent<T>(NoParamOrder, bool?, string, string) ITypedItem.Parents<T>(NoParamOrder, string, string) ITypedItem.IsPublished ITypedItem.Publishing ITypedItem.IsDemoItem ITypedItem.Html(string, NoParamOrder, object, bool?, object, bool?, bool, Func<ITweakInput<string>, ITweakInput<string>>) ITypedItem.Picture(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, string, object, object, object) ITypedItem.Img(string, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, object, string, string, string, object, object, object) ITypedItem.Gps(string, NoParamOrder, bool?) ITypedItem.Id ITypedItem.Guid ITypedItem.Title ITypedItem.Type ITyped.Bool(string, NoParamOrder, bool, bool?) ITyped.DateTime(string, NoParamOrder, DateTime, bool?) ITyped.String(string, NoParamOrder, string, bool?, object) ITyped.Int(string, NoParamOrder, int, bool?) ITyped.Long(string, NoParamOrder, long, bool?) ITyped.Float(string, NoParamOrder, float, bool?) ITyped.Decimal(string, NoParamOrder, decimal, bool?) ITyped.Double(string, NoParamOrder, double, bool?) ITyped.Url(string, NoParamOrder, string, bool?) ITyped.Attribute(string, NoParamOrder, string, bool?) ITyped.ContainsKey(string) ITyped.IsEmpty(string, NoParamOrder, string) ITyped.IsNotEmpty(string, NoParamOrder, string) ITyped.Keys(NoParamOrder, IEnumerable<string>) ITyped.Get(string, NoParamOrder, bool?, string) ITyped.Get<TValue>(string, NoParamOrder, TValue, bool?, string) IEquatable<ITypedItem>.Equals(ITypedItem) ICanDebug.Debug Remarks Enhanced in v17.07 to fully support ITypedItem, before it only supported ITyped."
  },
  "api/dot-net/ToSic.Sxc.Data.Model.DataModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.DataModel.html",
    "title": "Class DataModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataModel Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll BETA / WIP: Base class for plain custom data models and can be used in Razor Components. It wraps a IEntity and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to CustomModelOfItem or something\")] public abstract class DataModel : ICanWrap<IEntity>, ICanWrapData, IEquatable<IEntity> Inheritance object DataModel Implements ICanWrap<IEntity> ICanWrapData IEquatable<IEntity> Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModel { public int Id => _entity.EntityId; public string Name => _entity.Get<string> (\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _entity The underlying entity - for inheriting classes to access. protected IEntity _entity { get; } Property Value IEntity Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _entity to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, ICanWrapData Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(DataModel, DataModel) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(DataModel item1, DataModel item2) Parameters item1 DataModel first item to compare item2 DataModel second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(DataModel, DataModel) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(DataModel item1, DataModel item2) Parameters item1 DataModel first item to compare item2 DataModel second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.DataModelAttribute.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.DataModelAttribute.html",
    "title": "Class DataModelAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataModelAttribute Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll BETA / WIP: Mark DataModel objects/interfaces and specify what ContentType they are for. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public class DataModelAttribute : Attribute Inheritance object Attribute DataModelAttribute Remarks Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History: New / WIP in v19.01 Fields ForAnyContentType public const string ForAnyContentType = \"*\" Field Value string Properties ForContentTypes Determines which content-type names are expected when converting to this data model. public string ForContentTypes { get; init; } Property Value string Remarks Usually this is checked when converting Entities to the custom data model. If it doesn't match, will then throw an error. Typically just one value, such as \"Article\" or \"Product\". But it will also support \"*\" for anything, or a comma-separated list of content-type names. History: WIP 19.01 Remarks Just custom remarks, no technical functionality. public string Remarks { get; init; } Property Value string StreamNames public string StreamNames { get; init; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.DataModelConversion.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.DataModelConversion.html",
    "title": "Class DataModelConversion | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataModelConversion Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll BETA / WIP: Attribute to decorate interfaces which should be used to retrieve a data model. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, AllowMultiple = false)] [InternalApi_DoNotUse_MayChangeWithoutNotice] public class DataModelConversion : Attribute Inheritance object Attribute DataModelConversion Remarks It's primary property is the Map, which is an array of types that should be used to map the data model to. Properties Map public Type[] Map { get; init; } Property Value Type[]"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.DataModelOfItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.DataModelOfItem.html",
    "title": "Class DataModelOfItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataModelOfItem Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll BETA / WIP: Base class for plain custom data models and can be used in Razor Components. It wraps a ITypedItem and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to DataModelWithItem or something\")] public abstract class DataModelOfItem : ICanWrap<ITypedItem>, ICanWrapData, IEquatable<ITypedItem> Inheritance object DataModelOfItem Implements ICanWrap<ITypedItem> ICanWrapData IEquatable<ITypedItem> Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModelOfItem { public string Name => _item.String(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _item The underlying item - for inheriting classes to access. protected ITypedItem _item { get; } Property Value ITypedItem Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, ICanWrapData Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(DataModelOfItem, DataModelOfItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(DataModelOfItem item1, DataModelOfItem item2) Parameters item1 DataModelOfItem first item to compare item2 DataModelOfItem second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(DataModelOfItem, DataModelOfItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(DataModelOfItem item1, DataModelOfItem item2) Parameters item1 DataModelOfItem first item to compare item2 DataModelOfItem second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.IDataModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.IDataModel.html",
    "title": "Interface IDataModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataModel Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll Interface to mark objects which can receive data such as IEntity or ITypedItem objects and wrap them, usually into a strongly typed model. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataModel Remarks Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.IDataModelOf-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.IDataModelOf-1.html",
    "title": "Interface IDataModelOf<TContents> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataModelOf<TContents> Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll Interface to mark objects which can receive ITypedItem objects and wrap them. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataModelOf<in TContents> : IDataModel Type Parameters TContents Remarks Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01 The Setup() method is still internal, as the signature may still change"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.ModelFromEntity.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.ModelFromEntity.html",
    "title": "Class ModelFromEntity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelFromEntity Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll BETA / WIP: Base class for plain custom data models and can be used in Razor Components. It wraps a IEntity and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to CustomModelOfItem or something\")] public abstract class ModelFromEntity : ICanWrap<IEntity>, ICanWrapData, IEquatable<IEntity> Inheritance object ModelFromEntity Implements ICanWrap<IEntity> ICanWrapData IEquatable<IEntity> Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModel { public int Id => _entity.EntityId; public string Name => _entity.Get<string> (\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _entity The underlying entity - for inheriting classes to access. protected IEntity _entity { get; } Property Value IEntity Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _entity to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, ICanWrapData Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(ModelFromEntity, ModelFromEntity) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(ModelFromEntity item1, ModelFromEntity item2) Parameters item1 ModelFromEntity first item to compare item2 ModelFromEntity second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(ModelFromEntity, ModelFromEntity) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(ModelFromEntity item1, ModelFromEntity item2) Parameters item1 ModelFromEntity first item to compare item2 ModelFromEntity second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.ModelFromItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.ModelFromItem.html",
    "title": "Class ModelFromItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelFromItem Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll BETA / WIP: Base class for plain custom data models and can be used in Razor Components. It wraps a ITypedItem and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to DataModelWithItem or something\")] public abstract class ModelFromItem : ICanWrap<ITypedItem>, ICanWrapData, IEquatable<ITypedItem> Inheritance object ModelFromItem Implements ICanWrap<ITypedItem> ICanWrapData IEquatable<ITypedItem> Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModelOfItem { public int Id => _item.Id; public string Name => _item.String(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _item The underlying item - for inheriting classes to access. protected ITypedItem _item { get; } Property Value ITypedItem Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, ICanWrapData Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(ModelFromItem, ModelFromItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(ModelFromItem a, ModelFromItem b) Parameters a ModelFromItem first item to compare b ModelFromItem second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(ModelFromItem, ModelFromItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(ModelFromItem a, ModelFromItem b) Parameters a ModelFromItem first item to compare b ModelFromItem second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.ModelOfItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.ModelOfItem.html",
    "title": "Class ModelOfItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelOfItem Namespace ToSic.Sxc.Data.Model Assembly ToSic.Sxc.dll BETA / WIP: Base class for plain custom data models and can be used in Razor Components. It wraps a ITypedItem and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to DataModelWithItem or something\")] public abstract class ModelOfItem : ICanWrap<ITypedItem>, ICanWrapData, IEquatable<ITypedItem> Inheritance object ModelOfItem Implements ICanWrap<ITypedItem> ICanWrapData IEquatable<ITypedItem> Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModelOfItem { public int Id => _item.Id; public string Name => _item.String(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _item The underlying item - for inheriting classes to access. protected ITypedItem _item { get; } Property Value ITypedItem Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, ICanWrapData Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(ModelOfItem, ModelOfItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(ModelOfItem item1, ModelOfItem item2) Parameters item1 ModelOfItem first item to compare item2 ModelOfItem second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(ModelOfItem, ModelOfItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(ModelOfItem item1, ModelOfItem item2) Parameters item1 ModelOfItem first item to compare item2 ModelOfItem second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Data.Model.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Model.html",
    "title": "Namespace ToSic.Sxc.Data.Model | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Data.Model Classes DataModelAttribute BETA / WIP: Mark DataModel objects/interfaces and specify what ContentType they are for."
  },
  "api/dot-net/ToSic.Sxc.Data.Models.ModelCreation-3.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Models.ModelCreation-3.html",
    "title": "Class ModelCreation<TSource, TImplements, TConcrete> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelCreation<TSource, TImplements, TConcrete> Namespace ToSic.Sxc.Data.Models Assembly ToSic.Sxc.dll Conversion map from one type - typically IEntity to a DataModel. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class ModelCreation<TSource, TImplements, TConcrete> where TSource : ICanBeEntity where TImplements : class where TConcrete : class, TImplements, ICanWrap<TSource>, new() Type Parameters TSource The type of the inner data, usually IEntity. TImplements The target type, usually the interface this attribute is being applied to. TConcrete Real/concrete class which will serve as the model, implementing TImplements. Inheritance object ModelCreation<TSource, TImplements, TConcrete>"
  },
  "api/dot-net/ToSic.Sxc.Data.Models.ModelCreationAttribute.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Models.ModelCreationAttribute.html",
    "title": "Class ModelCreationAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelCreationAttribute Namespace ToSic.Sxc.Data.Models Assembly ToSic.Sxc.dll BETA / WIP: Attribute to decorate interfaces to specify a concrete type when creating the model. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, AllowMultiple = false)] [InternalApi_DoNotUse_MayChangeWithoutNotice] public sealed class ModelCreationAttribute : Attribute Inheritance object Attribute ModelCreationAttribute Examples [ModelCreation(Use = typeof(PersonModel))] interface IPersonModel : ICanWrapData { public string Name { get; } } Properties Use The type to use when creating a model of this interface. public Type Use { get; init; } Property Value Type Remarks It must match (implement or inherit) the type which is being decorated. Otherwise, it will throw an exception."
  },
  "api/dot-net/ToSic.Sxc.Data.Models.ModelFromEntity.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Models.ModelFromEntity.html",
    "title": "Class ModelFromEntity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelFromEntity Namespace ToSic.Sxc.Data.Models Assembly ToSic.Sxc.dll BETA / WIP: Base class for plain data models and can be used in Razor Components. It wraps an IEntity and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change\")] public abstract class ModelFromEntity : ICanWrap<IEntity>, ICanWrapData, IEquatable<IEntity> Inheritance object ModelFromEntity Implements ICanWrap<IEntity> ICanWrapData IEquatable<IEntity> Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModel { public int Id => _entity.EntityId; public string Name => _entity.Get<string> (\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _entity The underlying entity - for inheriting classes to access. protected IEntity _entity { get; } Property Value IEntity Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _entity to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, ICanWrapData Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(ModelFromEntity, ModelFromEntity) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(ModelFromEntity a, ModelFromEntity b) Parameters a ModelFromEntity first item to compare b ModelFromEntity second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(ModelFromEntity, ModelFromEntity) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(ModelFromEntity item1, ModelFromEntity item2) Parameters item1 ModelFromEntity first item to compare item2 ModelFromEntity second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Data.Models.ModelFromItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Models.ModelFromItem.html",
    "title": "Class ModelFromItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelFromItem Namespace ToSic.Sxc.Data.Models Assembly ToSic.Sxc.dll BETA / WIP: Base class for plain data models and can be used in Razor Components. It wraps an ITypedItem and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to DataModelWithItem or something\")] public abstract class ModelFromItem : ICanWrap<ITypedItem>, ICanWrapData, IEquatable<ITypedItem> Inheritance object ModelFromItem Implements ICanWrap<ITypedItem> ICanWrapData IEquatable<ITypedItem> Derived CustomModel Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModelOfItem { public int Id => _item.Id; public string Name => _item.String(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _item The underlying item - for inheriting classes to access. protected ITypedItem _item { get; } Property Value ITypedItem Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, ICanWrapData Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, ICanWrapData Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(ModelFromItem, ModelFromItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(ModelFromItem a, ModelFromItem b) Parameters a ModelFromItem first item to compare b ModelFromItem second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(ModelFromItem, ModelFromItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(ModelFromItem a, ModelFromItem b) Parameters a ModelFromItem first item to compare b ModelFromItem second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Data.Models.ModelSourceAttribute.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Models.ModelSourceAttribute.html",
    "title": "Class ModelSourceAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ModelSourceAttribute Namespace ToSic.Sxc.Data.Models Assembly ToSic.Sxc.dll BETA / WIP: Mark custom models/interfaces to specify what data they expect. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public sealed class ModelSourceAttribute : Attribute Inheritance object Attribute ModelSourceAttribute Remarks This marks custom models to enable checks and more automation, such as: Specify an alternate content type name than the default, which would have to match the class/interface name Ensure that the model is only used for specific content-type(s) which don't match the model name Allow the model to be used with all content types * Automatically find the best stream of data to use with the model, if it doesn't match the model name Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History: New / WIP in v19.01 Properties ContentTypes Determines which content-type names are expected when converting to this data model. public string ContentTypes { get; init; } Property Value string Remarks Usually this is checked when converting Entities to the custom data model. If it doesn't match, will then throw an error. Typically just one value, such as \"Article\" or \"Product\". But it will also support \"*\" for anything, or (future!) a comma-separated list of content-type names. History: WIP 19.01 Streams WIP, not officially supported yet. public string Streams { get; init; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Data.Models.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Models.html",
    "title": "Namespace ToSic.Sxc.Data.Models | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Data.Models Classes ModelCreationAttribute BETA / WIP: Attribute to decorate interfaces to specify a concrete type when creating the model. ModelFromEntity BETA / WIP: Base class for plain data models and can be used in Razor Components. It wraps an IEntity and provides a simple way to access the data. ModelFromItem BETA / WIP: Base class for plain data models and can be used in Razor Components. It wraps an ITypedItem and provides a simple way to access the data. ModelSourceAttribute BETA / WIP: Mark custom models/interfaces to specify what data they expect."
  },
  "api/dot-net/ToSic.Sxc.Data.Sys.FileTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Sys.FileTyped.html",
    "title": "Class FileTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FileTyped Namespace ToSic.Sxc.Data.Sys Assembly ToSic.Sxc.dll A File Entity for typed use. It defines the schema for a file as returned by the AppAssets DataSource. [PublicApi] public class FileTyped : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FileTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. public string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. public FolderTyped Folder { get; } Property Value FolderTyped FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Adam.Internal.IFileEntity.Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The file name without extension. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Size The size in bytes. public int Size { get; } Property Value int SizeInfo public ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Data.Sys.FolderTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Sys.FolderTyped.html",
    "title": "Class FolderTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FolderTyped Namespace ToSic.Sxc.Data.Sys Assembly ToSic.Sxc.dll A Folder Entity for typed use. It defines the schema for a folder as returned by the AppAssets DataSource. [PublicApi] public class FolderTyped : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FolderTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Files All files in this folder. public IEnumerable<FileTyped> Files { get; } Property Value IEnumerable<FileTyped> Folder Reference to the parent folder. Returns null on the root folder. public FolderTyped Folder { get; } Property Value FolderTyped Folders All sub folders in this folder. public IEnumerable<FolderTyped> Folders { get; } Property Value IEnumerable<FolderTyped> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Data.Sys.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.Sys.html",
    "title": "Namespace ToSic.Sxc.Data.Sys | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Data.Sys Classes FileTyped A File Entity for typed use. It defines the schema for a file as returned by the AppAssets DataSource. FolderTyped A Folder Entity for typed use. It defines the schema for a folder as returned by the AppAssets DataSource."
  },
  "api/dot-net/ToSic.Sxc.Data.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.html",
    "title": "Namespace ToSic.Sxc.Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Data The dynamic data system used in 2sxc. It's primary purpose is to ensure that you can easily use dynamic objects to write templates, tokens and more. we have two different topics covered: Dynamic Entities to simplify code using IEntity objects - IDynamicEntity and Dynamic Jackets to simplify code using JSON - ToSic.Sxc.Data.DynamicJackets and ToSic.Sxc.Data.DynamicJacketLists Namespaces ToSic.Sxc.Data.Models Interfaces ICanWrapData Marks objects such as custom items or data models, which can wrap data (usually Entities or TypedItems). ICanWrap<TSource> Marks objects such as custom items or data models, which can receive a specific data-type (entity or typed item) and wrap it. IDynamicEntity This is an older dynamic wrapper for IEntity objects. It provides dynamic access to underlying properties. IDynamicStack This is a dynamic object which contains multiple dynamic objects (Sources). IField This describes a field-property of an item/entity. IMetadata Metadata on Dynamic Objects - like IDynamicEntity or IAsset (files/folders). IPublishing Publishing Information for ITypedItems. ISecureData<TValue> Objects which contain secure/encrypted data and can be decrypted / verified. ITyped Objects which usually wrap other objects to provide strictly typed access to properties. ITypedItem A typed item to access IEntity data in a strongly typed way. ITypedStack The stack as typed object."
  },
  "api/dot-net/ToSic.Sxc.DataSources.AppAssets.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.AppAssets.html",
    "title": "Class AppAssets | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class AppAssets Namespace ToSic.Sxc.DataSources Assembly ToSic.Sxc.dll Deliver a list of App files and folders from the current platform (Dnn or Oqtane). [VisualQuery(NiceName = \"App Assets\", Type = DataSourceType.Source, ConfigurationType = \"477d5de4-5ffa-43ef-8553-37354cb27660\", NameId = \"3fe6c215-4c37-45c1-8883-b4b2a47162a7\", HelpLink = \"https://go.2sxc.org/ds-appassets\", Icon = \"account_tree\", Audience = Audience.Advanced, UiHint = \"Files and folders in the App folder\")] [PublicApi] public class AppAssets : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced AppAssets Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks This provides 4 streams: All: Stream containing both files and folders Default: All files IFileModel Files: All Files IFileModel Folders: All folders IFolderModel To figure out the properties returned and what they match up to, see IFileModel and IFolderModel. History Started v18.02 for the first time - in the Picker Source App Assets. officially documented for v19.00, but API not fully final/stable, names may change. Properties FileFilter The file name filter, such as \"*.jpg\". Uses the immutable convention. [Configuration(Fallback = \"*.*\")] public string FileFilter { get; } Property Value string RootFolder The root folder to start from, beginning in the app root. Uses the immutable convention. [Configuration(Fallback = \"/\")] public string RootFolder { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html",
    "title": "Class CmsBlock | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class CmsBlock Namespace ToSic.Sxc.DataSources Assembly ToSic.Sxc.dll This data-source delivers the core data for a CMS Block. It will look up the configuration in the CMS (like the Module-Settings in DNN) to determine what data is needed for the block. Usually it will then find a reference to a ContentBlock, from which it determines what content-items are assigned. It could also find that the template specifies a query, in which case it would retrieve that. Was previously called ModuleDataSource CmsBlock DataSource (Module-Data) The CmsBlock DataSource DataSource is part of the Standard 2sxc/Dnn Data Sources. It is the default data source as it directly delivers module-instance data and is used for all scenarios which don't explicitly have a query, and it can also be used as part of a query. How to use with the VisualQuery When using the VisualQuery it is already in the default / initial query: The above example shows: all data start in the cache ICache it is then by default passed through the PublishingFilter then it enters this Instance/Module, which gets the current ModuleInstance and passes on the data which has been assigned to it Using Module/Instance Data For Configuration Things get really exciting when you use values which the user edited in the module as a setting in your query. Here's an example: As you can see, the Default out of the CmsBlock is passed into the ValueSort data source with the stream-name Settings and is then used in a token to configure bbehavior of the sort. Manually Assigning a Module ID (2sxc 9.9) In 2sxc 9.9 we added the configuration dialog, so you can specify what module the data should come from. This allows you to have configuration-modules or primary-data-modules, which are re-used in queries: Programming With The CmsBlock DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. The only property you need to set is InstanceId (2sxc 9.9+) if you want to provide a different module-id. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? Added ability to configure in in the visual-query (2sxc 9.9) API Documentation [PublicApi] [VisualQuery(NiceName = \"CMS Block\", UiHint = \"Data for this CMS Block (instance/module)\", Icon = \"recent_actors\", Type = DataSourceType.Source, NameId = \"ToSic.Sxc.DataSources.CmsBlock, ToSic.Sxc\", ConfigurationType = \"7c2b2bc2-68c6-4bc3-ba18-6e6b5176ba02\", In = new string[] { \"Default\" }, HelpLink = \"https://docs.2sxc.org/api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html\", NameIds = new string[] { \"ToSic.SexyContent.DataSources.ModuleDataSource, ToSic.SexyContent\" })] public sealed class CmsBlock : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CmsBlock Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.In DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) Constructors CmsBlock(MyServices) public CmsBlock(CmsBlock.MyServices services) Parameters services CmsBlock.MyServices Properties Link A link - or possibly many. In most cases, this references the parent object which provides this/these links. public override IDataSourceLink Link { get; } Property Value IDataSourceLink ModuleId The instance-id of the CmsBlock (2sxc instance, DNN ModId). It's named Instance-Id to be more neutral as we're opening it to other platforms [Configuration(Field = \"InstanceId\", Fallback = \"[module:Id]\")] public int? ModuleId { get; set; } Property Value int? OverrideView This allows external settings to override the view given by the configuration. This is used to temporarily use an alternate view. For example, when previewing a different template. public IView OverrideView { get; set; } Property Value IView"
  },
  "api/dot-net/ToSic.Sxc.DataSources.Pages.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.Pages.html",
    "title": "Class Pages | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Pages Namespace ToSic.Sxc.DataSources Assembly ToSic.Sxc.dll Get a list of pages from the current platform (Dnn or Oqtane). [PublicApi] [VisualQuery(ConfigurationType = \"3d970d2b-32cb-4ecb-aeaf-c49fbcc678a5\", NameId = \"e35031b2-3e99-41fe-a5ac-b79f447d5800\", HelpLink = \"https://go.2sxc.org/ds-pages\", Icon = \"find_in_page\", NiceName = \"Pages\", Type = DataSourceType.Source, UiHint = \"Pages in this site\")] public class Pages : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced Pages Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks You can cast the result to IPageModel for typed use in your code. To figure out the returned properties, best also consult the IPageModel. History Created ca. v.16 early 2023 but not officially communicated Models IUserModel and IUserRoleModel created in v19.01 and officially released Properties IncludeAdmin Include admin pages such as site files. Default is false [Configuration] public bool IncludeAdmin { get; } Property Value bool Remarks new in 15.04 uses the immutable convention IncludeDeleted Include deleted pages in the recycle bin. Default is false [Configuration] public bool IncludeDeleted { get; } Property Value bool Remarks new in 15.04 uses the immutable convention IncludeHidden Include hidden pages. Default is false [Configuration] public bool IncludeHidden { get; } Property Value bool Remarks new in 15.04 uses the immutable convention IncludeLinks Include link-reference pages (which are usually used in menus, and not themselves a real page). Default is true [Configuration] public bool IncludeLinks { get; } Property Value bool Remarks new in 15.04 uses the immutable convention IncludeSystem Include system pages such as modules management. Default is false [Configuration] public bool IncludeSystem { get; } Property Value bool Remarks new in 15.04 uses the immutable convention RequireEditPermissions Require that the current user has edit permissions on all pages. Default is false [Configuration] public bool RequireEditPermissions { get; } Property Value bool Remarks new in 15.04 uses the immutable convention RequireViewPermissions Require that the current user has view permissions on all pages. Default is true [Configuration] public bool RequireViewPermissions { get; } Property Value bool Remarks new in 15.04 uses the immutable convention"
  },
  "api/dot-net/ToSic.Sxc.DataSources.Roles.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.Roles.html",
    "title": "Class Roles | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Roles Namespace ToSic.Sxc.DataSources Assembly ToSic.Sxc.dll Will get all (or just some) roles of the current site. [PublicApi] [VisualQuery(NiceName = \"User Roles\", Icon = \"account_circle\", UiHint = \"User Roles in this site\", HelpLink = \"https://go.2sxc.org/ds-roles\", NameId = \"eee54266-d7ad-4f5e-9422-2d00c8f93b45\", Type = DataSourceType.Source, ConfigurationType = \"1b9fd9d1-dde0-40ad-bb66-5cd7f30de18d\")] public class Roles : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced Roles Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Properties ExcludeRoleIds Optional (single value or comma-separated integers) filter, exclude roles based on roleId [Configuration] public string ExcludeRoleIds { get; set; } Property Value string RoleIds Optional (single value or comma-separated integers) filter, include roles based on roleId [Configuration] public string RoleIds { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.DataSources.Sites.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.Sites.html",
    "title": "Class Sites | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Sites Namespace ToSic.Sxc.DataSources Assembly ToSic.Sxc.dll Deliver a list of sites from the Oqtane [PublicApi] [VisualQuery(ConfigurationType = \"\", NameId = \"a11c28fb-7d8d-40a2-a22c-50beaa019e41\", HelpLink = \"https://go.2sxc.org/ds-sites\", Icon = \"public\", NiceName = \"Sites\", Type = DataSourceType.Source, UiHint = \"Sites in this system\")] public class Sites : CustomDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced CustomDataSource Sites Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSource.Immutable CustomDataSource.GetDefault() CustomDataSource.ProvideOut(Func<object>, NoParamOrder, string, Func<DataFactoryOptions>) CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks You can cast the result to ISiteModel for typed use in your code. To figure out the returned properties, best also consult the ISiteModel. As of now there are no parameters to set. History Not sure when it was first created, probably early 2023 with the name Roles, and not officially communicated. Model ISiteModel created in v19.01 and officially released"
  },
  "api/dot-net/ToSic.Sxc.DataSources.UserRoles.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.UserRoles.html",
    "title": "Class UserRoles | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class UserRoles Namespace ToSic.Sxc.DataSources Assembly ToSic.Sxc.dll Will get all (or just some) user roles of the current site. [PublicApi] [VisualQuery(NiceName = \"User Roles\", Icon = \"account_circle\", UiHint = \"User Roles in this site\", HelpLink = \"https://go.2sxc.org/ds-roles\", NameId = \"eee54266-d7ad-4f5e-9422-2d00c8f93b45\", Type = DataSourceType.Source, ConfigurationType = \"1b9fd9d1-dde0-40ad-bb66-5cd7f30de18d\")] public class UserRoles : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced UserRoles Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks You can cast the result to IUserRoleModel for typed use in your code. To figure out the returned properties, best also consult the IUserRoleModel. History Not sure when it was first created, probably early 2023 with the name Roles, and not officially communicated. Model IUserRoleModel created in v19.01 and officially released Renamed to UserRoles for consistency in v19.0 as we believe nobody has been actively using it yet, since the models were missing. Properties ExcludeRoleIds Optional (single value or comma-separated integers) filter, exclude roles based on roleId [Configuration] public string ExcludeRoleIds { get; set; } Property Value string RoleIds Optional (single value or comma-separated integers) filter, include roles based on roleId [Configuration] public string RoleIds { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.DataSources.Users.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.Users.html",
    "title": "Class Users | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Users Namespace ToSic.Sxc.DataSources Assembly ToSic.Sxc.dll Will get all (or just some) users of the current site. [PublicApi] [VisualQuery(NiceName = \"Users\", Icon = \"account_circle\", UiHint = \"Users in this site\", HelpLink = \"https://go.2sxc.org/ds-users\", NameId = \"93ac53c6-adc6-4218-b979-48d1071a5765\", Type = DataSourceType.Source, ConfigurationType = \"ac11fae7-1916-4d2d-8583-09872e1e6966\")] public class Users : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced Users Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Remarks You can cast the result to IUserModel for typed use in your code. To figure out the returned properties, best also consult the IUserModel. The resulting Entity will almost match the ToSic.Eav.Context.IUser interface. History Created ca. v.16 early 2023 but not officially communicated Models IUserModel and IUserRoleModel created in v19.01 and officially released Properties AddRoles Add property Roles as a relationship to role entities. [Configuration(Fallback = true)] public bool AddRoles { get; set; } Property Value bool Remarks Added v15.03 - minimal breaking change, before the source return a non-standard RoleIds string-array. ExcludeRoleIds Optional ExcludeRolesFilter (single value or comma-separated integers) filter, exclude users that have any of roles from filter [Configuration] public string ExcludeRoleIds { get; set; } Property Value string ExcludeUserIds Optional exclude Users (single value or comma-separated guids or integers) filter, exclude users based on guid or id [Configuration] public string ExcludeUserIds { get; set; } Property Value string IncludeSystemAdmins Optional SystemAdmins filter. true - with System Admins false - without System Admins required - only System Admins (no normal users) [Configuration] public string IncludeSystemAdmins { get; set; } Property Value string Remarks Changed to be string in v15.03 (before bool) to allow more options such as required RoleIds Optional IncludeRolesFilter (single value or comma-separated integers) filter, include users that have any of roles from filter [Configuration] public string RoleIds { get; set; } Property Value string UserIds Optional Users (single value or comma-separated guids or integers) filter, include users based on guid or id [Configuration] public string UserIds { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.DataSources.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.html",
    "title": "Namespace ToSic.Sxc.DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.DataSources This contains new DataSources for EAV, which only 2sxc can provide. It extends the standard EAV Data-Sources. Classes AppAssets Deliver a list of App files and folders from the current platform (Dnn or Oqtane). CmsBlock This data-source delivers the core data for a CMS Block. It will look up the configuration in the CMS (like the Module-Settings in DNN) to determine what data is needed for the block. Usually it will then find a reference to a ContentBlock, from which it determines what content-items are assigned. It could also find that the template specifies a query, in which case it would retrieve that. Was previously called ModuleDataSource Pages Get a list of pages from the current platform (Dnn or Oqtane). Sites Deliver a list of sites from the Oqtane UserRoles Will get all (or just some) user roles of the current site. Users Will get all (or just some) users of the current site."
  },
  "api/dot-net/ToSic.Sxc.Dnn.ApiController.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.ApiController.html",
    "title": "Class ApiController | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ApiController Namespace ToSic.Sxc.Dnn Assembly ToSic.Sxc.Dnn.WebApi.dll This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. Tip We strongly suggest you check out the tutorials and guidance for custom WebAPIs here [PublicApi(\"This was the official base class before v12. Try to move away from it, go to the latest base class on Custom.Dnn.Api12\")] [Obsolete(\"This will continue to work, but you should use the Custom.Hybrid.Api14 or Custom.Dnn.Api12 instead.\")] public abstract class ApiController : DnnSxcCustomControllerBase, IDnnDynamicCode, IHasDnn, IHasLog Inheritance object ApiController DnnApiController DnnSxcControllerRoot DnnSxcControllerBase DnnSxcCustomControllerBase ApiController Implements IDnnDynamicCode IHasDnn IHasLog Properties App A fully prepared IApp object letting you access all the data and queries in the current app. You'll usually want to access the data, like App.Data[\"Categories\"] or the queries App.Query[\"AllPosts\"]. foreach(var cat in AsList(App.Data[\"Categories\"])) { @cat.Name } public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. You'll usually want to access the \"Default\" stream like Data[\"Default\"]. foreach(var person in AsList(Data[\"Default\"])) { @person.Name } public IDataSource Data { get; } Property Value IDataSource A standard IDataSource. Dnn The DNN context. Has various objects to access the Dnn Page, etc. public IDnnContext Dnn { get; } Property Value IDnnContext Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public ICodeLog Log { get; } Property Value ICodeLog Methods AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object the original object Returns dynamic a dynamic object for easier coding AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Convert one or many Entities and Dynamic entities into an IDynamicStack public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object Returns IEntity a dynamic object for easier coding Remarks New in 12.05 AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 CreateInstance(string, NoParamOrder, string, string, bool) Create an instance of code lying in a file near this public dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string path to the other code file to compile noParamOrder NoParamOrder see Convention: Named Parameters name string Override the class name to compile - usually not required as it should match the file name relativePath string optional relative path, will usually use the ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath throwOnError bool throw errors if compiling fails, recommended Returns dynamic An object of the class in the file Remarks Note that the C# code which we are creating inherits from a standard base class such as Code12 or ToSic.Sxc.Code.DynamicCode then it will automatically be initialized to support App, AsDynamic etc. CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource File(NoParamOrder, bool?, string, string, string, object) Create a File-result to stream to the client Typical use: return File(download: true, contentType: \"text/xml\", contents: ...); public dynamic File(NoParamOrder noParamOrder = default, bool? download = null, string virtualPath = null, string contentType = null, string fileDownloadName = null, object contents = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters download bool? If a download should be enforced (otherwise the file may just be displayed - like an image) virtualPath string Path in the website to get the file from. Provide either virtualPath or contents contentType string Mime Content-type. Will try to auto-detect from virtualPath or fileDownloadName if not provided. fileDownloadName string Download name. If provided, it will try to force download/save on the browser. contents object Content of the result - a string, byte[] or stream to include. Returns dynamic Remarks Added in 2sxc 12.05 GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed SaveInAdam(NoParamOrder, Stream, string, string, Guid?, string, string) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the WebAPI docs for SaveInAdam public IFile SaveInAdam(NoParamOrder noParamOrder = default, Stream stream = null, string fileName = null, string contentType = null, Guid? guid = null, string field = null, string subFolder = \"\") Parameters noParamOrder NoParamOrder see Convention: Named Parameters stream Stream the stream fileName string file name to save to contentType string content-type of the target item (important for security checks) guid Guid? field string subFolder string Returns IFile"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCode.html",
    "title": "Interface IDnnDynamicCode | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDnnDynamicCode Namespace ToSic.Sxc.Dnn.Code Assembly ToSic.Sxc.Dnn.Core.dll This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. [PublicApi] public interface IDnnDynamicCode : IHasLog, IHasDnn Inherited Members IHasLog.Log IHasDnn.Dnn"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.IHasDnn.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.IHasDnn.html",
    "title": "Interface IHasDnn | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHasDnn Namespace ToSic.Sxc.Dnn.Code Assembly ToSic.Sxc.Dnn.Core.dll This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. [PublicApi] public interface IHasDnn Properties Dnn The DNN context. Has various objects to access the Dnn Page, etc. IDnnContext Dnn { get; } Property Value IDnnContext"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.html",
    "title": "Namespace ToSic.Sxc.Dnn.Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Dnn.Code Interfaces IDnnDynamicCode This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. IHasDnn This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface."
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnSql.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnSql.html",
    "title": "Class DnnSql | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DnnSql Namespace ToSic.Sxc.Dnn.DataSources Assembly ToSic.Sxc.Dnn.Core.dll Retrieves data from SQL, specifically using the DNN Connection String Data Source: DnnSql The DnnSql DataSource is part of the Standard Dnn Data Sources. It lets you use data from the Dnn SQL databases as if they were entities. This is what it looks like: How to use Internally the DnnSqlDataSource is exactly the same as the Sql DataSource just with fewer options, because you cannot choose most of the settings. Please consult the Sql DataSource documentation to see how you can use it. We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? API Documentation [PublicApi] [VisualQuery(NiceName = \"Dnn SQL\", UiHint = \"Data from the Dnn database\", Icon = \"dynamic_form\", Type = DataSourceType.Source, NameId = \"ToSic.Sxc.Dnn.DataSources.DnnSql, ToSic.Sxc.Dnn\", DynamicOut = false, NameIds = new string[] { \"ToSic.SexyContent.DataSources.DnnSqlDataSource, ToSic.SexyContent\", \"ToSic.SexyContent.Environment.Dnn7.DataSources.DnnSqlDataSource, ToSic.SexyContent\" }, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-DnnSqlDataSource\", ConfigurationType = \"|Config ToSic.SexyContent.DataSources.DnnSqlDataSource\")] public class DnnSql : Sql, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced Sql DnnSql Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members Sql.ConnectionStringName Sql.ConnectionString Sql.SelectCommand Sql.ContentType Sql.TitleField Sql.EntityIdField CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string)"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfile.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfile.html",
    "title": "Class DnnUserProfile | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DnnUserProfile Namespace ToSic.Sxc.Dnn.DataSources Assembly ToSic.Sxc.Dnn.Core.dll Get DNN user profiles as IEntity objects of one or many users. [PublicApi] [VisualQuery(NiceName = \"Dnn User Profiles\", UiHint = \"Users profiles of specified users in Dnn\", Icon = \"face\", Type = DataSourceType.Source, NameId = \"ToSic.Sxc.Dnn.DataSources.DnnUserProfile, ToSic.Sxc.Dnn\", ConfigurationType = \"|Config ToSic.SexyContent.DataSources.DnnUserProfileDataSource\", NameIds = new string[] { \"ToSic.SexyContent.Environment.Dnn7.DataSources.DnnUserProfileDataSource, ToSic.SexyContent\" })] public class DnnUserProfile : CustomDataSourceAdvanced, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheKey, ICacheExpiring, ITimestamped, IHasLog, IDataSourceLinkable Inheritance object ServiceBase ServiceBase<DataSourceBase.MyServices> DataSourceBase CustomDataSourceAdvanced DnnUserProfile Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped IHasLog IDataSourceLinkable Inherited Members CustomDataSourceAdvanced.CacheTimestamp CustomDataSourceAdvanced.DataFactory DataSourceBase.Immutable DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Error DataSourceBase.CacheChanged(long) DataSourceBase.Configuration DataSourceBase.Link DataSourceBase.In DataSourceBase.TryGetIn(string) DataSourceBase.TryGetOut(string) DataSourceBase.Out DataSourceBase.this[string] DataSourceBase.GetStream(string, NoParamOrder, bool, bool) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(string, IDataSource, string) DataSourceBase.Attach(string, IDataStream) DataSourceBase.ProvideOut(Func<IEnumerable<IEntity>>, string) DataSourceBase.ProvideOut(Func<IImmutableList<IEntity>>, string) Constructors DnnUserProfile(MyServices, IDataFactory) public DnnUserProfile(DnnUserProfile.MyServices services, IDataFactory dataFactory) Parameters services DnnUserProfile.MyServices dataFactory IDataFactory Properties ContentType Gets or sets the Name of the ContentType to simulate [Configuration(Field = \"ContentTypeName\", Fallback = \"UserProfile\")] public string ContentType { get; set; } Property Value string Properties List of profile-properties to retrieve, comma-separated [Configuration(Fallback = \"DisplayName,Email,FirstName,LastName,Username\")] public string Properties { get; set; } Property Value string TitleField Gets or sets the Name of the Title Attribute of the DNN-UserInfo [Configuration(Field = \"TitleFieldName\", Fallback = \"DisplayName\")] public string TitleField { get; set; } Property Value string UserIds The user id list of users to retrieve, comma-separated [Configuration] public string UserIds { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfileDataRaw.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfileDataRaw.html",
    "title": "Class DnnUserProfileDataRaw | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DnnUserProfileDataRaw Namespace ToSic.Sxc.Dnn.DataSources Assembly ToSic.Sxc.Dnn.Core.dll Internal class to hold all the information about the user profile, until it's converted to an IEntity in the DnnUserProfile DataSource. For detailed documentation, check the docs of the underlying objects: TODO: TODO: Important: this is an internal object. We're just including in in the docs to better understand where the properties come from. We'll probably move it to another namespace some day. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class DnnUserProfileDataRaw Inheritance object DnnUserProfileDataRaw Remarks Make sure the property names never change, as they are critical for the created Entity. Properties Created Created - either the real creation date or the DateTime.Now public DateTime Created { get; set; } Property Value DateTime Guid The Guid to use. Must always be set. If you don't have a GUID, use Guid.Empty public Guid Guid { get; set; } Property Value Guid Id The ID to use. If the real object doesn't have a real ID, please do not set at all. It will then keep the default and will auto-enumerate. public int Id { get; set; } Property Value int Modified Modified - either the real creation date or the DateTime.Now public DateTime Modified { get; set; } Property Value DateTime Name public string Name { get; set; } Property Value string Properties public Dictionary<string, object> Properties { get; } Property Value Dictionary<string, object>"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.html",
    "title": "Namespace ToSic.Sxc.Dnn.DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Dnn.DataSources This contains new DataSources for EAV, which only Dnn can provide. It extends the standard EAV Data-Sources. Classes DnnSql Retrieves data from SQL, specifically using the DNN Connection String DnnUserProfile Get DNN user profiles as IEntity objects of one or many users. DnnUserProfileDataRaw Internal class to hold all the information about the user profile, until it's converted to an IEntity in the DnnUserProfile DataSource. For detailed documentation, check the docs of the underlying objects: TODO: TODO: Important: this is an internal object. We're just including in in the docs to better understand where the properties come from. We'll probably move it to another namespace some day."
  },
  "api/dot-net/ToSic.Sxc.Dnn.DynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DynamicCode.html",
    "title": "Class DynamicCode | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DynamicCode Namespace ToSic.Sxc.Dnn Assembly ToSic.Sxc.Dnn.Core.dll This is a base class for custom code files with context. If you create a class file for dynamic use and inherit from this, then the compiler will automatically add objects like Link, Dnn, etc. The class then also has AsDynamic(...) and AsList(...) commands like a normal razor page. [PublicApi] public abstract class DynamicCode : DynamicCode, ICanDebug, IDnnDynamicCode, IHasLog, IHasDnn Inheritance object ServiceBase ServiceForDynamicCode CustomCodeBase DynamicCode DynamicCode Implements ICanDebug IDnnDynamicCode IHasLog IHasDnn Properties Dnn The DNN context. Has various objects to access the Dnn Page, etc. public IDnnContext Dnn { get; } Property Value IDnnContext"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Factory.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Factory.html",
    "title": "Class Factory | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Factory Namespace ToSic.Sxc.Dnn Assembly ToSic.Sxc.Dnn.Core.dll This is a factory to create CmsBlocks, Apps etc. and related objects from DNN. Warning This API is obsolete and will be removed in a future release. You should migrate your code to use real services instead, like: IRenderService IDynamicCodeService [PublicApi] [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static class Factory Inheritance object Factory Methods App(int, PortalSettings, bool, bool, ILog) Get a full app-object for accessing data of the app from outside [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IApp App(int appId, PortalSettings ownerPortalSettings, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters appId int The AppID of the app you need ownerPortalSettings PortalSettings The owner portal - this is important when retrieving Apps from another portal. unusedButKeepForApiStability bool Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. showDrafts bool Show draft items - usually false for visitors, true for editors/admins. parentLog ILog optional logger to attach to Returns IApp An initialized App object which you can use to access App.Data App(int, bool, bool, ILog) Get a full app-object for accessing data of the app from outside [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IApp App(int appId, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters appId int The AppID of the app you need unusedButKeepForApiStability bool Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. showDrafts bool Show draft items - usually false for visitors, true for editors/admins. parentLog ILog optional logger to attach to Returns IApp An initialized App object which you can use to access App.Data App(int, int, bool, bool, ILog) Get a full app-object for accessing data of the app from outside [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IApp App(int zoneId, int appId, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters zoneId int The zone the app is in. appId int The AppID of the app you need unusedButKeepForApiStability bool Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. showDrafts bool Show draft items - usually false for visitors, true for editors/admins. parentLog ILog optional logger to attach to Returns IApp An initialized App object which you can use to access App.Data CmsBlock(ModuleInfo) Get a Root CMS Block if you have the ModuleInfo object [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IBlockBuilder CmsBlock(ModuleInfo moduleInfo) Parameters moduleInfo ModuleInfo A DNN ModuleInfo object Returns IBlockBuilder An initialized CMS Block, ready to use/render CmsBlock(int, int) Get a Root CMS Block if you know the TabId and the ModId [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IBlockBuilder CmsBlock(int pageId, int modId) Parameters pageId int The DNN tab id (page id) modId int The DNN Module id Returns IBlockBuilder An initialized CMS Block, ready to use/render CmsBlock(int, int, ILog) Get a Root CMS Block if you know the TabId and the ModId [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IBlockBuilder CmsBlock(int pageId, int modId, ILog parentLog) Parameters pageId int The DNN tab id (page id) modId int The DNN Module id parentLog ILog The parent log, optional Returns IBlockBuilder An initialized CMS Block, ready to use/render CmsBlock(IModule, ILog) Get a Root CMS Block if you have the ModuleInfo object. [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IBlockBuilder CmsBlock(IModule module, ILog parentLog = null) Parameters module IModule parentLog ILog optional logger to attach to Returns IBlockBuilder An initialized CMS Block, ready to use/render DynamicCode(IBlockBuilder) Retrieve a helper object which provides commands like AsDynamic, AsEntity etc. [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v15 or 16. Use the IDynamicCodeService or the IRenderService instead.\")] public static IDnnDynamicCode DynamicCode(IBlockBuilder blockBuilder) Parameters blockBuilder IBlockBuilder CMS Block for which the helper is targeted. Returns IDnnDynamicCode A Code Helper based on IDnnDynamicCode"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.DocsPlaceholder.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.DocsPlaceholder.html",
    "title": "Class DocsPlaceholder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DocsPlaceholder Namespace ToSic.Sxc.Dnn.LookUp Assembly ToSic.Sxc.Dnn.Core.dll This is a placeholder class, to make sure the namespace is included in the documentation. It is used in namespaces where there are no public classes. [PublicApi] public class DocsPlaceholder : DocumentationPlaceholder Inheritance object DocumentationPlaceholder DocsPlaceholder"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.html",
    "title": "Namespace ToSic.Sxc.Dnn.LookUp | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Dnn.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either Dnn specific. For example, ToSic.Sxc.Dnn.LookUp.DnnLookUpEngineResolver retrieves all the LookUps relevant for the current module, to resolve Module:ModuleId etc. Classes DocsPlaceholder This is a placeholder class, to make sure the namespace is included in the documentation. It is used in namespaces where there are no public classes."
  },
  "api/dot-net/ToSic.Sxc.Dnn.RazorComponent.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.RazorComponent.html",
    "title": "Class RazorComponent | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class RazorComponent Namespace ToSic.Sxc.Dnn Assembly ToSic.Sxc.Dnn.Razor.dll The base class for Razor-Components in 2sxc 10+ to 2sxc 11 - deprecated now Provides context infos like the Dnn object, helpers like Edit and much more. To use this, create cshtml files like _person-list.cshtml in your app-folder. By default, they will be typed the old way - which continues to work for compatibility. We recommend to use this from now on. To do it, your code file must begin with an @inherits statement, like this: Tip We highly recommend you use @inherits Custom.Hybrid.Razor14 or @inherits Custom.Dnn.Razor12 instead @inherits ToSic.Sxc.Dnn.RazorComponent <h1>hello from RazorComponent</h1> [PublicApi(\"...but deprecated! use Razor14, RazorTyped or newer\")] public abstract class RazorComponent : RazorComponentBase, IDnnDynamicCode, IHasLog, IHasDnn Inheritance object WebPageExecutingBase WebPageRenderingBase WebPageBase RazorComponentBase RazorComponent Implements IDnnDynamicCode IHasLog IHasDnn Fields NotImplementedUseCustomBase public const string NotImplementedUseCustomBase = \"Use a newer base class like Custom.Hybrid.Razor12 or Custom.Dnn.Razor12 to leverage this.\" Field Value string Properties App A fully prepared IApp object letting you access all the data and queries in the current app. You'll usually want to access the data, like App.Data[\"Categories\"] or the queries App.Query[\"AllPosts\"]. foreach(var cat in AsList(App.Data[\"Categories\"])) { @cat.Name } public IApp App { get; } Property Value IApp The current app CmsContext This Context tells you about the environment, such as the current User the Page the View the Site It's supposed to replace direct access to Dnn or Oqtane object in Razor and WebAPI code, allowing hybrid code that works everywhere. public ICmsContext CmsContext { get; } Property Value ICmsContext Remarks New in v11.11 Code Code-Behind of this .cshtml file - located in a file with the same name but ending in .code.cshtml public dynamic Code { get; } Property Value dynamic Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem. public dynamic Content { get; } Property Value dynamic A IDynamicEntity object with the current content - or null. Dnn The DNN context. Has various objects to access the Dnn Page, etc. public IDnnContext Dnn { get; } Property Value IDnnContext Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons public IEditService Edit { get; } Property Value IEditService An IEditService object. Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem. public dynamic Header { get; } Property Value dynamic A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. Html Helper for Html.Raw - for creating raw html output which doesn't encode > and <. Also has helpers such as .Partial(...) public override IHtmlHelper Html { get; } Property Value IHtmlHelper Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Log The logger for the current Razor / WebApi which allows you to add logs to Insights. public override ICodeLog Log { get; } Property Value ICodeLog Purpose The purpose of the current execution. The code might be called for showing to a user, or search-indexing. [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public Purpose Purpose { get; } Property Value Purpose The value of the current purpose. Methods AsAdam(ICanBeEntity, string) Provides an Adam instance for this item and field public IFolder AsAdam(ICanBeEntity item, string fieldName) Parameters item ICanBeEntity The item - an IEntity, IDynamicEntity, ITypedItem etc. often Content or similar fieldName string The field name, like \"Gallery\" or \"Pics\" Returns IFolder An Adam object for navigating the assets AsDynamic(object) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(object dynamicEntity) Parameters dynamicEntity object Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(string, string) Take a json and provide it as a dynamic object to the code public dynamic AsDynamic(string json, string fallback = null) Parameters json string the original json string fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns dynamic A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 AsDynamic(IEntity) Wraps an entity into a IDynamicEntity public dynamic AsDynamic(IEntity entity) Parameters entity IEntity the original object Returns dynamic a dynamic object for easier coding AsEntity(object) Unwraps a dynamic entity or ITypedItem back into the underlying IEntity public IEntity AsEntity(object dynamicEntity) Parameters dynamicEntity object the wrapped IEntity Returns IEntity A normal IEntity AsList(object) Converts a list of IEntity objects into a list of IDynamicEntity objects. public IEnumerable<dynamic> AsList(object list) Parameters list object typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns IEnumerable<dynamic> a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 CreateInstance(string, NoParamOrder, string, string, bool) Create an instance of code lying in a file near this public virtual dynamic CreateInstance(string virtualPath, NoParamOrder noParamOrder = default, string name = null, string relativePath = null, bool throwOnError = true) Parameters virtualPath string path to the other code file to compile noParamOrder NoParamOrder see Convention: Named Parameters name string Override the class name to compile - usually not required as it should match the file name relativePath string optional relative path, will usually use the ToSic.Sxc.Code.Internal.IGetCodePath.CreateInstancePath throwOnError bool throw errors if compiling fails, recommended Returns dynamic An object of the class in the file Remarks Note that the C# code which we are creating inherits from a standard base class such as Code12 or ToSic.Sxc.Code.DynamicCode then it will automatically be initialized to support App, AsDynamic etc. CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters inSource IDataSource The data source which will be the default In of the new data-source. configurationProvider ILookUpEngine An alternate configuration provider for the DataSource Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. public T CreateSource<T>(IDataStream source) where T : IDataSource Parameters source IDataStream The stream which will be the default In of the new data-source. Returns T A typed DataSource object Type Parameters T A data-source type - must be inherited from IDataSource CustomizeData() Override this to have your code change the (already initialized) Data object. If you don't override this, nothing will be changed/customized. [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public virtual void CustomizeData() CustomizeSearch(Dictionary<string, List<ISearchItem>>, IModule, DateTime) Customize how the search will process data on this page. [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public virtual void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters searchInfos Dictionary<string, List<ISearchItem>> moduleInfo IModule beginDate DateTime GetService<TService>() Get a service from the Dependency Injection. The service can come from 2sxc, EAV or the underlying platform (Dnn, Oqtane). public TService GetService<TService>() where TService : class Returns TService An object of the type or interface requested, or null if not found in the DI. Type Parameters TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.IDnnContext.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.IDnnContext.html",
    "title": "Interface IDnnContext | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDnnContext Namespace ToSic.Sxc.Dnn.Run Assembly ToSic.Sxc.Dnn.Core.dll Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform. This object is the root Dnn object, used mainly in older Razor. If possible, try to use CmsContext instead. [PublicApi(\"This is DNN only, if possibly, try to use the hybrid CmsContext (v14) / MyContext (v16+) instead.\")] public interface IDnnContext Remarks It is currently on ToSic.Sxc.Run.IDnnContext but we plan to move it elsewhere Properties Module The current DNN ModuleInfo - Dnn specific and with all the specials of the Dnn APIs. If possible, try to use CmsContext.Module instead. ModuleInfo Module { get; } Property Value ModuleInfo Portal The current DNN Portal Settings. If possible, try to use CmsContext.Site instead. PortalSettings Portal { get; } Property Value PortalSettings Tab The current DNN TabInfo (page). We also don't like the name Tab, but that's the DNN convention. If possible, try to use CmsContext.Page instead. TabInfo Tab { get; } Property Value TabInfo User The current DNN User. If possible, try to use CmsContext.User instead. UserInfo User { get; } Property Value UserInfo"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.html",
    "title": "Namespace ToSic.Sxc.Dnn.Run | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Dnn.Run Run is all about Runtime / Execution of the EAV. It contains things that describe the environment it's running in and has base material for specific implementations. For example, the ITenant and ITenant<T> are inherited by the DnnTenant. Note All the things starting with Dnn... are Dnn specific implementations of EAV or 2sxc features. We've documented them so you know how things work, but you usually won't care about them. The Dnn prefix helps us better detect in our code when we're using Dnn stuff vs. generic stuff. Interfaces IDnnContext Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform. This object is the root Dnn object, used mainly in older Razor. If possible, try to use CmsContext instead."
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.IHtmlHelper.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.IHtmlHelper.html",
    "title": "Interface IHtmlHelper | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IHtmlHelper Namespace ToSic.Sxc.Dnn.Web Assembly ToSic.Sxc.Dnn.Razor.dll Helper to quickly \"raw\" some html. Important: When using Oqtane, the Html object has many more features - check the .net documentation. [PublicApi] public interface IHtmlHelper Methods Partial(string, object) Render a razor file to the page. This mimics the .net core API Html.Partial() in DNN IHtmlString Partial(string path, object data = null) Parameters path string path/file of razor, like \"../shared/_list-item.cshtml\" data object TODO new v16.00 Returns IHtmlString Raw(object) Returns a HtmlString which Razor will output as Raw Html. IHtmlString Raw(object stringHtml) Parameters stringHtml object Returns IHtmlString An HtmlString object which will be not be html-encoded when added to a page with @Html.Raw(...)"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.html",
    "title": "Namespace ToSic.Sxc.Dnn.Web | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Dnn.Web Interfaces IHtmlHelper Helper to quickly \"raw\" some html. Important: When using Oqtane, the Html object has many more features - check the .net documentation."
  },
  "api/dot-net/ToSic.Sxc.Dnn.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.html",
    "title": "Namespace ToSic.Sxc.Dnn | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Dnn This contains interfaces that are specific to 2sxc in Dnn. The purpose is that both the EAV and 2sxc are meant to be platform agnostic, but Razor and WebApi developers in Dnn still need access to some helpers. Namespaces ToSic.Sxc.Dnn.Code ToSic.Sxc.Dnn.DataSources ToSic.Sxc.Dnn.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either Dnn specific. For example, ToSic.Sxc.Dnn.LookUp.DnnLookUpEngineResolver retrieves all the LookUps relevant for the current module, to resolve Module:ModuleId etc. ToSic.Sxc.Dnn.Run ToSic.Sxc.Dnn.Web Classes ApiController This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. DynamicCode This is a base class for custom code files with context. If you create a class file for dynamic use and inherit from this, then the compiler will automatically add objects like Link, Dnn, etc. The class then also has AsDynamic(...) and AsList(...) commands like a normal razor page. Factory This is a factory to create CmsBlocks, Apps etc. and related objects from DNN. RazorComponent The base class for Razor-Components in 2sxc 10+ to 2sxc 11 - deprecated now Provides context infos like the Dnn object, helpers like Edit and much more."
  },
  "api/dot-net/ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.html": {
    "href": "api/dot-net/ToSic.Sxc.Edit.Toolbar.IToolbarBuilder.html",
    "title": "Interface IToolbarBuilder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IToolbarBuilder Namespace ToSic.Sxc.Edit.Toolbar Assembly ToSic.Sxc.dll The toolbar builder helps you create Toolbar configurations for the UI. Note that it has a fluid API, and each method/use returns a fresh object with the updated configuration. \uD83D\uDCD6 See Guide for the Toolbar Builder [PublicApi] public interface IToolbarBuilder : IHasLog Inherited Members IHasLog.Log Remarks Your code cannot construct this object by itself, as it usually needs additional information. To get a ToolbarBuilder, use the IToolbarService. uses the Convention: Functional API (Immutable) History Added in 2sxc 13, just minimal API massively enhanced in v14.04 most commands extended with Tweak API in v15.07 Methods Add(object, NoParamOrder, string, Func<ITweakButton, ITweakButton>, object, object, string) Create button to add a new entity to a list of entities. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Add(object target = null, NoParamOrder noParamOrder = default, string contentType = null, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target which is in a list of items in on a content-block, see target guide noParamOrder NoParamOrder see Convention: Named Parameters contentType string tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide AddExisting(object, NoParamOrder, string, Func<ITweakButton, ITweakButton>, object, object, string) Create button to add an existing entity to the list. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder AddExisting(object target = null, NoParamOrder noParamOrder = default, string contentType = null, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target which is in a list of items in on a content-block, see target guide noParamOrder NoParamOrder see Convention: Named Parameters contentType string tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide App(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to admin the app. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder App(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen. By default, the button will show based on conditions like permissions. Returns IToolbarBuilder a new toolbar builder - see guide AppImport(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to open the import-app dialog. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder AppImport(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen. By default, the button will show based on conditions like permissions. Returns IToolbarBuilder a new toolbar builder - see guide AppResources(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to edit the app resources if there are any. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder AppResources(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen. By default, the button will show based on conditions like permissions. Returns IToolbarBuilder a new toolbar builder - see guide AppSettings(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to edit the custom app settings if there are any. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder AppSettings(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen. By default, the button will show based on conditions like permissions. Returns IToolbarBuilder a new toolbar builder - see guide Apps(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to open the apps management of the current site. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Apps(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen. By default, the button will show based on conditions like permissions. Returns IToolbarBuilder a new toolbar builder - see guide AsAttributes(object) Get a toolbar builder which would render to HTML as attributes on an existing tag. Note that this is the default, so you will usually not need this. IToolbarBuilder AsAttributes(object target = null) Parameters target object optional entity-like target, see target guide Returns IToolbarBuilder a new toolbar builder - see guide AsTag(object) Get a toolbar builder which would render to HTML as a standalone tag. Important: Toolbars created using this will behave differently from previous standalone toolbars. These standalone toolbars will not float automatically as previous ones did. You can still get them to float by adjusting the Settings as you need them. This is because many years ago, standalone toolbars were configured floated automatically. As the APIs got better, this wasn't a great default any more, but we couldn't introduce a breaking change. Anything created now with this new API will be new, so this will behave more in line with expectations. See also issue IToolbarBuilder AsTag(object target = null) Parameters target object optional entity-like target, see target guide Returns IToolbarBuilder a new toolbar builder - see guide Audience(NoParamOrder, bool?) Specify an audience for the toolbar - to activate even if the user wouldn't normally see it. Normally only people with admin permissions would see a toolbar. Specifying the audience will make it appear even if you are not an admin. Reasons for this would be to have some special buttons for a certain group of users. IToolbarBuilder Audience(NoParamOrder protector = default, bool? everyone = null) Parameters protector NoParamOrder see Convention: Named Parameters everyone bool? default is null, set to true to make everybody see this. Returns IToolbarBuilder Remarks New in v17.08, for now should be regarded as experimental. Naming might still change. Button(string, object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string, string) Add a custom button / command. Can also be used to do advanced remove operations or modify a button on a toolbar which would have it by default. IToolbarBuilder Button(string name, object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null, string context = null) Parameters name string The required name of the command. See CommandNames. Can also be a full rule-string containing parameters and more according to the conventions of the js toolbar target object optional entity-like target, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen context string Returns IToolbarBuilder a new toolbar builder - see guide Code(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create Button to run JS code. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Code(object target, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object Name of the function to call, without parameters. noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Condition(bool) Condition to apply if the toolbar would show, but maybe shouldn't. For example, you can prevent the toolbar from appearing if it's the Demo-Item. For expensive conditions, use the overload which accepts a function. IToolbarBuilder Condition(bool condition) Parameters condition bool true/false Returns IToolbarBuilder a new toolbar builder - see guide Remarks New in v14.04 Condition(Func<bool>) Condition to apply if the toolbar would show, but maybe shouldn't. For example, you can prevent the toolbar from appearing if it's the Demo-Item. This accepts a function to check the condition. It will only run if the toolbar would already show. IToolbarBuilder Condition(Func<bool> condition) Parameters condition Func<bool> function such as () => true Returns IToolbarBuilder a new toolbar builder - see guide Remarks New in v14.04 Copy(object, NoParamOrder, Func<ITweakButton, ITweakButton>, string, object, object, object, string, string) Create button to copy an item. Can also be used to remove the same button on a toolbar which would have it by default. It needs the item which it will copy as a parameter. IToolbarBuilder Copy(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, string contentType = null, object ui = null, object parameters = null, object prefill = null, string operation = null, string context = null) Parameters target object an entity-like target, see target guide can also be a int (number) entityId. If you only supply the entity ID, you must also supply the contentType. noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters contentType string ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide operation string optional change what should happen context string EXPERIMENTAL - not final Returns IToolbarBuilder A new toolbar builder which has been extended with this button Remarks Added in v14.02 Data(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object, string) Create button to show a data-admin dialog with all the data-items / entities of a specific content type. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Data(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object filter = null, object ui = null, object parameters = null, string operation = null) Parameters target object 3 Options: an entity-like target, see target guide a string containing the type name a modifier keyword such as remove or - to remove the button noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters filter object object or string with the filters for the data view see filter ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Delete(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create (or reconfigure) the button to delete an item. This has a special behavior. The default toolbar already includes a delete-button in the third group. So if the toolbar is is a default this will just modify it to force-show. But it will still be in the third group of buttons. For the empty toolbar it will just add the button in the normal way. To change this automatic behavior, use a operation = modify or add IToolbarBuilder Delete(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide DetectDemo(ICanBeEntity, NoParamOrder, string) Detect if the toolbar should go into demo-mode. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP 16.02\")] IToolbarBuilder DetectDemo(ICanBeEntity root, NoParamOrder noParamOrder = default, string message = null) Parameters root ICanBeEntity noParamOrder NoParamOrder see Convention: Named Parameters message string Optional message or a resources key such as Resources.ToolbarShowingDemo Returns IToolbarBuilder Edit(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object, string) Create button to edit an item. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Edit(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, object prefill = null, string operation = null) Parameters target object optional entity-like target, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Edition(NoParamOrder, string, Func<ITweakButton, ITweakButton>) Create Button to let the user switch to other app editions. Note that by default, this functionality is also on the Layout button, but there are cases where a user won't see that (like a non-admin) and you may still want to provide them this feature. IToolbarBuilder Edition(NoParamOrder noParamOrder = default, string editions = null, Func<ITweakButton, ITweakButton> tweak = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters editions string Optional list of editions, like staging,live. By default, it would take the editions in the app.json. tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters Returns IToolbarBuilder a new toolbar builder - see guide Remarks new v17.08, should be considered experimental ATM Fields(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create Button to open a dialog to manage the fields/attributes of the content type. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Fields(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide For(object) Set the main target of this toolbar. IToolbarBuilder For(object target) Parameters target object optional entity-like target, see target guide Returns IToolbarBuilder a new toolbar builder - see guide Remarks New in v14.04 Group(string) Adds a button group to the toolbar. All following buttons will be in this group automatically. Can also be used to remove a group of buttons on the default toolbar, such as the group view. See list of groups on default IToolbarBuilder Group(string name = null) Parameters name string optional - name of new group or -name to remove an existing group. Returns IToolbarBuilder Remarks New in v14.08 Info(NoParamOrder, string, string, Func<ITweakButton, ITweakButton>) Create an info, warning, help or link-button to assist the user. IToolbarBuilder Info(NoParamOrder noParamOrder = default, string link = null, string target = null, Func<ITweakButton, ITweakButton> tweak = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters link string If provided, will make the button open the link in a new window. target string the target window, like _blank - new in v17; defaults to null so that ctrl-click etc. work as expected tweak Func<ITweakButton, ITweakButton> Optional function call to tweak the button. Returns IToolbarBuilder Remarks Added in v15.07 target added in v17 - defaults to nothing, so if you explicitly want a new window, you must set it to _blank Insights(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to open the insights for debugging. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Insights(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen. By default, the button will show based on conditions like permissions. Returns IToolbarBuilder a new toolbar builder - see guide Layout(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create Button to change the view/layout of the data shown on the page. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Layout(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide List(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to manage the list of entities shown here. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder List(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target which is in a list of items in on a content-block, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Metadata(object, string, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object, string, string) Create button to add or edit metadata to the specified object and using the content-type specified here. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Metadata(object target, string contentTypes = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, object prefill = null, string operation = null, string context = null) Parameters target object The target object which should receive metadata. Must support IHasMetadata. Often an entity-like target, see target guide, but can also other metadata supporting objects, like an Asset, Page, Site, etc. contentTypes string Name of one or more content-types for which to generate the button(s). For many, use comma , to separate. If not specified, will try to lookup config (v14) noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide operation string optional change what should happen context string EXPERIMENTAL - not final Returns IToolbarBuilder A new toolbar builder which has been extended with this button Remarks History Added in 2sxc 13 contentTypes changed from one to many in v14 contentTypes can also have * or SomeType,* in v14 contentTypes can also be optional, in which case it behaves as if it was * in v14 - if no config is found, it will not add a metadata-button parameter context added in 2sxc 14 - still WIP/experimental changed ui and parameters to support object in v14.04 More(NoParamOrder, object) Add a more button. Not really useful to do, but included for completeness IToolbarBuilder More(NoParamOrder noParamOrder = default, object ui = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters ui object optional configuration how to show, see ui guide Returns IToolbarBuilder a new toolbar builder - see guide MoveDown(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to move an item down in a list. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder MoveDown(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target which is in a list of items in on a content-block, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide MoveUp(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to move an item up in a list. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder MoveUp(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target which is in a list of items in on a content-block, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide New(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object, string) Create button to create a new item. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder New(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, object prefill = null, string operation = null) Parameters target object X Options an entity-like target, see target guide a string with the content-type name noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Parameters(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object, string) Adds / updates the params rule on the toolbar which contains information for all the buttons IToolbarBuilder Parameters(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, object prefill = null, string context = null) Parameters target object Many options An Entity-like thing which would be used to prepare default params like entityId A string, which would be the same as using the term on the parameters A object - especially an anonymous object like new { id = 7, show = true } noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters (new v16.02) ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide context string Returns IToolbarBuilder a new toolbar builder - see guide Publish(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to publish the current item. Can also be used to remove the same button on a toolbar which would have it by default. By default it will only appear if the current item is draft/unpublished. You can change this (but probably shouldn't) by setting an operation. IToolbarBuilder Publish(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Query(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create Button to open the design/edit query dialog. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Query(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Remove(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to remove an item from a list. Can also be used to remove the same button on a toolbar which would have it by default. This will not delete the item, just remove. IToolbarBuilder Remove(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target which is in a list of items in on a content-block, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Replace(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to replace the current item in the list with another existing item. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Replace(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object optional entity-like target which is in a list of items in on a content-block, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide Settings(NoParamOrder, string, string, string, string, string, object, object) Add a settings rule to configure what the toolbar should look like. See Toolbar Settings IToolbarBuilder Settings(NoParamOrder noParamOrder = default, string show = null, string hover = null, string follow = null, string classes = null, string autoAddMore = null, object ui = null, object parameters = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters show string hover (default), always hover string right (default), left follow string classes string css class names to add to the entire toolbar autoAddMore string placement of the more ellipsis button, auto (default), end, start, never ui object optional configuration how to show, see ui guide parameters object Parameters for the command - doesn't really have an effect on Settings, but included for consistency Returns IToolbarBuilder a new toolbar builder - see guide Remarks History Added in 2sxc 13 options auto and never on autoAddMore added in 14.08 System(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create button to open the system admin dialog. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder System(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object not used ATM just here for API consistency noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen. By default, the button will show based on conditions like permissions. Returns IToolbarBuilder a new toolbar builder - see guide Template(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create Button to open the edit-template (source-code) dialog. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder Template(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide View(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, string) Create Button to open the edit view settings dialog. Can also be used to remove the same button on a toolbar which would have it by default. IToolbarBuilder View(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, string operation = null) Parameters target object noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide operation string optional change what should happen Returns IToolbarBuilder a new toolbar builder - see guide"
  },
  "api/dot-net/ToSic.Sxc.Edit.Toolbar.ITweakButton.html": {
    "href": "api/dot-net/ToSic.Sxc.Edit.Toolbar.ITweakButton.html",
    "title": "Interface ITweakButton | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITweakButton Namespace ToSic.Sxc.Edit.Toolbar Assembly ToSic.Sxc.dll Experimental new API in v15.07 to improve how to configure the Ui of a button. Tip Read more about this in Toolbar Builder Guide – Tweak API for Buttons new 15.07 [PublicApi] public interface ITweakButton Remarks Added in v15.07 Methods Classes(string) Set one or more classes on the button. ITweakButton Classes(string value) Parameters value string a string containing one or more CSS class names Returns ITweakButton Color(string, NoParamOrder, string, string) Set the color of this button. A color can be red, green or #FFCC66 as well as transparent colors such as #FFCC6699 ITweakButton Color(string color = null, NoParamOrder noParamOrder = default, string background = null, string foreground = null) Parameters color string The main color parameter. Can contain two values, comma separated. noParamOrder NoParamOrder background string Background color - will only take effect if the color was not set. foreground string Foreground color - will only take effect if the color was not set. Returns ITweakButton Filter(object) Add filter information to the button - usually when opening Data dialogs. ITweakButton Filter(object value) Parameters value object A string such as name=value or an anonymous object such as new { name = 27 } Returns ITweakButton Filter(string, object) Add filter information to the button - usually when opening Data dialogs. ITweakButton Filter(string name, object value) Parameters name string The name/key which comes before the = value object The value which comes after the = Returns ITweakButton FormParameters(object) Add form-parameters to the button - which are available in the data.parameters in formulas. ITweakButton FormParameters(object value) Parameters value object A string such as name=value or an anonymous object such as new { name = 27 } Returns ITweakButton Remarks Added in 16.02 FormParameters(string, object) Add form-parameters to the button - which are available in the data.parameters in formulas. ITweakButton FormParameters(string name, object value) Parameters name string The name/key which comes before the = value object The value which comes after the = Returns ITweakButton Remarks Added in 16.02 Group(string) Set what group the button is in. This is rarely used. ITweakButton Group(string value) Parameters value string the group name Returns ITweakButton Icon(string) Set the icon for this button. ITweakButton Icon(string value) Parameters value string One of a few predefined names, or a SVG string. Returns ITweakButton Note(string, NoParamOrder, string, string, int, int, string) Add a floating note to the button. ITweakButton Note(string note = null, NoParamOrder noParamOrder = default, string type = null, string background = null, int delay = 0, int linger = 0, string format = null) Parameters note string The note/message noParamOrder NoParamOrder see Convention: Named Parameters type string Optional type, like info (default), warning, help background string Background color. delay int Delay show by this duration in ms. If mouse leaves before, it won't appear (new v17). linger int Linger by this duration in ms after the mouse leaves - new v17. format string html or text (default) - new v17 Returns ITweakButton Remarks Added in v15.07 delay and linger added in v17 format added in v17 Parameters(object) Add parameters to the button - which are usually used when executing the command. Tip These parameters are used in the page itself and not forwarded to the form. Use FormParameters(object) for that purpose. ITweakButton Parameters(object value) Parameters value object A string such as name=value or an anonymous object such as new { name = 27 } Returns ITweakButton Parameters(string, object) Add parameters to the button - which are usually used when executing the command. Tip These parameters are used in the page itself and not forwarded to the form. Use FormParameters(object) for that purpose. ITweakButton Parameters(string name, object value) Parameters name string The name/key which comes before the = value object The value which comes after the = Returns ITweakButton Position(int) Specify the position of the button. 0 means in the very front, 1 is right after the first button, etc. -1 means the last button, -2 is the second last, etc. ITweakButton Position(int value) Parameters value int Returns ITweakButton Prefill(object) Add prefill information to the button, usually for creating new Entities. ITweakButton Prefill(object value) Parameters value object A string such as name=value or an anonymous object such as new { name = 27 } Returns ITweakButton Prefill(string, object) Add prefill information to the button, usually for creating new Entities. ITweakButton Prefill(string name, object value) Parameters name string The name/key which comes before the = value object The value which comes after the = Returns ITweakButton Show(bool) Set the show of this button. ITweakButton Show(bool show = true) Parameters show bool Optional show value, default is true Returns ITweakButton Tooltip(string) Set the title / Tooltip of the button. ITweakButton Tooltip(string value) Parameters value string The title/tooltip to show Returns ITweakButton Ui(object) Add a general ui-rule for things which are not in the standard API. ITweakButton Ui(object value) Parameters value object a string such as this=that or an object which will be parsed/serialized such as new { this = 27 } Returns ITweakButton Ui(string, object) Add a general UI rule for things which are not in the standard API. ITweakButton Ui(string name, object value) Parameters name string The name/key which comes before the = value object The value which comes after the = Returns ITweakButton"
  },
  "api/dot-net/ToSic.Sxc.Edit.Toolbar.html": {
    "href": "api/dot-net/ToSic.Sxc.Edit.Toolbar.html",
    "title": "Namespace ToSic.Sxc.Edit.Toolbar | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Edit.Toolbar Interfaces IToolbarBuilder The toolbar builder helps you create Toolbar configurations for the UI. Note that it has a fluid API, and each method/use returns a fresh object with the updated configuration. ITweakButton Experimental new API in v15.07 to improve how to configure the Ui of a button. Tip Read more about this in Toolbar Builder Guide – Tweak API for Buttons new 15.07"
  },
  "api/dot-net/ToSic.Sxc.Images.IResizeSettings.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.IResizeSettings.html",
    "title": "Interface IResizeSettings | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IResizeSettings Namespace ToSic.Sxc.Images Assembly ToSic.Sxc.dll Settings how to resize an image for the src or srcset attributes. It's read only, to create it, use the IImageService Stores a full configuration for resizing. This is mainly important for scenarios where you need to build complex rules for the resizer, or for internal functionality when generating images and pictures. Test Tip We suggest you read the Image Guide for maximum power! \uD83D\uDCD4 Images Guide (Best Practices & Code) [PublicApi(\"Still WIP\")] public interface IResizeSettings Remarks History: Released 2sxc 13.10 Properties AspectRatio The aspect ratio to determine the height, in case no height was specified. double AspectRatio { get; } Property Value double BasedOn Name of the original settings it was based on - can be null/empty. string BasedOn { get; } Property Value string Remarks New v17.03 Factor The resize factor by which the original value (width/height) is scaled double Factor { get; } Property Value double Format Target format like 'jpg' or 'png'. If empty will not be used. string Format { get; } Property Value string Height Height to resize to. If 0, height will not be changed int Height { get; } Property Value int Parameters Additional url parameters in case the final link would need this. Rarely used, but can be used for resize parameters which are not standard. NameValueCollection Parameters { get; } Property Value NameValueCollection Quality Quality factor for image formats which support quality. Usually a value between 0 and 100. If 0, quality will not be changed. int Quality { get; } Property Value int ResizeMode Resize mode. If empty or \"(none)\" will not be used. string ResizeMode { get; } Property Value string ScaleMode Scale Mode. If empty or \"(none)\" will not be used. string ScaleMode { get; } Property Value string Width Width to resize to. If 0, width will not be changed int Width { get; } Property Value int"
  },
  "api/dot-net/ToSic.Sxc.Images.IResponsiveImage.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.IResponsiveImage.html",
    "title": "Interface IResponsiveImage | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IResponsiveImage Namespace ToSic.Sxc.Images Assembly ToSic.Sxc.dll A object which contains everything to create HTML for responsive img tags with optimal srcset offering all the sizes you may need. You can simply add this object to the source, like @image to render the image - which is the same as @image.ImgTag Will generate a responsive <img> tag which also has srcset attributes so the browser can get the best image for the current display. Tip We suggest you read the Image Guide for maximum power! \uD83D\uDCD4 Images Guide (Best Practices & Code) [PublicApi] public interface IResponsiveImage Remarks History: Released 2sxc 13.10 Properties Alt An Alt-description on the image which is retrieved from (in order of priority): the Razor code creating this object using the parameter imgAlt or from image metadata - see Description or from the Razor code using the parameter imgAltFallback new v15 string Alt { get; } Property Value string Class The Class of the image. Usually created from these sources The initial call creating this image tag Resize-Settings which may add classes Rule which determines if the image should crop or not, which may add a class string Class { get; } Property Value string Description Image description from the image Metadata. See also Alt. string Description { get; } Property Value string null if no metadata exists \"\" empty string if metadata exists but no description was given a string containing the added description Remarks Added in v15 DescriptionExtended Extended description, typically used in galleries. string DescriptionExtended { get; } Property Value string Remarks Added in v16.04 Height The image height, if it should be set at all. Will be null otherwise. string Height { get; } Property Value string Img The img tag which would normally be added to the page automatically. You can also use the normal RazorBlade API and do things like .Alt(\"description\") etc. See also the RazorBlade Img docs Img Img { get; } Property Value Img ShowAll Determines if the image should be shown entirely. This usually means that the image is a logo or something, so cropping was not an option. This also usually means that the aspect ratio / height may be different than expected bool ShowAll { get; } Property Value bool Sizes The sizes in case you need it in your custom img-tag. It will only be used for normal img tags, but not for img tags inside picture tags. string Sizes { get; } Property Value string Src The main url, used for main src property string Src { get; } Property Value string Remarks Added in v13.11 SrcSet The SrcSet in case you need to use it in your own custom img-tag. Note that it will be null if the image has no reason to have a srcset. It will only be used for normal img tags, but not for img tags inside picture tags. string SrcSet { get; } Property Value string Width The image width, if it should be set at all. Will be null otherwise. string Width { get; } Property Value string Methods Toolbar() Get the toolbar to show it on another tag (typically a figure around the picture) or set another toolbar instead. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP 16.04, may still change\")] IToolbarBuilder Toolbar() Returns IToolbarBuilder Remarks Added in v16.04"
  },
  "api/dot-net/ToSic.Sxc.Images.IResponsivePicture.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.IResponsivePicture.html",
    "title": "Interface IResponsivePicture | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IResponsivePicture Namespace ToSic.Sxc.Images Assembly ToSic.Sxc.dll A object which contains everything to create HTML for responsive picture tags with optimal srcset offering all the sizes you may need Will generate a responsive <picture> tag with all the <source> and <img> tags necessary so the browser can get the best image for the current display. Tip We suggest you read the Image Guide for maximum power! \uD83D\uDCD4 Images Guide (Best Practices & Code) [PublicApi] public interface IResponsivePicture : IResponsiveImage Inherited Members IResponsiveImage.Alt IResponsiveImage.Class IResponsiveImage.Description IResponsiveImage.DescriptionExtended IResponsiveImage.Img IResponsiveImage.ShowAll IResponsiveImage.Height IResponsiveImage.Width IResponsiveImage.SrcSet IResponsiveImage.Sizes IResponsiveImage.Toolbar() IResponsiveImage.Src Remarks History: Released 2sxc 13.10 Properties Picture The picture tag with everything automatically included. See also the RazorBlade Picture docs Picture Picture { get; } Property Value Picture Sources The source tags as they were auto-generated, in case you want to build the picture tag manually. Contains many source tags - see RazorBlade Source docs TagList Sources { get; } Property Value TagList"
  },
  "api/dot-net/ToSic.Sxc.Images.ITweakMedia.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.ITweakMedia.html",
    "title": "Interface ITweakMedia | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITweakMedia Namespace ToSic.Sxc.Images Assembly ToSic.Sxc.dll Tweak API for various media settings. Specifically meant for images and pictures. Some methods such as PictureClass will only have an effect if used on Picture(...) methods. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"New v18.03, still WIP, especially the name could still change\")] public interface ITweakMedia Remarks Added v18.03 All methods return a ITweakMedia to allow chaining. Methods ImgAlt(string) ITweakMedia ImgAlt(string alt) Parameters alt string Returns ITweakMedia ImgAltFallback(string) ITweakMedia ImgAltFallback(string imgAltFallback) Parameters imgAltFallback string Returns ITweakMedia ImgAttributes(IDictionary<string, object>) ITweakMedia ImgAttributes(IDictionary<string, object> attributes) Parameters attributes IDictionary<string, object> Returns ITweakMedia ImgAttributes(IDictionary<string, string>) ITweakMedia ImgAttributes(IDictionary<string, string> attributes) Parameters attributes IDictionary<string, string> Returns ITweakMedia ImgAttributes(object) ITweakMedia ImgAttributes(object attributes) Parameters attributes object Returns ITweakMedia ImgClass(string) ITweakMedia ImgClass(string imgClass) Parameters imgClass string Returns ITweakMedia LightboxDescription(string) ITweakMedia LightboxDescription(string description) Parameters description string Returns ITweakMedia LightboxEnable(bool) Force Lightbox to be enabled (or disabled) ITweakMedia LightboxEnable(bool isEnabled = true) Parameters isEnabled bool Optional enabled state, defaults to true Returns ITweakMedia LightboxGroup(string) Group name for lightbox. All images with the same group-name will be treated as an album. ITweakMedia LightboxGroup(string group) Parameters group string Returns ITweakMedia PictureAttributes(IDictionary<string, object>) ITweakMedia PictureAttributes(IDictionary<string, object> attributes) Parameters attributes IDictionary<string, object> Returns ITweakMedia PictureAttributes(IDictionary<string, string>) ITweakMedia PictureAttributes(IDictionary<string, string> attributes) Parameters attributes IDictionary<string, string> Returns ITweakMedia PictureAttributes(object) ITweakMedia PictureAttributes(object attributes) Parameters attributes object Returns ITweakMedia PictureClass(string) ITweakMedia PictureClass(string pictureClass) Parameters pictureClass string Returns ITweakMedia Resize(Func<ITweakResize, ITweakResize>) Configure the Resize Settings. ITweakMedia Resize(Func<ITweakResize, ITweakResize> tweak = null) Parameters tweak Func<ITweakResize, ITweakResize> Tweak API to customize further settings Returns ITweakMedia Resize(string, NoParamOrder, Func<ITweakResize, ITweakResize>) Configure the Resize Settings. ITweakMedia Resize(string name, NoParamOrder noParamOrder = default, Func<ITweakResize, ITweakResize> tweak = null) Parameters name string Name of an existing configuration, such as \"Lightbox\". If not specified (null) will default to \"Content\". noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakResize, ITweakResize> Tweak API to customize further settings Returns ITweakMedia Resize(IResizeSettings, NoParamOrder, Func<ITweakResize, ITweakResize>) ITweakMedia Resize(IResizeSettings settings, NoParamOrder noParamOrder = default, Func<ITweakResize, ITweakResize> tweak = null) Parameters settings IResizeSettings noParamOrder NoParamOrder tweak Func<ITweakResize, ITweakResize> Returns ITweakMedia Toolbar(bool) ITweakMedia Toolbar(bool enabled) Parameters enabled bool Returns ITweakMedia Toolbar(IToolbarBuilder) ITweakMedia Toolbar(IToolbarBuilder toolbar) Parameters toolbar IToolbarBuilder Returns ITweakMedia"
  },
  "api/dot-net/ToSic.Sxc.Images.ITweakResize.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.ITweakResize.html",
    "title": "Interface ITweakResize | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITweakResize Namespace ToSic.Sxc.Images Assembly ToSic.Sxc.dll WIP - ATM just the properties which are needed for the ImageService [InternalApi_DoNotUse_MayChangeWithoutNotice(\"New v18.03, still WIP\")] public interface ITweakResize Remarks Introduced v18.03, still WIP Methods AspectRatio(double) The aspect ratio to use for resizing - for width to height. ITweakResize AspectRatio(double aspectRatio) Parameters aspectRatio double Returns ITweakResize AspectRatio(string) The aspect ratio to use for resizing - for width to height. Can also be a ratio or formula, like \"1/2\" or \"1:2\" so it can accept CSS-like values. ITweakResize AspectRatio(string aspectRatio) Parameters aspectRatio string Returns ITweakResize Factor(double) A multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. ITweakResize Factor(double factor) Parameters factor double Returns ITweakResize Factor(string) A multiplier, as string usually used to create urls which resize to a part of the default content-size. Like 0.5. Can also be a ratio or formula, like \"1/2\" or \"1:2\" so it can accept CSS-like values. ITweakResize Factor(string factor) Parameters factor string Returns ITweakResize Format(string) Set the format of the image, like 'jpg', 'png', etc. Will only accept known formats, otherwise will ignore the value. ITweakResize Format(string format) Parameters format string Returns ITweakResize Height(int) Set an explicit height. ITweakResize Height(int height) Parameters height int Returns ITweakResize Parameters(string) Specify custom url parameters for the image, like 'cachebreak=42' ITweakResize Parameters(string parameters) Parameters parameters string Returns ITweakResize Quality(double) Set the compression quality ITweakResize Quality(double quality) Parameters quality double Returns ITweakResize ResizeMode(string) Set the resize mode, like 'crop', 'max', etc. ITweakResize ResizeMode(string resizeMode) Parameters resizeMode string Returns ITweakResize ScaleMode(string) Set scale-mode to allow up-scaling images like up or both. ITweakResize ScaleMode(string scaleMode) Parameters scaleMode string Returns ITweakResize Width(int) Optional width parameter. Cannot be used if factor is set (will take precedence). Usually takes the default from the settings. ITweakResize Width(int width) Parameters width int Returns ITweakResize"
  },
  "api/dot-net/ToSic.Sxc.Images.Recipe.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.Recipe.html",
    "title": "Class Recipe | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Recipe Namespace ToSic.Sxc.Images Assembly ToSic.Sxc.dll A recipe contains instructions how to generate tags etc. which can contain multiple resized images [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still Beta / WIP\")] public class Recipe : ICanDump Inheritance object Recipe Implements ICanDump Remarks All the properties are read-only. If you need to override anything, copy it and set the modified values, then use the copy. Constructors Recipe(string, string, string, string, int, bool?, bool?, string, IDictionary<string, object>, IEnumerable<Recipe>) Lighter constructor for json, without parameter Recipe. Important If you call this from your code, always use named parameters, as the parameter order can change in future. [JsonConstructor] public Recipe(string name = null, string forTag = null, string forFactor = null, string forCss = null, int width = 0, bool? setWidth = null, bool? setHeight = null, string variants = null, IDictionary<string, object> attributes = null, IEnumerable<Recipe> recipes = null) Parameters name string An optional name forTag string Restricts the rule to only apply to specific tags - ATM img and source forFactor string Restricts the rule to only apply to resizes for a specified factor forCss string Restricts the rule to only apply to pages which have the specified CSS Framework width int Initial width to use when resizing setWidth bool? Set the width attribute if the img width is known setHeight bool? Set the height attribute if the img-height is known variants string Special string containing variants to generate attributes IDictionary<string, object> List of attributes to set on the img tag recipes IEnumerable<Recipe> List of additional recipes which will all inherit values from this master after creation Recipe(Recipe, string, string, string, string, int, bool?, bool?, string, IDictionary<string, object>, IEnumerable<Recipe>) Important If you call this from your code, always use named parameters, as the parameter order can change in future. public Recipe(Recipe original, string name = null, string forTag = null, string forFactor = null, string forCss = null, int width = 0, bool? setWidth = null, bool? setHeight = null, string variants = null, IDictionary<string, object> attributes = null, IEnumerable<Recipe> recipes = null) Parameters original Recipe An original recipe to copy if we want to get a modified recipe based on one which already existed. name string An optional name forTag string Restricts the rule to only apply to specific tags - ATM img and source forFactor string Restricts the rule to only apply to resizes for a specified factor forCss string Restricts the rule to only apply to pages which have the specified CSS Framework width int Initial width to use when resizing setWidth bool? Set the width attribute if the img width is known setHeight bool? Set the height attribute if the img-height is known variants string Special string containing variants to generate attributes IDictionary<string, object> List of attributes to set on the img tag recipes IEnumerable<Recipe> List of additional recipes which will all inherit values from this master after creation Properties Attributes Attributes to add to the img tag public IDictionary<string, object> Attributes { get; } Property Value IDictionary<string, object> Remarks System.Text.Json requires that the case-insensitive property name and type match the parameter in the constructor. We are using string/object because a value could also be { \"name\": true, \"other-name\": 5 } in the json configuration ForCss WIP, not implemented yet public string ForCss { get; set; } Property Value string ForFactor Determines which factors this recipe should be applied to. Null means any factor. public string ForFactor { get; } Property Value string ForTag TODO: DOC img, source public string ForTag { get; } Property Value string Name Just an identifier - no technical use public string Name { get; } Property Value string Recipes wip TODO: DOC public IEnumerable<Recipe> Recipes { get; } Property Value IEnumerable<Recipe> Remarks System.Text.Json requires that the case-insensitive property name and type match the parameter in the constructor. SetHeight Determines if the img tag will receive a height-attribute public bool? SetHeight { get; } Property Value bool? SetWidth Determines if the img tag will receive a width-attribute public bool? SetWidth { get; } Property Value bool? Variants Source-Set rules (comma separated) which will determine what will be generated. Examples: 1x,1.5x,2x - screen resolutions 200w,400w,600w,800w,1000w - pixel sizes 0.5*,1*,1.5*,2* - multipliers of the originally specified pixel size Important: According to the HTML standard you can mix pixel-sizes and multipliers, but not resolutions with any of the other types. public string Variants { get; } Property Value string Width The initial width to assume in this resize, from which other sizes would be calculated. If set to 0, it will be ignored. public int Width { get; } Property Value int Methods Dump() Create a string dump of the current objects state/contents. public string Dump() Returns string"
  },
  "api/dot-net/ToSic.Sxc.Images.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.html",
    "title": "Namespace ToSic.Sxc.Images | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Images Images are super-important in websites - and we want to make sure that they are perfect by default consistently resized to the perfect size optimized for all kinds of browsers and scenarios Tip We suggest you read the Image Guide for maximum power! \uD83D\uDCD4 Images Guide (Best Practices & Code) Classes Recipe A recipe contains instructions how to generate tags etc. which can contain multiple resized images Interfaces IResizeSettings Settings how to resize an image for the src or srcset attributes. It's read only, to create it, use the IImageService IResponsiveImage A object which contains everything to create HTML for responsive img tags with optimal srcset offering all the sizes you may need. You can simply add this object to the source, like @image to render the image - which is the same as @image.ImgTag IResponsivePicture A object which contains everything to create HTML for responsive picture tags with optimal srcset offering all the sizes you may need ITweakMedia Tweak API for various media settings. Specifically meant for images and pictures. Some methods such as PictureClass will only have an effect if used on Picture(...) methods. ITweakResize WIP - ATM just the properties which are needed for the ImageService"
  },
  "api/dot-net/ToSic.Sxc.LookUp.DocsPlaceholder.html": {
    "href": "api/dot-net/ToSic.Sxc.LookUp.DocsPlaceholder.html",
    "title": "Class DocsPlaceholder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DocsPlaceholder Namespace ToSic.Sxc.LookUp Assembly ToSic.Sxc.dll This is a placeholder class, to make sure the namespace is included in the documentation. It is used in namespaces where there are no public classes. [PublicApi] public class DocsPlaceholder : DocumentationPlaceholder Inheritance object DocumentationPlaceholder DocsPlaceholder"
  },
  "api/dot-net/ToSic.Sxc.LookUp.html": {
    "href": "api/dot-net/ToSic.Sxc.LookUp.html",
    "title": "Namespace ToSic.Sxc.LookUp | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either web-specific (like request objects) or DynamicData specific. Classes DocsPlaceholder This is a placeholder class, to make sure the namespace is included in the documentation. It is used in namespaces where there are no public classes."
  },
  "api/dot-net/ToSic.Sxc.Models.Attributes.DataModelAttribute.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.Attributes.DataModelAttribute.html",
    "title": "Class DataModelAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataModelAttribute Namespace ToSic.Sxc.Models.Attributes Assembly ToSic.Sxc.dll Mark DataModel objects/interfaces and specify what ContentType they are for. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public class DataModelAttribute : Attribute Inheritance object Attribute DataModelAttribute Remarks Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History: New / WIP in v19.01 Fields ForAnyContentType public const string ForAnyContentType = \"*\" Field Value string Properties ForContentTypes Determines which content-type names are expected when converting to this data model. public string ForContentTypes { get; init; } Property Value string Remarks Usually this is checked when converting Entities to the custom data model. If it doesn't match, will then throw an error. Typically just one value, such as \"Article\" or \"Product\". But it will also support \"*\" for anything, or a comma-separated list of content-type names. History: WIP 19.01 Remarks Just custom remarks, no technical functionality. public string Remarks { get; init; } Property Value string StreamNames public string StreamNames { get; init; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.Attributes.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.Attributes.html",
    "title": "Namespace ToSic.Sxc.Models.Attributes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Models.Attributes Classes DataModelAttribute Mark DataModel objects/interfaces and specify what ContentType they are for."
  },
  "api/dot-net/ToSic.Sxc.Models.DataModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.DataModel.html",
    "title": "Class DataModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Base class for plain custom data models and can be used in Razor Components. It wraps a IEntity and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to CustomModelOfItem or something\")] public abstract class DataModel : IDataModelOf<IEntity>, IDataModel, IEquatable<IEntity> Inheritance object DataModel Implements IDataModelOf<IEntity> IDataModel IEquatable<IEntity> Derived PageModel SiteModel UserModel UserRoleModel Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : DataModel { public string Name => _entity.Get<string>(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _entity The underlying entity - for inheriting classes to access. protected IEntity _entity { get; } Property Value IEntity Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _entity to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, IDataModel Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, IDataModel, new() Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(DataModel, DataModel) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(DataModel item1, DataModel item2) Parameters item1 DataModel first item to compare item2 DataModel second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(DataModel, DataModel) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(DataModel item1, DataModel item2) Parameters item1 DataModel first item to compare item2 DataModel second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Models.DataModelOfItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.DataModelOfItem.html",
    "title": "Class DataModelOfItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DataModelOfItem Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Base class for plain custom data models and can be used in Razor Components. It wraps a ITypedItem and provides a simple way to access the data. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still beta, name may change to CustomModelOfItem or something\")] public abstract class DataModelOfItem : IDataModelOf<ITypedItem>, IDataModel, IEquatable<ITypedItem> Inheritance object DataModelOfItem Implements IDataModelOf<ITypedItem> IDataModel IEquatable<ITypedItem> Examples Usage ca. like this: A custom data model in AppCode.Data which inherits from this class (usually generated by 2sxc Copilot) Razor code which uses it to convert typed items into this custom data model Example trivial custom plain data model: namespace AppCode.Data { class MyPerson : CustomModelOfItem { public string Name => _item.String(\"Name\"); } } Example usage in Razor: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ var person = As<MyPerson>(MyItem); } <span>@person.Name</span> Remarks This is much lighter than the CustomItem which also wraps data, as it doesn't have any predefined properties and doesn't have the ITypedItem APIs. History Released in v19.01 (BETA) Properties _item The underlying item - for inheriting classes to access. protected ITypedItem _item { get; } Property Value ITypedItem Remarks this property is protected, not public, as it should only be used internally. this also prevents it from being serialized in JSON, which is good. it uses an unusual name _item to avoid naming conflicts with properties generated in inheriting classes. Methods AsList<T>(object, NoParamOrder, bool) Convert a list of Entities or TypedItems into a strongly typed list. Typically, the type will be from your AppCode.Data. protected IEnumerable<T> AsList<T>(object source, NoParamOrder protector = default, bool nullIfNull = false) where T : class, IDataModel Parameters source object protector NoParamOrder nullIfNull bool Returns IEnumerable<T> Type Parameters T As<T>(object) Convert an Entity or TypedItem into a strongly typed object. Typically, the type will be from your AppCode.Data. protected T As<T>(object item) where T : class, IDataModel, new() Parameters item object Returns T Type Parameters T Equals(object) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public override bool Equals(object b) Parameters b object Returns bool ToString() Override ToString to give more information about the current object public override string ToString() Returns string Operators operator ==(DataModelOfItem, DataModelOfItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator ==(DataModelOfItem item1, DataModelOfItem item2) Parameters item1 DataModelOfItem first item to compare item2 DataModelOfItem second item to compare Returns bool true, if both wrappers are the same type and wrap the same entity operator !=(DataModelOfItem, DataModelOfItem) Ensure that the equality check is done correctly. If two objects wrap the same item, they will be considered equal. public static bool operator !=(DataModelOfItem item1, DataModelOfItem item2) Parameters item1 DataModelOfItem first item to compare item2 DataModelOfItem second item to compare Returns bool false, if both wrappers are the same type and wrap the same entity"
  },
  "api/dot-net/ToSic.Sxc.Models.FileInfo.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.FileInfo.html",
    "title": "Class FileInfo | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FileInfo Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A File Entity for typed use. It defines the schema for a file as returned by the AppAssets DataSource. [PublicApi] public class FileInfo : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FileInfo Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. public string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. public FolderInfo Folder { get; } Property Value FolderInfo FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Adam.Internal.IFileEntity.Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The file name without extension. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Size The size in bytes. public int Size { get; } Property Value int SizeInfo public ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.FileModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.FileModel.html",
    "title": "Class FileModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FileModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A File Model which describes a file as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public class FileModel : DataModel, IDataModelOf<IEntity>, IDataModelForType, IDataModel, IEquatable<IEntity> Inheritance object DataModel FileModel Implements IDataModelOf<IEntity> IDataModelForType IDataModel IEquatable<IEntity> Inherited Members DataModel._entity DataModel.ToString() DataModel.As<T>(object) DataModel.AsList<T>(object, NoParamOrder, bool) DataModel.Equals(object) Remarks History Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. public string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. public FolderModel Folder { get; } Property Value FolderModel FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Models.Internal.IFileModel.Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The file name without extension. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Size The size in bytes. public int Size { get; } Property Value int SizeInfo public ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.FileTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.FileTyped.html",
    "title": "Class FileTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FileTyped Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A File Entity for typed use. It defines the schema for a file as returned by the AppAssets DataSource. [PublicApi] public class FileTyped : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FileTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. public string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. public FolderTyped Folder { get; } Property Value FolderTyped FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Adam.Internal.IFileEntity.Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The file name without extension. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Size The size in bytes. public int Size { get; } Property Value int SizeInfo public ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.FolderInfo.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.FolderInfo.html",
    "title": "Class FolderInfo | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FolderInfo Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A Folder Entity for typed use. It defines the schema for a folder as returned by the AppAssets DataSource. [PublicApi] public class FolderInfo : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FolderInfo Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Files All files in this folder. public IEnumerable<FileInfo> Files { get; } Property Value IEnumerable<FileInfo> Folder Reference to the parent folder. Returns null on the root folder. public FolderInfo Folder { get; } Property Value FolderInfo Folders All sub folders in this folder. public IEnumerable<FolderInfo> Folders { get; } Property Value IEnumerable<FolderInfo> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.FolderModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.FolderModel.html",
    "title": "Class FolderModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FolderModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A Folder Model which describes a folder as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public class FolderModel : DataModel, IDataModelOf<IEntity>, IDataModelForType, IDataModel, IEquatable<IEntity> Inheritance object DataModel FolderModel Implements IDataModelOf<IEntity> IDataModelForType IDataModel IEquatable<IEntity> Inherited Members DataModel._entity DataModel.ToString() DataModel.As<T>(object) DataModel.AsList<T>(object, NoParamOrder, bool) DataModel.Equals(object) Remarks History Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Files All files in this folder. public IEnumerable<FileModel> Files { get; } Property Value IEnumerable<FileModel> Folder Reference to the parent folder. Returns null on the root folder. public FolderModel Folder { get; } Property Value FolderModel Folders All sub folders in this folder. public IEnumerable<FolderModel> Folders { get; } Property Value IEnumerable<FolderModel> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.FolderTyped.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.FolderTyped.html",
    "title": "Class FolderTyped | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class FolderTyped Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A Folder Entity for typed use. It defines the schema for a folder as returned by the AppAssets DataSource. [PublicApi] public class FolderTyped : CustomData, ITypedItem, ITyped, IEquatable<ITypedItem> Inheritance object CustomData FolderTyped Implements ITypedItem ITyped IEquatable<ITypedItem> Inherited Members CustomData._item CustomData.ToString() CustomData.Equals(object) Remarks Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. public DateTime Created { get; } Property Value DateTime Files All files in this folder. public IEnumerable<FileTyped> Files { get; } Property Value IEnumerable<FileTyped> Folder Reference to the parent folder. Returns null on the root folder. public FolderTyped Folder { get; } Property Value FolderTyped Folders All sub folders in this folder. public IEnumerable<FolderTyped> Folders { get; } Property Value IEnumerable<FolderTyped> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name public string FullName { get; } Property Value string Modified When the file/folder was modified. public DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. public string Name { get; } Property Value string Path Starting in the App-Root public string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.IDataModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IDataModel.html",
    "title": "Interface IDataModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Interface to mark objects which can receive data such as IEntity or ITypedItem objects and wrap them, usually into a strongly typed model. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataModel Remarks Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Models.IDataModelForType.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IDataModelForType.html",
    "title": "Interface IDataModelForType | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataModelForType Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Interface to mark objects which can receive data such as IEntity or ITypedItem objects and wrap them. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataModelForType : IDataModel Remarks Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01"
  },
  "api/dot-net/ToSic.Sxc.Models.IDataModelOf-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IDataModelOf-1.html",
    "title": "Interface IDataModelOf<TContents> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataModelOf<TContents> Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Interface to mark objects which can receive ITypedItem objects and wrap them. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"may change or rename at any time\")] public interface IDataModelOf<in TContents> : IDataModel Type Parameters TContents Remarks Typical use is for custom data such as classes inheriting from CustomItem which takes an entity and then provides a strongly typed wrapper around it. History Introduced in v17.02 under a slightly different name Made visible in the docs for better understanding in v19.01 The Setup() method is still internal, as the signature may still change"
  },
  "api/dot-net/ToSic.Sxc.Models.IFileModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IFileModel.html",
    "title": "Interface IFileModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFileModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A File Model which describes a file as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public interface IFileModel : ICanWrapData Remarks History Introduced (BETA) in v19.00 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFile but still a bit different. For example, it has a Folder property which is different from the Folder property. Properties Created When the file/folder was created. DateTime Created { get; } Property Value DateTime Extension The file name extension, without any dot. Purpose is to do switching between extensions. If you want to have a safe, merged file name, just take the FullName. string Extension { get; } Property Value string Folder Reference to the folder this file is in. Returns null on the root folder. IFolderModel Folder { get; } Property Value IFolderModel FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the ToSic.Sxc.Models.Internal.IFileModelSync.Name string FullName { get; } Property Value string Modified When the file/folder was modified. DateTime Modified { get; } Property Value DateTime Name The file name without extension. string Name { get; } Property Value string Path Starting in the App-Root string Path { get; } Property Value string Size The size in bytes. int Size { get; } Property Value int SizeInfo ISizeInfo SizeInfo { get; } Property Value ISizeInfo Url The full url starting at the root of the site. Absolute but without protocol/domain. string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.IFolderModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IFolderModel.html",
    "title": "Interface IFolderModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFolderModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll A Folder Model which describes a folder as returned by the AppAssets DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still tweaking details and naming v19.0x\")] public interface IFolderModel : ICanWrapData Remarks History Introduced (BETA) in v19.01 for the AppAssets DataSource. Not to be seen as final, since we may rename this type when we also This is similar to the IFolder but still a bit different. For example, it has a Folder property. Properties Created When the file/folder was created. DateTime Created { get; } Property Value DateTime Files All files in this folder. IEnumerable<IFileModel> Files { get; } Property Value IEnumerable<IFileModel> Folder Reference to the parent folder. Returns null on the root folder. IFolderModel Folder { get; } Property Value IFolderModel Folders All sub folders in this folder. IEnumerable<IFolderModel> Folders { get; } Property Value IEnumerable<IFolderModel> FullName The full name with extension. If it's a folder or there is no extension, then it's identical to the Name string FullName { get; } Property Value string Modified When the file/folder was modified. DateTime Modified { get; } Property Value DateTime Name The folder name - or blank when it's the root. string Name { get; } Property Value string Path Starting in the App-Root string Path { get; } Property Value string Url The full url starting at the root of the site. Absolute but without protocol/domain. string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.IPageModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IPageModel.html",
    "title": "Interface IPageModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IPageModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Data Model as is returned by the Pages DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IPageModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn TabInfo Oqtane Page History Released v19.01 the previous internal implementation had a property called Visible which we finalized to IsNavigation to better clarify it purpose. the previous internal implementation had a property called Clickable which we finalized to IsClickable to better clarify it purpose. Properties Children IEnumerable<IPageModel> Children { get; } Property Value IEnumerable<IPageModel> Created The page creation date/time. In Dnn it's from TabInfo.CreatedOnDate in Oqtane it's from Page.CreatedOn DateTime Created { get; } Property Value DateTime Guid The page GUID. In Dnn it's from TabInfo.UniqueId In Oqtane it's Guid.Empty as Oqtane doesn't have page GUIDs Guid Guid { get; } Property Value Guid HasChildren Info if the page has sub-pages. In Dnn it's from TabInfo.HasChildren in Oqtane it's from Page.HasChildren bool HasChildren { get; } Property Value bool Remarks Added in v15.01 Id The page ID. In Dnn it's from TabInfo.TabID In Oqtane it's Page.PageId int Id { get; } Property Value int IsClickable Determines if this item is clickable in the menu. In Dnn it's from !TabInfo.DisableLink in Oqtane it's from Page.IsClickable bool IsClickable { get; } Property Value bool Remarks Added in v15.01 IsDeleted The page delete-status. Normally you will only see not-deleted pages, so it should usually be false. In Dnn it's from TabInfo.IsDeleted in Oqtane it's from Page.IsDeleted bool IsDeleted { get; } Property Value bool Remarks Added in v15.01 IsNavigation The page visibility - if it should be shown in the menu. In Dnn it's from TabInfo.IsVisible in Oqtane it's from Page.IsNavigation bool IsNavigation { get; } Property Value bool Level How deep this page is in the breadcrumb. The number is 1 based, so the top level is 1. In Dnn it's from TabInfo.Level (+1) in Oqtane it's from Page.Level (+1) int Level { get; } Property Value int Remarks Added in v15.01 LinkTarget WIP In Dnn it's from TabInfo.TabSettings[\"LinkNewWindow\"]and will be either _blank or `` (empty string) In Oqtane it's not implemented an will be an empty string string LinkTarget { get; } Property Value string Remarks Added in v15.02 Modified The page modification date/time. In Dnn it's from TabInfo.LastModifiedOnDate in Oqtane it's from Page.ModifiedOn DateTime Modified { get; } Property Value DateTime Name The page name. In Dnn it's from TabInfo.Name in Oqtane it's from Page.Name string Name { get; } Property Value string Order Order of this item in a menu. It is 1 based, so the first item has Order 1. In Dnn it's from TabInfo.TabOrder in Oqtane it's from Page.Order int Order { get; } Property Value int Remarks Added in v15.01 ParentId The parent page ID. It's usually 0 if it's a top level page. In Dnn it's from TabInfo.ParentId in Oqtane it's from Page.ParentId int ParentId { get; } Property Value int Path The path with slashes to this page. In Dnn it's from TabInfo.TabPath in Oqtane it's from Page.Path string Path { get; } Property Value string Title The page title. In Dnn it's from TabInfo.Title in Oqtane it's from Page.Title string Title { get; } Property Value string Url The public url to this page (without any trailing slashes) In Dnn it's from TabInf.FullUrl (last slash removed) in Oqtane it's a combination of protocol, site-alias and path string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.ISiteModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.ISiteModel.html",
    "title": "Interface ISiteModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ISiteModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Site model for entities returned by the Sites DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ISiteModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn Site Oqtane Site History Introduced in v19.01 Properties ContentAppId The Content App Id of this Site and Zone. int ContentAppId { get; } Property Value int Created The site creation date/time. In Dnn it's from PortalInfo.CreatedOnDate in Oqtane it's from Site.CreatedOn DateTime Created { get; } Property Value DateTime DefaultLanguage The site Culture Code. In Dnn it's from PortalInfo.CultureCode in Oqtane it's from Site.CultureCode string DefaultLanguage { get; } Property Value string Guid The site GUID. In Dnn it's from PortalInfo.GUID In Oqtane it's Guid.Empty as Oqtane doesn't have site GUIDs Guid Guid { get; } Property Value Guid Id The site ID. In Dnn it's from PortalInfo.PortalID In Oqtane it's Site.SiteId int Id { get; } Property Value int Languages The site languages, comma separated. Can be empty ever if a DefaultLanguage is set, if the site itself is not multi-language. string Languages { get; } Property Value string Modified The site modification date/time. In Dnn it's from PortalInfo.LastModifiedOnDate in Oqtane it's from Site.ModifiedOn DateTime Modified { get; } Property Value DateTime Name The site name. In Dnn it's from PageInfo.PortalName in Oqtane it's from Site.Name string Name { get; } Property Value string PrimaryAppId The (technical) primary App, which contains things such as site metadata. int PrimaryAppId { get; } Property Value int Url The public url to this site (without any trailing slashes) In Dnn it's from PortalAliasInfo.FullUrl (last slash removed) in Oqtane it's a combination of protocol, site-alias and path string Url { get; } Property Value string ZoneId The Zone ID, which is the ID of the 2sxc/EAV zone which applies to this site. It's usually different from the site ID, and in rare cases can be shared among multiple sites. int ZoneId { get; } Property Value int"
  },
  "api/dot-net/ToSic.Sxc.Models.IUserModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IUserModel.html",
    "title": "Interface IUserModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IUserModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll User Model for data returned by the Users DataSource or other sources. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IUserModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn UserInfo Oqtane User History Introduced in v19.01 Properties Created When the user was first created. DateTime Created { get; } Property Value DateTime Email User E-Mail Address, aka PreferredEmail string Email { get; } Property Value string Guid An optional user GUID. On systems which don't give the user a unique guid, it will be Guid.Empty. Guid Guid { get; } Property Value Guid Id User Id as int. Works in DNN and Oqtane int Id { get; } Property Value int IsAnonymous True if the user is anonymous / not logged in. bool IsAnonymous { get; } Property Value bool IsContentAdmin True if the user is a content admin / editor. If the user only has this role, then he/she can only edit pages and content, but not users. bool IsContentAdmin { get; } Property Value bool IsContentEditor Determines if the user is a content editor. In DNN 10, ContentEditors cannot publish pages (unless they are also ContentAdmins). bool IsContentEditor { get; } Property Value bool IsSiteAdmin True if the user is admin - allowing full content-management and user-management. bool IsSiteAdmin { get; } Property Value bool IsSiteDeveloper True if a user is in the SxcDesigners group. Such a person can actually do a lot more, like access the advanced toolbars. bool IsSiteDeveloper { get; } Property Value bool IsSystemAdmin True if the user has super-user rights. This kind of user can do everything, incl. create apps. bool IsSystemAdmin { get; } Property Value bool Modified When the user was last modified. DateTime Modified { get; } Property Value DateTime Name Nice name aka DisplayName. string Name { get; } Property Value string NameId string NameId { get; } Property Value string Roles Roles of the user. IEnumerable<IUserRoleModel> Roles { get; } Property Value IEnumerable<IUserRoleModel> Username UserName used for login. string Username { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.IUserRoleModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.IUserRoleModel.html",
    "title": "Interface IUserRoleModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IUserRoleModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Model to return role information as provided by the UserRoles DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IUserRoleModel : ICanWrapData Remarks For detailed documentation, check the docs of the underlying objects: Dnn RoleInfo Oqtane UserRole History Introduced in v19.01 Properties Created When the user role was first created. DateTime Created { get; } Property Value DateTime Id The Role ID in the database. int Id { get; } Property Value int Modified When the user role was last modified. DateTime Modified { get; } Property Value DateTime Name The Role Name as it is displayed everywhere. string Name { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.PageModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.PageModel.html",
    "title": "Class PageModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class PageModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Data Model as is returned by the Pages DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class PageModel : DataModel, IDataModelOf<IEntity>, IDataModel, IEquatable<IEntity> Inheritance object DataModel PageModel Implements IDataModelOf<IEntity> IDataModel IEquatable<IEntity> Inherited Members DataModel._entity DataModel.ToString() DataModel.As<T>(object) DataModel.AsList<T>(object, NoParamOrder, bool) DataModel.Equals(object) Remarks For detailed documentation, check the docs of the underlying objects: Dnn TabInfo Oqtane Page History Released v19.01 the previous internal implementation had a property called Visible which we finalized to IsNavigation to better clarify it purpose. the previous internal implementation had a property called Clickable which we finalized to IsClickable to better clarify it purpose. Properties Children public IEnumerable<PageModel> Children { get; } Property Value IEnumerable<PageModel> Created The page creation date/time. In Dnn it's from TabInfo.CreatedOnDate in Oqtane it's from Page.CreatedOn public DateTime Created { get; } Property Value DateTime Guid The page GUID. In Dnn it's from TabInfo.UniqueId In Oqtane it's Guid.Empty as Oqtane doesn't have page GUIDs public Guid Guid { get; } Property Value Guid HasChildren Info if the page has sub-pages. In Dnn it's from TabInfo.HasChildren in Oqtane it's from Page.HasChildren public bool HasChildren { get; } Property Value bool Remarks Added in v15.01 Id The page ID. In Dnn it's from TabInfo.TabID In Oqtane it's Page.PageId public int Id { get; } Property Value int IsClickable Determines if this item is clickable in the menu. In Dnn it's from !TabInfo.DisableLink in Oqtane it's from Page.IsClickable public bool IsClickable { get; } Property Value bool Remarks Added in v15.01 IsDeleted The page delete-status. Normally you will only see not-deleted pages, so it should usually be false. In Dnn it's from TabInfo.IsDeleted in Oqtane it's from Page.IsDeleted public bool IsDeleted { get; } Property Value bool Remarks Added in v15.01 IsNavigation The page visibility - if it should be shown in the menu. In Dnn it's from TabInfo.IsVisible in Oqtane it's from Page.IsNavigation public bool IsNavigation { get; } Property Value bool Level How deep this page is in the breadcrumb. The number is 1 based, so the top level is 1. In Dnn it's from TabInfo.Level (+1) in Oqtane it's from Page.Level (+1) public int Level { get; } Property Value int Remarks Added in v15.01 LinkTarget WIP In Dnn it's from TabInfo.TabSettings[\"LinkNewWindow\"]and will be either _blank or `` (empty string) In Oqtane it's not implemented an will be an empty string public string LinkTarget { get; } Property Value string Remarks Added in v15.02 Modified The page modification date/time. In Dnn it's from TabInfo.LastModifiedOnDate in Oqtane it's from Page.ModifiedOn public DateTime Modified { get; } Property Value DateTime Name The page name. In Dnn it's from TabInfo.Name in Oqtane it's from Page.Name public string Name { get; } Property Value string Order Order of this item in a menu. It is 1 based, so the first item has Order 1. In Dnn it's from TabInfo.TabOrder in Oqtane it's from Page.Order public int Order { get; } Property Value int Remarks Added in v15.01 ParentId The parent page ID. It's usually 0 if it's a top level page. In Dnn it's from TabInfo.ParentId in Oqtane it's from Page.ParentId public int ParentId { get; } Property Value int Path The path with slashes to this page. In Dnn it's from TabInfo.TabPath in Oqtane it's from Page.Path public string Path { get; } Property Value string Title The page title. In Dnn it's from TabInfo.Title in Oqtane it's from Page.Title public string Title { get; } Property Value string Url The public url to this page (without any trailing slashes) In Dnn it's from TabInf.FullUrl (last slash removed) in Oqtane it's a combination of protocol, site-alias and path public string Url { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.SiteModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.SiteModel.html",
    "title": "Class SiteModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SiteModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Site model for entities returned by the Sites DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class SiteModel : DataModel, IDataModelOf<IEntity>, IDataModel, IEquatable<IEntity> Inheritance object DataModel SiteModel Implements IDataModelOf<IEntity> IDataModel IEquatable<IEntity> Inherited Members DataModel._entity DataModel.ToString() DataModel.As<T>(object) DataModel.AsList<T>(object, NoParamOrder, bool) DataModel.Equals(object) Remarks For detailed documentation, check the docs of the underlying objects: Dnn Site Oqtane Site History Introduced in v19.01 Properties ContentAppId The Content App. public int ContentAppId { get; } Property Value int Created The site creation date/time. In Dnn it's from PortalInfo.CreatedOnDate in Oqtane it's from Site.CreatedOn public DateTime Created { get; } Property Value DateTime DefaultLanguage The site Culture Code. In Dnn it's from PortalInfo.CultureCode in Oqtane it's from Site.CultureCode public string DefaultLanguage { get; } Property Value string Guid The site GUID. In Dnn it's from PortalInfo.GUID In Oqtane it's Guid.Empty as Oqtane doesn't have site GUIDs public Guid Guid { get; } Property Value Guid Id The site ID. In Dnn it's from PortalInfo.PortalID In Oqtane it's Site.SiteId public int Id { get; } Property Value int Languages The site languages, comma separated. Can be empty ever if a ToSic.Sxc.Models.Internal.ISiteModel.DefaultLanguage is set, if the site itself is not multi-language. public string Languages { get; } Property Value string Modified The site modification date/time. In Dnn it's from PortalInfo.LastModifiedOnDate in Oqtane it's from Site.ModifiedOn public DateTime Modified { get; } Property Value DateTime Name The site name. In Dnn it's from PageInfo.PortalName in Oqtane it's from Site.Name public string Name { get; } Property Value string PrimaryAppId The (technical) primary App, which contains things such as site metadata. public int PrimaryAppId { get; } Property Value int Url The public url to this site (without any trailing slashes) In Dnn it's from PortalAliasInfo.FullUrl (last slash removed) in Oqtane it's a combination of protocol, site-alias and path public string Url { get; } Property Value string ZoneId The Zone ID, which is the ID of the 2sxc/EAV zone which applies to this site. It's usually different from the site ID, and in rare cases can be shared among multiple sites. public int ZoneId { get; } Property Value int"
  },
  "api/dot-net/ToSic.Sxc.Models.UserModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.UserModel.html",
    "title": "Class UserModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class UserModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll User Model for data returned by the Users DataSource or other sources. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class UserModel : DataModel, IDataModelOf<IEntity>, IDataModel, IEquatable<IEntity> Inheritance object DataModel UserModel Implements IDataModelOf<IEntity> IDataModel IEquatable<IEntity> Inherited Members DataModel._entity DataModel.ToString() DataModel.As<T>(object) DataModel.AsList<T>(object, NoParamOrder, bool) DataModel.Equals(object) Remarks For detailed documentation, check the docs of the underlying objects: Dnn UserInfo Oqtane User History Introduced in v19.01 Properties Created When the user was first created. public DateTime Created { get; } Property Value DateTime Email User E-Mail Address, aka PreferredEmail public string Email { get; } Property Value string Guid An optional user GUID. On systems which don't give the user a unique guid, it will be Guid.Empty. public Guid Guid { get; } Property Value Guid Id User Id as int. Works in DNN and Oqtane public int Id { get; } Property Value int IsAnonymous True if the user is anonymous / not logged in. public bool IsAnonymous { get; } Property Value bool IsContentAdmin True if the user is a content admin / editor. If the user only has this role, then he/she can only edit pages and content, but not users. public bool IsContentAdmin { get; } Property Value bool IsContentEditor Determines if the user is a content editor. In DNN 10, ContentEditors cannot publish pages (unless they are also ContentAdmins). public bool IsContentEditor { get; } Property Value bool IsSiteAdmin True if the user is admin - allowing full content-management and user-management. public bool IsSiteAdmin { get; } Property Value bool IsSiteDeveloper True if a user is in the SxcDesigners group. Such a person can actually do a lot more, like access the advanced toolbars. public bool IsSiteDeveloper { get; } Property Value bool IsSystemAdmin True if the user has super-user rights. This kind of user can do everything, incl. create apps. public bool IsSystemAdmin { get; } Property Value bool Modified When the user was last modified. public DateTime Modified { get; } Property Value DateTime Name Nice name aka DisplayName. public string Name { get; } Property Value string NameId public string NameId { get; } Property Value string Roles Roles of the user. public IEnumerable<UserRoleModel> Roles { get; } Property Value IEnumerable<UserRoleModel> Username UserName used for login. public string Username { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.UserRoleModel.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.UserRoleModel.html",
    "title": "Class UserRoleModel | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class UserRoleModel Namespace ToSic.Sxc.Models Assembly ToSic.Sxc.dll Model to return role information as provided by the UserRoles DataSource. [InternalApi_DoNotUse_MayChangeWithoutNotice] public class UserRoleModel : DataModel, IDataModelOf<IEntity>, IDataModel, IEquatable<IEntity> Inheritance object DataModel UserRoleModel Implements IDataModelOf<IEntity> IDataModel IEquatable<IEntity> Inherited Members DataModel._entity DataModel.ToString() DataModel.As<T>(object) DataModel.AsList<T>(object, NoParamOrder, bool) DataModel.Equals(object) Remarks For detailed documentation, check the docs of the underlying objects: Dnn RoleInfo Oqtane UserRole History Introduced in v19.01 Properties Created When the user role was first created. public DateTime Created { get; } Property Value DateTime Id The Role ID in the database. public int Id { get; } Property Value int Modified When the user role was last modified. public DateTime Modified { get; } Property Value DateTime Name The Role Name as it is displayed everywhere. public string Name { get; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Models.html": {
    "href": "api/dot-net/ToSic.Sxc.Models.html",
    "title": "Namespace ToSic.Sxc.Models | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Models Interfaces IUserModel User Model for data returned by the Users DataSource or other sources. IUserRoleModel Model to return role information as provided by the UserRoles DataSource."
  },
  "api/dot-net/ToSic.Sxc.Search.ICustomizeSearch.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.ICustomizeSearch.html",
    "title": "Interface ICustomizeSearch | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICustomizeSearch Namespace ToSic.Sxc.Search Assembly ToSic.Sxc.dll This interface marks custom code which views use to customize how search treats data of that view. It's meant for customizing the internal indexer of the platform, not for Google Search. To use it, create a custom code (.cs) file which implements this interface. You can also inherit from a DynamicCode base class (like Code12) if you need more functionality. [PublicApi] public interface ICustomizeSearch Remarks History: Released v12.02 Methods CustomizeSearch(Dictionary<string, List<ISearchItem>>, IModule, DateTime) Will be called by the search indexer to pre-process the results. void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters searchInfos Dictionary<string, List<ISearchItem>> Dictionary containing the streams and items in the stream for this search. moduleInfo IModule Module information with which you can find out what page it's on etc. beginDate DateTime Last time the indexer ran - because the data you will get is only what was modified since."
  },
  "api/dot-net/ToSic.Sxc.Search.ISearchItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.ISearchItem.html",
    "title": "Interface ISearchItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ISearchItem Namespace ToSic.Sxc.Search Assembly ToSic.Sxc.dll Defines an item in the search system - which is prepared by Sxc, and can be customized as needed [PublicApi] public interface ISearchItem Properties Body Contents of this item - will be indexed string Body { get; set; } Property Value string CultureCode Culture code, for language sensitive searches string CultureCode { get; set; } Property Value string Description Description in search results string Description { get; set; } Property Value string Entity The underlying data in the search IEntity Entity { get; set; } Property Value IEntity IsActive Determines if this item should appear in search or be ignored bool IsActive { get; set; } Property Value bool ModifiedTimeUtc Timestamp in GMT / UTC DateTime ModifiedTimeUtc { get; set; } Property Value DateTime QueryString Query String params to access this item string QueryString { get; set; } Property Value string Title Title in search results string Title { get; set; } Property Value string UniqueKey string UniqueKey { get; set; } Property Value string Url Url to go to, when looking at the details of this search result string Url { get; set; } Property Value string"
  },
  "api/dot-net/ToSic.Sxc.Search.SearchItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.SearchItem.html",
    "title": "Class SearchItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SearchItem Namespace ToSic.Sxc.Search Assembly ToSic.Sxc.Dnn.Core.dll A search item which is passed around before handed over to the indexing system [PublicApi] public class SearchItem : SearchDocument, ISearchItem Inheritance object SearchDocumentToDelete SearchDocument SearchItem Implements ISearchItem Properties Entity The underlying data in the search public IEntity Entity { get; set; } Property Value IEntity"
  },
  "api/dot-net/ToSic.Sxc.Search.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.html",
    "title": "Namespace ToSic.Sxc.Search | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Search The things here enable searching. They basically ensure that the CMS can ask for data to then index however the CMS wants to. Classes SearchItem A search item which is passed around before handed over to the indexing system Interfaces ICustomizeSearch This interface marks custom code which views use to customize how search treats data of that view. It's meant for customizing the internal indexer of the platform, not for Google Search. To use it, create a custom code (.cs) file which implements this interface. You can also inherit from a DynamicCode base class (like Code12) if you need more functionality. ISearchItem Defines an item in the search system - which is prepared by Sxc, and can be customized as needed"
  },
  "api/dot-net/ToSic.Sxc.Services.Cache.ICacheSpecs.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.Cache.ICacheSpecs.html",
    "title": "Interface ICacheSpecs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICacheSpecs Namespace ToSic.Sxc.Services.Cache Assembly ToSic.Sxc.dll Cache Specs contain the definition of what the cached data should depend on, how long it should be cached and how the cache key should be generated. It uses a fluent API to continue adding rules / expirations / dependencies. Internally this is then used to create a cache policy. [PublicApi] public interface ICacheSpecs Remarks Introduced as experimental in v17.09 Released in 19.01 Methods SetAbsoluteExpiration(DateTimeOffset) Set absolute expiration, alternative is sliding expiration. If neither are set, a sliding expiration of 1 hour will be used. ICacheSpecs SetAbsoluteExpiration(DateTimeOffset absoluteExpiration) Parameters absoluteExpiration DateTimeOffset Returns ICacheSpecs Remarks If neither absolute nor sliding are set, a sliding expiration of 1 hour will be used. Setting both is invalid and will throw an exception. SetSlidingExpiration(TimeSpan) Set sliding expiration, alternative is absolute expiration. ICacheSpecs SetSlidingExpiration(TimeSpan slidingExpiration) Parameters slidingExpiration TimeSpan Returns ICacheSpecs Remarks If neither absolute nor sliding are set, a sliding expiration of 1 hour will be used. Setting both is invalid and will throw an exception. VaryBy(string, int) Vary the cache by a specific name and value. All cache items where this value is the same, will be considered the same. For example, this could be a category name or something where the data for this category is always the same. ICacheSpecs VaryBy(string name, int value) Parameters name string value int Returns ICacheSpecs VaryBy(string, string, NoParamOrder, bool) Vary the cache by a specific name and value. All cache items where this value is the same, will be considered the same. For example, this could be a category name or something where the data for this category is always the same. ICacheSpecs VaryBy(string name, string value, NoParamOrder protector = default, bool caseSensitive = false) Parameters name string value string protector NoParamOrder see Convention: Named Parameters caseSensitive bool Returns ICacheSpecs VaryByModule() Vary the cache by the current module, so that each module has its own cache. ICacheSpecs VaryByModule() Returns ICacheSpecs VaryByModule(int) Vary the cache by module, so that each module has its own cache. ICacheSpecs VaryByModule(int id) Parameters id int Module id to use Returns ICacheSpecs VaryByPage() Vary the cache by the current page, so that each page has its own cache. ICacheSpecs VaryByPage() Returns ICacheSpecs VaryByPage(int) Vary the cache by page, so that each page has its own cache. By default, it will take the current page, but you can optionally specify a custom page or ID. ICacheSpecs VaryByPage(int id) Parameters id int page id to use Returns ICacheSpecs VaryByPageParameters(string, NoParamOrder, bool) Vary the cache by one or more specific page parameter, like ?category=1 or ?category=1&sort=asc. Using this method will only vary the cache by the mentioned parameters and ignore the rest. ICacheSpecs VaryByPageParameters(string names = null, NoParamOrder protector = default, bool caseSensitive = false) Parameters names string Names of one or more parameters, comma-separated. If null, all parameters are used, if \"\", no parameters are used. protector NoParamOrder see Convention: Named Parameters caseSensitive bool Determines if the value should be treated case-sensitive, default is false Returns ICacheSpecs VaryByParameters(IParameters, NoParamOrder, string, bool) Vary the cache by a custom parameters list. ICacheSpecs VaryByParameters(IParameters parameters, NoParamOrder protector = default, string names = null, bool caseSensitive = false) Parameters parameters IParameters parameters object protector NoParamOrder see Convention: Named Parameters names string Names of one or more parameters, comma-separated caseSensitive bool Determines if the value should be treated case-sensitive, default is false Returns ICacheSpecs VaryByUser() Vary the cache by current user, so that each user has its own cache. ICacheSpecs VaryByUser() Returns ICacheSpecs VaryByUser(int) Vary the cache by user, so that each user has its own cache. ICacheSpecs VaryByUser(int id) Parameters id int User id to use Returns ICacheSpecs WatchAppData(NoParamOrder) Depend on the app data, so if any data changes, the cache will be invalidated. ICacheSpecs WatchAppData(NoParamOrder protector = default) Parameters protector NoParamOrder Returns ICacheSpecs WatchAppFolder(NoParamOrder, bool?) Depend on the app folder, so if any file in the app folder changes, the cache will be invalidated. WIP! ICacheSpecs WatchAppFolder(NoParamOrder protector = default, bool? withSubfolders = null) Parameters protector NoParamOrder see Convention: Named Parameters withSubfolders bool? should it also watch subfolders? default is true Returns ICacheSpecs"
  },
  "api/dot-net/ToSic.Sxc.Services.Cache.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.Cache.html",
    "title": "Namespace ToSic.Sxc.Services.Cache | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Services.Cache Interfaces ICacheSpecs Cache Specs contain the definition of what the cached data should depend on, how long it should be cached and how the cache key should be generated. It uses a fluent API to continue adding rules / expirations / dependencies. Internally this is then used to create a cache policy."
  },
  "api/dot-net/ToSic.Sxc.Services.DnnExtensions.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.DnnExtensions.html",
    "title": "Class DnnExtensions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class DnnExtensions Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.Dnn.Core.dll Provides extension methods for DNN Skins (Themes) and Modules. It only exists on the Dnn platform, not on Oqtane. [PublicApi] public static class DnnExtensions Inheritance object DnnExtensions Remarks Created v14 Methods GetScopedService<T>() Get a service from the current HTTP Scope. This is the standalone method. public static T GetScopedService<T>() Returns T A service of type T - if it can be found. Otherwise it will throw an error. Type Parameters T Remarks This requires an HttpContext.Current to exist, so it will not work within a search controller. History Created in v14 In v15.03 added special patch so it work on 404 pages where the service provider is broken/not available GetScopedService<T>(UserControl) Helper extension method to get a scoped service on a skin/theme or module. To call it you must prefix it with this. like this.GetScopedService... public static T GetScopedService<T>(this UserControl skinOrModule) Parameters skinOrModule UserControl Returns T Type Parameters T Remarks This requires an HttpContext.Current to exist, so it will not work within a search controller. History Created in v14"
  },
  "api/dot-net/ToSic.Sxc.Services.IAdamService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IAdamService.html",
    "title": "Interface IAdamService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IAdamService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Internal: Adam Service for ADAM operations such as retrieving a single file. [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP 14.04\")] public interface IAdamService Remarks Avoid using this, as most objects will already have their ADAM properties such as File or Folder. History: Introduced as WIP in v14.04. Methods File(int) Retrieve a file by int-id (usually the ID managed by the platform) IFile File(int id) Parameters id int File ID Returns IFile The file object or null if not found or something else went wrong. File(string) Retrieve a file using the string-key such as \"file:72\" IFile File(string id) Parameters id string File ID String Returns IFile The file object or null if not found or something else went wrong. File(IField) Retrieve a file referenced in the field IFile File(IField field) Parameters field IField Returns IFile The file object or null if not found or something else went wrong. Folder(int) Provides an Adam Folder for the ID IFolder Folder(int id) Parameters id int Folder ID Returns IFolder An Adam object for navigating the assets Folder(IField) Provides an Adam Folder for this item and field IFolder Folder(IField field) Parameters field IField The Field information object for which to get the folder Returns IFolder An Adam object for navigating the assets"
  },
  "api/dot-net/ToSic.Sxc.Services.ICacheService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ICacheService.html",
    "title": "Interface ICacheService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ICacheService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Cache to help your code cache data. [PublicApi] public interface ICacheService Remarks It does quite a bit of magic, for example: scope the cache to the current App, so a key like main-list will not bleed to other apps help invalidate the cache if the app data changes vary the cache by specific parameters such as the category in the URL. vary the cache by the current user only ...and more. In most cases, you'll start by creating ICacheSpecs using a call to CreateSpecs(string, NoParamOrder, string, bool?) use a fluid API on the specs to determine what you want, like VaryByPageParameters(string, NoParamOrder, bool), VaryByUser()WatchAppData(NoParamOrder) or just set different expiry options. Then use these specs to either check if it Contains(ICacheSpecs) or use TryGet<T>(ICacheSpecs, out T) or GetOrSet<T>(ICacheSpecs, NoParamOrder, Func<T>) History Was in internal beta since v17.09 Released v19.01 Requires the SmartDataCache feature (Patron Perfectionist); if not enabled, will work without caching anything. Methods Contains(ICacheSpecs) Check if the cache contains data for the given specs. bool Contains(ICacheSpecs specs) Parameters specs ICacheSpecs Returns bool Contains<T>(ICacheSpecs) Check if the cache contains data of specified type for the given specs. bool Contains<T>(ICacheSpecs specs) Parameters specs ICacheSpecs Returns bool Type Parameters T CreateSpecs(string, NoParamOrder, string, bool?) Create cache specs for a specific key and optional segment. This is used for complex setups where the same specs will be reused for multiple operations. ICacheSpecs CreateSpecs(string key, NoParamOrder protector = default, string regionName = null, bool? shared = null) Parameters key string The main cache key (name) to use. It will be extended internally, to prevent collisions, so it can be fairly short. protector NoParamOrder see Convention: Named Parameters regionName string a cache region to segment the cache into multiple regions shared bool? If set to true it will make this key available on other apps which access the data with allApps = true. By default, each app has its own region, preventing key collisions between apps. Returns ICacheSpecs GetOrSet<T>(ICacheSpecs, NoParamOrder, Func<T>) Get or set data in the cache for the given specs, with optional generation. T GetOrSet<T>(ICacheSpecs specs, NoParamOrder protector = default, Func<T> generate = null) Parameters specs ICacheSpecs protector NoParamOrder see Convention: Named Parameters generate Func<T> Returns T Type Parameters T Get<T>(ICacheSpecs, NoParamOrder, T) Get data from the cache of the given type for the given specs, with optional fallback. T Get<T>(ICacheSpecs specs, NoParamOrder protector = default, T fallback = default) Parameters specs ICacheSpecs protector NoParamOrder see Convention: Named Parameters fallback T Returns T Type Parameters T Remove(ICacheSpecs) Remove a cache entry. object Remove(ICacheSpecs key) Parameters key ICacheSpecs Returns object The object if it was in the cache, otherwise null. Set<T>(ICacheSpecs, T, NoParamOrder) Set a value in the cache. void Set<T>(ICacheSpecs specs, T value, NoParamOrder protector = default) Parameters specs ICacheSpecs value T protector NoParamOrder see Convention: Named Parameters Type Parameters T TryGet<T>(ICacheSpecs, out T) Try to get data of the specified type from the cache for the given specs. bool TryGet<T>(ICacheSpecs specs, out T value) Parameters specs ICacheSpecs value T Returns bool true if found, false if not found Type Parameters T"
  },
  "api/dot-net/ToSic.Sxc.Services.IConvertService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IConvertService.html",
    "title": "Interface IConvertService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IConvertService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Conversion helper for things which are very common in web-code like Razor and WebAPIs. [PublicApi] public interface IConvertService Remarks It's mainly a safe conversion from anything to a target-type. Some special things it does: Strings like \"4.2\" reliably get converted to int 4 which would otherwise return 0 Numbers like 42 reliably converts to bool true which would otherwise return false Numbers like 42.5 reliably convert to strings \"42.5\" instead of \"42,5\" in certain cultures History: New in v12.05 Properties Json Sub-Service to convert JSON IJsonService Json { get; } Property Value IJsonService Methods ForCode(object) Convert any object safely to string to put into source code like HTML-attributes, inline-JavaScript or similar. This is usually used to ensure numbers, booleans and dates are in a format which works. Especially useful when giving data to a JavaScript, Json-Fragment or an Html Attribute. booleans will be true or false (not True or False) numbers will have a . notation and never a comma (like in de-DE cultures) dates will convert to ISO format without time zone string ForCode(object value) Parameters value object Returns string ForCode(object, string) Same as ForCode(object), but with fallback, in case the conversion fails. string ForCode(object value, string fallback = null) Parameters value object fallback string Returns string ToBool(object) Convert any object safely to bool. This does the same as To<T>(object) but this is easier to type in Razor. Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from System.Convert.ToBoolean(...) bool ToBool(object value) Parameters value object Returns bool ToBool(object, bool) Convert any object safely to bool, or if that fails, return the fallback value. Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from System.Convert.ToBoolean(...) bool ToBool(object value, bool fallback = false) Parameters value object fallback bool Returns bool ToDecimal(object) Convert any object safely to decimal. This does the same as To<T>(object) but this is easier to type in Razor. decimal ToDecimal(object value) Parameters value object Returns decimal ToDecimal(object, decimal) Convert any object safely to decimal, or if that fails, return the fallback value. This does the same as To<T>(object) but this is easier to type in Razor. decimal ToDecimal(object value, decimal fallback = 0) Parameters value object fallback decimal Returns decimal ToDouble(object) Convert any object safely to double. This does the same as To<T>(object) but this is easier to type in Razor. double ToDouble(object value) Parameters value object Returns double ToDouble(object, double) Convert any object safely to double, or if that fails, return the fallback value. This does the same as To<T>(object) but this is easier to type in Razor. double ToDouble(object value, double fallback = 0) Parameters value object fallback double Returns double ToFloat(object) Convert any object safely to float. This does the same as To<T>(object) but this is easier to type in Razor. Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from System.Convert.ToSingle(...) float ToFloat(object value) Parameters value object Returns float ToFloat(object, float) Convert any object safely to float, or if that fails, return the fallback value. This does the same as To<T>(object) but this is easier to type in Razor. Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from System.Convert.ToSingle(...) float ToFloat(object value, float fallback = 0) Parameters value object fallback float Returns float ToGuid(object) Convert any object safely to a Guid This does the same as To<T>(object) but this is easier to type in Razor. Guid ToGuid(object value) Parameters value object Returns Guid ToGuid(object, Guid) Convert any object safely to standard guid, or if that fails, return the fallback value. This does the same as To<T>(object) but this is easier to type in Razor. Guid ToGuid(object value, Guid fallback = default) Parameters value object fallback Guid Returns Guid ToInt(object) Convert any object safely to standard int. This does the same as To<T>(object) but this is easier to type in Razor. int ToInt(object value) Parameters value object Returns int ToInt(object, int) Convert any object safely to standard int, or if that fails, return the fallback value. This does the same as To<T>(object) but this is easier to type in Razor. int ToInt(object value, int fallback = 0) Parameters value object fallback int Returns int ToString(object) Convert any object safely to string. This does the same as To<T>(object) but this is easier to type in Razor. string ToString(object value) Parameters value object Returns string ToString(object, string, NoParamOrder, bool) Convert any object safely to string - or if that fails, return the fallback value. This does NOT do the same as To<T>(object, NoParamOrder, T). In the standard implementation would only give you the fallback, if conversion failed. But this ToString will also give you the fallback, if the result is null. string ToString(object value, string fallback = null, NoParamOrder noParamOrder = default, bool fallbackOnNull = true) Parameters value object The value to convert fallback string Fallback in case conversion fails or result is null noParamOrder NoParamOrder see Convention: Named Parameters fallbackOnNull bool Determine that nulls should also fallback, default is true Returns string To<T>(object) Convert any object safely to the desired type T. If conversion fails, it will return default(T), which is 0 for most numbers, false for boolean or null for strings or objects. T To<T>(object value) Parameters value object Returns T Type Parameters T To<T>(object, NoParamOrder, T) Convert any object safely to the desired type T. If conversion fails, it will return the fallback parameter as given. Since the fallback is typed, you can usually call this method without specifying T explicitly, so this should work: var c1 = Convert.To(\"5\", 100); // will return 5 var c2 = Convert.To(\"\", 100); // will return 100 T To<T>(object value, NoParamOrder noParamOrder = default, T fallback = default) Parameters value object noParamOrder NoParamOrder see Convention: Named Parameters fallback T The value used if conversion fails. Returns T Type Parameters T"
  },
  "api/dot-net/ToSic.Sxc.Services.IConvertService16.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IConvertService16.html",
    "title": "Interface IConvertService16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IConvertService16 Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Helper on Kit.Convert for common conversions in web-code like Razor and WebAPIs. [PublicApi] public interface IConvertService16 Remarks It's mainly a safe conversion from anything to a target-type. Some special things it does: Strings like \"4.2\" reliably get converted to int 4 which would otherwise return 0 Numbers like 42 reliably converts to bool true which would otherwise return false Numbers like 42.5 reliably convert to strings \"42.5\" instead of \"42,5\" in certain cultures History New in v16.03 Difference to IConvertService is that the param fallback must always be named Properties Json Sub-Service to convert JSON IJsonService Json { get; } Property Value IJsonService Methods ForCode(object, NoParamOrder, string) Convert any object safely to string to put into source code like HTML-attributes, inline-JavaScript or similar. This is usually used to ensure numbers, booleans and dates are in a format which works. Especially useful when giving data to a JavaScript, Json-Fragment or an Html Attribute. booleans will be true or false (not True or False) numbers will have a . notation and never a comma (like in de-DE cultures) dates will convert to ISO format without time zone Optionally also allows a fallback to use instead of the defaults above. string ForCode(object value, NoParamOrder noParamOrder = default, string fallback = null) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback string The value used if conversion fails. Defaults to null. Returns string ToBool(object, NoParamOrder, bool) Convert any object safely to bool, or if that fails, return the fallback value. Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from System.Convert.ToBoolean(...) bool ToBool(object value, NoParamOrder noParamOrder = default, bool fallback = false) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback bool The value used if conversion fails. Defaults to false. Returns bool ToDecimal(object, NoParamOrder, decimal) Convert any object safely to decimal, or if that fails, return the fallback value. This does the same as To<T>(object, NoParamOrder, T) but this is easier to type in Razor. decimal ToDecimal(object value, NoParamOrder noParamOrder = default, decimal fallback = 0) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback decimal The value used if conversion fails. Defaults to 0. Returns decimal ToDouble(object, NoParamOrder, double) Convert any object safely to double, or if that fails, return the fallback value. This does the same as To<T>(object, NoParamOrder, T) but this is easier to type in Razor. double ToDouble(object value, NoParamOrder noParamOrder = default, double fallback = 0) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback double The value used if conversion fails. Defaults to 0. Returns double ToFloat(object, NoParamOrder, float) Convert any object safely to float, or if that fails, return the fallback value. This does the same as To<T>(object, NoParamOrder, T) but this is easier to type in Razor. Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from System.Convert.ToSingle(...) float ToFloat(object value, NoParamOrder noParamOrder = default, float fallback = 0) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback float The value used if conversion fails. Defaults to 0. Returns float ToGuid(object, NoParamOrder, Guid) Convert any object safely to standard guid, or if that fails, return the fallback value. This does the same as To<T>(object, NoParamOrder, T) but this is easier to type in Razor. Guid ToGuid(object value, NoParamOrder noParamOrder = default, Guid fallback = default) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback Guid The value used if conversion fails. Defaults to Guid.Empty. Returns Guid ToInt(object, NoParamOrder, int) Convert any object safely to standard int, or if that fails, return the fallback value. This does the same as To<T>(object, NoParamOrder, T) but this is easier to type in Razor. int ToInt(object value, NoParamOrder noParamOrder = default, int fallback = 0) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback int The value used if conversion fails. Defaults to 0. Returns int ToString(object, NoParamOrder, string, bool) Convert any object safely to string - or if that fails, return the fallback value. This does NOT do the same as To<T>(object, NoParamOrder, T). In the standard implementation would only give you the fallback, if conversion failed. But this ToString will also give you the fallback, if the result is null. string ToString(object value, NoParamOrder noParamOrder = default, string fallback = null, bool fallbackOnNull = true) Parameters value object The value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback string Fallback in case conversion fails or result is null. Defaults to null. fallbackOnNull bool Determine that nulls should also fallback, default is true Returns string To<T>(object, NoParamOrder, T) Convert any object safely to the desired type. If conversion fails, it will return the fallback parameter as given, or default(T). Since the fallback is typed, you can usually call this method without specifying T explicitly, so this should work: var c1 = Convert.To(\"5\", fallback: 100); // will return 5 var c2 = Convert.To(\"\", fallback: 100); // will return 100 var c1 = Convert.To(\"\"); // will return 0 T To<T>(object value, NoParamOrder noParamOrder = default, T fallback = default) Parameters value object value to convert noParamOrder NoParamOrder see Convention: Named Parameters fallback T The value used if conversion fails. If not specified, will use default(T) Returns T Type Parameters T"
  },
  "api/dot-net/ToSic.Sxc.Services.IDataService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IDataService.html",
    "title": "Interface IDataService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDataService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Services on Kit.Data to create DataSources in Razor. [PublicApi] public interface IDataService Remarks Can also be used in external code such as Skins using Dependency Injection. New in v16.00 Methods GetAppSource(NoParamOrder, object, object) Get the App DataSource containing the App Data. The Default stream of this source has the data the current user is allowed to see. So public users won't get draft data. [PublicApi] IDataSource GetAppSource(NoParamOrder noParamOrder = default, object parameters = null, object options = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters parameters object Parameters to use - as anonymous object like new { Count = 7, Filter = 3 } options object Options how to build/construct the DataSource. Returns IDataSource GetQuery(string, NoParamOrder, IDataSourceLinkable, object) Get a Query from the current App. [PublicApi] IDataSource GetQuery(string name = null, NoParamOrder noParamOrder = default, IDataSourceLinkable attach = null, object parameters = null) Parameters name string Name of the query noParamOrder NoParamOrder see Convention: Named Parameters attach IDataSourceLinkable Attach in-stream to the query (not yet implemented) parameters object Parameters to use - as anonymous object like new { Count = 7, Filter = 3 } Returns IDataSource Remarks New 16.01 GetSource(NoParamOrder, string, IDataSourceLinkable, object, object, bool?) Create a DataSource object using it's name. This is only meant for dynamically compiled DataSources which are part of the current App - a new feature in v15.10+. For any other DataSources, use the overload which specifies the type. [PublicApi] IDataSource GetSource(NoParamOrder noParamOrder = default, string name = null, IDataSourceLinkable attach = null, object parameters = null, object options = null, bool? debug = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters name string The name of the DataSource type, which matches the file name and class in the /DataSources/ folder. attach IDataSourceLinkable Link to one or more other DataSources / streams to attach upon creation. parameters object Parameters to use - as anonymous object like new { Count = 7, Filter = 3 } options object Options how to build/construct the DataSource. debug bool? Determines if exceptions should be shown. Default is only for Developers. Returns IDataSource Remarks new v16.00 GetSource<T>(NoParamOrder, IDataSourceLinkable, object, object) Create a DataSource object using it's type. This is the new, preferred way to get DataSources in v15.06+. [PublicApi] T GetSource<T>(NoParamOrder noParamOrder = default, IDataSourceLinkable attach = null, object parameters = null, object options = null) where T : IDataSource Parameters noParamOrder NoParamOrder see Convention: Named Parameters attach IDataSourceLinkable Link to one or more other DataSources / streams to attach upon creation. parameters object Parameters to use - as anonymous object like new { Count = 7, Filter = 3 } options object Options how to build/construct the DataSource. Returns T Type Parameters T The type of DataSource, usually from ToSic.Eav.DataSources or ToSic.Sxc.DataSources Remarks new v16.00"
  },
  "api/dot-net/ToSic.Sxc.Services.IDynamicCodeService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IDynamicCodeService.html",
    "title": "Interface IDynamicCodeService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IDynamicCodeService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll This is a service to give you DynamicCode outside 2sxc. [PublicApi] public interface IDynamicCodeService Remarks Use this to access 2sxc data from a Theme, a .ascx WebControl or anywhere else. History New in v13.02 This is meant to replace the ToSic.Sxc.Dnn.Factory. Please use this from now on. Methods App(NoParamOrder, int?, int?, ISite, bool?) Get a rich IApp object for a specific App. This is the simplest way to work with data of this App, but won't give you commands like AsDynamic(...) IApp App(NoParamOrder noParamOrder = default, int? zoneId = null, int? appId = null, ISite site = null, bool? withUnpublished = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters zoneId int? The ZoneId of the App (optional) appId int? The AppId - REQUIRED site ISite Site information for further context (optional) withUnpublished bool? Determines if the App.Data gives you unpublished data (like in admin-mode) or just published data. If not set, will default to user permissions. Returns IApp An initialized App object which you can use to access App.Data AppOfSite() Get a rich IApp object for the primary (aka Site) App of the current Site/Portal and using permissions of the current user. This is the simplest way to work with data of this App, but won't give you commands like AsDynamic(...). For more control, use the AppOfSite with parameters. IApp AppOfSite() Returns IApp AppOfSite(NoParamOrder, int?, ISite, bool?) Get a rich IApp object for the primary (aka Site) App. This is the simplest way to work with data of this App, but won't give you commands like AsDynamic(...) IApp AppOfSite(NoParamOrder noParamOrder = default, int? siteId = null, ISite site = null, bool? withUnpublished = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters siteId int? The SiteId which is the PortalId in DNN. Optional - without it, the current Site / Portal is used. site ISite Site information for further context (optional) withUnpublished bool? Determines if the App.Data gives you unpublished data (like in admin-mode) or just published data. If not set, will default to user permissions. Returns IApp An initialized App object which you can use to access App.Data OfApp(int) Get a ToSic.Sxc.Code.Internal.IDynamicCode12 object for a specific App. This is the simplest way to work with Dynamic Code for this App. Note that this is without Page/Module context, so there will be no useful Content object on the dynamic code. IDynamicCode12 OfApp(int appId) Parameters appId int The AppId Returns IDynamicCode12 The dynamic code object for this App OfApp(int, int) Get a ToSic.Sxc.Code.Internal.IDynamicCode12 object for a specific App. This is the simplest way to work with Dynamic Code for this App. Note that this is without Page/Module context, so there will be no useful Content object on the dynamic code. IDynamicCode12 OfApp(int zoneId, int appId) Parameters zoneId int The ZoneId of the App appId int The AppId Returns IDynamicCode12 The dynamic code object for this App OfApp(IAppIdentity) Get a ToSic.Sxc.Code.Internal.IDynamicCode12 object for a specific App. This is the simplest way to work with Dynamic Code for this App. Note that this is without Page/Module context, so there will be no useful Content object on the dynamic code. IDynamicCode12 OfApp(IAppIdentity appIdentity) Parameters appIdentity IAppIdentity The App Identifier Returns IDynamicCode12 The dynamic code object for this App OfModule(int, int) Get a ToSic.Sxc.Code.Internal.IDynamicCode12 object for a specific Module on a page IDynamicCode12 OfModule(int pageId, int moduleId) Parameters pageId int moduleId int Returns IDynamicCode12 OfSite() Get a ToSic.Sxc.Code.Internal.IDynamicCode12 object for the primary App of the current Site/Portal. IDynamicCode12 OfSite() Returns IDynamicCode12 OfSite(int) Get a ToSic.Sxc.Code.Internal.IDynamicCode12 object for a specific Site/Portal. IDynamicCode12 OfSite(int siteId) Parameters siteId int Returns IDynamicCode12"
  },
  "api/dot-net/ToSic.Sxc.Services.IEditService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IEditService.html",
    "title": "Interface IEditService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IEditService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Edit with status and commands to configure the in-page editing system. [PublicApi] public interface IEditService : IHasLog Inherited Members IHasLog.Log Remarks You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called Edit. History First version created ca. v2 - originally as ToSic.Sxc.Web.IInPageEditEditingHelper Moved to ToSic.Sxc.Services.IEditService in v13.05 Properties Enabled If editing is enabled or not bool Enabled { get; set; } Property Value bool True if enabled, false if not. Methods Attribute(string, object) Generate an HTML attribute by converting the value to JSON but only in edit mode IRawHtmlString Attribute(string name, object value) Parameters name string the attribute name, used for ...= value object the attribute value, used for =\"...\" Returns IRawHtmlString A string but as HtmlString, so it can be used with @Attribute(...) Attribute(string, string) Generate an HTML attribute by converting the value to JSON but only in edit mode IRawHtmlString Attribute(string name, string value) Parameters name string the attribute name, used for ...= value string the attribute value, used for =\"...\" Returns IRawHtmlString A string but as HtmlString, so it can be used with @Attribute(...) ContextAttributes(ICanBeEntity, NoParamOrder, string, string, Guid?, string, int) Get html-attributes to mark the current context these will be added to a wrapper tag (usually a div) so that in-page editing knows what the context is Please read more about Inner Content (Content Within Other Content) IRawHtmlString ContextAttributes(ICanBeEntity target, NoParamOrder noParamOrder = default, string field = null, string contentType = null, Guid? newGuid = null, string apps = null, int max = 100) Parameters target ICanBeEntity The content-item for which the new context should be. This item usually has a field which has Inner Content (Content Within Other Content) noParamOrder NoParamOrder see Convention: Named Parameters field string the field of this content-item, which contains the inner-content-items contentType string type name used for 'new' items in a toolbar - usually for inner-content and list-contexts newGuid Guid? the guid of a new item - use null for auto-generate apps string Restrict the apps which can be added to this placeholder max int Limit the amount of content-blocks that can be added to this placeholder Returns IRawHtmlString An ToSic.Razor.Markup.IRawHtmlString object containing an html-attribute to add to the wrapper of the inner content Remarks History Introduced in 2sxc 8.4 Enhanced with apps and max in 10.27 Enhanced to return IRawHtmlString instead of IHybridHtmlString in 16.02 Enable(NoParamOrder, bool?, bool?, bool?, bool?, bool?, bool?) Ensure that the UI will load the correct assets to enable editing. See Method in C# Razor (Deprecated) string Enable(NoParamOrder noParamOrder = default, bool? js = null, bool? api = null, bool? forms = null, bool? context = null, bool? autoToolbar = null, bool? styles = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters js bool? optional, default false. automatically true if api or forms is true Will add the basic JS APIs ($2sxc) usually for enabling WebApi calls from your JS code. added in v10.20 api bool? optional, default false. automatically true, if forms is true If JS etc. should be included to enable editing API - ensures JavaScripts are loaded enabling commands to run forms bool? optional, default false. Ensures JavaScripts are loaded enabling forms to open context bool? optional, default false. If context (In-Page Editing Context (technical)) should be added, to ensure in-instance data editing autoToolbar bool? optional, default false. Disables the automatic generation of a toolbar (this is important, as there usually won't be a toolbar in public pages, which would then trigger the fallback-toolbar to be generated) styles bool? optional, default false. Ensures styles to be loaded, which would be necessary for the standard toolbars to look right Returns string null - but we wanted to make sure it returns something, so you can use it in razor like @Edit.Enable(...) Remarks History Introduced in 2sxc 9.30 Enhanced with parameter jsApi in 10.20 Being deprecated in 12.02, as you should now use the IPageService instead for most of these features TagToolbar(object, NoParamOrder, string, string, object, object, object, object) Generate a toolbar attribute inside an html-tag See also @HowTo.Razor.Edit.Toolbar IRawHtmlString TagToolbar(object target = null, NoParamOrder noParamOrder = default, string actions = null, string contentType = null, object condition = null, object prefill = null, object settings = null, object toolbar = null) Parameters target object The optional content-item this toolbar is for. Can be null. Usually a Dynamic Entity Objects or a Entity Objects If the first parameter is a IToolbarBuilder then all other parameters will be ignored. noParamOrder NoParamOrder see Convention: Named Parameters actions string List of actions on this toolbar. If null, will use default actions for this item. If provided, must be comma-separated action-names - see CMS Commands in JavaScript. contentType string Content-type of this toolbar, used when it has new or add buttons. This allows you to create a button for a new \"Category\" and another button for a new \"BlogPost\" etc. condition object Condition will make that no toolbar is created, if it's 0, false or \"false\" prefill object Allows a new dialog to receive values as a prefill. For example to already specify a date, title, category, etc. It's a dynamic object, see also the JS documentation on the prefill. settings object Toolbar settings controlling hover etc. See Toolbar Settings toolbar object Full manual toolbar configuration. Setting this will cause actions to be ignored. See In-Page Edit-Item Toolbars and Buttons If the the toolbar is a IToolbarBuilder then other parameters except for the target will be ignored. Returns IRawHtmlString If the user is an editor, it returns the attribute containing all the toolbar configuration. Remarks History Added in 2sxc 9.40 condition added in 2sxc 12.05 option to just use a ToolbarBuilder as first parameter or toolbar parameter added in v13 - this will skip all other parameters Enhanced to return IRawHtmlString instead of IHybridHtmlString in 16.02 Toolbar(object, NoParamOrder, string, string, object, object, object, object) Generate a toolbar tag - must be used in normal html, not as an attribute. See also and Methods in Razor / .net IRawHtmlString Toolbar(object target = null, NoParamOrder noParamOrder = default, string actions = null, string contentType = null, object condition = null, object prefill = null, object settings = null, object toolbar = null) Parameters target object The content-item this toolbar is for, can be null. Usually a Dynamic Entity Objects or a Entity Objects If the first parameter is a IToolbarBuilder then all other parameters will be ignored. noParamOrder NoParamOrder see Convention: Named Parameters actions string List of actions on this toolbar. If null, will use default actions for this item. If provided, must be comma-separated action-names - see CMS Commands in JavaScript. contentType string Content-type of this toolbar, used when it has new or add buttons. This allows you to create a button for a new \"Category\" and another button for a new \"BlogPost\" etc. condition object Condition will make that no toolbar is created, if it's 0, false or \"false\" prefill object Allows a new dialog to receive values as a prefill. For example to already specify a date, title, category, etc. It's a dynamic object, see also the JS documentation on the prefill. settings object Toolbar settings controlling hover etc. See Toolbar Settings toolbar object Full manual toolbar configuration. Setting this will cause actions to be ignored. See In-Page Edit-Item Toolbars and Buttons If the the toolbar is a IToolbarBuilder then other parameters except for the target will be ignored. Returns IRawHtmlString If the user is an editor, it returns HTML UL tag containing all the toolbar configuration. Remarks History Added in 2sxc 8.04 condition added in 2sxc 12.05 option to just use a ToolbarBuilder as first parameter or toolbar parameter added in v13 - this will skip all other parameters Enhanced to return IRawHtmlString instead of IHybridHtmlString in 16.02"
  },
  "api/dot-net/ToSic.Sxc.Services.IFeaturesService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IFeaturesService.html",
    "title": "Interface IFeaturesService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IFeaturesService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Feature to let your code find out what system features are currently enabled/disabled in the environment. [PublicApi] public interface IFeaturesService : IHasLog, ICanDebug Inherited Members IHasLog.Log ICanDebug.Debug Remarks It's important to detect if the admin must activate certain features to let your code do it's work. This replaces the older static Features accessor - please only use this from now on. History: Added this implementation in 13.01 Methods IsEnabled(params string[]) Checks if a list of features are enabled, in case you need many features to be activated. bool IsEnabled(params string[] nameIds) Parameters nameIds string[] one or many name IDs - can also be the guids (as string) Returns bool true if all features are enabled, false if any one of them is not Remarks Added in v13.01"
  },
  "api/dot-net/ToSic.Sxc.Services.IImageService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IImageService.html",
    "title": "Interface IImageService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IImageService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Image to help create responsive img and picture tags the best possible way. This service helps you generate advanced HTML for responsive / resized images. Tip We suggest you read the Image Guide for maximum power! \uD83D\uDCD4 Images Guide (Best Practices & Code) [PublicApi] public interface IImageService : ICanDebug Inherited Members ICanDebug.Debug Remarks History: Released 2sxc 13.10 Methods Img(object, object, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, string, string, string, object, object, object) Get a Responsive Image object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @img or you can work with sub-properties as specified in the IResponsiveImage IResponsiveImage Img(object link = null, object settings = null, NoParamOrder noParamOrder = default, Func<ITweakMedia, ITweakMedia> tweak = null, object factor = null, object width = null, string imgAlt = null, string imgAltFallback = null, string imgClass = null, object imgAttributes = null, object toolbar = null, object recipe = null) Parameters link object What should be in this, can be: a string url, in which case it would be used if url is not specified a IField in which case it would be used if field is not specified settings object The name of a settings configuration, like \"Content\", \"Screen\", \"Square\", etc. A standardized Image-Settings object like Settings.Images.Content - see https://go.2sxc.org/settings Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) A IResizeSettings object containing all settings created using ResizeSettings noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakMedia, ITweakMedia> Tweak API to configure everything (new v18.03). This is recommended above using parameter names and all newer parameters will only be available on this. Note that tweak will be executed after applying other parameters. factor object An optional multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. width object An optional, fixed width of the image imgAlt string Optional alt attribute on the created img tag for SEO etc. If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves. If you want to provide a fallback value (in case the metadata has no alt), use imgAltFallback. imgAltFallback string Optional alt attribute which is only used if the imgAlt or the alt-text in the metadata are empty. new in v15 imgClass string Optional class attribute on the created img tag imgAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) toolbar object Provide a custom toolbar or false to not show a toolbar recipe object Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns IResponsiveImage A ResponsiveImage object which can be rendered directly. See Responsive Images API in .net Remarks Added in 2sxc 13.03 toolbar added in v16.04 tweak added in 18.03 Picture(object, object, NoParamOrder, Func<ITweakMedia, ITweakMedia>, object, object, string, string, string, object, string, object, object, object) Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @pic or you can work with sub-properties as specified in the IResponsivePicture. Important: This call only allows you to set the most common parameters factor and width. For other parameters like height, aspectRatio, quality etc. create Settings Settings(object, NoParamOrder, Func<ITweakResize, ITweakResize>, object, object, object, object, string, string, string, object, string, object) and pass them in. IResponsivePicture Picture(object link = null, object settings = null, NoParamOrder noParamOrder = default, Func<ITweakMedia, ITweakMedia> tweak = null, object factor = null, object width = null, string imgAlt = null, string imgAltFallback = null, string imgClass = null, object imgAttributes = null, string pictureClass = null, object pictureAttributes = null, object toolbar = null, object recipe = null) Parameters link object What should be in this, can be: a string url, in which case it would be used if url is not specified a IField in which case it would be used if field is not specified a IFile (new 16.03) settings object The name of a settings configuration, like \"Content\", \"Screen\", \"Square\", etc. A standardized Image-Settings object like Settings.Images.Content - see https://go.2sxc.org/settings Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) A IResizeSettings object containing all settings created using ResizeSettings noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakMedia, ITweakMedia> Tweak API to configure everything (new v18.03). This is recommended above using parameter names and all newer parameters will only be available on this. Note that tweak will be executed after applying other parameters. factor object An optional multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. width object An optional, fixed width of the image imgAlt string Optional alt attribute on the created img tag for SEO etc. If supplied, it takes precedence to the alt-description in the image metadata which the editor added themselves. If you want to provide a fallback value (in case the metadata has no alt), use imgAltFallback imgAltFallback string Optional alt attribute which is only used if the imgAlt or the alt-text in the metadata are empty. new in v15 imgClass string Optional class attribute on the created img tag imgAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) pictureClass string Optional class attribute on the created picture tag pictureAttributes object Optional additional attributes - as anonymous object like new { style = \"padding: 10px\" } or Dictionary (new 16.07) toolbar object Provide a custom toolbar or false to not show a toolbar recipe object Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns IResponsivePicture A ResponsivePicture object which can be rendered directly. See Responsive Images API in .net Remarks Added in v13.03 Extended in v16.03 to also support IFile toolbar added in v16.04 imgAttributes, picClass and picAttributes added in 16.07 tweak added in 18.03 Recipe(string) Recipe Recipe(string variants) Parameters variants string Returns Recipe Recipe(Recipe, NoParamOrder, string, int, string, IDictionary<string, object>, IEnumerable<Recipe>, bool?, bool?, string, string, string) Recipe Recipe(Recipe recipe, NoParamOrder noParamOrder = default, string name = null, int width = 0, string variants = null, IDictionary<string, object> attributes = null, IEnumerable<Recipe> recipes = null, bool? setWidth = null, bool? setHeight = null, string forTag = null, string forFactor = null, string forCss = null) Parameters recipe Recipe noParamOrder NoParamOrder name string width int variants string attributes IDictionary<string, object> recipes IEnumerable<Recipe> setWidth bool? setHeight bool? forTag string forFactor string forCss string Returns Recipe Settings(object, NoParamOrder, Func<ITweakResize, ITweakResize>, object, object, object, object, string, string, string, object, string, object) Construct custom Resize-Settings as needed, either based on existing settings or starting from scratch IResizeSettings Settings(object settings = null, NoParamOrder noParamOrder = default, Func<ITweakResize, ITweakResize> tweak = null, object factor = null, object width = null, object height = null, object quality = null, string resizeMode = null, string scaleMode = null, string format = null, object aspectRatio = null, string parameters = null, object recipe = null) Parameters settings object A standardized Image-Settings object like Settings.Images.Content used as a template - see https://go.2sxc.org/settings The string name of a template settings , like \"Content\" or \"Screen\" a bool true/false - if true, the normal \"Content\" configuration is used as a template, if false, no initial configuration is used Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) Or a specially prepared IResizeSettings object containing all settings. noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakResize, ITweakResize> Tweak API to configure everything (new v18.03). This is recommended above using parameter names and all newer parameters will only be available on this. Note that tweak will be executed after applying other parameters. factor object A multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. width object Optional width parameter. Cannot be used if factor is set. Usually takes the default from the settings. height object Optional height parameter. Can only be 0 if factor is set, no not specify a height. Usually takes the default from the settings. quality object Optional quality parameter. Usually takes the default from the settings. resizeMode string Optional resize-mode, like crop or max. Usually takes the default from the settings. scaleMode string Optional scale-mode to allow up-scaling images like up or both. Usually takes the default from the settings. format string Optional file format like jpg or png aspectRatio object Aspect Ratio width/height, only relevant if a factor is supplied. Usually takes default from the settings or is ignored. parameters string the parameters either as id=47&name=daniel (Dnn also supports /id/47/name/daniel) it can also be an IParameters recipe object WIP - not ready yet Returns IResizeSettings A settings object which has all the parameters as configured Remarks Added in v13.03 Tweak added in v18.03"
  },
  "api/dot-net/ToSic.Sxc.Services.IJsonService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IJsonService.html",
    "title": "Interface IJsonService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IJsonService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Json to serialize/restore JSON. [PublicApi] public interface IJsonService Remarks It works for 2sxc/EAV data but can be used for any data which can be serialized/deserialized. Since it's a data-operation, we keep it in this namespace, even if most other things in this namespace are 2sxc-data objects. Important This is simple object-string conversion. It doesn't change entity objects to be serializable. For that you should use the IConvertToEavLight which returns an object that can then be serialized. Internally it uses System.Text.Json and preserves the case of keys. History Introduced in 2sxc 12.05. Methods ToJson(object) Convert an object to JSON. If you need to add the JSON to HTML of a page, make sure you also use Html.Raw(...), otherwise it will be encoded and not usable in JavaScript. string ToJson(object item) Parameters item object The object to serialize Returns string ToJson(object, int) Convert an object to JSON - using nicer output / indentation. If you need to add the JSON to HTML of a page, make sure you also use Html.Raw(...), otherwise it will be encoded and not usable in JavaScript. string ToJson(object item, int indentation) Parameters item object The object to serialize indentation int How much to indent the json - we recommend 4. As of now, it will always use 4, no matter what you set (see remarks) Returns string Remarks Added in 2sxc 12.11 But as of 2sxc 12.11 we're still using an old Newtonsoft, so we cannot really control the indentation depth. If you call this, it will always indent using 4 spaces. In a future release we'll probably use a newer Newtonsoft with which we can then use the indentation as needed. ToObject(string) Convert a json to an anonymous object. This is a very technical thing to do, so only use it if you know why you're doing this. object ToObject(string json) Parameters json string Returns object ToTyped(string, NoParamOrder, string, bool?) Creates a ITyped object from a json string. Important This only works on json strings which return an object. If you pass in a simple json such as 27 or \"hello\" or an array like [1, 2, 3] it will throw an error. For arrays, use ToTypedList(string, NoParamOrder, string, bool?). [PublicApi] ITyped ToTyped(string json, NoParamOrder noParamOrder = default, string fallback = null, bool? propsRequired = null) Parameters json string The string containing json noParamOrder NoParamOrder see Convention: Named Parameters fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. propsRequired bool? make the resulting object strict, default true Returns ITyped A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks New in 16.02 ToTypedList(string, NoParamOrder, string, bool?) Creates a list of ITyped wrappers around an json string containing an array of objects. Important This only works on json strings which return an object. If you pass in a simple json such as 27 or \"hello\" or an array like [1, 2, 3] it will throw an error. For arrays, use ToTypedList(string, NoParamOrder, string, bool?). IEnumerable<ITyped> ToTypedList(string json, NoParamOrder noParamOrder = default, string fallback = null, bool? propsRequired = null) Parameters json string The string containing json noParamOrder NoParamOrder see Convention: Named Parameters fallback string Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. propsRequired bool? make the resulting object strict, default true Returns IEnumerable<ITyped> A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks New in 16.04 To<T>(string) Convert a JSON to a typed object. T To<T>(string json) Parameters json string Returns T Type Parameters T"
  },
  "api/dot-net/ToSic.Sxc.Services.IKeyService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IKeyService.html",
    "title": "Interface IKeyService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IKeyService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Key to generate module/block level unique keys. [PublicApi] public interface IKeyService Remarks Rarely used, as the RazorTyped has a UniqueKey property which comes from this service. You only need this service, if you need to create combined keys (like with an entity). History: Introduced v16.04 Properties UniqueKey A unique, random key for the current module. It's recommended for giving DOM elements a unique id for scripts to then access them. It's generated for every content-block, and more reliable than Module.Id since that sometimes results in duplicate keys, if the many blocks are used inside each other. It's generated using a GUID and converted/shortened. In the current version it's 8 characters long, so it has 10^14 combinations, making collisions extremely unlikely. (currently 8 characters) Tip To get a unique key which is based on additional objects such as Entities, use the UniqueKeyWith(params object[]) method. string UniqueKey { get; } Property Value string Remarks If you get a fresh IKeyService it will also create a new UniqueKey. So your code should usually use the built-in property UniqueKey which comes from the shared ServiceKit Key. Methods UniqueKeyWith(params object[]) Generate a unique key based on the UniqueKey and additional objects. It has a special mechanisms for creating unique keys for specific data types such as entities, so calling this multiple times with the same objects will still result in the same key being generated. Special behaviors: Strings will use the HashCode Entities and similar will use a shortened unique string based on the GUID Assets (files, folders) will use the HashCode of their Url Dates are converted to a safe string and trimmed for all trailing zeros Most key parts will receive a simple prefix making debugging easier string UniqueKeyWith(params object[] partners) Parameters partners object[] Returns string"
  },
  "api/dot-net/ToSic.Sxc.Services.ILinkService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ILinkService.html",
    "title": "Interface ILinkService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ILinkService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Helper on Kit.Link to create links to pages, APIs and images. [PublicApi] public interface ILinkService : ICanDebug Inherited Members ICanDebug.Debug Remarks It is usually also available as a Link object in every Razor and WebApi file. This helps create links to: Pages APIs Images As well as create base-tag links (important for SPAs) You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called Link. History Created ca. v2 as ToSic.Sxc.Web.ILinkHelper Moved to this new Services.ILinkService in v13.05. The previous name will continue to work, but newer features will be missing on that interface. Methods Base() A base url for the current page, for use in html-base tags string Base() Returns string Image(string, object, object, NoParamOrder, IField, object, object, object, string, string, string, object, string, object) Generate an Image-Resizing link base on presets or custom parameters. It will also ensure that the final url is safe, so it will encode umlauts, spaces etc. Note that you can basically just use presets, or set every parameter manually. All params are optional. Some combinations are not valid - like setting a factor and a width doesn't make sense and will throw an error Most parameters if set to 0 will cause a reset so that this aspect is not in the URL string Image(string url = null, object settings = null, object factor = null, NoParamOrder noParamOrder = default, IField field = null, object width = null, object height = null, object quality = null, string resizeMode = null, string scaleMode = null, string format = null, object aspectRatio = null, string type = null, object parameters = null) Parameters url string The image url. Use an empty string if you want to just get the params for re-use. settings object A settings name such as \"Content\", \"Lightbox\" etc. (new 17.06) A standardized Image-Settings object like Settings.Images.Content - see https://go.2sxc.org/settings An anonymous objects with properties such as width, height, quality, resizeMode, scaleMode, format, aspectRatio etc. like new { width = 100, height = 100 } (new v19.03.03) Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) Or a specially prepared IResizeSettings object containing all settings. If this is provided, only factor will still be respected, all other settings like width on this command will be ignored. factor object A multiplier, usually used to create urls which resize to a part of the default content-size. Like 0.5. noParamOrder NoParamOrder see Convention: Named Parameters field IField WIP v13.04 - not final yet width object Optional width parameter. Usually takes the default from the settings. height object Optional height parameter. Usually takes the default from the settings. quality object Optional quality parameter. Usually takes the default from the settings. resizeMode string Optional resize-mode, like crop or max. Usually takes the default from the settings. scaleMode string Optional scale-mode to allow up-scaling images like up or both. Usually takes the default from the settings. format string Optional file format like jpg or png aspectRatio object Aspect Ratio width/height, only relevant if a width is supplied. Can't be used together with height. Usually takes default from the settings or is ignored. type string Optional type changes how the link is generated. Possible values are: null / not specified / empty = return link as is generated \"full\" return link with protocol and domain. If that was missing before, it will add current protocol/domain if possible, but not on relative ./ or ../ links \"//\" return link with //domain. If that was missing before, will add current domain if possible, but not on relative ./ or ../ links parameters object the parameters either as id=47&name=daniel (Dnn also supports /id/47/name/daniel) in 2sxc 12.05+ it can also be an IParameters Returns string Remarks Usually a factor is applied to create a link which is possibly 50% of the content-width or similar. In these cases the height is not applied but the aspectRatio is used, which usually comes from settings if any were provided. History New in 2sxc 12.03 type added ca. v12.08 Option to use IResizeSettings added in v13.03 factor originally didn't influence width/height if provided here, updated it v13.03 to influence that as well field being added in 13.04, not ready yet settings enhanced to also support simple anonymous objects in v19.03.03 To(NoParamOrder, int?, string, object, string, string) returns a link to the current page with parameters resolved in a way that DNN wants it string To(NoParamOrder noParamOrder = default, int? pageId = null, string api = null, object parameters = null, string type = null, string language = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters pageId int? optional page ID (TabId) - if not supplied, will use current page api string optional api url \"api/name/method?id=something\" parameters object the parameters either as id=47&name=daniel (Dnn also supports /id/47/name/daniel) in 2sxc 12.05+ it can also be an IParameters type string Optional type changes how the link is generated. Possible values are: null / not specified / empty = return link as is generated \"full\" return link with protocol and domain. If that was missing before, it will add current protocol/domain if possible, but not on relative ./ or ../ links \"//\" return link with //domain. If that was missing before, will add current domain if possible, but not on relative ./ or ../ links language string If not set, null or empty \"\" will use the specified pageId (pageIds can be language specific); api would always be the current language If set to \"current\" will adjust pageId to use the language of the current language. API will be as before, as it was already current future (not implemented yet) \"primary\" would link to primary language future (not implemented yet) \"en\" or \"en-us\" would link to that specific language (page and API) Returns string Remarks History v12 added the api parameter for liking APIs of the current app In v12.05 the type of parameters was changed from string to object, to allow IParameters as well In v13.02 introduced language with \"current\""
  },
  "api/dot-net/ToSic.Sxc.Services.IMailService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IMailService.html",
    "title": "Interface IMailService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IMailService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Mail to send mail messages cross-platform. [PublicApi] public interface IMailService Remarks History: New in 2sxc 12.05 Methods Create(NoParamOrder, object, object, object, object, object, string, string, bool?, Encoding, object) Quickly create a MailMessage object for further modification and then sending using Send(MailMessage) If you don't want to modify the resulting object, skip this and use the direct-send method. MailMessage Create(NoParamOrder noParamOrder = default, object from = null, object to = null, object cc = null, object bcc = null, object replyTo = null, string subject = null, string body = null, bool? isHtml = null, Encoding encoding = null, object attachments = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters from object sender e-mail address in one of the following formats An e-mail string like \"info@somwhere.com\" An e-mail with name and address like \"iJungleboy <ijungleboy@2sxc.org>\" A single System.Net.Mail.MailAddress object to object Main recipient(s) of the mail in one of the following formats all the formats as available in from a CSV of such addresses like \"info@a.com, info@b.com\" An Array/List/IEnumerable of such strings An Array/List/IEnumerable of System.Net.Mail.MailAddress objects cc object CC recipient(s) of the mail, in the same format as to bcc object BCC recipient(s) of the mail, in the same format as to replyTo object ReplyTo address(es) in the same format as to subject string The main subject body string The body / contents of the e-mail - can be text or HTML isHtml bool? Set the body to be HTML - if not set, will auto-detect encoding Encoding Encoding of subject and body - if not set, will default to UTF8. If you need different encodings on subject and body, set it on the resulting object. attachments object One or more attachments to include. Could be any of the following A System.Net.Mail.Attachment object An IFile or an IFile object An Array/IEnumerable of these Returns MailMessage The newly created MailMessage object Send(MailMessage) Send a .net MailMessage object using the settings configured in Dnn or Oqtane. void Send(MailMessage message) Parameters message MailMessage A prepared .net MailMessage object Send(NoParamOrder, object, object, object, object, object, string, string, bool?, Encoding, object) Quickly create and send an E-Mail. void Send(NoParamOrder noParamOrder = default, object from = null, object to = null, object cc = null, object bcc = null, object replyTo = null, string subject = null, string body = null, bool? isHtml = null, Encoding encoding = null, object attachments = null) Parameters noParamOrder NoParamOrder see Convention: Named Parameters from object sender e-mail address in one of the following formats An e-mail string like \"info@somwhere.com\" An e-mail with name and address like \"iJungleboy <ijungleboy@2sxc.org>\" A single System.Net.Mail.MailAddress object to object Main recipient(s) of the mail in one of the following formats all the formats as available in from a CSV of such addresses like \"info@a.com, info@b.com\" An Array/List/IEnumerable of such strings An Array/List/IEnumerable of System.Net.Mail.MailAddress objects cc object CC recipient(s) of the mail, in the same format as to bcc object BCC recipient(s) of the mail, in the same format as to replyTo object ReplyTo address(es) in the same format as to subject string The main subject body string The body / contents of the e-mail - can be text or HTML isHtml bool? Set the body to be HTML - if not set, will auto-detect encoding Encoding Encoding of subject and body - if not set, will default to UTF8. If you need different encodings on subject and body, set it on the resulting object. attachments object One or more attachments to include. Could be any of the following A System.Net.Mail.Attachment object An IFile or an IFile object An Array/IEnumerable of these"
  },
  "api/dot-net/ToSic.Sxc.Services.IPageService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IPageService.html",
    "title": "Interface IPageService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IPageService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Page to make changes to the page - usually from Razor. [PublicApi] public interface IPageService Remarks History Introduced in v12.02 but on another namespace which still works for compatibility Moved to ToSic.Sxc.Services in v13 Added ability to use placeholder [original] in v13.11 Most commands were updated to return an empty string in v14.02 so that they could be used as inline razor (previously void) Methods Activate(params string[]) Activate a feature on this page, such as turnOn, 2sxc.JsCore etc. For list of features, see Page Service to Activate Features & WebResources (JS, CSS, etc.). string Activate(params string[] keys) Parameters keys string[] One or more strings containing Page-Feature keys Returns string Empty string, so it can be used on inline razor such as @Kit.Page.Activate(...) Activate(NoParamOrder, bool, params string[]) Activate a feature on this page, such as turnOn, 2sxc.JsCore etc. For list of features, see Page Service to Activate Features & WebResources (JS, CSS, etc.). string Activate(NoParamOrder noParamOrder = default, bool condition = true, params string[] features) Parameters noParamOrder NoParamOrder see Convention: Named Parameters condition bool Condition to determine if activation should happen features string[] One or more strings containing Page-Feature keys Returns string Empty string, so it can be used on inline razor such as @Kit.Page.Activate(...) Remarks This overload with condition added in v15.03 AddCsp(string, params string[]) Add a CSP rule where you also specify the name. Best check the CSP Guide. For an example, see Coded CSP string AddCsp(string name, params string[] values) Parameters name string values string[] Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddCsp(...) AddIcon(string, NoParamOrder, string, int, string) Add an Icon header tag to the Page. string AddIcon(string path, NoParamOrder noParamOrder = default, string rel = \"\", int size = 0, string type = null) Parameters path string Path to the image/icon file noParamOrder NoParamOrder see Convention: Named Parameters rel string the rel-text, default is 'icon'. common terms are also 'shortcut icon' or 'apple-touch-icon' size int Will be used in size='#x#' tag; only relevant if you want to provide multiple separate sizes type string An optional type. If not provided, will be auto-detected from known types or remain empty Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddIcon(...) AddIconSet(string, NoParamOrder, object, IEnumerable<string>, IEnumerable<int>) Add a set of icons to the page string AddIconSet(string path, NoParamOrder noParamOrder = default, object favicon = null, IEnumerable<string> rels = null, IEnumerable<int> sizes = null) Parameters path string Path to the image/icon file noParamOrder NoParamOrder see Convention: Named Parameters favicon object path to favicon, default is '/favicon.ico' rels IEnumerable<string> sizes IEnumerable<int> Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddIconSet(...) AddJsonLd(object) Add a JSON-LD header according https://developers.google.com/search/docs/guides/intro-structured-data string AddJsonLd(object jsonObject) Parameters jsonObject object A object which will be converted to JSON. We recommend using dictionaries to build the object. Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddJsonLd(...) AddJsonLd(string) Add a JSON-LD header according https://developers.google.com/search/docs/guides/intro-structured-data string AddJsonLd(string jsonString) Parameters jsonString string A prepared JSON string Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddJsonLd(...) AddMeta(string, string) Add a standard meta header tag. You may also want to use AddOpenGraph(string, string) or AddJsonLd(string) string AddMeta(string name, string content) Parameters name string content string Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddMeta(...) AddOpenGraph(string, string) Add an open-graph header according to http://ogp.me/ string AddOpenGraph(string property, string content) Parameters property string Open Graph property name, like title or image:width. 'og:' is automatically prefixed if not included content string value of this property Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddOpenGraph(...) AddToHead(string) Add a tag to the header of the page Will simply not do anything if an error occurs, like if the page object doesn't exist string AddToHead(string tag) Parameters tag string Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddToHead(...) AddToHead(IHtmlTag) Add a RazorBlade Tag to the headers of the page Will simply not do anything if an error occurs, like if the page object doesn't exist string AddToHead(IHtmlTag tag) Parameters tag IHtmlTag Returns string Empty string, so it can be used on inline razor such as @Kit.Page.AddToHead(...) AssetAttributes(NoParamOrder, bool, int, string, bool) Add common html attributes to a script or link tag to enable optimizations and automatically whitelist in the Content Security Policy IRawHtmlString AssetAttributes(NoParamOrder noParamOrder = default, bool optimize = true, int priority = 0, string position = null, bool whitelist = true) Parameters noParamOrder NoParamOrder see Convention: Named Parameters optimize bool Activate optimize, default is true priority int Optional priority of optimization. Must be more than 100 to have an effect. position string Optional position of the resource (head, body, bottom) whitelist bool Automatically add to CSP-whitelist. This uses a random key to protect against XSS. Returns IRawHtmlString The asset attributes in a format which will be preserved in HTML Remarks History: Created in 2sxc 13.10 SetBase(string) Add a standard base header tag or replace it if one is already provided. string SetBase(string url = null) Parameters url string the optional url for the base tag - if null, will try to default to the real url for the current page Returns string Empty string, so it can be used on inline razor such as @Kit.Page.SetBase(...) SetDescription(string, string) Set the Page Description. It will either try to replace the placeholder (second parameter) or prefix it to the existing description (unless [original] is given). See also the details with placeholder or [original] as explained on SetTitle(string, string) string SetDescription(string value, string placeholder = null) Parameters value string placeholder string Returns string Empty string, so it can be used on inline razor such as @Kit.Page.SetDescription(...) SetHttpStatus(int, string) Set the page status code if possible (it will work in DNN, but probably not in Oqtane) string SetHttpStatus(int statusCode, string message = null) Parameters statusCode int An HTTP status code like 404 message string Message / Description text (optional) which would be included in the header Returns string Empty string, so it can be used on inline razor such as @Kit.Page.SetHttpStatus(...) SetKeywords(string, string) Set the Page Keywords. It will either try to replace the placeholder (second parameter) or prefix it to the existing keywords (unless [original] is given). See also the details with placeholder or [original] as explained on SetTitle(string, string) string SetKeywords(string value, string placeholder = null) Parameters value string placeholder string Returns string Empty string, so it can be used on inline razor such as @Kit.Page.SetKeywords(...) SetTitle(string, string) Set the Page Title. Behavior: By default it will prefix the new title - SetTitle('My New Title - ') = My New Title - Blog - 2sxc.org You can also use the new [original] token like SetTitle('[original] - My New Title') = Blog - 2sxc.org - My New Title You can add a placeholder to the page-title and tell SetTitle what it is. SetTitle('My New Title', '2sxc.org') = Blog - My New Title` string SetTitle(string value, string placeholder = null) Parameters value string placeholder string Returns string Empty string, so it can be used on inline razor such as @Kit.Page.SetTitle(...) TurnOn(object, NoParamOrder, object, object, IEnumerable<object>, bool, bool?, string) Turn on some javascript code when all requirements have been met. Uses turnOn. Will automatically activate the feature and set hidden data on the page for the turnOn JS to pick up. string TurnOn(object runOrSpecs, NoParamOrder noParamOrder = default, object require = null, object data = null, IEnumerable<object> args = null, bool condition = true, bool? noDuplicates = null, string addContext = null) Parameters runOrSpecs object either a run string like window.myObject.myJs() (must always start with window) or an object containing all the parameters which turnOn requires noParamOrder NoParamOrder see Convention: Named Parameters require object optional One or more requirements which must be met before the code starts. Can be one or many values and/or functions. a string such as window.myObject or window.myObject.readyToStart() an array of such strings data object optional any value such as a string, or an object - to pass into the run-command args IEnumerable<dynamic> optional array of values to pass to the run function (new v18.00) condition bool optional condition when this should happen - if false, it won't add anything (new v16.02) noDuplicates bool? Will not add this turnOn if an identical one is already added to the page (new 16.05) addContext string optional when args is used, the context is usually not needed or given. If you do need it, it can be merged with data (if that's also provided and is an object - so use data) or added to the end of the args list end. (new v18.00) Returns string An empty string, just so you can use it directly in Razor like @Kit.Page.TurnOn(\"...\") Remarks Added in v15.x condition added in 16.02 noDuplicates added in 16.05 args and addContext added in v18.0"
  },
  "api/dot-net/ToSic.Sxc.Services.IRenderService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IRenderService.html",
    "title": "Interface IRenderService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IRenderService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Render to rendering blocks and delivering HTML for the output. [PublicApi] public interface IRenderService Remarks It's used for InnerContent, so that Razor-Code can easily render additional content blocks. You can also use it inside Skins/Themes to render content-blocks. See also Inner Content (Content Within Other Content) This replaces the now obsolete ToSic.Sxc.Blocks.Render History Introduced in v12.05 but on another namespace which still works for compatibility Moved to ToSic.Sxc.Services in v13 Methods All(ICanBeItem, NoParamOrder, string, string, int, string) Render content-blocks into a larger html-block containing placeholders IRawHtmlString All(ICanBeItem parent, NoParamOrder noParamOrder = default, string field = null, string apps = null, int max = 100, string merge = null) Parameters parent ICanBeItem The parent-item containing the content-blocks and providing edit-context noParamOrder NoParamOrder see Convention: Named Parameters field string Required: Field containing the content-blocks. apps string BETA / WIP max int BETA / WIP merge string Optional: html-text containing special placeholders. Returns IRawHtmlString Remarks Changed result object to IRawHtmlString in v16.02 from IHybridHtmlString Module(int, int, NoParamOrder, object) Get a 2sxc module rendered directly. IRenderResult Module(int pageId, int moduleId, NoParamOrder noParamOrder = default, object data = null) Parameters pageId int moduleId int noParamOrder NoParamOrder see Convention: Named Parameters data object Data to give the Razor as DynamicModel - new 15.07 Returns IRenderResult An HTML-String which can be added to the output directly. The object also has additional information like assets or page changes, which are not applied when using this render command. Remarks New in 2sxc 13.02 One(ICanBeItem, NoParamOrder, ICanBeEntity, object, string, Guid?) Render one content block This is accessed through DynamicEntity.Render() At the moment it MUST stay internal, as it's not clear what API we want to surface IRawHtmlString One(ICanBeItem parent, NoParamOrder noParamOrder = default, ICanBeEntity item = null, object data = null, string field = null, Guid? newGuid = null) Parameters parent ICanBeItem The parent-item containing the content-blocks and providing edit-context noParamOrder NoParamOrder see Convention: Named Parameters item ICanBeEntity The content-block item to render. Optional, by default the same item is used as the context. data object Data to give the Razor as DynamicModel - new 15.07 field string Optional: newGuid Guid? Internal: this is the guid given to the item when being created in this block. Important for the inner-content functionality to work. Returns IRawHtmlString Remarks Changed result object to IRawHtmlString in v16.02 from IHybridHtmlString"
  },
  "api/dot-net/ToSic.Sxc.Services.ISecureDataService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ISecureDataService.html",
    "title": "Interface ISecureDataService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ISecureDataService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.SecureData to work with secure / encrypted data. [PublicApi] public interface ISecureDataService : IHasLog, ICanDebug Inherited Members IHasLog.Log ICanDebug.Debug Remarks History Added in 2sxc 12.05 Methods HashSha256(string) Hash a value using SHA256, using a FIPS compliant provider. string HashSha256(string value) Parameters value string value to hash, null will be treated as empty string Returns string the hash as a ??? Remarks Added v17.08 HashSha512(string) Hash a value using SHA512, using a FIPS compliant provider. string HashSha512(string value) Parameters value string value to hash, null will be treated as empty string Returns string the hash as a ??? Remarks Added v17.08 Parse(string) Read an input value and return a secure data object. This will contain the readable value and additional information if it was encrypted or not, etc. ISecureData<string> Parse(string value) Parameters value string Returns ISecureData<string>"
  },
  "api/dot-net/ToSic.Sxc.Services.ISystemLogService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ISystemLogService.html",
    "title": "Interface ISystemLogService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ISystemLogService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.SystemLog to add messages to the global (system) log in any platform Dnn/Oqtane. [PublicApi] public interface ISystemLogService Remarks As of now this service is still very simple, later we may add methods like Warn() or Error() but let's wait and see what's needed Methods Add(string, string) Add a general message to the log. void Add(string title, string message) Parameters title string message string"
  },
  "api/dot-net/ToSic.Sxc.Services.ITemplateService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ITemplateService.html",
    "title": "Interface ITemplateService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITemplateService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Template to help parse token-based templates. [PublicApi] public interface ITemplateService Remarks Released in 18.03 Methods CreateSource(string, IDictionary<string, string>) Create a source based on a dictionary. Lookup will be case-insensitive. ILookUp CreateSource(string name, IDictionary<string, string> values) Parameters name string The source name, basically the first part of the token eg: [Name:Value] values IDictionary<string, string> Returns ILookUp CreateSource(string, Func<string, string, string>) Create a source using a function, basically a very custom source. This variant has 2 string parameters - the key and the format-string. ILookUp CreateSource(string name, Func<string, string, string> getter) Parameters name string The source name, basically the first part of the token eg: [Name:Value] getter Func<string, string, string> Returns ILookUp CreateSource(string, Func<string, string>) Create a source using a function, basically a very custom source. ILookUp CreateSource(string name, Func<string, string> getter) Parameters name string The source name, basically the first part of the token eg: [Name:Value] getter Func<string, string> The function which uses the key to retrieve a value. It will be case-sensitive/-insensitive based on your code. Returns ILookUp CreateSource(string, ICanBeEntity, NoParamOrder, string[]) Create a source using an entity (or entity-like thing such as an ITypedItem) as the source. ILookUp CreateSource(string name, ICanBeEntity item, NoParamOrder protector = default, string[] dimensions = null) Parameters name string The source name, basically the first part of the token eg: [Name:Value] item ICanBeEntity An IEntity, ITypedItem or similar object. protector NoParamOrder see Convention: Named Parameters dimensions string[] optional array of languages to use when looking for the value - if the data is multi-language. Default to current languages. Returns ILookUp CreateSource(string, ILookUp) Create a source based on another source. This is mainly used to give a source another name. ILookUp CreateSource(string name, ILookUp original) Parameters name string The source name, basically the first part of the token eg: [Name:Value] original ILookUp Returns ILookUp Default(NoParamOrder, IEnumerable<ILookUp>) Start with the default engine, which already has lookups for QueryString and similar sources. ITemplateEngine Default(NoParamOrder protector = default, IEnumerable<ILookUp> sources = null) Parameters protector NoParamOrder see Convention: Named Parameters sources IEnumerable<ILookUp> optional additional sources Returns ITemplateEngine Empty(NoParamOrder, IEnumerable<ILookUp>) Start with an empty engine. This usually only makes sense, if you provide custom sources. ITemplateEngine Empty(NoParamOrder protector = default, IEnumerable<ILookUp> sources = null) Parameters protector NoParamOrder see Convention: Named Parameters sources IEnumerable<ILookUp> optional sources, but without them this engine won't do much Returns ITemplateEngine GetSource(string) Get a built-in source by name. This is usually used when you want to create a template-engine with some specific sources, and you explicitly need for example the QueryString source as well. ILookUp GetSource(string name) Parameters name string Returns ILookUp The source if found, otherwise null MergeSources(string, IEnumerable<ILookUp>) Merge multiple sources into one. ILookUp MergeSources(string name, IEnumerable<ILookUp> sources) Parameters name string sources IEnumerable<ILookUp> Returns ILookUp Remarks Added v17.09 Parse(string, NoParamOrder, bool, IEnumerable<ILookUp>) Quick parse a template using the default engine, and optional sources. string Parse(string template, NoParamOrder protector = default, bool allowHtml = false, IEnumerable<ILookUp> sources = null) Parameters template string protector NoParamOrder allowHtml bool sources IEnumerable<ILookUp> Returns string"
  },
  "api/dot-net/ToSic.Sxc.Services.IToolbarService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IToolbarService.html",
    "title": "Interface IToolbarService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IToolbarService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.Toolbar to generate edit toolbars in the front-end. You will typically do something like this: var customTlb = Kit.Toolbar.Empty().Edit(Content); <div @customTlb> </div> The all the main commands such as Empty(...), Default(...), Metadata(...) will give you a IToolbarBuilder. With this, you can then chain additional commands to create the desired configuration. [PublicApi] public interface IToolbarService Remarks It's especially useful custom and/or complex rules like Metadata-buttons. History uses the Convention: Functional API (Immutable) Added in 2sxc 13 parameter target added to Default() and Empty() in v14.03 Methods Default(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object) Build a Toolbar configuration using the default template/buttons to use with @Edit.Toolbar It's a fluid API, so the returned object can be extended with further Add(...) or special helpers to quickly create complex configurations. For guidance what to give it, also check out the toolbar docs. IToolbarBuilder Default(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, object prefill = null) Parameters target object optional entity-like target, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters (new v16.02) ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide Returns IToolbarBuilder Remarks History Added in 2sxc 13 target, ui, parameters added in v14.04 Edit(object, NoParamOrder, Func<ITweakButton, ITweakButton>) Build an empty Toolbar with a Edit button. This is the same as .Empty().Edit(...) IToolbarBuilder Edit(object target, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null) Parameters target object The target object which should receive metadata. Must support IHasMetadata noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters (new v16.02) Returns IToolbarBuilder An toolbar builder with empty configuration and just this button on it Remarks History Added in 2sxc 17 Empty(object, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object) Build a Toolbar configuration using the empty toolbar to use with @Edit.Toolbar It's a fluid API, so the returned object can be extended with further Add(...) or special helpers to quickly create complex configurations. For guidance what to give it, also check out the toolbar docs. IToolbarBuilder Empty(object target = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, object prefill = null) Parameters target object optional entity-like target, see target guide noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters (new v16.02) ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide Returns IToolbarBuilder Remarks History Added in 2sxc 13 target, ui, parameters added in v14.04 Metadata(object, string, NoParamOrder, Func<ITweakButton, ITweakButton>, object, object, object, string) Build an empty Toolbar with a Metadata button. This is the same as .Empty().Metadata(...) IToolbarBuilder Metadata(object target, string contentTypes = null, NoParamOrder noParamOrder = default, Func<ITweakButton, ITweakButton> tweak = null, object ui = null, object parameters = null, object prefill = null, string context = null) Parameters target object The target object which should receive metadata. Must support IHasMetadata contentTypes string Name of one or more content-types for which to generate the button(s). For many, use comma , to separate. If not specified, will try to lookup config (v14) noParamOrder NoParamOrder see Convention: Named Parameters tweak Func<ITweakButton, ITweakButton> Functional Tweak API to modify UI and parameters (new v16.02) ui object optional configuration how to show, see ui guide parameters object optional parameters for the command, see parameters guide prefill object optional prefill for the edit-UI, see prefill guide context string EXPERIMENTAL - not final Returns IToolbarBuilder An toolbar builder with empty configuration and just this button on it Remarks History Added in 2sxc 13 contentTypes changed from one to many in v14 contentTypes can also have * or YourCustomType,* in v14 contentTypes can also be optional, in which case it behaves as if it was * in v14 - if no config is found, it will not add a metadata-button parameter context added in 2sxc 14 - still WIP/experimental"
  },
  "api/dot-net/ToSic.Sxc.Services.IUserService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IUserService.html",
    "title": "Interface IUserService | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface IUserService Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Service on Kit.User to get users and roles of the platform. [PublicApi] public interface IUserService Remarks History: Released in 19.02 after being internal since 15.03. Methods GetRoles() Get all user roles. IEnumerable<IUserRoleModel> GetRoles() Returns IEnumerable<IUserRoleModel> GetUser(int) Get a user by id. IUserModel GetUser(int id) Parameters id int the user id Returns IUserModel If found, a user model containing the user specs. If not found, a user model containing the unknown user specs. GetUser(string) Get a user by nameId. IUserModel GetUser(string nameId) Parameters nameId string The nameID which is the identity token like dnn:42. Returns IUserModel If found, a user model containing the user specs. If not found, a user model containing the unknown user specs. GetUsers() Get all users. IEnumerable<IUserModel> GetUsers() Returns IEnumerable<IUserModel>"
  },
  "api/dot-net/ToSic.Sxc.Services.ServiceKit14.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ServiceKit14.html",
    "title": "Class ServiceKit14 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ServiceKit14 Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Default ServiceKit for 2sxc v14. Provided in Razor and WebApi as Kit. This is the recommended Kit of services. for base classes of 2sxc 14. This means that the object has many properties such as Page, which will generate the corresponding service like IPageService to quickly use common services. To use them in Razor, you'll do things like: @Kit.Page.Activate(\"fancybox3\") [PublicApi] public class ServiceKit14 : ServiceKit, IHasLog, ICanDebug Inheritance object ServiceBase ServiceForDynamicCode ServiceKit ServiceKit14 Implements IHasLog ICanDebug Remarks History: Added v14.04 Properties Adam The ADAM Service, used to retrieve files and maybe more. public IAdamService Adam { get; } Property Value IAdamService Convert The Convert Service, used to convert any kind of data type to another data type public IConvertService Convert { get; } Property Value IConvertService Css The Koi CSS Service, used to detect the current CSS framework and other features. See ICss public ICss Css { get; } Property Value ICss Data The Data service to get DataSources and similar. public IDataService Data { get; } Property Value IDataService Remarks added in v15.06 Edit The Edit service, same as the main Edit service public IEditService Edit { get; } Property Value IEditService Feature The Features service, used to check if features are enabled public IFeaturesService Feature { get; } Property Value IFeaturesService HtmlTags The Razor Blade 4 HtmlTags service, to fluidly create Tags. See . Important This is similar but different to the Razor.Blade.Tag. The Razor Blade IHtmlTag objects returned here are immutable. This means that chained commands like ...HtmlTags.Div().Id(...).Class(...) all return new objects and don't modify the previous one. The older Tag helper created mutable objects where chaining always modified the original and returned it again. public IHtmlTagsService HtmlTags { get; } Property Value IHtmlTagsService Remarks Added in v15 Image The Images service, used to create img and picture tags public IImageService Image { get; } Property Value IImageService Json The JSON service, used to convert data to-and-from JSON public IJsonService Json { get; } Property Value IJsonService Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Mail The Mail service, used to send mails public IMailService Mail { get; } Property Value IMailService Page The Page service, used to set headers, activate features etc. public IPageService Page { get; } Property Value IPageService Render The Render service, used to render one or more dynamic content within other content public IRenderService Render { get; } Property Value IRenderService Scrub The Razor-Blade Scrub service, used to clean up HTML. See Razor Blade IScrub Service public IScrub Scrub { get; } Property Value IScrub SecureData The Secure Data service - mainly for reading / decrypting secrets. public ISecureDataService SecureData { get; } Property Value ISecureDataService SystemLog The System Log service, used to add log messages to the system (Dnn/Oqtane) public ISystemLogService SystemLog { get; } Property Value ISystemLogService Toolbar The toolbar service, used to generate advanced toolbars public IToolbarService Toolbar { get; } Property Value IToolbarService"
  },
  "api/dot-net/ToSic.Sxc.Services.ServiceKit16.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ServiceKit16.html",
    "title": "Class ServiceKit16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ServiceKit16 Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Default ServiceKit for 2sxc v16. Provided in Razor and WebApi as Kit. [PublicApi] public class ServiceKit16 : ServiceKit, IHasLog, ICanDebug Inheritance object ServiceBase ServiceForDynamicCode ServiceKit ServiceKit16 Implements IHasLog ICanDebug Remarks This is the service kit you get on Hybrid.RazorTyped, AppCode.Razor.AppRazor or Hybrid.ApiTyped. History New in v16 for Typed Razor / WebApi Added Key service in v16.04 Added Template service in v18.00 Added Cache service in v19.00 Added User service in v19.02 Properties Adam The ADAM Service, used to retrieve files and maybe more. public IAdamService Adam { get; } Property Value IAdamService Cache Cache service, used to cache data. public ICacheService Cache { get; } Property Value ICacheService Remarks Used to cache data, specifically to ensure it is refreshed when certain events happen, such as data in the App changes. History: introduced in v19.00 Convert The Convert Service, used to convert any kind of data type to another data type public IConvertService16 Convert { get; } Property Value IConvertService16 Css The Koi CSS Service, used to detect the current CSS framework and other features. See ICss public ICss Css { get; } Property Value ICss Data The Data service to get DataSources and similar. public IDataService Data { get; } Property Value IDataService Remarks added in v15.06 Edit The Edit service, same as the main Edit service public IEditService Edit { get; } Property Value IEditService Feature The Features service, used to check if features are enabled public IFeaturesService Feature { get; } Property Value IFeaturesService HtmlTags The Razor Blade 4 HtmlTags service, to fluidly create Tags. See . Important This is similar but different to the Razor.Blade.Tag. The Razor Blade IHtmlTag objects returned here are immutable. This means that chained commands like ...HtmlTags.Div().Id(...).Class(...) all return new objects and don't modify the previous one. The older Tag helper created mutable objects where chaining always modified the original and returned it again. public IHtmlTagsService HtmlTags { get; } Property Value IHtmlTagsService Remarks Added in v15 Image The Images service, used to create img and picture tags public IImageService Image { get; } Property Value IImageService Json The JSON service, used to convert data to-and-from JSON public IJsonService Json { get; } Property Value IJsonService Key Key service. Rarely used, as the RazorTyped has a UniqueKey property which comes from this service. You only need this service, if you need to create combined keys (like with an entity) public IKeyService Key { get; } Property Value IKeyService Remarks New in v16.04 Link Link helper object to create the correct links public ILinkService Link { get; } Property Value ILinkService A ILinkService object. Mail The Mail service, used to send mails public IMailService Mail { get; } Property Value IMailService Page The Page service, used to set headers, activate features etc. public IPageService Page { get; } Property Value IPageService Render The Render service, used to render one or more dynamic content within other content public IRenderService Render { get; } Property Value IRenderService Scrub The Razor-Blade Scrub service, used to clean up HTML. See Razor Blade IScrub Service public IScrub Scrub { get; } Property Value IScrub SecureData The Secure Data service - mainly for reading / decrypting secrets. public ISecureDataService SecureData { get; } Property Value ISecureDataService SystemLog The System Log service, used to add log messages to the system (Dnn/Oqtane) public ISystemLogService SystemLog { get; } Property Value ISystemLogService Template Templates service, which can parse strings containing placeholders. public ITemplateService Template { get; } Property Value ITemplateService Remarks History: introduced in v18.00 Toolbar The toolbar service, used to generate advanced toolbars public IToolbarService Toolbar { get; } Property Value IToolbarService User The User service, used to get user and role information. public IUserService User { get; } Property Value IUserService Remarks History: released in 19.02 (started in v15.03 but was never public)"
  },
  "api/dot-net/ToSic.Sxc.Services.ServiceKitLight16.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ServiceKitLight16.html",
    "title": "Class ServiceKitLight16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ServiceKitLight16 Namespace ToSic.Sxc.Services Assembly ToSic.Sxc.dll Lightweight ServiceKit for 2sxc v16. Provided in custom data sources as Kit. [PublicApi] public class ServiceKitLight16 : ServiceBase, IHasLog Inheritance object ServiceBase ServiceKitLight16 Implements IHasLog Remarks It's primarily used in dynamic code which runs standalone, without a module context. Example: Custom DataSources can run anywhere without actually being inside a module or content-block. In such scenarios, certain services like the IPageService would not be able to perform any real work. History: Added v15.06 - still WIP Constructors ServiceKitLight16(IServiceProvider) Lightweight ServiceKit for 2sxc v16. Provided in custom data sources as Kit. public ServiceKitLight16(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Remarks It's primarily used in dynamic code which runs standalone, without a module context. Example: Custom DataSources can run anywhere without actually being inside a module or content-block. In such scenarios, certain services like the IPageService would not be able to perform any real work. History: Added v15.06 - still WIP Properties Convert The Convert Service, used to convert any kind of data type to another data type public IConvertService Convert { get; } Property Value IConvertService Data The Data service to get DataSources and similar. public IDataService Data { get; } Property Value IDataService Remarks added in v15.06 Feature The Features service, used to check if features are enabled public IFeaturesService Feature { get; } Property Value IFeaturesService HtmlTags The Razor Blade 4 HtmlTags service, to fluidly create Tags. See . Important This is similar but different to the Razor.Blade.Tag. The Razor Blade IHtmlTag objects returned here are immutable. This means that chained commands like ...HtmlTags.Div().Id(...).Class(...) all return new objects and don't modify the previous one. The older Tag helper created mutable objects where chaining always modified the original and returned it again. public IHtmlTagsService HtmlTags { get; } Property Value IHtmlTagsService Remarks Added in v15 Json The JSON service, used to convert data to-and-from JSON public IJsonService Json { get; } Property Value IJsonService Scrub The Razor-Blade Scrub service, used to clean up HTML. See Razor Blade IScrub Service public IScrub Scrub { get; } Property Value IScrub SecureData The Secure Data service - mainly for reading / decrypting secrets. public ISecureDataService SecureData { get; } Property Value ISecureDataService SystemLog The System Log service, used to add log messages to the system (Dnn/Oqtane) public ISystemLogService SystemLog { get; } Property Value ISystemLogService"
  },
  "api/dot-net/ToSic.Sxc.Services.Template.ITemplateEngine.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.Template.ITemplateEngine.html",
    "title": "Interface ITemplateEngine | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITemplateEngine Namespace ToSic.Sxc.Services.Template Assembly ToSic.Sxc.dll Engine which parses a template containing placeholders and replaces them with values from sources. [PublicApi] public interface ITemplateEngine Remarks Released in 18.03 Methods GetSources(NoParamOrder, int) Get a list of underlying sources, mainly for debugging. IEnumerable<ILookUp> GetSources(NoParamOrder protector = default, int depth = 0) Parameters protector NoParamOrder depth int Returns IEnumerable<ILookUp> Parse(string) Basic Parse functionality. This is the variant without parameters, which should be used in basic cases and also for passing into function calls, like into CMS HTML Tweaks. string Parse(string template) Parameters template string Returns string Parse(string, NoParamOrder, bool, IEnumerable<ILookUp>) string Parse(string template, NoParamOrder protector = default, bool allowHtml = false, IEnumerable<ILookUp> sources = null) Parameters template string protector NoParamOrder allowHtml bool sources IEnumerable<ILookUp> Returns string"
  },
  "api/dot-net/ToSic.Sxc.Services.Template.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.Template.html",
    "title": "Namespace ToSic.Sxc.Services.Template | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Services.Template Interfaces ITemplateEngine Engine which parses a template containing placeholders and replaces them with values from sources."
  },
  "api/dot-net/ToSic.Sxc.Services.Tweaks.ITweakInput-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.Tweaks.ITweakInput-1.html",
    "title": "Interface ITweakInput<TInput> | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ITweakInput<TInput> Namespace ToSic.Sxc.Services.Tweaks Assembly ToSic.Sxc.dll Tweak API to reconfigure a value pre-processing in a service / method call. Whatever code you write, always assume that this interface can be replaced with another name which will then provide more tweaks. So never use the interface-name in your code. [PublicApi] public interface ITweakInput<TInput> Type Parameters TInput Remarks Added in v17 Methods Input(Func<TInput, TInput>, NoParamOrder) Simple value tweak, to inject a different value for use instead of the original. ITweakInput<TInput> Input(Func<TInput, TInput> func, NoParamOrder protector = default) Parameters func Func<TInput, TInput> function to generate a replacement value, but first providing the initial value protector NoParamOrder see Convention: Named Parameters Returns ITweakInput<TInput> Input(Func<TInput>, NoParamOrder) Simple value tweak, to inject a different value for use instead of the original. ITweakInput<TInput> Input(Func<TInput> func, NoParamOrder protector = default) Parameters func Func<TInput> function to generate a replacement value protector NoParamOrder see Convention: Named Parameters Returns ITweakInput<TInput> Input(TInput, NoParamOrder) Simple value tweak, to inject a different value for use instead of the original. ITweakInput<TInput> Input(TInput replace, NoParamOrder protector = default) Parameters replace TInput replacement value to use instead protector NoParamOrder see Convention: Named Parameters Returns ITweakInput<TInput>"
  },
  "api/dot-net/ToSic.Sxc.Services.Tweaks.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.Tweaks.html",
    "title": "Namespace ToSic.Sxc.Services.Tweaks | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Services.Tweaks Interfaces ITweakInput<TInput> Tweak API to reconfigure a value pre-processing in a service / method call. Whatever code you write, always assume that this interface can be replaced with another name which will then provide more tweaks. So never use the interface-name in your code."
  },
  "api/dot-net/ToSic.Sxc.Services.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.html",
    "title": "Namespace ToSic.Sxc.Services | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.Services The Services are the most common helpers / tools used in Razor and WebAPI C#. Quick Use with @Kit.SomeServiceName Most services are available on the Kit object on your Razor or WebApi file. This requires the use of v14 base classes, such as Razor14. Manual Use with GetService<T> You will usually get a service using the GetService<T>() method like this: @using ToSic.Sxc.Services; @{ var pageSvc = Sxc.GetService<IPageService>(); } Read more about GetService<T>() or about GetService<T> in general. To use GetService in a DNN Theme/Skin/Module, check out GetScopedService<T>() and read it in the release blog. Namespaces ToSic.Sxc.Services.Cache ToSic.Sxc.Services.Template ToSic.Sxc.Services.Tweaks Classes DnnExtensions Provides extension methods for DNN Skins (Themes) and Modules. It only exists on the Dnn platform, not on Oqtane. ServiceKit14 Default ServiceKit for 2sxc v14. Provided in Razor and WebApi as Kit. ServiceKit16 Default ServiceKit for 2sxc v16. Provided in Razor and WebApi as Kit. ServiceKitLight16 Lightweight ServiceKit for 2sxc v16. Provided in custom data sources as Kit. Interfaces IAdamService Internal: Adam Service for ADAM operations such as retrieving a single file. ICacheService Service on Kit.Cache to help your code cache data. IConvertService Conversion helper for things which are very common in web-code like Razor and WebAPIs. IConvertService16 Helper on Kit.Convert for common conversions in web-code like Razor and WebAPIs. IDataService Services on Kit.Data to create DataSources in Razor. IDynamicCodeService This is a service to give you DynamicCode outside 2sxc. IEditService Service on Kit.Edit with status and commands to configure the in-page editing system. IFeaturesService Service on Kit.Feature to let your code find out what system features are currently enabled/disabled in the environment. IImageService Service on Kit.Image to help create responsive img and picture tags the best possible way. IJsonService Service on Kit.Json to serialize/restore JSON. IKeyService Service on Kit.Key to generate module/block level unique keys. ILinkService Helper on Kit.Link to create links to pages, APIs and images. IMailService Service on Kit.Mail to send mail messages cross-platform. IPageService Service on Kit.Page to make changes to the page - usually from Razor. IRenderService Service on Kit.Render to rendering blocks and delivering HTML for the output. ISecureDataService Service on Kit.SecureData to work with secure / encrypted data. ISystemLogService Service on Kit.SystemLog to add messages to the global (system) log in any platform Dnn/Oqtane. ITemplateService Service on Kit.Template to help parse token-based templates. IToolbarService Service on Kit.Toolbar to generate edit toolbars in the front-end. IUserService Service on Kit.User to get users and roles of the platform."
  },
  "api/dot-net/ToSic.Sxc.WebApi.Casing.html": {
    "href": "api/dot-net/ToSic.Sxc.WebApi.Casing.html",
    "title": "Enum Casing | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum Casing Namespace ToSic.Sxc.WebApi Assembly ToSic.Sxc.WebApi.dll Determines what casing to use when converting data to JSON. This is for the JsonFormatterAttribute. Can be used as flags, so you can say Casing = Casing.CamelCase or Casing = Casing.ObjectPascal | Casing.DictionaryCamel [PublicApi] [Flags] public enum Casing Fields Camel = 1 Set casing to use camelCase for everything. This is how most JavaScript code expects the data. The opposite would be Preserve. DictionaryCamel = 512 Set casing of Dictionaries to be camelCase. For example, Entity properties such as Birthday = birthday, FirstName = firstName. This would be Camel case. DictionaryPreserve = 1024 Set casing of Dictionaries to be PascalCase. For example, Entity properties such as Birthday = Birthday, FirstName = firstName. This would be Camel case. Preserve = 4 Set casing to use original name for everything - usually PascalCase as is common in C#. This is how conversion would have worked before v15, as the C# objects all use CamelCase internally. The opposite would be Camel"
  },
  "api/dot-net/ToSic.Sxc.WebApi.EntityFormat.html": {
    "href": "api/dot-net/ToSic.Sxc.WebApi.EntityFormat.html",
    "title": "Enum EntityFormat | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum EntityFormat Namespace ToSic.Sxc.WebApi Assembly ToSic.Sxc.WebApi.dll Formats to use for automatic Entity to JSON conversion. This is for the JsonFormatterAttribute. As of now it only has None and Light, in future we plan to extend this with other formats. Default is usually Light. [PublicApi] public enum EntityFormat Fields Light = 1 Format IEntity objects as EavLightEntity. This results in single-language objects with name/value pairs like a JavaScript object. None = 0 Do not auto-convert into any specific format. If IEntity objects are in the result, will result in an error."
  },
  "api/dot-net/ToSic.Sxc.WebApi.JsonFormatterAttribute.html": {
    "href": "api/dot-net/ToSic.Sxc.WebApi.JsonFormatterAttribute.html",
    "title": "Class JsonFormatterAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class JsonFormatterAttribute Namespace ToSic.Sxc.WebApi Assembly ToSic.Sxc.WebApi.dll Mark a WebApi to use the modern Json Formatter based on System.Text.Json. Without this, older WebApi Controllers use the Newtonsoft JSON Formatter. Also provides additional configuration to make certain work easier. [PublicApi] [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class JsonFormatterAttribute : Attribute Inheritance object Attribute JsonFormatterAttribute Remarks new in v15.08 Properties Casing Specify how resulting objects should be cased. Default is Camel. Will affect both normal object properties as well as Dictionary keys. public Casing Casing { get; set; } Property Value Casing EntityFormat Specify how IEntity objects in the result should be formatted. Default is Light. public EntityFormat EntityFormat { get; set; } Property Value EntityFormat"
  },
  "api/dot-net/ToSic.Sxc.WebApi.SecureEndpointAttribute.html": {
    "href": "api/dot-net/ToSic.Sxc.WebApi.SecureEndpointAttribute.html",
    "title": "Class SecureEndpointAttribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SecureEndpointAttribute Namespace ToSic.Sxc.WebApi Assembly ToSic.Sxc.WebApi.dll Attribute for WebApi controllers, which automatically decrypts encrypted POST payloads for Web API endpoints. Use this attribute on controller or methods to automatically decrypt incoming POST requests. It will intercepts POST requests with JSON content, checks for encrypted data, and if present, decrypts the payload using the ToSic.Eav.Security.Encryption.AesHybridCryptographyService. It then deserializes the decrypted data into the expected parameter type and replaces the action arguments. If the payload is not encrypted, the request content remains unchanged. See Network POST Body Encryption (new v19) for more information. [PublicApi] [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class SecureEndpointAttribute : ActionFilterAttribute Inheritance object Attribute FilterAttribute ActionFilterAttribute SecureEndpointAttribute Remarks Introduced in version 19.00."
  },
  "api/dot-net/ToSic.Sxc.WebApi.html": {
    "href": "api/dot-net/ToSic.Sxc.WebApi.html",
    "title": "Namespace ToSic.Sxc.WebApi | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc.WebApi Classes JsonFormatterAttribute Mark a WebApi to use the modern Json Formatter based on System.Text.Json. Without this, older WebApi Controllers use the Newtonsoft JSON Formatter. Also provides additional configuration to make certain work easier. SecureEndpointAttribute Attribute for WebApi controllers, which automatically decrypts encrypted POST payloads for Web API endpoints. Use this attribute on controller or methods to automatically decrypt incoming POST requests. It will intercepts POST requests with JSON content, checks for encrypted data, and if present, decrypts the payload using the ToSic.Eav.Security.Encryption.AesHybridCryptographyService. It then deserializes the decrypted data into the expected parameter type and replaces the action arguments. If the payload is not encrypted, the request content remains unchanged. See Network POST Body Encryption (new v19) for more information. Enums Casing Determines what casing to use when converting data to JSON. This is for the JsonFormatterAttribute. Can be used as flags, so you can say Casing = Casing.CamelCase or Casing = Casing.ObjectPascal | Casing.DictionaryCamel EntityFormat Formats to use for automatic Entity to JSON conversion. This is for the JsonFormatterAttribute. As of now it only has None and Light, in future we plan to extend this with other formats. Default is usually Light."
  },
  "api/dot-net/ToSic.Sxc.html": {
    "href": "api/dot-net/ToSic.Sxc.html",
    "title": "Namespace ToSic.Sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic.Sxc ToSic.Sxc is the namespace for 2sxc code. Namespaces ToSic.Sxc.Adam ToSic.Sxc.Apps This extends the ToSic.Eav.Apps with things relevant in a CMS. Most of this isn't documented yet. ToSic.Sxc.Blocks A unit of output it 2sxc is called a Block. In Dnn-Link, this can be like a Module, except that blocks can be inside other blocks. Looking at it from the Platform like Dnn, the entry object is an ICmsBlock which contains context information (in Dnn's case, ModuleId etc.). Inside it is an IBlock which can itself contain more IBlocks. Note that each Block itself has Views ICmsView and data specific to that block. ToSic.Sxc.Cms ToSic.Sxc.Code ToSic.Sxc.Context Context information for the current request / scenario. ToSic.Sxc.Data ToSic.Sxc.DataSources ToSic.Sxc.Dnn This contains interfaces that are specific to 2sxc in Dnn. The purpose is that both the EAV and 2sxc are meant to be platform agnostic, but Razor and WebApi developers in Dnn still need access to some helpers. ToSic.Sxc.Edit.Toolbar ToSic.Sxc.Images ToSic.Sxc.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either web-specific (like request objects) or DynamicData specific. ToSic.Sxc.Search The things here enable searching. They basically ensure that the CMS can ask for data to then index however the CMS wants to. ToSic.Sxc.Services ToSic.Sxc.WebApi"
  },
  "api/dot-net/ToSic.html": {
    "href": "api/dot-net/ToSic.html",
    "title": "Namespace ToSic | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Namespace ToSic Namespaces ToSic.Eav ToSic.Eav is the namespace for the EAV (Entity-Attribute-Value) data system underlying 2sxc. ToSic.Lib ToSic.Lib is for internal helpers and base classes which are just FYI. ToSic.Sxc ToSic.Sxc is the namespace for 2sxc code."
  },
  "api/dot-net/index.html": {
    "href": "api/dot-net/index.html",
    "title": "2sxc .net API Docs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc .net API Docs Tip This that will probably interest you the most. Recommended Base Classes for Razor / C# / Api Controllers RazorTyped for hybrid Razor ApiTyped for hybrid WebAPIs CodeTyped for hybrid shared C# code DataSource16 for custom DataSources Most used Services and Context Information Service Kit: Kit of Typed Code and Kit of Razor14 ToSic.Sxc.Services - all the services you will usually use ToSic.Sxc.Context - all context info, like the current page and url-parameters Most important Data-Objects ITypedItem - for all the data objects in RazorTyped ToSic.Sxc.Data - namespace for all 2sxc Data IFolder, IFile and ToSic.Sxc.Adam for working with files Note About Internal APIs Note also that the real code of EAV/2sxc/Dnn has way more stuff, but that's inofficial. Please don't use objects that are not documented here - or they are explicitly on an .Internal namespace. That allows us to improve the architecture without worrying about breaking your code. Once we're really sure that certain parts are very final, we'll publish the API docs for those parts. Advanced Topics Background: Architecture of Eav, Sxc, Dnn Tip If you really care, please get familiar with the architecture - it helps a \uD83D\uDC4D\uD83C\uDFFC Programming with DataSources and VisualQuery All the DataSources are based on IDataSource. You can find most of them in ToSic.Eav.DataSources ."
  },
  "api/js/CommandAddExistingParams.html": {
    "href": "api/js/CommandAddExistingParams.html",
    "title": "Interface CommandAddExistingParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandAddExistingParams Parameters used for the command add-existing. The contentType name determines what items will be shown in the dialog. Depending on your use case, you will need to use the CommandParamsEntityInList or CommandParamsEntityInContentBlock parameters as well. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties contentType The content-type name Declaration contentType: string Property Value Type Description string"
  },
  "api/js/CommandAddParams.html": {
    "href": "api/js/CommandAddParams.html",
    "title": "Interface CommandAddParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandAddParams Parameters used for the command add. The contentType determines what items will be created, the index where. Depending on your use case, you will need to use the CommandParamsEntityInList or CommandParamsEntityInContentBlock parameters as well. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties contentType The content-type name Declaration contentType: string Property Value Type Description string"
  },
  "api/js/CommandCodeParams.html": {
    "href": "api/js/CommandCodeParams.html",
    "title": "Interface CommandCodeParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandCodeParams Parameters used for the command code on toolbars (new in v14.4). ⤴️ back to All Command Names Buttons with Custom Code in a Toolbar you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } In some cases you want to add buttons to a toolbar, which run custom JavaScript code. How to use v10+ Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new [] { \"toolbar=empty\", \"custom?call=helloCustom\" }) <script> function helloCustom(context, event) { alert('hello from custom button'); } </script> For old use, check out the Custom Code in V9 section. Read also / Demos / Tutorials commands JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v08.06 Improved with call for v10+ Package: Api.Js.SxcJs Properties call Name of the function to call - must be available in the context. This is usually as a function window. Example: If call is sayHello you need a window.sayHello(params, context, event). Buttons with Custom Code in a Toolbar you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } In some cases you want to add buttons to a toolbar, which run custom JavaScript code. How to use v10+ Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new [] { \"toolbar=empty\", \"custom?call=helloCustom\" }) <script> function helloCustom(context, event) { alert('hello from custom button'); } </script> For old use, check out the Custom Code in V9 section. Read also / Demos / Tutorials commands JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v08.06 Improved with call for v10+ Declaration call: string Property Value Type Description string"
  },
  "api/js/CommandContentTypeParams.html": {
    "href": "api/js/CommandContentTypeParams.html",
    "title": "Interface CommandContentTypeParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandContentTypeParams Parameters used for the command contenttype. The content-type name determines what items will be loaded to manage the fields. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties contentType The content-type name Declaration contentType: string Property Value Type Description string"
  },
  "api/js/CommandCopyParams.html": {
    "href": "api/js/CommandCopyParams.html",
    "title": "Interface CommandCopyParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandCopyParams Parameters used for the command copy. Will copy the entity on entityId. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties contentType The content-type name Declaration contentType: string Property Value Type Description string entityId ID of item to edit. Declaration entityId: number Property Value Type Description number"
  },
  "api/js/CommandDataParams.html": {
    "href": "api/js/CommandDataParams.html",
    "title": "Interface CommandDataParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandDataParams Parameters used for the command data. The content-type name determines what items will be managed. ⤴️ back to All Command Names CMS Command contentitems you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button opens the admin-dialog with all content-items. It has a feature which also allows you to add filters. TODO: UPDATE TO SHOW MODERN TOOLBAR + USE ID Array of items in v14.02 How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 })> ... </div> @* Example using inline Toolbar (not recommended) *@ <div> @Edit.Toolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 }) ... </div> This shows a button which opens the table with all Tag items and filters for ManualWeight = 2. Let's try a more complex setup: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar( toolbar: new object[] { new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 } }, new { action = \"contentitems\", contentType= \"BlogPost\", filters = new {Tags = new[] { tag.Tag } } } }, settings: new { show = \"always\" })> ... </div> This shows 2sxc-toolbar with 2 buttons, one opening tag-management (filtered by ManualWeight), the other opens all BlogPosts filtering by Tag. It also has some settings which always show it, even if the mouse is not hovering. Possible filters on contentitems The filters-object is a JS-object with properties. We're still working on the format, but for now it's probably NumberPropertyName: ## StringPropertyName: \"...\" BoolPropertyName: true EntityPropertyName: [\"title1\", \"title2\", ...] list of values to check EntityPropertyName: [ 203004, 40203 ] // list of IDs to check IsPublished: true IsMetadata: true Read also commands Demo App and further links Mobius Forms uses the contentitems command to let the admin see the forms-records for his use case only History Introduced in 2sxc v08.06 Filters introduced in 2sxc v08.08 Filters improved to support id-array in v13.0 Code improved in v14.02 so new toolbar syntax with contentitems?filter:parent=[5030] works - before this didn't work as expected Package: Api.Js.SxcJs Properties contentType The content-type name CMS Command contentitems you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button opens the admin-dialog with all content-items. It has a feature which also allows you to add filters. TODO: UPDATE TO SHOW MODERN TOOLBAR + USE ID Array of items in v14.02 How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 })> ... </div> @* Example using inline Toolbar (not recommended) *@ <div> @Edit.Toolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 }) ... </div> This shows a button which opens the table with all Tag items and filters for ManualWeight = 2. Let's try a more complex setup: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar( toolbar: new object[] { new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 } }, new { action = \"contentitems\", contentType= \"BlogPost\", filters = new {Tags = new[] { tag.Tag } } } }, settings: new { show = \"always\" })> ... </div> This shows 2sxc-toolbar with 2 buttons, one opening tag-management (filtered by ManualWeight), the other opens all BlogPosts filtering by Tag. It also has some settings which always show it, even if the mouse is not hovering. Possible filters on contentitems The filters-object is a JS-object with properties. We're still working on the format, but for now it's probably NumberPropertyName: ## StringPropertyName: \"...\" BoolPropertyName: true EntityPropertyName: [\"title1\", \"title2\", ...] list of values to check EntityPropertyName: [ 203004, 40203 ] // list of IDs to check IsPublished: true IsMetadata: true Read also commands Demo App and further links Mobius Forms uses the contentitems command to let the admin see the forms-records for his use case only History Introduced in 2sxc v08.06 Filters introduced in 2sxc v08.08 Filters improved to support id-array in v13.0 Code improved in v14.02 so new toolbar syntax with contentitems?filter:parent=[5030] works - before this didn't work as expected Declaration contentType: string Property Value Type Description string filters Filters to apply to the list of items. Each property targets a field. The value is a string, number or array for filtering EntityIds or EntityGuids CMS Command contentitems you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button opens the admin-dialog with all content-items. It has a feature which also allows you to add filters. TODO: UPDATE TO SHOW MODERN TOOLBAR + USE ID Array of items in v14.02 How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 })> ... </div> @* Example using inline Toolbar (not recommended) *@ <div> @Edit.Toolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 }) ... </div> This shows a button which opens the table with all Tag items and filters for ManualWeight = 2. Let's try a more complex setup: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar( toolbar: new object[] { new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 } }, new { action = \"contentitems\", contentType= \"BlogPost\", filters = new {Tags = new[] { tag.Tag } } } }, settings: new { show = \"always\" })> ... </div> This shows 2sxc-toolbar with 2 buttons, one opening tag-management (filtered by ManualWeight), the other opens all BlogPosts filtering by Tag. It also has some settings which always show it, even if the mouse is not hovering. Possible filters on contentitems The filters-object is a JS-object with properties. We're still working on the format, but for now it's probably NumberPropertyName: ## StringPropertyName: \"...\" BoolPropertyName: true EntityPropertyName: [\"title1\", \"title2\", ...] list of values to check EntityPropertyName: [ 203004, 40203 ] // list of IDs to check IsPublished: true IsMetadata: true Read also commands Demo App and further links Mobius Forms uses the contentitems command to let the admin see the forms-records for his use case only History Introduced in 2sxc v08.06 Filters introduced in 2sxc v08.08 Filters improved to support id-array in v13.0 Code improved in v14.02 so new toolbar syntax with contentitems?filter:parent=[5030] works - before this didn't work as expected Declaration filters?: Record<string, string | number | string[] | number[]> Property Value Type Description Record<string, string | number | string[] | number[]>"
  },
  "api/js/CommandDeleteParams.html": {
    "href": "api/js/CommandDeleteParams.html",
    "title": "Interface CommandDeleteParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandDeleteParams Parameters used for the command delete. ⤴️ back to All Command Names delete Command you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button let's a user really delete a content item (since 2sxc 8.9). How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new { action = \"delete\", entityId = tag.EntityId, entityGuid = tag.EntityGuid, entityTitle = tag.EntityTitle }) The previous example just renders a delete-button. Here's an example creating an entire toolbar, incl. the delete-button. @Edit.Toolbar(Content, toolbar: new { entityId = Content.EntityId, entityGuid = Content.EntityGuid, entityTitle = Content.EntityTitle }) Note that for the delete-button to appear, the following conditions must be met: It is not an module-assigned item (also knows as content-mode), because in this case the item is in use, and it cannot be quick-deleted anyhow It has an entityId - used to show to the user to help him be sure he's deleting the right item It has an entityTitle - also shown to the user to be sure he's deleting the right thing It has an entityGuid - used as the ID when deleting the data as an extra level of security. Notes and Clarifications requires id, title and guid. otherwise the button won't appear History Introduced in 2sxc v08.09 Simplified later on, so most params are included Package: Api.Js.SxcJs Properties entityGuid Guid of item to delete, usually detected from context. delete Command you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button let's a user really delete a content item (since 2sxc 8.9). How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new { action = \"delete\", entityId = tag.EntityId, entityGuid = tag.EntityGuid, entityTitle = tag.EntityTitle }) The previous example just renders a delete-button. Here's an example creating an entire toolbar, incl. the delete-button. @Edit.Toolbar(Content, toolbar: new { entityId = Content.EntityId, entityGuid = Content.EntityGuid, entityTitle = Content.EntityTitle }) Note that for the delete-button to appear, the following conditions must be met: It is not an module-assigned item (also knows as content-mode), because in this case the item is in use, and it cannot be quick-deleted anyhow It has an entityId - used to show to the user to help him be sure he's deleting the right item It has an entityTitle - also shown to the user to be sure he's deleting the right thing It has an entityGuid - used as the ID when deleting the data as an extra level of security. Notes and Clarifications requires id, title and guid. otherwise the button won't appear History Introduced in 2sxc v08.09 Simplified later on, so most params are included Declaration entityGuid: string Property Value Type Description string entityId ID of item to delete, usually detected from context. delete Command you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button let's a user really delete a content item (since 2sxc 8.9). How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new { action = \"delete\", entityId = tag.EntityId, entityGuid = tag.EntityGuid, entityTitle = tag.EntityTitle }) The previous example just renders a delete-button. Here's an example creating an entire toolbar, incl. the delete-button. @Edit.Toolbar(Content, toolbar: new { entityId = Content.EntityId, entityGuid = Content.EntityGuid, entityTitle = Content.EntityTitle }) Note that for the delete-button to appear, the following conditions must be met: It is not an module-assigned item (also knows as content-mode), because in this case the item is in use, and it cannot be quick-deleted anyhow It has an entityId - used to show to the user to help him be sure he's deleting the right item It has an entityTitle - also shown to the user to be sure he's deleting the right thing It has an entityGuid - used as the ID when deleting the data as an extra level of security. Notes and Clarifications requires id, title and guid. otherwise the button won't appear History Introduced in 2sxc v08.09 Simplified later on, so most params are included Declaration entityId: number Property Value Type Description number entityTitle Title of item to delete, usually detected from context. This is important to show the \"Are you sure?\" dialog. delete Command you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button let's a user really delete a content item (since 2sxc 8.9). How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new { action = \"delete\", entityId = tag.EntityId, entityGuid = tag.EntityGuid, entityTitle = tag.EntityTitle }) The previous example just renders a delete-button. Here's an example creating an entire toolbar, incl. the delete-button. @Edit.Toolbar(Content, toolbar: new { entityId = Content.EntityId, entityGuid = Content.EntityGuid, entityTitle = Content.EntityTitle }) Note that for the delete-button to appear, the following conditions must be met: It is not an module-assigned item (also knows as content-mode), because in this case the item is in use, and it cannot be quick-deleted anyhow It has an entityId - used to show to the user to help him be sure he's deleting the right item It has an entityTitle - also shown to the user to be sure he's deleting the right thing It has an entityGuid - used as the ID when deleting the data as an extra level of security. Notes and Clarifications requires id, title and guid. otherwise the button won't appear History Introduced in 2sxc v08.09 Simplified later on, so most params are included Declaration entityTitle: string Property Value Type Description string"
  },
  "api/js/CommandMetadataParams.html": {
    "href": "api/js/CommandMetadataParams.html",
    "title": "Interface CommandMetadataParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandMetadataParams Parameters used for the command metadata. Will do either one of these: if it has an entityId, will just open edit for that Entity if it has no entityId, will open new for the current contentType and assign to the target specified by metadata: ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties contentType The content-type name Declaration contentType: string Property Value Type Description string entityId ID of item to edit. Declaration entityId: number Property Value Type Description number metadata Target to assign the metadata to. Declaration metadata: CommandParamsMetadata Property Value Type Description CommandParamsMetadata"
  },
  "api/js/CommandNames.html": {
    "href": "api/js/CommandNames.html",
    "title": "Enum CommandNames | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum CommandNames Namespace Names of commands known to 2sxc CMS - for use in toolbars and calling commands directly from code Fields add adds another demo-item to a list of items. It does not open the edit-dialog. The new item is placed after the item the (+) was clicked on. \uD83D\uDCA1 This is different than new, which opens a dialog to add something. \uD83E\uDE9C Only appears on toolbars of items which are in a list. \uD83D\uDCE9 Parameters add-existing opens a dialog allowing the user to select an existing item to add to a list of items. The new item is placed after the item the (+) was clicked on. \uD83E\uDE9C Only appears on toolbars of items which are in a list. \uD83D\uDCE9 Parameters \uD83C\uDD95 in v11.01 app opens the app-admin dialog \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required, (auto-detected from context) app-import opens the dialog to import an App. \uD83D\uDD18 This is not available on the toolbar. \uD83D\uDCE9 No params required, (auto-detected from context) app-resources opens the edit dialog for app-resources (multi-language texts, labels etc.). \uD83D\uDD18 It's disabled on the toolbar if the app doesn't have resource-values to configure. \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required, (auto-detected from context) app-settings opens the edit dialog for the app-settings. \uD83D\uDD18 It's disabled on the toolbar if the app doesn't have setting-values to configure \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required, (auto-detected from context) apps opens the manage all apps dialog. \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required, (auto-detected based on toolbar) code will execute custom javascript. \uD83D\uDD18 This is mainly for toolbars, to add buttons with custom code. \uD83D\uDCE9 Parameters this used to be called custom and had a different setup copy opens the edit-dialog for the current item in copy-mode, so when saving it will be a new item. \uD83D\uDCE9 Parameters \uD83C\uDD95 in v14.03 data opens the list to manage all items of a specific content-type. \uD83D\uDD18 Will use the settings of the current template to open. It is only shown to elevated admins. \uD83D\uDCE9 Parameters delete will delete (not just remove) a content-item. \uD83D\uDCA1 This is similar to remove but really deletes the data from the DB. \uD83D\uDD18 It only appears if the toolbar explicitly asks for it. \uD83D\uDCE9 Parameters (auto-detected from context) edit opens an edit-dialog. In scenarios where the page is currently showing a demo item, this will have the same effect as add. So instead of editing the demo item it would trigger a dialog to add a new item. \uD83D\uDD18 Only appears if entityId is known or item is in a list. \uD83D\uDCE9 Parameters either one of these: Id, In Block, In List (auto-detected from context) fields opens the dialog to view or modify fields of a content-type. \uD83D\uDD18 On a toolbar it will use the content-type of the current item. \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 Parameters insights opens the insights logs page \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required. layout opens the in-page dialog to change the layout of the current content. \uD83D\uDCE9 No params required, (auto-detected from context) instance-list opens a dialog to manually re-order items in a list. \uD83E\uDE9C Only appears on toolbars of items which are in a list. \uD83D\uDCE9 No params required, (auto-detected from context) metadata opens the edit-dialog for the current metadata item. \uD83D\uDD18 It only appears if the toolbar explicitly asks for it. \uD83D\uDCE9 Parameters more create a \"…\" (ellipsis) button which flips through the button groups of toolbars \uD83D\uDD18 It only appears if the toolbar has more=auto and has multiple groups. \uD83D\uDCE9 No params required, (auto-detected based on toolbar) movedown moves a content-item down one position in a list of items. \uD83E\uDE9C Only appears on toolbars of items which are in a list. \uD83D\uDCE9 Parameters either one of these: In Block, In List (auto-detected from context) moveup moves a content-item up one position in a list of items. \uD83E\uDE9C Only appears on toolbars of items which are in a list. \uD83D\uDCE9 Parameters either one of these: In Block, In List (auto-detected from context) new opens the edit-dialog to create a new item/entity. If the previous item is in a list, it will add it to that list after the previous item with the toolbar. Otherwise it just creates it and the visualization will differ depending on the App. \uD83E\uDE9C It works differently for lists - in which case it also adds it to the list. \uD83D\uDCE9 Parameters (usually auto-detected from context) publish tells the system to update a content-items status to published. If there was a published and a draft before, the draft will replace the previous item \uD83D\uDD18 Appears automatically if the item is in draft mode / not published. \uD83D\uDCE9 Parameters either one of these: Id, In Block, In List (auto-detected from context) template-query opens the pipeline/query-designer in a new window. \uD83D\uDD18 It's not available on the simple Content App, only on full Apps. It is disabled if no query is configured. \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required, (auto-detected from context) remove removes an item from a list of items. \uD83E\uDE9C Only appears on toolbars of items which are in a list. \uD83D\uDCE9 Parameters (auto-detected from context) replace opens the dialog to assign a different content-item in this slot on module-assigned content items \uD83D\uDCE9 Parameters (auto-detected from context) system opens the system dialog for this zone/site. \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required, (auto-detected from context) template-develop opens the template-editor dialog in a new window. \uD83D\uDD10 Toolbar shows this automatically to elevated admins. \uD83D\uDCE9 No params required, (auto-detected from context) template-settings will change settings on the template currently used \uD83D\uDD10 Toolbar shows this automatically to elevated admins."
  },
  "api/js/CommandNewParams.html": {
    "href": "api/js/CommandNewParams.html",
    "title": "Interface CommandNewParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandNewParams Parameters used for the command new The ContentType name determines what kind of item will be created. Can also contain prefill to add values to the new item. Can also contain list-information, in which case it's added to that list. Depending on your use case, you will need to use the CommandParamsEntityInList or CommandParamsEntityInContentBlock parameters as well. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties contentType The content-type name Declaration contentType: string Property Value Type Description string prefill Optional values to prefill in the new-form Declaration prefill?: Record<string, boolean | string | number> Property Value Type Description Record<string, boolean | string | number>"
  },
  "api/js/CommandParams.html": {
    "href": "api/js/CommandParams.html",
    "title": "Interface CommandParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandParams Command parameters are handed over to a command for execution. It contains all possible combinations of parameters that can be used in a command. We will try to improve how this is documented, but ATM it just has all parameters, even though you may need none, or just a few. Note: For your specific commands, you can also pass other parameters. Important for the docs Most properties are actually not visible (you will get them in the types though). So actually you will usually create one of these: CommandParamsEntityById CommandParamsEntityInContentBlock CommandParamsEntityInList CommandAddParams CommandAddExistingParams CommandDataParams CommandCopyParams CommandCodeParams CommandDeleteParams CommandMetadataParams CommandNewParams Because of this, most of the properties below are NOT documented, as their purpose can change depending on the command used. Package: Api.Js.SxcJs Properties call The purpose of this varies by Command. Declaration public call?: string Property Value Type Description string contentType The purpose of this varies by Command. Declaration public contentType?: string Property Value Type Description string entityGuid The purpose of this varies by Command. Declaration public entityGuid?: string Property Value Type Description string entityId The purpose of this varies by Command. Declaration public entityId?: number Property Value Type Description number entityTitle The purpose of this varies by Command. Declaration public entityTitle?: string Property Value Type Description string fields The purpose of this varies by Command. Declaration public fields?: string Property Value Type Description string filters The purpose of this varies by Command. Declaration public filters?: string Property Value Type Description string index The purpose of this varies by Command. Declaration public index?: number Property Value Type Description number metadata The purpose of this varies by Command. Declaration public metadata?: CommandParamsMetadata Property Value Type Description CommandParamsMetadata parent The purpose of this varies by Command. Declaration public parent?: string Property Value Type Description string prefill The purpose of this varies by Command. Declaration public prefill?: Record<string, boolean | string | number | Date> Property Value Type Description Record<string, boolean | string | number | Date> title The purpose of this varies by Command. Declaration public title?: string Property Value Type Description string useModuleList The purpose of this varies by Command. Declaration public useModuleList?: true Property Value Type Description true"
  },
  "api/js/CommandParamsEntity.html": {
    "href": "api/js/CommandParamsEntity.html",
    "title": "Interface CommandParamsEntity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandParamsEntity Parameters used for commands which need an entity ID or a list-reference. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties entityId ID of item to edit. Declaration entityId: number Property Value Type Description number fields Parent Entity field(s) name(s). Usually just one field, like Authors. In field-sets it could be Author,Award or similar. Declaration fields: string Property Value Type Description string index Determins the position of the item in the list. index was added in v14.04 to replace the sortOrder which had a confusing name. Declaration index: number Property Value Type Description number parent Parent entity GUID which has the field referencing this item. Declaration parent: string Property Value Type Description string useModuleList Must be true, to work on the module list. Declaration useModuleList: true Property Value Type Description true"
  },
  "api/js/CommandParamsEntityById.html": {
    "href": "api/js/CommandParamsEntityById.html",
    "title": "Interface CommandParamsEntityById | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandParamsEntityById Parameters used for commands which address a specificy entity. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties entityId ID of item to edit. Declaration entityId: number Property Value Type Description number"
  },
  "api/js/CommandParamsEntityInContentBlock.html": {
    "href": "api/js/CommandParamsEntityInContentBlock.html",
    "title": "Interface CommandParamsEntityInContentBlock | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandParamsEntityInContentBlock Parameters used for command which expect an item from a list of a ContentBlock. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties index Determins the position of the item in the list. index was added in v14.04 to replace the sortOrder which had a confusing name. Declaration index: number Property Value Type Description number useModuleList Must be true, to work on the module list. Declaration useModuleList: true Property Value Type Description true"
  },
  "api/js/CommandParamsEntityInList.html": {
    "href": "api/js/CommandParamsEntityInList.html",
    "title": "Interface CommandParamsEntityInList | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandParamsEntityInList Parameters used for command which expect an item in a list (field) of a parent. ⤴️ back to All Command Names Package: Api.Js.SxcJs Properties fields Parent Entity field(s) name(s). Usually just one field, like Authors. In field-sets it could be Author,Award or similar. Declaration fields: string Property Value Type Description string index Determins the position of the item in the list of that entity-field. Declaration index: number Property Value Type Description number parent Parent entity GUID which has the field referencing this item. Declaration parent: string Property Value Type Description string"
  },
  "api/js/CommandParamsMetadata.html": {
    "href": "api/js/CommandParamsMetadata.html",
    "title": "Interface CommandParamsMetadata | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface CommandParamsMetadata Parameters on metadata for commands which have a metadata-target. Package: Api.Js.SxcJs Properties key The key which identifies the target of this metadata item Declaration key: string Property Value Type Description string keyType the key type, will default to 'string' Declaration keyType?: string Property Value Type Description string targetType The target type, will default to 10 = CMS-Item Declaration targetType?: MetadataTargetTypes Property Value Type Description MetadataTargetTypes"
  },
  "api/js/ContextIdentifier.html": {
    "href": "api/js/ContextIdentifier.html",
    "title": "Class ContextIdentifier | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ContextIdentifier ContextIdentifier is used to initialize a Sxc object outside of the default context. About the ContextIdentifier When you use the ContextIdentifier to get a $2sxc(contextIdentifier) you are bypassing various automations which pick up the context by default. The ContextIdentifier has this setup: export class ContextIdentifier { /** ZoneId of this Context */ zoneId: number; /** AppId of this Context */ appId: number; /** PageId of this Context (optional) */ pageId?: number; /** ModuleId of this Context (optional) */ moduleId?: number; } This mode is mainly used when integrating 2sxc into other systems which don't provide the full CMS functionality when creating edit-functionality which is outside the default context, like in the context of a Module where you must edit data of a different App Package: Api.Js.SxcJs Properties appId AppId of this Context About the ContextIdentifier When you use the ContextIdentifier to get a $2sxc(contextIdentifier) you are bypassing various automations which pick up the context by default. The ContextIdentifier has this setup: export class ContextIdentifier { /** ZoneId of this Context */ zoneId: number; /** AppId of this Context */ appId: number; /** PageId of this Context (optional) */ pageId?: number; /** ModuleId of this Context (optional) */ moduleId?: number; } This mode is mainly used when integrating 2sxc into other systems which don't provide the full CMS functionality when creating edit-functionality which is outside the default context, like in the context of a Module where you must edit data of a different App Declaration appId: number Property Value Type Description number moduleId ModuleId of this Context (optional) About the ContextIdentifier When you use the ContextIdentifier to get a $2sxc(contextIdentifier) you are bypassing various automations which pick up the context by default. The ContextIdentifier has this setup: export class ContextIdentifier { /** ZoneId of this Context */ zoneId: number; /** AppId of this Context */ appId: number; /** PageId of this Context (optional) */ pageId?: number; /** ModuleId of this Context (optional) */ moduleId?: number; } This mode is mainly used when integrating 2sxc into other systems which don't provide the full CMS functionality when creating edit-functionality which is outside the default context, like in the context of a Module where you must edit data of a different App Declaration moduleId?: number Property Value Type Description number pageId PageId of this Context (optional) About the ContextIdentifier When you use the ContextIdentifier to get a $2sxc(contextIdentifier) you are bypassing various automations which pick up the context by default. The ContextIdentifier has this setup: export class ContextIdentifier { /** ZoneId of this Context */ zoneId: number; /** AppId of this Context */ appId: number; /** PageId of this Context (optional) */ pageId?: number; /** ModuleId of this Context (optional) */ moduleId?: number; } This mode is mainly used when integrating 2sxc into other systems which don't provide the full CMS functionality when creating edit-functionality which is outside the default context, like in the context of a Module where you must edit data of a different App Declaration pageId?: number Property Value Type Description number zoneId ZoneId of this Context About the ContextIdentifier When you use the ContextIdentifier to get a $2sxc(contextIdentifier) you are bypassing various automations which pick up the context by default. The ContextIdentifier has this setup: export class ContextIdentifier { /** ZoneId of this Context */ zoneId: number; /** AppId of this Context */ appId: number; /** PageId of this Context (optional) */ pageId?: number; /** ModuleId of this Context (optional) */ moduleId?: number; } This mode is mainly used when integrating 2sxc into other systems which don't provide the full CMS functionality when creating edit-functionality which is outside the default context, like in the context of a Module where you must edit data of a different App Declaration zoneId: number Property Value Type Description number"
  },
  "api/js/EnvironmentSpecs.html": {
    "href": "api/js/EnvironmentSpecs.html",
    "title": "Interface EnvironmentSpecs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface EnvironmentSpecs A context information for the current page, helping the JS talk with the backend Package: Api.Js.SxcJs Properties api Optional API key - optional if set from external, because it's auto derived from root Declaration api: string Property Value Type Description string appApi Optional App API Root - required because in Oqtane we'll have a different root for appAPIs Declaration appApi: string Property Value Type Description string page Page ID Declaration page: number Property Value Type Description number platform The platform code like 'dnn' or 'oqt' Declaration platform: string Property Value Type Description string root Portal root path - used for various things incl. the API root Declaration root: string Property Value Type Description string rvt Request verification token value Declaration rvt: string Property Value Type Description string rvtHeader Request verification token header name Declaration rvtHeader: string Property Value Type Description string"
  },
  "api/js/HasLog.html": {
    "href": "api/js/HasLog.html",
    "title": "Class HasLog | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class HasLog Any object that has an own log object Package: Api.Js.SxcJs"
  },
  "api/js/Log.html": {
    "href": "api/js/Log.html",
    "title": "Class Log | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Log A log object which will collect log entries for another ojbect Package: Api.Js.SxcJs Properties entries List of all entries added to this log Declaration entries: LogEntry[] Property Value Type Description LogEntry[] maxEntries Maximum amount of entries to add - to prevent memory hoging Declaration maxEntries: number Property Value Type Description number name The name of this log, for scenarios where multiple loggers are mixed Declaration name: string Property Value Type Description string Methods add(() => string | string, unknown) Add a simple message to the log Declaration function add(message: () => string | string, data?: unknown) Parameters Type Name Description () => string | string message preferred usage is with string parameter: log.add(description ${ parameter }); in case that we experience error with normal string parameter, we can use arrow function to enclose parameter like this () => parameter but use it very rarely, because there is certainly a performance implication! log.add(description ${() => parameter}); unknown data Returns Type Description string"
  },
  "api/js/LogEntry.html": {
    "href": "api/js/LogEntry.html",
    "title": "Class LogEntry | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class LogEntry A log entry item Package: Api.Js.SxcJs Properties message A log entry item Declaration message: string Property Value Type Description string time A timestamp for this entry to better see sequences of things happening Declaration time: number Property Value Type Description number"
  },
  "api/js/MetadataFor.html": {
    "href": "api/js/MetadataFor.html",
    "title": "Interface MetadataFor | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface MetadataFor A Metadata-Target identifier to tell an entity that it describes something else. Usually used in Sxc instances with the Data Service Warning: There is another MetadataFor type and they are not fully consistent. This is historical and not easy to correct, but we're working on it. Package: Api.Js.SxcJs Properties Guid The GUID of the target, if it's identified by a GUID. Declaration Guid?: string Property Value Type Description string Number The number of the target, if it's identified by a number. Declaration Number?: number Property Value Type Description number String The string-id of the target, if it's identified by a string. Declaration String?: string Property Value Type Description string Target The target type identifier TODO: @2dm - THIS SHOULD probably be number only Declaration Target: string | MetadataTargetTypes Property Value Type Description string | MetadataTargetTypes"
  },
  "api/js/MetadataTargetTypes.html": {
    "href": "api/js/MetadataTargetTypes.html",
    "title": "Enum MetadataTargetTypes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum MetadataTargetTypes Namespace Metadata Target Types These are constants to determine what something is assigned to (e.g. it describes an Entity, a file, etc.) Use it for the @see MetadataFor objects Fields Undefined Type (0) - included for completeness. Not usually used, actually None (1) is the default Things that are not used as Metadata (1). This is the default for most Entities. Metadata of attributes / fields (2). This is used to store configuration like the field label, amount-of-rows, etc. Remarks = The key is always a number (int) pointing to the Attribute ID in the DB. App metadata (3). Used to give Apps additional properties. Remarks = The key should always be an int ID of the App. Metadata of entities / data-items (4). This lets us enhance entities with additional information. Remarks = The Key should always be a GUID Metadata of a content-type / data-schema (5). Used to give it a description etc. Zone metadata (6) - used to give a Zone additional information. Only used in very special cases, best not use. Item / Object of the Platform, like a File or Folder etc. (10) Remarks = The key is usually a string to further specify what it's describing, like \"file:72\" The text equivalent is CmsObject The entire system / platform - so Metadata for the current Dnn/Oqtane installation (11). Remarks = This is not in use as of now, just added for completeness sakes. New in v13 A Site - like the current site (12) Remarks = New in v13 A Site - like the current site (13) Remarks = New in v13 / beta A Page - like the current page (14) Remarks = New in v13 A Page - like the current page (15) Remarks = New in v13 / beta A Module - like a module containing some content (16) Remarks = New in v13 A Module - like a module containing some content (17) Remarks = New in v13 / beta A User - like the admin-user (18) Remarks = New in v13 Custom target (90). This is what you should use for basic apps which have a custom target that's none of the other defaults. Custom target (91). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (92). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (93). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (94). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (95). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (96). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (97). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (98). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom target (99). Use this for basic apps which need multiple different custom targets (advanced, rare use case)"
  },
  "api/js/QuickEditConfig.html": {
    "href": "api/js/QuickEditConfig.html",
    "title": "Class QuickEditConfig | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class QuickEditConfig Quick Edit Configuration which has an enable and specific button configurations QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the common configuration structure for quickE - both the root as well as the nodes modules and innerBlocks. Package: Api.Js.SxcJs Properties buttons Optional detailed configuration of the buttons. QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the common configuration structure for quickE - both the root as well as the nodes modules and innerBlocks. Declaration buttons?: QuickEditConfigButtons Property Value Type Description QuickEditConfigButtons enable Determine whether this section is enabled. QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the common configuration structure for quickE - both the root as well as the nodes modules and innerBlocks. Declaration enable?: boolean | \"auto\" Property Value Type Description boolean | \"auto\""
  },
  "api/js/QuickEditConfigButtons.html": {
    "href": "api/js/QuickEditConfigButtons.html",
    "title": "Class QuickEditConfigButtons | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class QuickEditConfigButtons Buttons on a quick-edit toolbar QuickEditConfigButtons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the configuration for the buttons of parts of quickE. Package: Api.Js.SxcJs Properties addApp Enable the button to \"add App\" QuickEditConfigButtons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the configuration for the buttons of parts of quickE. Declaration addApp?: boolean Property Value Type Description boolean addContent Enable the button to \"Add Content\" QuickEditConfigButtons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the configuration for the buttons of parts of quickE. Declaration addContent?: boolean Property Value Type Description boolean delete Enable the button \"Delete\" QuickEditConfigButtons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the configuration for the buttons of parts of quickE. Declaration delete?: boolean Property Value Type Description boolean move Enable the button \"Move\" QuickEditConfigButtons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the configuration for the buttons of parts of quickE. Declaration move?: boolean Property Value Type Description boolean paste Enable the button \"Paste\" QuickEditConfigButtons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the configuration for the buttons of parts of quickE. Declaration paste?: boolean Property Value Type Description boolean select Enable the button \"Select\" QuickEditConfigButtons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the configuration for the buttons of parts of quickE. Declaration select?: boolean Property Value Type Description boolean"
  },
  "api/js/QuickEditConfigRoot.html": {
    "href": "api/js/QuickEditConfigRoot.html",
    "title": "Class QuickEditConfigRoot | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class QuickEditConfigRoot Quick Edit - Full configuration at root, with enable and rules for modules and innerBlocks QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the root configuration structure for quickE. Package: Api.Js.SxcJs Properties buttons The buttons configuration on the root. Will be used for the modules and innerBlocks if not specified there. Note that if not specified, will always default to true for all buttons. QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the root configuration structure for quickE. Declaration buttons?: QuickEditConfigButtons Property Value Type Description QuickEditConfigButtons enable Determine whether this section is enabled. QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the root configuration structure for quickE. Declaration enable?: boolean | \"auto\" Property Value Type Description boolean | \"auto\" innerBlocks Optional configuration for the Inner Content Blocks. QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the root configuration structure for quickE. Declaration innerBlocks?: QuickEditConfig Property Value Type Description QuickEditConfig modules Optional configuration for the Modules. QuickEditConfigRoot you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This is the root configuration structure for quickE. Declaration modules?: QuickEditConfig Property Value Type Description QuickEditConfig"
  },
  "api/js/RunParams.html": {
    "href": "api/js/RunParams.html",
    "title": "Interface RunParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface RunParams Parameters for the Instance sxc.cms.run(...) command. New in 13.03 Package: Api.Js.SxcJs Properties action The action to perform. Required. Declaration action?: CommandNames Property Value Type Description CommandNames event The event which triggered this command - sometimes useful internally further use. Optional in most cases, but in some cases it will improve the behavior of the code. Declaration event?: MouseEvent Property Value Type Description MouseEvent params The command params, like contentType, entityId etc. Optional for many actions. Declaration params?: CommandParams Property Value Type Description CommandParams workflows Workflows work the same way as with a toolbar, except that they are added here and not registered on init. Because of limitations in automatic documentation, the type here is set to unknown but it's actually WorkflowStep | WorkflowStep[] Declaration workflows?: unknown Property Value Type Description unknown"
  },
  "api/js/RunParamsWithContext.html": {
    "href": "api/js/RunParamsWithContext.html",
    "title": "Interface RunParamsWithContext | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface RunParamsWithContext Parameters for the Global $2sxc.cms.run(...) command in Addition to the RunParams. It provides context to the run-params such as a Sxc instance or a tag which it started on. New in 12.10 Package: Api.Js.SxcJs Properties action The action to perform. Required. Declaration action?: CommandNames Property Value Type Description CommandNames context The context to run in, basically containing module id, etc. We always need the tag OR the context, but never both Declaration context?: Sxc | ContextIdentifier Property Value Type Description Sxc | ContextIdentifier event The event which triggered this command - sometimes useful internally further use. Optional in most cases, but in some cases it will improve the behavior of the code. Declaration event?: MouseEvent Property Value Type Description MouseEvent params The command params, like contentType, entityId etc. Optional for many actions. Declaration params?: CommandParams Property Value Type Description CommandParams tag The tag on which the run was triggered - it's used to give the command a context to start from We always need the tag OR the context, but never both Declaration tag?: HTMLElement Property Value Type Description HTMLElement workflows Workflows work the same way as with a toolbar, except that they are added here and not registered on init. Because of limitations in automatic documentation, the type here is set to unknown but it's actually WorkflowStep | WorkflowStep[] Declaration workflows?: unknown Property Value Type Description unknown"
  },
  "api/js/Sxc.html": {
    "href": "api/js/Sxc.html",
    "title": "Class Sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class Sxc The typical sxc-instance object for a specific DNN module or content-block Package: Api.Js.SxcJs Properties cbid content-block ID, which is either the module ID, or the content-block definition entity ID this is an advanced concept you usually don't care about, otherwise you should research it Declaration cbid: number Property Value Type Description number cms CMS operations on this sxc-instance, such as opening the edit dialog etc. Declaration cms: SxcCms Property Value Type Description SxcCms id the sxc-instance ID, which is usually the DNN Module Id Declaration id: number Property Value Type Description number webApi Web API calls for this instance. This is the pure call APIs system. To get data or queries, best use the data or query services. Declaration webApi: SxcWebApi Property Value Type Description SxcWebApi Methods data(string) Get a data service for a specific content-type. Declaration function data<T>(contentType: string) Parameters Type Name Description string contentType Returns Type Description SxcData<T> isEditMode() Test if the current code is in edit-mode and additional javascripts have been loaded to make it work Declaration function isEditMode() Returns Type Description boolean true if we are in edit-mode query(string) The typical sxc-instance object for a specific DNN module or content-block Declaration function query(query: string) Parameters Type Name Description string query Returns Type Description SxcQuery"
  },
  "api/js/SxcCms.html": {
    "href": "api/js/SxcCms.html",
    "title": "Class SxcCms | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcCms This is in charge of sxc.cms on the instance level. ATM it just has the run command. In future, it may also have dedicated command like layout etc. cms Service of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Very often your JS will want to execute CMS related commands, like opening the edit dialog. The cms object on the Sxc-Instance is responsible for this. It's very similar to the global $2sxc.cms object, except that it already knows what context it's running in. Note This was introduced in 2sxc v13.03. It should replace most of the As of now, the cms object only has one command called run(...). run Command The run command only has one signature: run<T>(runParams: RunParams): Promise<void | T> This is similar to the global run but it already knows the context it's running in. Demo App and further links TODO History Created in v13.03 Package: Api.Js.SxcJs Methods run(RunParams) Run a command on this sxc-instance. Requires edit mode to be on, which would enable the edit-JS parts. To use, remember to activate 2sxc.JsCms on the page cms Service of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Very often your JS will want to execute CMS related commands, like opening the edit dialog. The cms object on the Sxc-Instance is responsible for this. It's very similar to the global $2sxc.cms object, except that it already knows what context it's running in. Note This was introduced in 2sxc v13.03. It should replace most of the As of now, the cms object only has one command called run(...). run Command The run command only has one signature: run<T>(runParams: RunParams): Promise<void | T> This is similar to the global run but it already knows the context it's running in. Demo App and further links TODO History Created in v13.03 Declaration function run<T>(runParams: RunParams) Parameters Type Name Description RunParams runParams real type is actually RunParams Returns Type Description Promise<void | T>"
  },
  "api/js/SxcData.html": {
    "href": "api/js/SxcData.html",
    "title": "Class SxcData | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcData Data Service for an App / Sxc-Instance to get/create data of a specific Content-Type sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Package: Api.Js.SxcJs Properties name Data Service for an App / Sxc-Instance to get/create data of a specific Content-Type sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration name: string Property Value Type Description string Methods create(Record<string, unknown>) Create a new entity with the values supplied sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration function create(values: Record<string, unknown>) Parameters Type Name Description Record<string, unknown> values a simple object containing the values to create Returns Type Description Promise<Record<string, unknown>> create(Record<string, unknown>, MetadataFor | string) Create a new entity with the values supplied and also a metadata-for reference sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration function create(values: Record<string, unknown>, metadataFor: MetadataFor | string) Parameters Type Name Description Record<string, unknown> values a simple object containing the values to create MetadataFor | string metadataFor Returns Type Description Promise<Record<string, unknown>> delete(number) Delete an entity sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration function delete(id: number) Parameters Type Name Description number id id of the item to delete Returns Type Description Promise<null> delete(string) Delete an entity sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration function delete(guid: string) Parameters Type Name Description string guid GUID of the item to delete Returns Type Description Promise<null> getAll() Get all items of this type. sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration function getAll() Returns Type Description Promise<T[]> getOne(number) Get the specific item with the ID. It will return null if not found sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration function getOne(id: number) Parameters Type Name Description number id Returns Type Description Promise<T> | null update(number, Record<string, unknown>) Update an existing entity with the values supplied sxc.data Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries \uD83D\uDC49 docs Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. \uD83D\uDC49 Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName. The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial \uD83D\uDC49 Js Data and Query Tutorials Declaration function update(id: number, values: Record<string, unknown>) Parameters Type Name Description number id Record<string, unknown> values Returns Type Description Promise<Record<string, unknown>>"
  },
  "api/js/SxcDataServiceBase.html": {
    "href": "api/js/SxcDataServiceBase.html",
    "title": "Class SxcDataServiceBase | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcDataServiceBase Base class doing common checks. This is internal and not important, but we can't keep it out of the docs. Package: Api.Js.SxcJs Properties name Base class doing common checks. This is internal and not important, but we can't keep it out of the docs. Declaration name: string Property Value Type Description string"
  },
  "api/js/SxcGlobal.html": {
    "href": "api/js/SxcGlobal.html",
    "title": "Interface SxcGlobal | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface SxcGlobal This is the root global window.$2sxc function / object. It is both a function window.$2sxc(...) and object window.$2sxc.insights... If the page feature 2sxc.JsCms is enabled, the window.$2sxc will also be a SxcGlobalWithCms you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Package: Api.Js.SxcJs Properties env Environment information you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration env: SxcGlobalEnvironment Property Value Type Description SxcGlobalEnvironment http Http helper for API calls and such you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration http: SxcGlobalHttp Property Value Type Description SxcGlobalHttp sysinfo system information, mainly for checking which version of 2sxc is running note: it's not always updated reliably, but it helps when debugging you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration sysinfo: Object Property Value Type Description Object urlParams Helper to work with url parameters behind ? or # you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration urlParams: UrlParams Property Value Type Description UrlParams Methods get(ContextIdentifier) Get an Sxc Instance using a full context-identifier (advanced). Using $2sxc.get(...) is the same as using $2sxc(...) you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration function get(context: ContextIdentifier) Parameters Type Name Description ContextIdentifier context ContextIdentifier: full context identifier Returns Type Description Sxc Sxc get(HTMLElement) Get an Sxc Instance using a tag / HtmlElement. Using $2sxc.get(...) is the same as using $2sxc(...) you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration function get(tag: HTMLElement) Parameters Type Name Description HTMLElement tag HTMLElement: tag in the page Returns Type Description Sxc Sxc get(number) Get an Sxc Instance using the moduleId. Using $2sxc.get(...) is the same as using $2sxc(...) you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration function get(moduleId: number) Parameters Type Name Description number moduleId number: moduleId Returns Type Description Sxc SxcInstance get(number, number) Get an Sxc Instance using the moduleId and contentBlockId. Using $2sxc.get(...) is the same as using $2sxc(...) you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration function get(moduleId: number, contentBlockId: number) Parameters Type Name Description number moduleId number: moduleId number contentBlockId number: content-block ID Returns Type Description Sxc Sxc get(Sxc) Get an Sxc Instance passing in an existing Sxc - just for cases where you're not sure what you aready have. Using $2sxc.get(...) is the same as using $2sxc(...) you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration function get(sxc: Sxc) Parameters Type Name Description Sxc sxc Sxc: an existing sxc - will just be returned Returns Type Description Sxc Sxc - the same Sxc as the one which was passed in insights(string, number, number, number) The debugging / insights system. Call the $2sxc.insights() without parameters to get instructions what the parameters could be. you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Main Function $2sxc(...) This is a object/function hybrid. So it is usually used like this: var sxc = window.$2sxc(moduleId); The signature /parameters is the same as the $2sxc.get(...) function. The resulting object is a Sxc History Introduced in 2sxc 04.00 Enhanced with cms (see cms) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Declaration function insights(partName: string, index?: number, start?: number, length?: number) Parameters Type Name Description string partName optional name of a part of the system for which we want to see the logs number index optional index on that part for which log we want to see number start log start index - this is to skip the first few lines if there are too many number length amount of lines to show - in some cases will default to 25"
  },
  "api/js/SxcGlobalCms.html": {
    "href": "api/js/SxcGlobalCms.html",
    "title": "Class SxcGlobalCms | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcGlobalCms Global Content-Management System on the $2sxc.cms. It is only available if the page is in edit mode / the page feature 2sxc.JsCms has been activated. The $2sxc.cms API you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The $2sxc.cms object is the core JavaScript API to perform CMS actions such as opening edit-dialogs etc. As of now (v9.30 - v13) it only has 1 command run(...) but will be enhanced in the future to do more. You need this in advanced use cases. otherwise you don't need this. Such advanced cases are: when you create custom JS buttons to start a content-management action How to use v12.10 and newer 2sxc 12.10 enhanced the cms.run(params: RunParamsWithContext) to accept an object with parameters. This makes it easier to reliably pass in optional parameters, and also supports the use of Workflow Steps. \uD83D\uDC49 Learn more in the Cms-Run Docs. Package: Api.Js.SxcJs Methods run(HTMLElement, CommandParams, MouseEvent) Run a command within a specific context. The $2sxc.cms API you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The $2sxc.cms object is the core JavaScript API to perform CMS actions such as opening edit-dialogs etc. As of now (v9.30 - v13) it only has 1 command run(...) but will be enhanced in the future to do more. You need this in advanced use cases. otherwise you don't need this. Such advanced cases are: when you create custom JS buttons to start a content-management action How to use v12.10 and newer 2sxc 12.10 enhanced the cms.run(params: RunParamsWithContext) to accept an object with parameters. This makes it easier to reliably pass in optional parameters, and also supports the use of Workflow Steps. \uD83D\uDC49 Learn more in the Cms-Run Docs. Declaration function run<T>(tag: HTMLElement, commandParams: CommandParams, event?: MouseEvent) Parameters Type Name Description HTMLElement tag The context providing tag - an HTML tag inside a module/content-block CommandParams commandParams an object containing the the command-params as well as the command-name (action) MouseEvent event Optional mouse-event which allows the command to do some optimizations for that case - like a mouse-click Returns Type Description Promise<void | T> A promise which triggers when the command has completed. run(HTMLElement, string, CommandParams, MouseEvent) Run a command within a specific context. The $2sxc.cms API you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The $2sxc.cms object is the core JavaScript API to perform CMS actions such as opening edit-dialogs etc. As of now (v9.30 - v13) it only has 1 command run(...) but will be enhanced in the future to do more. You need this in advanced use cases. otherwise you don't need this. Such advanced cases are: when you create custom JS buttons to start a content-management action How to use v12.10 and newer 2sxc 12.10 enhanced the cms.run(params: RunParamsWithContext) to accept an object with parameters. This makes it easier to reliably pass in optional parameters, and also supports the use of Workflow Steps. \uD83D\uDC49 Learn more in the Cms-Run Docs. Declaration function run<T>(tag: HTMLElement, action: string, params?: CommandParams, event?: MouseEvent) Parameters Type Name Description HTMLElement tag The context providing tag - an HTML tag inside a module/content-block string action command-name (action) CommandParams params an object containing the the command-params MouseEvent event Optional mouse-event which allows the command to do some optimizations for that case - like a mouse-click Returns Type Description Promise<void | T> A promise which triggers when the command has completed. run(HTMLElement, string, MouseEvent) Run a command within a specific context. The $2sxc.cms API you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The $2sxc.cms object is the core JavaScript API to perform CMS actions such as opening edit-dialogs etc. As of now (v9.30 - v13) it only has 1 command run(...) but will be enhanced in the future to do more. You need this in advanced use cases. otherwise you don't need this. Such advanced cases are: when you create custom JS buttons to start a content-management action How to use v12.10 and newer 2sxc 12.10 enhanced the cms.run(params: RunParamsWithContext) to accept an object with parameters. This makes it easier to reliably pass in optional parameters, and also supports the use of Workflow Steps. \uD83D\uDC49 Learn more in the Cms-Run Docs. Declaration function run<T>(tag: HTMLElement, action: string, event?: MouseEvent) Parameters Type Name Description HTMLElement tag The context providing tag - an HTML tag inside a module/content-block string action command-name (action) MouseEvent event Optional mouse-event which allows the command to do some optimizations for that case - like a mouse-click Returns Type Description Promise<void | T> A promise which triggers when the command has completed. run(RunParamsWithContext) Run a command within a specific context - mostly for internal use. The $2sxc.cms API you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The $2sxc.cms object is the core JavaScript API to perform CMS actions such as opening edit-dialogs etc. As of now (v9.30 - v13) it only has 1 command run(...) but will be enhanced in the future to do more. You need this in advanced use cases. otherwise you don't need this. Such advanced cases are: when you create custom JS buttons to start a content-management action How to use v12.10 and newer 2sxc 12.10 enhanced the cms.run(params: RunParamsWithContext) to accept an object with parameters. This makes it easier to reliably pass in optional parameters, and also supports the use of Workflow Steps. \uD83D\uDC49 Learn more in the Cms-Run Docs. Declaration function run<T>(runParams: RunParamsWithContext) Parameters Type Name Description RunParamsWithContext runParams The complete run params with a context Returns Type Description Promise<void | T> A promise which triggers when the command has completed."
  },
  "api/js/SxcGlobalEnvironment.html": {
    "href": "api/js/SxcGlobalEnvironment.html",
    "title": "Class SxcGlobalEnvironment | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcGlobalEnvironment Provides environment information to $2sxc - usually page-id, api-root and stuff like that The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Package: Api.Js.SxcJs Properties ready Flag to determine if the environment information is available. The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration ready: boolean Property Value Type Description boolean source Where the environment information came from. The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration source: string Property Value Type Description string Methods api() The API endpoint url from the environment The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration function api() Returns Type Description string load(EnvironmentSpecs, string) Manually load a new EnvironmentSpecs in cases where the page cannot provide them. This is only used in scenarios outside of Dnn / Oqtane, you will usually not need this. The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration function load(envSpecs: EnvironmentSpecs, source?: string) Parameters Type Name Description EnvironmentSpecs envSpecs new info to load string source optional name where the data came from page() The current page ID - often needed in API calls The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration function page() Returns Type Description number platform() The platform code like 'oqt' or 'dnn' in case the JS needs to know the difference The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration function platform() Returns Type Description string rvt() The request-verification token for internal WebAPI calls The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration function rvt() Returns Type Description string rvtHeader() The request verification token header name for internal WebAPI calls The $2sxc.env API you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. History Introduced in 2sxc 10.25 Declaration function rvtHeader() Returns Type Description string"
  },
  "api/js/SxcGlobalHttp.html": {
    "href": "api/js/SxcGlobalHttp.html",
    "title": "Class SxcGlobalHttp | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcGlobalHttp Global HTTP Service for information and helpers on $2sxc.http The $2sxc.http Api you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doing custom API calls. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. Note Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. The http also has some internal methods which are not documented here. History Introduced in 2sxc 10.25 Package: Api.Js.SxcJs Methods apiUrl(string) Convert short urls like app/auto/api/Posts/All to the full URL needed. Will ignore urls which clearly already are the full url. The $2sxc.http Api you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doing custom API calls. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. Note Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. The http also has some internal methods which are not documented here. History Introduced in 2sxc 10.25 Declaration function apiUrl(url: string) Parameters Type Name Description string url short URL like app/auto/api/Posts/All Returns Type Description string the converted, long url with the full endpoint apiUrl(string, string) Convert short urls like app/auto/api/Posts/All to the full URL needed. Will ignore urls which clearly already are the full url. The $2sxc.http Api you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doing custom API calls. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. Note Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. The http also has some internal methods which are not documented here. History Introduced in 2sxc 10.25 Declaration function apiUrl(url: string, endpointName: string) Parameters Type Name Description string url short URL like app/auto/api/Posts/All string endpointName optional endpoint name if accessing a different exotic endpoint Returns Type Description string the converted, long url with the full endpoint headers() All the headers which are needed in an ajax call. The $2sxc.http Api you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doing custom API calls. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. Note Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. The http also has some internal methods which are not documented here. History Introduced in 2sxc 10.25 Declaration function headers() Returns Type Description Record<string, string> Dictionary / Record of headers headers(number) All the headers which are needed in an ajax call - within a module context. The $2sxc.http Api you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doing custom API calls. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. Note Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. The http also has some internal methods which are not documented here. History Introduced in 2sxc 10.25 Declaration function headers(id: number) Parameters Type Name Description number id optional module ID Returns Type Description Record<string, string> Dictionary / Record of headers headers(number, number) All the headers which are needed in an ajax call - within a module and content-block context. The $2sxc.http Api you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doing custom API calls. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. Note Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. The http also has some internal methods which are not documented here. History Introduced in 2sxc 10.25 Declaration function headers(id: number, cbid: number) Parameters Type Name Description number id optional module ID number cbid optional content block ID Returns Type Description Record<string, string> Dictionary / Record of headers headers(number, number, ContextIdentifier) All the headers which are needed in an ajax call. Uses a module and content-block context (but these could also be null) and a full context identifier for advanced operations. The $2sxc.http Api you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doing custom API calls. Tip In most cases you won't use this, but instead get the Sxc object for the current instance and use either the data, query or webApi service. Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. Note Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. The http also has some internal methods which are not documented here. History Introduced in 2sxc 10.25 Declaration function headers(id: number, cbid: number, ctx: ContextIdentifier) Parameters Type Name Description number id optional module ID number cbid optional content block ID ContextIdentifier ctx optional context information to include in the header Returns Type Description Record<string, string> Dictionary / Record of headers"
  },
  "api/js/SxcGlobalWithCms.html": {
    "href": "api/js/SxcGlobalWithCms.html",
    "title": "Interface SxcGlobalWithCms | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface SxcGlobalWithCms $2sxc global interface extending the SxcGlobal when the page feature JsCms is enabled. If the page feature 2sxc.JsCms is not enabled, the window.$2sxc will be a SxcGlobal Package: Api.Js.SxcJs Properties cms Content Management features on the $2sxc Declaration cms: SxcGlobalCms Property Value Type Description SxcGlobalCms Methods translate(string) Will retrieve a resource in the current language. Mainly used for toolbars etc. to support localization. Only available when edit mode is on meaning the page feature JsCms is enabled Declaration function translate(key: string) Parameters Type Name Description string key the key of the resource to translate Returns Type Description string"
  },
  "api/js/SxcPart.html": {
    "href": "api/js/SxcPart.html",
    "title": "Class SxcPart | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcPart Base class for anything attached to an sxc-instance. This is internal and not important, but we can't keep it out of the docs. Package: Api.Js.SxcJs"
  },
  "api/js/SxcQuery.html": {
    "href": "api/js/SxcQuery.html",
    "title": "Class SxcQuery | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcQuery Instance Query Service sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Package: Api.Js.SxcJs Properties name Instance Query Service sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration name: string Property Value Type Description string Methods getAll() Instance Query Service sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getAll<T>() Returns Type Description Promise<T> getAll(string | Record<string, unknown>) Instance Query Service sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getAll<T>(urlParams: string | Record<string, unknown>) Parameters Type Name Description string | Record<string, unknown> urlParams Returns Type Description Promise<T> getAll(string | Record<string, unknown>, string | Record<string, unknown>) Instance Query Service sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getAll<T>(urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>) Parameters Type Name Description string | Record<string, unknown> urlParams string | Record<string, unknown> data Returns Type Description Promise<T> getStream(string) Get just one stream, returning an array of items in that stream sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getStream<T>(stream: string) Parameters Type Name Description string stream Returns Type Description Promise<T[]> containing an array of items - or empty if stream not found or nothing returned getStream(string, string | Record<string, unknown>) Instance Query Service sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getStream<T>(stream: string, urlParams: string | Record<string, unknown>) Parameters Type Name Description string stream string | Record<string, unknown> urlParams Returns Type Description Promise<T[]> getStream(string, string | Record<string, unknown>, string | Record<string, unknown>) Instance Query Service sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getStream<T>(stream: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>) Parameters Type Name Description string stream string | Record<string, unknown> urlParams string | Record<string, unknown> data Returns Type Description Promise<T[]> getStreams(string) Get a query but only the mentioned streams. This will reduce the amount of data retrieved on queries that have many streams. sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getStreams<T>(streams: string) Parameters Type Name Description string streams Returns Type Description Promise<T> Promise containing a object with stream-names and items in the streams. getStreams(string, string | Record<string, unknown>) Get a query but only the mentioned streams. This will reduce the amount of data retrieved on queries that have many streams. sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getStreams<T>(streams: string, urlParams: string | Record<string, unknown>) Parameters Type Name Description string streams name of streams to get, comma separated string | Record<string, unknown> urlParams additional parameters for the URL, either as a string or as a object Returns Type Description Promise<T> Promise containing a object with stream-names and items in the streams. getStreams(string, string | Record<string, unknown>, string | Record<string, unknown>) Get a query but only the mentioned streams. This will reduce the amount of data retrieved on queries that have many streams. sxc.query Services of the Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data \uD83D\uDC49 docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...), but this is more convenient. \uD83D\uDC49 Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName. The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream, just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Demo App and further links You should find some code examples in this demo App TimeLineJS Declaration function getStreams<T>(streams: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>) Parameters Type Name Description string streams name of streams to get, comma separated string | Record<string, unknown> urlParams additional parameters for the URL, either as a string or as a object string | Record<string, unknown> data data to include in case of a POST call - if this is provided, it will use a post Returns Type Description Promise<T> Promise containing a object with stream-names and items in the streams."
  },
  "api/js/SxcWebApi.html": {
    "href": "api/js/SxcWebApi.html",
    "title": "Class SxcWebApi | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class SxcWebApi helper API to run ajax / REST calls to the server it will ensure that the headers etc. are set correctly and that urls are rewritten sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Package: Api.Js.SxcJs Methods delete(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated - docs in the separate interface sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function delete(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl any params any data boolean preventAutoFail Returns Type Description any fetchJson(string, string | Record<string, any>, string) Will retrieve data from the backend using a standard fetch and give you an object. sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function fetchJson<T>(url: string, data?: string | Record<string, any>, method?: string) Parameters Type Name Description string url a full url or short-hand like controller/method?params app/auto/api/controller/method?params. Note that params would also be specified on the url. string | Record<string, any> data optional POST data string method optional method, defaults to GET unless it has data, in which case it defaults to POST Returns Type Description Promise<T> a Promise containing any object. fetchRaw(string, string | Record<string, any>, string) Will retrieve data from the backend using a standard fetch. sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function fetchRaw(url: string, data?: string | Record<string, any>, method?: string) Parameters Type Name Description string url a full url or short-hand like controller/method?params app/auto/api/controller/method?params. Note that params would also be specified on the url. string | Record<string, any> data optional POST data string method optional method, defaults to GET unless it has data, in which case it defaults to POST Returns Type Description Promise<Response> a Promise containing a Response object, just like a normal fetch would. example: webApi.fetchRaw('Rss/Feed'); example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 })); // url params example: webApi.fetchRaw('Rss/Feed', { id: 47 }); // post params example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 }), { something: 'this is a test' }); // url & post params maybe: webApi.fetchRaw({url: 'Rss/Feed', params: { id: 47 }}) maybe: webApi.fetchRaw({url: ..., params: { ...}, body: { ...}, method: 'GET' }) get(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated - docs in the separate interface sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function get(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl any params any data boolean preventAutoFail Returns Type Description any headers(string) All the headers which are needed in an ajax call for this to work reliably. Use this if you need to get a list of headers in another system sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function headers(method?: string) Parameters Type Name Description string method Returns Type Description Record<string, string> post(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated - docs in the separate interface sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function post(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl any params any data boolean preventAutoFail Returns Type Description any put(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated - docs in the separate interface sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function put(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl any params any data boolean preventAutoFail Returns Type Description any request(string | ZzzAjaxSettingsDeprecated, any, any, boolean, string) Deprecated - docs in the separate interface sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function request(settings: string | ZzzAjaxSettingsDeprecated, params: any, data: any, preventAutoFail: boolean, method: string) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settings any params any data boolean preventAutoFail string method Returns Type Description any url(string, string | Record<string, any>) helper API to run ajax / REST calls to the server it will ensure that the headers etc. are set correctly and that urls are rewritten sxc.webApi Helpers on the Sxc Controller you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the App/Module-specific sxc-controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc global here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetchRaw and fetchJson API APIs to get URLs and headers How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc-controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs. Here you'll also find out more about the sxc-controller. Declaration function url(url: string, params?: string | Record<string, any>) Parameters Type Name Description string url A short, medium or long url. Short like controller/method, medium like app/auto/api/controller/method long like `https://xyz. In all cases it can also have ?params etc. string | Record<string, any> params Optional parameters as string or object, will be added to url-params. Returns Type Description string In the cases of a short/medium url, it will auto-expand to have the full url as needed for an API call."
  },
  "api/js/ToolbarWorkflowManager.html": {
    "href": "api/js/ToolbarWorkflowManager.html",
    "title": "Class ToolbarWorkflowManager | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class ToolbarWorkflowManager A workflow manager of a Toolbar which will run stuff before / after commands. When toolbars are created, they will add a Manager and then raise an event for in-page code to add workflow steps. Normally the toolbar with raise a toolbar-init event where you can then add steps. Package: Api.Js.SxcJs Methods add(WorkflowStep | WorkflowStep[]) Register one or many workflow-steps to the toolbar, to use if toolbar commands are executed. Declaration function add(steps: WorkflowStep | WorkflowStep[]) Parameters Type Name Description WorkflowStep | WorkflowStep[] steps"
  },
  "api/js/TypeValue.html": {
    "href": "api/js/TypeValue.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": ""
  },
  "api/js/UrlParams.html": {
    "href": "api/js/UrlParams.html",
    "title": "Class UrlParams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class UrlParams Helper object to read url params. Available on $2sxc.urlParams Package: Api.Js.SxcJs Methods get(string) Get a param from the url, no matter if it's behind ? or # If not found, will return an empty string '' Declaration function get(name: string) Parameters Type Name Description string name Returns Type Description string isDebug() Checks if debug is enabled in the URL Declaration function isDebug() Returns Type Description boolean require(string) Get a required param from the url, no matter if it's behind ? or # Will throw an error if not found Declaration function require(name: string) Parameters Type Name Description string name Returns Type Description string"
  },
  "api/js/WorkflowPhases.html": {
    "href": "api/js/WorkflowPhases.html",
    "title": "Enum WorkflowPhases | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enum WorkflowPhases Namespace Phases / events of a specific workflow. Fields Run after a specific event / command Run at every phase - before and after events/commands Run before a specific event / command"
  },
  "api/js/WorkflowStep.html": {
    "href": "api/js/WorkflowStep.html",
    "title": "Interface WorkflowStep | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface WorkflowStep A workflow step (code-sequence) to run before/after specific events. WorkflowStep you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The workflow step contains a command for which it will trigger see the Commands List There is also a special command called refresh which isn't a normal command used on a button, but an internal command called when refreshing the page through reload or ajax. This too can be handled and cancelled a phase (before/after) - possible phase values: before, after, all a code what is to be done See also: CMS Command Workflows for Commands and Toolbars History Introduced in 2sxc 11.12 Enhanced so it also works on inline toolbars in v12.10 Package: Api.Js.SxcJs Properties code The code which is run, must be a promise-factory. So it's a function that will return a promise. Required. See Function Signature WorkflowStepCode WorkflowStep you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The workflow step contains a command for which it will trigger see the Commands List There is also a special command called refresh which isn't a normal command used on a button, but an internal command called when refreshing the page through reload or ajax. This too can be handled and cancelled a phase (before/after) - possible phase values: before, after, all a code what is to be done See also: CMS Command Workflows for Commands and Toolbars History Introduced in 2sxc 11.12 Enhanced so it also works on inline toolbars in v12.10 Declaration code: (args: WorkflowStepCodeArguments) => WorkflowStepCodeArguments Property Value Type Description (args: WorkflowStepCodeArguments) => WorkflowStepCodeArguments command The action this step is for, can be 'any', 'edit', etc. Will be 'all' by default WorkflowStep you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The workflow step contains a command for which it will trigger see the Commands List There is also a special command called refresh which isn't a normal command used on a button, but an internal command called when refreshing the page through reload or ajax. This too can be handled and cancelled a phase (before/after) - possible phase values: before, after, all a code what is to be done See also: CMS Command Workflows for Commands and Toolbars History Introduced in 2sxc 11.12 Enhanced so it also works on inline toolbars in v12.10 Declaration command: string Property Value Type Description string name The name of this step, in case it needs to be replaced or somehow controlled Will be empty by default WorkflowStep you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The workflow step contains a command for which it will trigger see the Commands List There is also a special command called refresh which isn't a normal command used on a button, but an internal command called when refreshing the page through reload or ajax. This too can be handled and cancelled a phase (before/after) - possible phase values: before, after, all a code what is to be done See also: CMS Command Workflows for Commands and Toolbars History Introduced in 2sxc 11.12 Enhanced so it also works on inline toolbars in v12.10 Declaration name?: string Property Value Type Description string phase Action-phase being run, like 'all', 'before', 'after' will be 'before' by default WorkflowStep you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The workflow step contains a command for which it will trigger see the Commands List There is also a special command called refresh which isn't a normal command used on a button, but an internal command called when refreshing the page through reload or ajax. This too can be handled and cancelled a phase (before/after) - possible phase values: before, after, all a code what is to be done See also: CMS Command Workflows for Commands and Toolbars History Introduced in 2sxc 11.12 Enhanced so it also works on inline toolbars in v12.10 Declaration phase?: WorkflowPhases Property Value Type Description WorkflowPhases priority Execution priority, higher comes first Will be 1 by default. WorkflowStep you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The workflow step contains a command for which it will trigger see the Commands List There is also a special command called refresh which isn't a normal command used on a button, but an internal command called when refreshing the page through reload or ajax. This too can be handled and cancelled a phase (before/after) - possible phase values: before, after, all a code what is to be done See also: CMS Command Workflows for Commands and Toolbars History Introduced in 2sxc 11.12 Enhanced so it also works on inline toolbars in v12.10 Declaration priority?: number Property Value Type Description number"
  },
  "api/js/WorkflowStepCodeArguments.html": {
    "href": "api/js/WorkflowStepCodeArguments.html",
    "title": "Class WorkflowStepCodeArguments | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Class WorkflowStepCodeArguments Arguments for WorkflowStepCode. Will be passed to your code and should also be returned by your code. This also allows cancelling further execution. Package: Api.Js.SxcJs Properties cancel If the workflow should be cancelled. Can be set by any workflow step. If set to true, following steps / workflows will not run. Declaration cancel: boolean Property Value Type Description boolean command Name this workflow is running for Declaration command: string Property Value Type Description string context Context of the current command / step being run Declaration context: ContextComplete Property Value Type Description ContextComplete phase The phase it's in (before, after, etc.) Declaration phase: WorkflowPhases Property Value Type Description WorkflowPhases result Result in after-phases of the workflow BETA - never really tested this Declaration result: unknown Property Value Type Description unknown"
  },
  "api/js/ZzzAjaxSettingsDeprecated.html": {
    "href": "api/js/ZzzAjaxSettingsDeprecated.html",
    "title": "Interface ZzzAjaxSettingsDeprecated | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ZzzAjaxSettingsDeprecated Deprecated parameters for old jQuery AJAX calls. Shouldn't be used any more. Package: Api.Js.SxcJs Properties action action name, for controller/action calls Declaration action?: string Property Value Type Description string controller Controller name, for controller/action calls Declaration controller?: string Property Value Type Description string params The params to be used in the url for the request Declaration params?: any Property Value Type Description any"
  },
  "api/js/ZzzSxcWebApiDeprecated.html": {
    "href": "api/js/ZzzSxcWebApiDeprecated.html",
    "title": "Interface ZzzSxcWebApiDeprecated | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Interface ZzzSxcWebApiDeprecated Deprecated Old APIs on sxc.webApi. They only exist if jQuery is included on the page, and we highly discourage their use. Deprecated sxc.webApi Helpers using JQuery you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } 2sxc originally used jQuery and the JS API still has commands which do jQuery AJAX calls. On the webApi object they are webApi.delete(...) for HTTP DELETE calls webApi.get(...) for HTTP GET calls webApi.post(...) for HTTP POST calls webApi.put(...) for HTTP PUT calls webApi.request(...) for any other HTTP calls Warning As of 2sxc 12.10 we don't recommend using this any more. It will only work if the page also has jQuery enabled either using pageService.Activate(\"jQuery\"); (see IPageService) or because something else like the theme/skin already loads it. From now on we strongly suggest you use fetch which is supported by all modern browsers. See webApi.fetch Tip To find out how to get the module sxc-object using $2sxc, check out SxcWebApi Example Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); Working with REST / HTTP Async Stuff Short note: these WebAPIs work using jQuery promises (not JavaScript promises), supporting .then(...), .error(...) etc. The $2sxc(...).webApi has 4 jQuery commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Working with Custom C# App WebAPIs In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs Package: Api.Js.SxcJs Methods delete(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated Please use fetchJson() or fetchJson() instead. Returns an http-delete promise using jQuery Deprecated sxc.webApi Helpers using JQuery you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } 2sxc originally used jQuery and the JS API still has commands which do jQuery AJAX calls. On the webApi object they are webApi.delete(...) for HTTP DELETE calls webApi.get(...) for HTTP GET calls webApi.post(...) for HTTP POST calls webApi.put(...) for HTTP PUT calls webApi.request(...) for any other HTTP calls Warning As of 2sxc 12.10 we don't recommend using this any more. It will only work if the page also has jQuery enabled either using pageService.Activate(\"jQuery\"); (see IPageService) or because something else like the theme/skin already loads it. From now on we strongly suggest you use fetch which is supported by all modern browsers. See webApi.fetch Tip To find out how to get the module sxc-object using $2sxc, check out SxcWebApi Example Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); Working with REST / HTTP Async Stuff Short note: these WebAPIs work using jQuery promises (not JavaScript promises), supporting .then(...), .error(...) etc. The $2sxc(...).webApi has 4 jQuery commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Working with Custom C# App WebAPIs In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs Declaration function delete(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl the url to talk to any params jQuery style ajax parameters any data jQuery style data for post/put requests boolean preventAutoFail Returns Type Description any jQuery ajax promise object get(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated Please use fetchJson() or fetchJson() instead. Returns an http-get promise using jQuery Deprecated sxc.webApi Helpers using JQuery you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } 2sxc originally used jQuery and the JS API still has commands which do jQuery AJAX calls. On the webApi object they are webApi.delete(...) for HTTP DELETE calls webApi.get(...) for HTTP GET calls webApi.post(...) for HTTP POST calls webApi.put(...) for HTTP PUT calls webApi.request(...) for any other HTTP calls Warning As of 2sxc 12.10 we don't recommend using this any more. It will only work if the page also has jQuery enabled either using pageService.Activate(\"jQuery\"); (see IPageService) or because something else like the theme/skin already loads it. From now on we strongly suggest you use fetch which is supported by all modern browsers. See webApi.fetch Tip To find out how to get the module sxc-object using $2sxc, check out SxcWebApi Example Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); Working with REST / HTTP Async Stuff Short note: these WebAPIs work using jQuery promises (not JavaScript promises), supporting .then(...), .error(...) etc. The $2sxc(...).webApi has 4 jQuery commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Working with Custom C# App WebAPIs In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs Declaration function get(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl the url to get any params jQuery style ajax parameters any data jQuery style data for post/put requests boolean preventAutoFail Returns Type Description any jQuery ajax promise object post(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated Please use fetchJson() or fetchJson() instead. Returns an http-post promise using jQuery Deprecated sxc.webApi Helpers using JQuery you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } 2sxc originally used jQuery and the JS API still has commands which do jQuery AJAX calls. On the webApi object they are webApi.delete(...) for HTTP DELETE calls webApi.get(...) for HTTP GET calls webApi.post(...) for HTTP POST calls webApi.put(...) for HTTP PUT calls webApi.request(...) for any other HTTP calls Warning As of 2sxc 12.10 we don't recommend using this any more. It will only work if the page also has jQuery enabled either using pageService.Activate(\"jQuery\"); (see IPageService) or because something else like the theme/skin already loads it. From now on we strongly suggest you use fetch which is supported by all modern browsers. See webApi.fetch Tip To find out how to get the module sxc-object using $2sxc, check out SxcWebApi Example Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); Working with REST / HTTP Async Stuff Short note: these WebAPIs work using jQuery promises (not JavaScript promises), supporting .then(...), .error(...) etc. The $2sxc(...).webApi has 4 jQuery commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Working with Custom C# App WebAPIs In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs Declaration function post(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl the url to get any params jQuery style ajax parameters any data jQuery style data for post/put requests boolean preventAutoFail Returns Type Description any jQuery ajax promise object put(string | ZzzAjaxSettingsDeprecated, any, any, boolean) Deprecated Please use fetchJson() or fetchJson() instead. Returns an http-put promise using jQuery Deprecated sxc.webApi Helpers using JQuery you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } 2sxc originally used jQuery and the JS API still has commands which do jQuery AJAX calls. On the webApi object they are webApi.delete(...) for HTTP DELETE calls webApi.get(...) for HTTP GET calls webApi.post(...) for HTTP POST calls webApi.put(...) for HTTP PUT calls webApi.request(...) for any other HTTP calls Warning As of 2sxc 12.10 we don't recommend using this any more. It will only work if the page also has jQuery enabled either using pageService.Activate(\"jQuery\"); (see IPageService) or because something else like the theme/skin already loads it. From now on we strongly suggest you use fetch which is supported by all modern browsers. See webApi.fetch Tip To find out how to get the module sxc-object using $2sxc, check out SxcWebApi Example Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); Working with REST / HTTP Async Stuff Short note: these WebAPIs work using jQuery promises (not JavaScript promises), supporting .then(...), .error(...) etc. The $2sxc(...).webApi has 4 jQuery commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Working with Custom C# App WebAPIs In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs Declaration function put(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settingsOrUrl the url to put any params jQuery style ajax parameters any data jQuery style data for post/put requests boolean preventAutoFail Returns Type Description any jQuery ajax promise object request(string | ZzzAjaxSettingsDeprecated, any, any, boolean, string) Deprecated Please use fetchJson() or fetchJson() instead. Generic http request using jQuery Deprecated sxc.webApi Helpers using JQuery you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } 2sxc originally used jQuery and the JS API still has commands which do jQuery AJAX calls. On the webApi object they are webApi.delete(...) for HTTP DELETE calls webApi.get(...) for HTTP GET calls webApi.post(...) for HTTP POST calls webApi.put(...) for HTTP PUT calls webApi.request(...) for any other HTTP calls Warning As of 2sxc 12.10 we don't recommend using this any more. It will only work if the page also has jQuery enabled either using pageService.Activate(\"jQuery\"); (see IPageService) or because something else like the theme/skin already loads it. From now on we strongly suggest you use fetch which is supported by all modern browsers. See webApi.fetch Tip To find out how to get the module sxc-object using $2sxc, check out SxcWebApi Example Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); Working with REST / HTTP Async Stuff Short note: these WebAPIs work using jQuery promises (not JavaScript promises), supporting .then(...), .error(...) etc. The $2sxc(...).webApi has 4 jQuery commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Working with Custom C# App WebAPIs In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs Declaration function request(settings: string | ZzzAjaxSettingsDeprecated, params: any, data: any, preventAutoFail: boolean, method: string) Parameters Type Name Description string | ZzzAjaxSettingsDeprecated settings any params jQuery style ajax parameters any data jQuery style data for post/put requests boolean preventAutoFail string method the http verb name Returns Type Description any jQuery ajax promise object"
  },
  "api/js/home.html": {
    "href": "api/js/home.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "this is moved to 2sxc JavaScript and TypeScript for Dnn/Oqtane"
  },
  "api/js/index.html": {
    "href": "api/js/index.html",
    "title": "Package Api.Js.SxcJsNamespace Api.Js.SxcJs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Package Api.Js.SxcJsNamespace Api.Js.SxcJs Classes ContextIdentifier ContextIdentifier is used to initialize a Sxc object outside of the default context. HasLog Any object that has an own log object Log A log object which will collect log entries for another ojbect LogEntry A log entry item QuickEditConfig Quick Edit Configuration which has an enable and specific button configurations QuickEditConfigButtons Buttons on a quick-edit toolbar QuickEditConfigRoot Quick Edit - Full configuration at root, with enable and rules for modules and innerBlocks Sxc The typical sxc-instance object for a specific DNN module or content-block SxcCms This is in charge of sxc.cms on the instance level. ATM it just has the run command. In future, it may also have dedicated command like layout etc. SxcData Data Service for an App / Sxc-Instance to get/create data of a specific Content-Type SxcDataServiceBase Base class doing common checks. This is internal and not important, but we can't keep it out of the docs. SxcGlobalCms Global Content-Management System on the $2sxc.cms. It is only available if the page is in edit mode / the page feature 2sxc.JsCms has been activated. SxcGlobalEnvironment Provides environment information to $2sxc - usually page-id, api-root and stuff like that SxcGlobalHttp Global HTTP Service for information and helpers on $2sxc.http SxcPart Base class for anything attached to an sxc-instance. This is internal and not important, but we can't keep it out of the docs. SxcQuery Instance Query Service SxcWebApi helper API to run ajax / REST calls to the server it will ensure that the headers etc. are set correctly and that urls are rewritten ToolbarWorkflowManager A workflow manager of a Toolbar which will run stuff before / after commands. When toolbars are created, they will add a Manager and then raise an event for in-page code to add workflow steps. Normally the toolbar with raise a toolbar-init event where you can then add steps. UrlParams Helper object to read url params. Available on $2sxc.urlParams WorkflowStepCodeArguments Arguments for WorkflowStepCode. Will be passed to your code and should also be returned by your code. This also allows cancelling further execution. Interfaces CommandAddExistingParams Parameters used for the command add-existing. The contentType name determines what items will be shown in the dialog. Depending on your use case, you will need to use the CommandParamsEntityInList or CommandParamsEntityInContentBlock parameters as well. ⤴️ back to All Command Names CommandAddParams Parameters used for the command add. The contentType determines what items will be created, the index where. Depending on your use case, you will need to use the CommandParamsEntityInList or CommandParamsEntityInContentBlock parameters as well. ⤴️ back to All Command Names CommandCodeParams Parameters used for the command code on toolbars (new in v14.4). ⤴️ back to All Command Names CommandContentTypeParams Parameters used for the command contenttype. The content-type name determines what items will be loaded to manage the fields. ⤴️ back to All Command Names CommandCopyParams Parameters used for the command copy. Will copy the entity on entityId. ⤴️ back to All Command Names CommandDataParams Parameters used for the command data. The content-type name determines what items will be managed. ⤴️ back to All Command Names CommandDeleteParams Parameters used for the command delete. ⤴️ back to All Command Names CommandMetadataParams Parameters used for the command metadata. Will do either one of these: if it has an entityId, will just open edit for that Entity if it has no entityId, will open new for the current contentType and assign to the target specified by metadata: ⤴️ back to All Command Names CommandNewParams Parameters used for the command new The ContentType name determines what kind of item will be created. Can also contain prefill to add values to the new item. Can also contain list-information, in which case it's added to that list. Depending on your use case, you will need to use the CommandParamsEntityInList or CommandParamsEntityInContentBlock parameters as well. ⤴️ back to All Command Names CommandParams Command parameters are handed over to a command for execution. It contains all possible combinations of parameters that can be used in a command. We will try to improve how this is documented, but ATM it just has all parameters, even though you may need none, or just a few. Note: For your specific commands, you can also pass other parameters. Important for the docs Most properties are actually not visible (you will get them in the types though). So actually you will usually create one of these: CommandParamsEntityById CommandParamsEntityInContentBlock CommandParamsEntityInList CommandAddParams CommandAddExistingParams CommandDataParams CommandCopyParams CommandCodeParams CommandDeleteParams CommandMetadataParams CommandNewParams Because of this, most of the properties below are NOT documented, as their purpose can change depending on the command used. CommandParamsEntity Parameters used for commands which need an entity ID or a list-reference. ⤴️ back to All Command Names CommandParamsEntityById Parameters used for commands which address a specificy entity. ⤴️ back to All Command Names CommandParamsEntityInContentBlock Parameters used for command which expect an item from a list of a ContentBlock. ⤴️ back to All Command Names CommandParamsEntityInList Parameters used for command which expect an item in a list (field) of a parent. ⤴️ back to All Command Names CommandParamsMetadata Parameters on metadata for commands which have a metadata-target. EnvironmentSpecs A context information for the current page, helping the JS talk with the backend MetadataFor A Metadata-Target identifier to tell an entity that it describes something else. Usually used in Sxc instances with the Data Service Warning: There is another MetadataFor type and they are not fully consistent. This is historical and not easy to correct, but we're working on it. RunParams Parameters for the Instance sxc.cms.run(...) command. New in 13.03 RunParamsWithContext Parameters for the Global $2sxc.cms.run(...) command in Addition to the RunParams. It provides context to the run-params such as a Sxc instance or a tag which it started on. New in 12.10 SxcGlobal This is the root global window.$2sxc function / object. It is both a function window.$2sxc(...) and object window.$2sxc.insights... If the page feature 2sxc.JsCms is enabled, the window.$2sxc will also be a SxcGlobalWithCms SxcGlobalWithCms $2sxc global interface extending the SxcGlobal when the page feature JsCms is enabled. If the page feature 2sxc.JsCms is not enabled, the window.$2sxc will be a SxcGlobal WorkflowStep A workflow step (code-sequence) to run before/after specific events. ZzzAjaxSettingsDeprecated Deprecated parameters for old jQuery AJAX calls. Shouldn't be used any more. ZzzSxcWebApiDeprecated Deprecated Old APIs on sxc.webApi. They only exist if jQuery is included on the page, and we highly discourage their use. Enums CommandNames Names of commands known to 2sxc CMS - for use in toolbars and calling commands directly from code MetadataTargetTypes Metadata Target Types These are constants to determine what something is assigned to (e.g. it describes an Entity, a file, etc.) Use it for the @see MetadataFor objects WorkflowPhases Phases / events of a specific workflow."
  },
  "basics/app/assets.html": {
    "href": "basics/app/assets.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to App Assets"
  },
  "basics/app/configuration.html": {
    "href": "basics/app/configuration.html",
    "title": "App Configuration | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Configuration you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has a Configuration Entity which describes things like App Name App Version Folder (within the 2sxc-folder) Minimum version of Dnn needed for the App to work Minimum version of 2sxc needed for the App to work etc. Edit App Configuration This is where you can find the App Configuration On 2 you can configure the permissions you need: Display Name The name shown in the app-picker for the content-editor. It is also used to name the ZIP-package if you ever export the app. Description Just an informative description Version A version number, will also be used in the package-name when exporting Folder The folder within the [portal]/2sxc/ where all the templates, javascripts and other assets are stored. If you touch this, remember to rename the folder as well. Allow Token Templates Just a yes/no if these are allowed in this package. At the moment it has no effect, just for your own information. At a later time it may prevent certain templates from working if disabled. Allow Razor Templates Same as Allow Token Templates. Original Id A (optional) guid of the original App which was used to generate this current App. This is only important, if you reset the App-Guid when exporting it; it will help show the correct Getting-Started in the App even if the App-Guid was reset. Required Version (added in 08.03.03) Is used to check if the app can run, or otherwise warn the user. It will use the .net version compare. Example value: \"08.03.00\" Required DNN Version (added in 08.03.03) Is used to check if the app can run, or otherwise warn the user. It will use the .net version compare. Example value: \"07.02.00\" Difference App Configuration / App Settings The App Configuration is a system Entity and 2sxc needs it for the App to work properly. The App Settings can contain any information you configure it to have, and the values are only used in the App itself. Use in C# Code (Razor / WebAPI) Most of this information is available on the App object, like App.Path. Read about the C# API here."
  },
  "basics/app/content-app/index.html": {
    "href": "basics/app/content-app/index.html",
    "title": "The Content App | 2sxc 19 for Dnn and Oqtane",
    "keywords": "The Content App The Content-App is a special App in each Site which is automatically created whenever you start using 2sxc on a site. The core purpose is content-editing like adding text, images, links and simple decorations (like separation lines) to the page. Tip The content App has some special behavior and limitations by design. Special Behavior of The Content App When adding the Content-App to a page, the dialog which appears will ask the editor to choose the Content-Type (like Image) and then how to show it (like Full-Size). This is different from all other Apps where the editor will first choose the App (like Blog), and then the functionality (like Tag-Cloud). The Content App is quickly added as another module: It will first show the Content Type picker: ...and then the View to use for this Content-Type. Pre-Built Content Templates The Content App can auto-install prepared templates which are specifically designed for this use case. This is why the installer looks different for The Content App than for normal Apps. Tip Instead of installing the default set of Content-Types and Views, you can also skip this and just configure your own or import your preferred default Content-App. Use this ✅ checklist to create a custom template app Use this ✅ checklist to import the custom app Special Limitations of The Content App Since the Content-App is always there by default and the purpose is to add/edit simple content, it's limited by design to not have some functionality other Apps have. This is mainly to protect the developer from building solutions with a bad user experience, since anything complex should be self-contained in it's own App. The limitations are: No VisualQuery Now Custom Web APIs Technical Details Each Site/Portal has an own Content App The ID of the Content-App is Content while other Apps have a GUID as the ID Learn More The App Folder Structure App Icons Bundling / Optimizing assets ✅ How to reset the content-app to factory defaults History Introduced in 2sxc 1.0 Enhanced to have multi-language App Resources and Settings 2sxc v11 Extended to contain Settings and Resources which apply to the whole site in v12.04 Massively enhanced to be Hybrid (Dnn/Oqtane) and follow best practices in 12.05 Dropped support for site-wide settings as it's moved to the Primary App in v13.0"
  },
  "basics/app/export-import/app-export.html": {
    "href": "basics/app/export-import/app-export.html",
    "title": "App Export as ZIP | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Export as ZIP you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .query-app, .context-box-summary .process-razor, .context-box-summary .process-web-api-app, .context-box-summary .edit-ui-custom { visibility: visible; } Every App and parts of it can be Exported as a ZIP which can then be distributed and re-imported. What's in the ZIP? The ZIP contains everything about the App, including: The data in an XML file The App Settings (they are also just data) The views and assets for the views such as CSS as normal files The ADAM folder of the App containing assets which \"belong\" to this App Any other files referenced by data in the app - like files in the /Portals/0 folder How to Export You can find the export dialog here. What you see is quite self-explanatory: The Specs Show some specs just so you see what version it will be ec. in case you need to change it first. The Contains shows what will be exported. Note: some files such as the node_modules folder are not exported, as they are not needed in the target environment. This can be reconfigured. Advanced lets you make some advanced settings. Advanced Settings \uD83D\uDD33 Include all Content Groups This is disabled by default. Normally you want to export the App to install in another site, and then place things there anew as you need. In that case, you don't need this checked. But if you are migrating a site, then the Content Groups contain the references for what content to show on what page, so you may want to include this. \uD83D\uDD33 Reset the GUID Apps have a GUID to identify them. Normally you will want the GUID to stay the same. But in rare cases where you want to create a different App, you will want to reset the GUID. ✅ Include all ADAM Assets By default, all assets belonging to the App are included. These are in the /Portals/x/Adam/[AppName]/ folder. Sometimes you will want to skip these, for example if there are too many assets and the ZIP would become too large. In such a scenario you would want to uncheck this, and then manually copy the assets to the new site - ideally before importing the App, so the references are re-assigned correctly. ➡️ This feature is reserved to patrons. \uD83D\uDD33 Skip ADAM Assets of Deleted Entities This is disabled by default. If enabled, it would skip assets of deleted entities, as these are probably not in use any more. ➡️ This feature is reserved to patrons. ✅ Include all Site Assets like Images which are not in ADAM By default, all assets outside of the App, which are correctly referenced, are included. These are in the /Portals/x/ folder. Sometimes you will want to skip these, for example if there are too many assets and the ZIP would become too large. In such a scenario you would want to uncheck this, and then manually copy the assets to the new site - ideally before importing the App, so the references are re-assigned correctly. ➡️ This feature is reserved to patrons. History Introduced ca. 2sxc 2 New Asset features added in 2sxc 18.01 Shortlink: https://go.2sxc.org/app-export"
  },
  "basics/app/export-import/app-json.html": {
    "href": "basics/app/export-import/app-json.html",
    "title": "App Export Configuration | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Export Configuration you are here (click to zoom) - discover the stack .context-box-summary .data-all, { visibility: visible; } Starting in v14.10 you can override some export behavior. This is done using the /App_Data/app.json file. You can find out more about the app.json here. The rest of this page is for configuring the export. Default Export Behavior (v7+) By default (eg. if you don't have an app.json), the following folders will not be included in the ZIP file: The following folders and files are special source-code folders and will not be included in export / import of Apps. .git git versioning data .vs visual studio code settings node_modules location for NPM javascript packages for development bower_components location for javascript packages, similar to NPM but older Configurable Behavior When Webpack5 came along, it also needed the folder .temp_cache. So it became clear, that we shouldn't hard wire a list, but make it configurable. This uses the /App_Data/app.json. Example: { \"$schema\": \"https://schemas.2sxc.org/app/v17/app.json\", /* This is a JSON file but it is treated like a JSONC (with comments). Different editors may complain about the comments. To reconfigure VS Code so it knows comments are ok, do this: https://azing.org/2sxc/r/h9m1l6JO */ \"export\": { \"exclude\": [ // Skip git versioning folders, github config folders \".git/\", \".github/\", // \".gitignore\", // Webpack 5 temporary folder and NPM folders \".temp_cache/\", \"node_modules/\", // Other examples // \".vs\", // \".vscode\", // \"package.json\", // \"package-lock.json\", // \"nuget.config\", ] } } History Default behavior since v7 Configurable since v14.10"
  },
  "basics/app/export-import/index.html": {
    "href": "basics/app/export-import/index.html",
    "title": "App Export / Import - Overview | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Export / Import - Overview you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .query-app, .context-box-summary .process-razor, .context-box-summary .process-web-api-app, .context-box-summary .edit-ui-custom { visibility: visible; } Every App and parts of it can be Exported and Imported: Entire App as ZIP App Data for git-versioning as XML Parts of the App Data as XML Content-Types as JSON single Content-Items / Entities as JSON Tables of Content-Items as XML View Definitions together with the Template as JSON Queries as JSON You can also create custom exports as CSV etc. using Razor. Export / Import Anything \uD83D\uDC49 most of this is documented here: https://2sxc.org/en/learn/import-export"
  },
  "basics/app/folder-structure.html": {
    "href": "basics/app/folder-structure.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to App Folder Structure"
  },
  "basics/app/folders-and-files/app-json.html": {
    "href": "basics/app/folders-and-files/app-json.html",
    "title": "App Configuration /App_Data/app.json (improved v17.02) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Configuration /App_Data/app.json (improved v17.02) you are here (click to zoom) - discover the stack .context-box-summary .data-all, { visibility: visible; } The app.json file is a special config file located in the protected /App_Data folder. This file is optional and serves multiple purposes: Control export behavior of the app (eg. which folders to exclude) (v14) Control which editions the app has - eg. for Copilot code generation (v17) Control code generation behavior (v17 WIP) Documentation uses JSON Schema The app.json file is documented using a JSON schema, so you will have intellisense and validation in your editor. It's best to start with the following minimal json file: { \"$schema\": \"https://schemas.2sxc.org/app/v17/app.json\" } The JSON schema is very exact, so it will indicate which properties are allowed and which are not. Where possible, it will also provide intellisense for the values, and auto-complete certain defaults. Configuration Parts As of v17.02, the main parts of the app.json are: export - which folders to exclude from export - see App Export Configuration editions - which editions this app has (see below) copilot - settings for code generation (WIP) Editions Editions allow you to create multiple variants of the app, which can be used in different scenarios. eg. a bs3 and a bs4 edition of a bootstrap app - which does the same thing, but with slightly different HTML eg staging and live to develop the next features on a live system without affecting the users Best read up on Polymorphism to understand this. Since 2sxc can't detect if a folder like layout is just a folder, or an edition, you must define this in the app.json. Once editions are configured, 2sxc can use this - for example to generate code using the 2sxc Copilot. Here's an example of how to configure editions (note that in VS-Code you would get intellisense): { \"$schema\": \"https://schemas.2sxc.org/app/v17/app.json\", \"editions\": { \"\": { \"description\": \"The root / edition of the app.\" }, \"staging\": { // This is our default edition - will work in 2sxc 17.03.01+ \"isDefault\": true, \"description\": \"This is the staging edition of the app\", // BTW: you can add comments like this // This is for a future feature, to auto-copy all files from staging to live \"deployTo\": \"live\", \"generateModelsEnabled\": true, }, \"live\": { \"description\": \"This is the live edition of the app\", \"generateModelsEnabled\": false }, } } Schemas app.json index on schemas.2sxc.org app.json v17 https://schemas.2sxc.org/app/v17/app.json (latest \uD83C\uDF1F) app.json v14 https://schemas.2sxc.org/app/v14/app.json (old, not recommended anymore) History Created in v14.10 Updated in 17.02 with editions and copilot Shortlink: https://go.2sxc.org/app-json"
  },
  "basics/app/folders-and-files/assets.html": {
    "href": "basics/app/folders-and-files/assets.html",
    "title": "App Assets | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Assets you are here (click to zoom) - discover the stack .context-box-summary .data-assets-app { visibility: visible; } In the App Folder you can add any files you need in your App, like: CSS files JS files Images, Logos Note that they should not be content-files, but files your App and the templates need to work. Base Url to Files in the App or View Folder Most links to files need to know where to find the App. You could hardwire the correct link, but that would be very inflexible. This is usually done using the @App.Path or @App.Folder.Url property. The base url to the App is found on @App.Folder.Url (on Razor files which inherit RazorTyped) or on @App.Path on older Razor files If you are using Polymorphism, you may prefer to use the @MyView.Folder.Url (RazorTyped) or @CmsContext.View.Path (older Razor files) Example Using App Assets in your Template @inherits Custom.Hybrid.RazorTyped <link rel=\"stylesheet\" href=\"@App.Folder.Url/assets/style.css\" @Kit.Page.AssetAttributes(priority: 150) /> <link rel=\"stylesheet\" href=\"@App.Folder.Url/assets/lazy.css\" @Kit.Page.AssetAttributes(position: \"bottom\") /> <script type=\"text/javascript\" src=\"@App.Folder.Url/assets/scripts.js\" @Kit.Page.AssetAttributes(priority: 200, position: \"bottom\") /> </script> <img src=\"@App.Folder.Url/some-logo.png?w=200\"> or with older Razor base classes @inherits Custom.Hybrid.Razor14 <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" @Kit.Page.AssetAttributes(priority: 150) /> <link rel=\"stylesheet\" href=\"@App.Path/assets/lazy.css\" @Kit.Page.AssetAttributes(position: \"bottom\") /> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" @Kit.Page.AssetAttributes(priority: 200, position: \"bottom\") /> </script> <img src=\"@App.Path/some-logo.png?w=200\"> Note The above example uses the @Kit.Page service. This requires your razor to inherit from Custom.Hybrid.Razor14 or newer. For other uses, see Asset Optimization Read More App Folder Structure Optimizing Template Assets / Client Dependencies (JS & CSS) Image Resizer Content Assets / Images / Documents"
  },
  "basics/app/folders-and-files/folder-app-data.html": {
    "href": "basics/app/folders-and-files/folder-app-data.html",
    "title": "App_Data Folder | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App_Data Folder you are here (click to zoom) - discover the stack .context-box-summary .data-assets-app { visibility: visible; } The /App_Data folder is special. Files in this folder cannot be downloaded by the user, as IIS prevents access to it. This makes it the right choice for files which contain confidential information, like the app.json file. Security Notes When running DNN you will always run it on IIS, so the /App_Data folder is protected. When running Oqtane, the /App_Data folder is actually not accessible through http, so the protection is guaranteed on all platforms. What does 2sxc place in App_Data? Basically the app.json file data snapshots like the app.xml file, which contains all the data in the DB, so it could be confidential Note: this is not at runtime, but is useful when git-versioning your app History App_Data use introduced ca. v14.10"
  },
  "basics/app/folders-and-files/icons.html": {
    "href": "basics/app/folders-and-files/icons.html",
    "title": "Icons in Apps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Icons in Apps you are here (click to zoom) - discover the stack .context-box-summary .data-assets-app { visibility: visible; } Icons are a great way to make your app more recognizable and user-friendly. They are used in many places, like the app-list, the content-type list, the view-list and more. The most common icons are: The App Icon - shown in the app picker, app-admin and apps-management The View Icon - shown in the view-picker and view-admin (future) Content-Type Icons - shown in the content-type selection in the special Content App App Icon App icons are convention based, so there is no configuration for it. To give your app an icon, place a file called app-icon.png in the root folder of your app. It should be square, and at least 500x500 pixels. Icons for Views / Templates This is also convention based, there is no configuration for it. 2sxc 12.02 also introduces the possibility of specifying an icon in the view-configuration. You have two options for that Convention: To give your views/templates an icon, add an icon file with the same name as your template file. So if your template is called _overview.cshtml your icon should be _overview.png. Configured, in the App-Folder: Place the file in the App-folder and reference it using [App:Path]/your-file.png \uD83D\uDC4D\uD83C\uDFFD this is the recommended option ADAM: Just drop a file there and let ADAM manage it. ⚠️ this is not recommended, because this way the file is NOT in your app folder, so it won't be included in export/import Icons for Content-Types Content-Types don't have a file (like a Template), so this is only configuration based. Just edit the Content-Type Metadata and on the Icon-field you have two options: Configured, in the App-Folder: Place the file in the App-folder and reference it using [App:Path]/your-file.png v12 \uD83D\uDC4D\uD83C\uDFFD this is the recommended option ADAM:Just drop the image you want for your content-type and let ADAM manage it ⚠️ this is not recommended, because this way the file is NOT in your app folder, so it won't be included in export/import History App icons introduced ca. v9.01 View Icons introduced ca. v9.01 Content-Type Icons introduced ca. v9.01 View Icons enhanced with option to upload or specify manually in v12.02"
  },
  "basics/app/folders-and-files/index.html": {
    "href": "basics/app/folders-and-files/index.html",
    "title": "App Folder Structure | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Folder Structure Every app has an own folder for its files. Within that folder the App can have zero or hundreds of folders. all apps are located in [site-root]\\2sxc\\[app-name] the primary / Content App is located in [site-root]\\2sxc\\Content You can create your own folders to organize your templates as you need as the structure is completely open. Special Folders and Files /app-icon.png is always used as the app-icon if provided /App_Data is protected for special configuration and data, see App_Data /App_Data/app.json is an optional configuration file, see app.json /App_Data/[something] is usually used for special data like custom input field configuration /system can contain custom input fields JavaScripts /api contains ...Controller.cs files for the web services this app has. It's not available on the simpler Content App. Note: if you're using Polymorphism then the api folder is usually in a sub-folder, like /live/api Non-Exportable Folders Some folders are not exported by default, and in v14.10+ you can configure it in more detail. See Export restrictions and app.json Recommended sub folder names The following folders have no technical relevance, but we recommend this naming to improve consistency. src and sub-folders should contain your javascript source files in original (unminified, etc.) dist should contain your processed, minified, uglified and combined JS files Note: if you're using Polymorphism then the dist folder is usually in a sub-folder, like live\\dist Platform Differences Dnn ☢️ & Oqtane \uD83E\uDE78 In Dnn ☢️ the App-folder is located in [Website-Root]\\Portals\\[site-id]\\2sxc\\[App-Folder-Name] In Oqtane \uD83E\uDE78 the App-folder is located in [Website-Root]\\2sxc\\[Site-Id]\\[App-Folder-Name] This difference is due to architecture and security differences."
  },
  "basics/app/git/index.html": {
    "href": "basics/app/git/index.html",
    "title": "App Git Integration | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Git Integration In 2sxc you can store the current App State to an XML file and restore it. Why Store and Restore the App State To save to git, and later see how the state got changed To save to git, test some changes, and roll back to the previous state To push to a remote repo (like Github) and pull again from another installation What's Included and What Not If you save an App Folder to git... ...it contains everything in the App folder and App Assets (unless you explicitly added it to the .gitignore file) ...it may contain the App State (all the data items including configuration and settings) if you previously exported them (see below) ...it doesn't contain the Content Assets (images etc.) as that's in the ADAM folder of the App Saving / Restoring App State (Data) This is where you can find the App State Save/Restore On 2 you can save the state (it will be stored in [app-root]/.data/app.xml) On 3 you can restore the data from this file: History Export introduced ca. 2sxc v5 Re-Import introduced in 2sxc v11.11"
  },
  "basics/app/icons.html": {
    "href": "basics/app/icons.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Icons in Apps"
  },
  "basics/app/index.html": {
    "href": "basics/app/index.html",
    "title": "What is an App | 2sxc 19 for Dnn and Oqtane",
    "keywords": "What is an App An app is a standalone bundle of data and functionality. It contains the green and blue parts of the following diagram + any kind of additional material used to build these parts like JavaScript frameworks which are bundled in the App: you are here (click to zoom) - discover the stack .context-box-full .todo, { visibility: visible; } Everything belonging to the App is stored in these locations The App folder contains all the green parts in the image above, including templates, C# code, JavaScript files etc. The database contains all the data of the app The ADAM folder contains the Assets for the App items Important An App doesn't need all of the parts above. Apps can be really trivial. For example they may only contain 1 simple Hello World template and no data at all. And they may also contain 100'000 data items and complex list/details templates. Apps are Installed per Site The EAV is multi-site capable and each Site in the platform corresponds to a Zone in the EAV. A Site corresponds to a Portal in Dnn or a Site in Oqtane. Each Zone contains at least 1 default app called Content and additional Apps as configured. Note The ZoneId is usually different than the Dnn PortalId or the Oqtane SiteId, so Dnn has a PortalSetting to connect this and Oqtane has a matching Setting. Tip Apps are installed per Site. So if your platform has multiple Sites, then each site can have different apps, or the same app may be installed multiple times. Types of Apps Your App can be anything you want it to be. The following types are more to give you a sense of how Apps can be used, but these types are not clearly defined. An App can also be many of these at the same time. Data Focused Apps This is the kind of App a developer usually thinks of - with lots of data and various list/details templates. The core idea of these apps is that the data is one or many shared tables and the output will show parts of this data based on rules, filters etc. Examples of such Apps would be: News Blog References FAQ Custom Forms Apps Content Focused Apps / Site Builder Apps This is the kind of App an editor usually thinks of. The core ideas is that the editor adds an App to a page, and adds data to that instance. The data belongs to that instance, so even if it's technically in a shared table, the user experience makes it feel like each use is autonomous. Examples of such Apps would be: The Content App Image Sliders / Swipers Galleries Image Hotspots Accordions QR Code Page Enhancing Apps This is an App which does something on every page of the Site. The core idea is that a functionality can be used on every page and the logic and data to ensure this is in the App. This kind of App is usually added to the Skin/Theme of the Site so it's available on all pages by default. Examples of such Apps would be: Add Script or CSS Snippets to a page SEO or Open-Graph Enhancements on each page Page protection systems where a part of the page is overlayed until people subscribe Adding third-party extensions such as Disqus, AddSearch or Google Search/Analytics to a page SPA Apps (Single Page Applications) This is an App which contains a JavaScript SPA which will then be the entire UI for users. The data is usually accessed using either the Headless API or custom C# WebAPIs which are also part of the App. Examples of such Apps would be: Customer management SPA A complex search/filter SPA You can create such SPAs using any popular JavaScript Framework such as Angular React Vue The Content App \uD83D\uDC49 See The Content App The Primary App \uD83D\uDC49 See The Primary App You may want to learn more about The App Folder Structure App Icons Bundling / Optimizing assets"
  },
  "basics/app/inherit/index.html": {
    "href": "basics/app/inherit/index.html",
    "title": "Inherit Apps (v13+) WIP | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Inherit Apps (v13+) WIP There are a few ways to re-use data, content-types and templates across sites. In very advanced cases you may want to define an App in one central place, and re-use that in many sites. This describes how to do this - it's a new feature in 2sxc 13.02. Important This only works if the feature has been enabled and requires the EnterpriseCMS license - docs WIP! How it Works TODO: Inherited Apps work like a multi-layer app. The bottom layer is the Ancestor App. Changes to this affect all Apps which inherit it. On top of this is the Descendant App on a specific site, it can only add more material to the parent app, but not change any inherited data Descendant Apps inherit all this: App Name and Folder Name (they must be the same) All Content-Types of the Ancestor All Data / Entities of the Ancestor All Queries of the Ancestor All View definitions of the Ancestor All Template files and JS/CSS resources in the global storage of the App Descendant Apps don't inherit this: Settings - not sure yet if they do - still WIP Templates and Resources in the local storage of the Ancestor App ADAM files of the Ancestor App How to Create Enable Feature Define the Ancestor / Master App Define an Descendant App Test :) Best Practices Everything in the ancestor App will be available in all inherited apps, and anything you change can affect the inherited Apps. Because of this, you should not use an App from a productive site (like the main/home site) as an ancestor, but always create a special site which isn't public, just to manage the ancestors. This will save you a lot of pains which would result from quickly making some edits which accidentally affect all the child sites. Enable the Feature TODO: Migrate an Existing App to becoming a Master Ancestor Create the Ancestor App TODO: todo Limitations of the Ancestor App You must be aware of a few limitations in the Ancestor App. Only views with templates stored in the global location can be used in Descendant Apps If you have data (entities) with images/files in the data, they cannot use the file:72 reference, but must use the full path to the file for it to work on other sites, as the file-id lookup would not work in other sites. Create The Descendant App TODO: History Introduced in v13.01"
  },
  "basics/app/permissions.html": {
    "href": "basics/app/permissions.html",
    "title": "App Permissions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Permissions you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has Permissions which apply to all data in the App. Why would you use this? Sometimes you have an App which needs to grant permissions to a specific user group, like edit permissions to all members of News Editors. In such cases you should apply these permissions to the Content-Types, but you can also apply it at App level. Warning Incorrect permission configuration can leave your App vulnerable to unexpected security risks. This is especially important for App Permissions which apply to the entire App. You should almost never use these permissions. Examples There are no examples for this, as it really only makes sense in very advanced use cases and usually should not be applied. Edit App Permissions This is where you can find the App Permissions On 2 you can configure the permissions you need:"
  },
  "basics/app/primary-app/index.html": {
    "href": "basics/app/primary-app/index.html",
    "title": "The Primary App | 2sxc 19 for Dnn and Oqtane",
    "keywords": "The Primary App The Primary App is a special App in each Site which is automatically created whenever you start using 2sxc on a site. The core purpose is storing site-wide Settings and Metadata. Tip The content App has some special behavior and limitations by design. For example: It is not meant to be added to a page. Since it is the primary App in a Site, some settings on this app affect other Apps in the site. Read more about Settings Special Limitations of The Primary App Since the Primary-App is meant for settings, it has some limitation. The limitations are: Should never be added to a page as of v13 (future releases may change this) Technical Details Each Site/Portal has an own Primary App The ID of the Content-App is 251c0000-eafe-2792-0001-000000000001 History Concept introduced in 2sxc v12 but there the Content App was also the Primary App Standalone Primary App in 2sxc v13 (breaking change)"
  },
  "basics/app/resources.html": {
    "href": "basics/app/resources.html",
    "title": "App Resources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Resources you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has a Resources Entity. The fields available can be anything your App needs, so there is no pre-defined set of fields. Edit/Configure App Resources This is where you can find the App Resources On 2 you can configure the fields you need, just like any other Entity: On 3 you can set the values you need Why would you use this? Many templates may have special labels, intro-texts or buttons which would benefit from simple editing and from multi-language capabilities. This is what the App Resources are for. Use in C# Code (Razor / WebAPI) In 2sxc 12.04+ you should use the new Resources Stack object which merges resources from different sources incl. the App Resources. See Resources C# Docs. In previous version you can access it on the App.Resources Dynamic Entity, like App.Resources.Introduction. Check out the App API docs Use in Token Templates Tokens templates are much more limited, but you can access these values using [App:Resources:...] - for example [App:Resources:Introduction]. The new v12 Resources-Stack is not available in tokens. If you think you need it, please post an issue on github. Don't use in VisualQuery You could also access these properties in VisualQuery, using tokens like [App:Resources:Introduction] - but this is not recommended, as you should not use Resources for this. Use App Settings instead. Don't Use Resources for Settings Resources should only be used for labels, logos, introduction-texts and similar. For Settings always use App Settings. History Introduced in 2sxc 6.0 Extendend The Content App to have multi-language App Resources and Settings 2sxc v11 Created the global Resources in v12.04 Placed the global Resources in the Primary App in v13.0"
  },
  "basics/app/settings.html": {
    "href": "basics/app/settings.html",
    "title": "App Settings | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Settings you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has a Settings Entity. The fields available can be anything your App needs, so there is no pre-defined set of fields. Edit/Configure App Settings This is where you can find the App Settings: On 2 you can configure the fields you need, just like any other Entity: On 3 you can set the values you need Why would you use this? Imagine a Gallery App where each instance (Module) has settings like animation speed. You would place the default values in the App Settings so that by default all instances would behave the same, and you can still change this in one central location. Example from the Content App In newer versions, the Content-App has some App-Settings to store Google-Maps API keys Bootstrap versions (CSS Framework) to load if the Theme doesn't have Bootstrap activated Difference App Configuration / App Settings The App Configuration is a system Entity and 2sxc needs it for the App to work properly. The App Settings can contain any information you configure it to have, and the values are only used in the App itself. Use in C# Code (Razor / WebAPI) In 2sxc 12.04+ you should use the new Settings Stack object which stacks settings from different sources incl. the App Settings. See Settings C# Docs. In previous version you can access it on the App.Settings Dynamic Entity, like App.Settings.AnimationSpeed. Check out the App API docs Use in Token Templates Tokens templates are much more limited, but you can access these values using [App:Settings:...] - for example [App:Settings:AnimationSpeed] The new v12 Settings-Stack is not available in tokens. If you think you need it, please post an issue on github. Use in VisualQuery You can also access these properties in VisualQuery, also using tokens like [App:Settings:DefaultCategory] The new v12 Settings-Stack is not available in Visual Query. If you think you need it, please post an issue on github. Using Settings in Multi-Language Scenarios Settings are normal Entities, and as such can be multi-language. We strongly recommend to limit the use of multi-language settings, as it can often lead to unexpected results. Don't Use Settings for Labels Remember to use App Resources for button-labels, titles etc. and not Settings, as this would confuse the users. History Introduced in 2sxc 6.0 Extendend The Content App to have multi-language App Resources and Settings 2sxc v11 Created the global Settings in v12.04 Placed the global Settings in the Primary App in v13.0"
  },
  "basics/app/templates.html": {
    "href": "basics/app/templates.html",
    "title": "Template Files | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Template Files you are here (click to zoom) - discover the stack .context-box-summary .process-razor-app { visibility: visible; } Template files will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Template File Types The system is built in a way, that furhter templating engines could also be implemented at any time. As of now there are two types of template files: Token (simple but limited) Razor (can do anything you can think of) How it Works Each View has a configuration referencing a template file. 2sxc will then decide what type it is, and run the appropriate engine. The template files usually reside inside app root folder or sub folder. As of now, there are two types: Razor / MVC - These always begin with an _ and end with .cshtml. Placeholders and code usually is marked with @ like @Content.Name Tokens - these always end with .html. Placeholders usually look like [Content.Name]. Tokens cannot have any server-side code aside from the basic placeholders. Tip If your view just hosts a JavaScript SPA, it will also be one of these types of files. Re-Using Templates Note Re-Using in many Views Sometimes you'll want to use the same template file in multiple Views. This can just be configured at the View level Tip Re-Using Templates Across Portals Instead of placing the template in the App-folder of the current portal, you can also place it in a global App-folder in the _default portal of Dnn. This is great if you have the same app in many portals, and want to centralize the template. Tip Razor Templates also support re-using template parts or any C# code. You can also pass parameters to these parts, which allows you to share template-code across templates. Read also Views and Templates Razor Tutorials RazorBlade Tutorials History Introduced in 2sxc 1.0 Automatic View-Polymorphism added in 2sxc 11"
  },
  "basics/app/views.html": {
    "href": "basics/app/views.html",
    "title": "Page Moved | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Page Moved Moved to Views and Templates"
  },
  "basics/app/views/configuration.html": {
    "href": "basics/app/views/configuration.html",
    "title": "View Configuration | 2sxc 19 for Dnn and Oqtane",
    "keywords": "View Configuration you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } A view has a lot of configuration options, but they are all explained in the edit view dialog, so we're not documenting this here. Two things of interest which you may want to read about: View-switching based on url-params Security protecting views like admin-views View Configuration in Razor 2sxc 12.02 introduces the ability to access View some Configuration from Razor. The most important properties are available on CmsContext.View - this is an ICmsView object with properties like Id Identifier Edition Name Advanced Topics Switching between views based on the url Differences between features when using Content or App Protecting Views for certain users using permissions Hide advanced features from normal editors History Introduced in 2sxc 1.0 Made available to Razor in 2sxc 12.02"
  },
  "basics/app/views/index.html": {
    "href": "basics/app/views/index.html",
    "title": "Views and Templates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Views and Templates you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } Views are what the user will see - and contains things like Html, CSS, Javascript and data from the content. How it Works Views configure what templates are combined with what Content-Type to then produce an output. Read more about Templates here The template-file is just part of the view. To be used as a view, it must be configured in the App configuration as a view, where you add things like Name or Thumbnail Image (for the preview when selecting the view) Data specs like what type of data is shown, if the data comes from a query etc. View Parameters to automatically show this view based on url-parameters Tip Views can also specify more Content-Types for using in the Header or Presentation. In addition, they could also say that the data comes from a Query instead of from user/editor input. View Configuration \uD83D\uDC49 See View Configuration View Identifier 2sxc 12.02 introduces a the Identifier. This is useful in scenarios where the same Template is used in multiple views, and should result in slightly different output in each case. The Identifier let's you specify a key to differentiate which behavior the template should have. For example: Two views are configured, one with the name 2 Columns has an Identifier 2Col the other called 3 Columns has 3Col. Your razor code can then access this on CmsContext.View.Identifier and change what CSS classes it uses. In theory you could also check the Name property on CmsContext.View.Name but that could change based on the language, which is why you should use the Identifier. In more complex scenarios we suggest you use View Settings. View Settings \uD83D\uDC49 See View Settings (Advanced ⚠) View Resources \uD83D\uDC49 See View Resources (Advanced ⚠) View Polymorphism Polymorphism can be activated on views (new in v11). When you do this, you can choose between two modes Permission based: in this case SuperUsers get the template from the staging folder while public users get the template from live or the primary one which was configured in the View configuration CSS framework based: here the view will automatically try to pick the file from the folder matching the CSS framework set by the Theme/Skin Advanced Topics Switching between views based on the url Differences between features when using Content or App Protecting Views for certain users using permissions Hide advanced features from normal editors Razor Tutorial History Introduced in 2sxc 1.0 Automatic View-Polymorphism added in 2sxc 11 View Identifier added in 2sxc 12.02 View Settings added in 2sxc 12.02 View Resources added in 2sxc 12.02"
  },
  "basics/app/views/resources.html": {
    "href": "basics/app/views/resources.html",
    "title": "View Resources (Advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "View Resources (Advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } Starting in 2sxc 12.02 you can also now create custom Resources for a View. Why Use View Resources? If Views need multi-language texts or images then the Resources would be the right place to handle them. Examples button-labels Views whichs how tables may have a lot of row or column labels Tip View Resources complement App Resources. The difference is that App-Resources are available on all Templates while View-Resources are only available on the Views they are configured on. Tip If you can use View-Resources on multiple views. This is great in cases where the same template is used for multiple views. But you can also choose to use different Resources - just how you need it. Tip Remember that each Entity/Item can also be multi-language, so you only need View-Resources for static-localization. This means texts/labels/images which are the same every time the View is used. How do View Resources Work? View Resources are standard Entities in 2sxc. So you'll have to create a Content-Type for this containing the fields which you want to configure. To keep the normal Data section clean, the content-types are in the Scope System.Configuration. For multiple views you may end up using the same Resources Content-Type or create a new Content-Type for each view - as you need it. How to Setup View Resources? First create the Content-Type in the Scope Configuration and add the fields you want to configure Then in the view-configuration select that Content-Type (it will only show types on Configuration) and either create a new entity or select an existing one. How Can I Access View Resources in Razor? These can be found as a Dynamic Stack Object on Resources - see Resources Docs. How Can I Access View Settings in Tokens? As of now this is not possible. History Made available to Razor in 2sxc 12.02"
  },
  "basics/app/views/settings.html": {
    "href": "basics/app/views/settings.html",
    "title": "View Settings (Advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "View Settings (Advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } Starting in 2sxc 12.02 you can also now create custom Settings for a a View. Why Use View Settings? This is great if you have multiple Views showing the same Template which has a list of settings to be applied. Or if you want to keep the aspects building a View be configurable in the UI. Simple Cases where the Identifier is Sufficient Tip In many cases it's easier to just use the Identifier and set some variables in your code. But in advanced cases where you may add more views in time and would like to have the variations configurable, the View Settings are the way to go. How do View Settings Work? View Settings are standard Entities in 2sxc. So you'll have to create a Content-Type for this containing the fields which you want to configure. To keep the normal Data section clean, the content-types are in the Scope System.Configuration. For multiple views you may end up using the same Settings Content-Type or create a new Content-Type for each view - as you need it. How to Setup View Settings? First create the Content-Type in the Scope Configuration and add the fields you want to configure Then in the view-configuration select that Content-Type (it will only show types on Configuration) and either create a new entity or select an existing one. How Can I Access View Settings in Razor? These can be found on the Dynamic Stack Object on Settings - see Settings Docs. How Can I Access View Settings in Tokens? As of now this is not possible. History Made available to Razor in 2sxc 12.02"
  },
  "basics/app/web-api.html": {
    "href": "basics/app/web-api.html",
    "title": "WebApi in an App | 2sxc 19 for Dnn and Oqtane",
    "keywords": "WebApi in an App you are here (click to zoom) - discover the stack .context-box-summary .process-apis { visibility: visible; } Every App has built-in WebAPIs for Headless use and you can create your own custom C# Controllers as well. Learn more about WebApi in general Headless WebAPIs in 2sxc 2sxc Custom C# Web APIs"
  },
  "basics/browser/css.html": {
    "href": "basics/browser/css.html",
    "title": "CSS in the Browser | 2sxc 19 for Dnn and Oqtane",
    "keywords": "CSS in the Browser you are here (click to zoom) - discover the stack .context-box-summary .show-html { visibility: visible; } The Css which the browser receives can come from multiple sources: App Assets located in your App folder CDN (Content Delivery Network) - this is often used for common JS / Style libraries Recommendations In general you should bundle and pre-optimize any CSS / SASS code using automations such as WebPack for best possible performance. Use Asset Optimizations Where possible, use CDNs for common libraries Try to use deferred loading for JS and CSS where possible ...this is especially important if you use external fonts, which tend to drag down your Google PageSpeed Use Koi to Detect the CSS Framework of the Theme If you create Apps for re-distribution, it may run on sites having different Themes than what you used to develop. If you plan on handling this scenario you have two options Polymorphism where you have multiple templates for each kind of CSS framework Use Koi to detect the CSS framework and apply different CSS classes based on the CSS Framework History Added in 2sxc 1.0"
  },
  "basics/browser/edit-form/custom-fields.html": {
    "href": "basics/browser/edit-form/custom-fields.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Customizing the Form - 2sxc v11"
  },
  "basics/browser/edit-form/field-validation.html": {
    "href": "basics/browser/edit-form/field-validation.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Field Validation in 2sxc TODO"
  },
  "basics/browser/edit-form/fields.html": {
    "href": "basics/browser/edit-form/fields.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Fields in 2sxc"
  },
  "basics/browser/edit-form/index.html": {
    "href": "basics/browser/edit-form/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Edit Content or Data in Dnn / 2sxc"
  },
  "basics/browser/edit-ux/context.html": {
    "href": "basics/browser/edit-ux/context.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to In-Page Editing Context (technical)"
  },
  "basics/browser/edit-ux/hide-advanced-features.html": {
    "href": "basics/browser/edit-ux/hide-advanced-features.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Hide Advanced Features From Non-Admins"
  },
  "basics/browser/edit-ux/index.html": {
    "href": "basics/browser/edit-ux/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Edit User Experience in the Page"
  },
  "basics/browser/edit-ux/quick-edit.html": {
    "href": "basics/browser/edit-ux/quick-edit.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to QuickE (Quick Edit)"
  },
  "basics/browser/edit-ux/toolbars/customize.html": {
    "href": "basics/browser/edit-ux/toolbars/customize.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Custom Toolbars"
  },
  "basics/browser/edit-ux/toolbars/index.html": {
    "href": "basics/browser/edit-ux/toolbars/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to In-Page Edit-Item Toolbars and Buttons"
  },
  "basics/browser/edit/index.html": {
    "href": "basics/browser/edit/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Edit Content or Data in Dnn / 2sxc"
  },
  "basics/browser/html.html": {
    "href": "basics/browser/html.html",
    "title": "HTML in the Browser | 2sxc 19 for Dnn and Oqtane",
    "keywords": "HTML in the Browser you are here (click to zoom) - discover the stack .context-box-summary .show-html { visibility: visible; } The HTML which the browser receives comes directly from your Razor or Token templates. You have 100% control over the HTML which is generated, 2sxc does not get in your way. There's not much to add to that \uD83D\uDE09. Learn More About.. Learn Razor with placeholder to show your data Automatically resize images to your needs Use Koi to create different output based on the CSS Framework of the page Use Polymorphism to stage changes for review while still running the original live edition SEO Optimize your HTML (google this topic) History Added in 2sxc 1.0"
  },
  "basics/browser/images.html": {
    "href": "basics/browser/images.html",
    "title": "Images in the Browser | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Images in the Browser you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } Images which the browser receives and shows usually come from these sources: App Assets located in your App folder Content / ADAM Assets Icon-fonts from the App-Assets or CDNs Recommendations Use the Image Resizer as much as possible If you can, use <picture> tags and provide multiple sizes/formats based on what the browser needs Be careful with Icon-Fonts, they can hurt your Google PageSpeed History Added in 2sxc 1.0"
  },
  "basics/browser/index.html": {
    "href": "basics/browser/index.html",
    "title": "What Happens in the Browser... | 2sxc 19 for Dnn and Oqtane",
    "keywords": "What Happens in the Browser... you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } In 2sxc most things just work. These docs give you a deep understanding of how they work so you can figure out really cool stuff. But don't be intimidated - by default things just magically work. This is what web-systems do from a bird's-eyes perspective. On the top you see what happens in the browser (the purple boxes). Show: Output using HTML and a little CSS + JS. This is the simplest way to work with 2sxc. Interact: Content or SPAs where the UI does some hard work like reorganizing data and getting data from JSON endpoints. This requires additional skills. Edit: Editing is built into everything by default and you can customized it as much as you need, up to creating custom WebAPIs, forms and input fields. This document will go into more detail what happens at that level. To understand the server level go to 2sxc Basics Overview. Tip Everything that's green in the image can be customized. Standard CSS and JS Libraries and Frameworks A key goal of 2sxc is to stay out of the way and let you do things using your favorite CSS and JS Frameworks. So the frameworks-section is simply here for you to see that you can use any standard framework or library you want. you are here (click to zoom) - discover the stack .context-box2 .frameworks-browser { visibility: visible; } Basically you can simply add these frameworks to your Razor-template files as <script> or <link> tags, and everything will just work. You may want to learn more about Bundling / Optimizing assets Use Koi to detect if the Skin/Theme already has some frameworks (like Bootstrap) to not load them Custom App HTML is created by the Server-Templates The HTML you need is 100% customizable and comes from the server using your templates. Usually you'll use Razor templates to generate this. you are here (click to zoom) - discover the stack .context-box3 .show-html { visibility: visible; } \uD83D\uDC49 HTML in the Browser Custom CSS and JS Assets JS and CSS files are stored in your app folder and included in your output. you are here (click to zoom) - discover the stack .context-box4 .show-js { visibility: visible; } \uD83D\uDC49 CSS in the Browser \uD83D\uDC49 JavaScript in the Browser Create Awesome SPAs (Single-Page-Applications) 2sxc is great and bundling SPA JS Applications built using Angular, React, Vue or whatever. you are here (click to zoom) - discover the stack .context-box5 .spa-all { visibility: visible; } \uD83D\uDC49 JavaScript in the Browser \uD83D\uDC49 Angular in Dnn Automatic In-Page Editing Experience By default 2sxc creates hover toolbars to add modules and on most items which only a Content Editor can see. These let them edit the content or data. It's made possible thanks to the server helper @Edit.TagToolbar in your templates. you are here (click to zoom) - discover the stack .context-box6 .edit-auto { visibility: visible; } \uD83D\uDC49 Edit Content or Data in Dnn / 2sxc Custom In-Page Editing Experience The edit experience can be customized to a very large extent: you are here (click to zoom) - discover the stack .context-box-edit-js .edit-custom { visibility: visible; } \uD83D\uDC49 Edit Content or Data in Dnn / 2sxc Edit Form The edit form is generated automatically from the Content-Type information (Schema) and the template configuration. you are here (click to zoom) - discover the stack .context-box-edit-form .browser-edit-ui { visibility: visible; } \uD83D\uDC49 Edit Content or Data in Dnn / 2sxc"
  },
  "basics/browser/javascript.html": {
    "href": "basics/browser/javascript.html",
    "title": "JavaScript in the Browser | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JavaScript in the Browser you are here (click to zoom) - discover the stack .context-box-summary .show-js { visibility: visible; } The JavaScript which the browser receives can come from multiple sources: App Assets located in your App folder CDN (Content Delivery Network) - this is often used for common JS libraries Asset Recommendations In general you should bundle and pre-optimize any JavaScript / Typescript code using automations such as WebPack for best possible performance. Use Asset Optimizations Where possible, use CDNs for common libraries Try to use deferred loading for JS and CSS where possible JavaScript Recommendations Point your JS to target the HTML DOM you created in your templates Create dynamic JavaScript or Styles based on values in the data #todoc Pass CMS data (content-items) to scripts using inline JSON using HTML attributes using REST APIs to get data / content-items the JSON format of data in the APIs #todoc History Added in 2sxc 1.0"
  },
  "basics/browser/json-data.html": {
    "href": "basics/browser/json-data.html",
    "title": "Json Data in the Browser | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Json Data in the Browser you are here (click to zoom) - discover the stack .context-box-summary .format-json-headless, .context-box-summary .show-js, .context-box-summary .interact-2sxc { visibility: visible; } Often you'll use JavaScript to work with JSON data in your browser. This data can be transferred in three common ways: Inline in a <script> tag where it's assigned to a variable Inline in some attribute like <div data=\"{...}\"> In a WebApi call from the Headless API or from Custom WebAPIs To access the WebAPIs you should check out the JS APIs History Added in 2sxc 1.0"
  },
  "basics/cms/adam/index.html": {
    "href": "basics/cms/adam/index.html",
    "title": "ADAM - Automatic Digital Asset Management | 2sxc 19 for Dnn and Oqtane",
    "keywords": "ADAM - Automatic Digital Asset Management you are here (click to zoom) - discover the stack .context-box-summary .adam { visibility: visible; } In a CMS environment, images and PDFs usually belong to a content-item. The user shouldn't have to worry about saving it in the right place. Ideally it's only used there, and when the content becomes obsolete, so do the assets that belong to it. Tip This is what ADAM is all about. It allows editors to just add images and files. ADAM will take these and magically store it somewhere so the user doesn't have to worry about folders and naming. Warning Since ADAM does everything behind the scenes, it's recommended that users don't try to link to files of another content-item, because that would defeat the purpose. It would also not allow any clean-up in future, because you wouldn't know if the asset was re-used. How ADAM works Internally ADAM creates a folder for each Entity (Content-Item) using the GUID of that item. It also creates a sub-folder for each field, so that a logo.png used in the Logo-field is separate from a my-case-study.pdf used in the CaseStudy-field. The final folder structure looks like this [Content-Root]/adam/[App-Folder-Name]/[Compact-Entity-Guid]/[Field-Name]/ How to Use ADAM is a standard part of 2sxc, it's automatically in use everywhere. Any link/file or wysiwyg field support drag-and-drop and will automatically store the file in the right place. Security Concerns ADAM uses the Dnn file-numbering system by default, and keeps a reference to file:27 in the field linking such a file. In rare situations you may have many untrusted editors, where you want to prevent them asking the API for file:1, file:2, file:3 etc. There is an advanced switch to only allow resolving the file number if it's really part of the current item. Contact 2sxc for support on this. Also Read AsAdam(...) Command ToSic.Sxc.Adam To access ADAM files/links in a RazorTemplate, check out AsAdam(...) in the RazorComponent and ApiController Platform Differences Dnn ☢️ & Oqtane \uD83E\uDE78 ADAM Content-Root Folder In Dnn ☢️ the adam root is: [Website-Root]\\Portals\\[site-id]\\adam\\ In Oqtane \uD83E\uDE78 the adam root is: [Website-Root]\\Content\\Tenants\\[Tenant-Id]\\Sites\\[Site-Id]\\adam\\ Adam File URLs Dnn ☢️ urls look like this: [Domain]/Portals/[Site-Id]/adam/[App-Folder-Name]/[Short-Guid]/[Field-Name]/[Optional-Subfolders]/FileName.Ext Oqtane \uD83E\uDE78 urls will probably look like this: [Domain]/adam/[App-Folder-Name]/[Short-Guid]/[Field-Name]/[Optional-Subfolders]/FileName.Ext History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "basics/cms/content-blocks/content-blocks-in-dnn.html": {
    "href": "basics/cms/content-blocks/content-blocks-in-dnn.html",
    "title": "2sxc Content in Dnn | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Content in Dnn The vision of 2sxc is to be cross-platform, so we hope one day it will also run on NopCommerce and other systems. This is how it's integrated into Dnn. What Dnn References to Portal to ZoneId Mapping The EAV has a virtual container called a Zone which is similar to a Portal in Dnn. The IDs will not match though, so each Portal has a setting called ToSIC_SexyContent_ZoneID which contains the ZoneId for that portal. When 2sxc is used the first time on a portal, it will detect a missing ZoneId, which triggers zone creation and sets this value. Module-Installation to App-Installation Mapping A Dnn Module installation corresponds to an App installation. Internally there is no mapping, as it is not necessary. There is an important difference though: in Dnn, each installed Module is installed at the System level, so installed Modules are available on all Portals. On the other hand, Apps are installed at the Zone (Portal) level, so each app is only available on that portal. Customizations to the app also only affect that portal, and each Portal could have the same App installed in different versions. Note Technically there are a few ways to share Apps, their data, templates etc. across Portals, but these are fairly advanced scenarios. Module-On-Page to ContentBlock Mapping In Dnn each modules has Module Settings to store configuration. 2sxc stores these two pieces of information in the Module Settings: App ID - what app is being shown here Content Block ID - the GUID of the Content Block Entity containing the rest of the configuration Understanding how this ties in helps you make better decisions. Make sure you also read Content - Data made Useful Basic Setup: Content is assigned to the module This is the most common setup - and used in the Content module as well as in many App modules, which rely on the author to manually create content for this specific module. It's not usually used in data-oriented modules like news, blogs, etc. Here is how it's mapped: Also Read about Content Data Model Best also read about Content - Data made Useful in general. Blog about the internals of modules and content History Introduced in 2sxc 6, previously it was handled a bit differently 2sxc 11.02 added a feature to see where views are in use"
  },
  "basics/cms/content-blocks/index.html": {
    "href": "basics/cms/content-blocks/index.html",
    "title": "Content Blocks | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Blocks Content items wouldn't do much - they must be shown to the user in the intended layout. The configuration of such a show these things using this template is handled in a ContentBlock. The data model for these Content Blocks looks like this: So each Content Block has: One reference to a View configuration Zero, one or many references to content items The same amount of Content-Presentation items Zero or one references to Header items The same amount of Header-Presentation items Tip Content Blocks contain a reference to the View and optionally a bunch of Content Items that will be used/shown in that View. But there are actually 4 possible scenarios deciding what is actually shown: The View can show the content-items provided by the Content Block The View can be configured to use a Query and show data from that The Template code could also get data from the App directly and show that Combinations of the three options above are possible Important Since the View can also be configured to get data from other sources, it may show items that are not in the list of the Content Block. Content Blocks in a CMS like Dnn When you see 2sxc data in Dnn, that's because a module was added to the page pointing to a Content Block. If you want to know more about that, read 2sxc Content in Dnn. Manually Managing this Data Note: you shoudn't usually do this - but sometimes you have to. Check out this short explanation: Note This scerenshot above is from 2sxc 8. In 2sxc 11 you can change scopes in the dropdown below the data table. FAQ If a page or module is deleted, does it also delete the Content Block? No. Note that if a page or module is deleted, it goes into the Dnn trash, so it could always be restored again. If a page or module is deleted from the trash, does it also delete the Content Block? No. Dnn does not inform modules about delete actions, so we can't do clean-up. Are Content Blocks which don't appear on a page orphaned and can I delete them? Maybe. Since they could be used in other apps (see Content - Data made Useful) as Inner Content, there is no quick way to tell if it's being used elsewhere. Can a Content Block be used on multiple modules / pages? Yes. It's not common, but since a module can be shown on multiple pages or even on other portals, it would show the same Content Block there as well."
  },
  "basics/cms/content-blocks/inner-content.html": {
    "href": "basics/cms/content-blocks/inner-content.html",
    "title": "Inner Content | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Inner Content Content Blocks are usually added to pages as Dnn Modules. But there is another way: as Inner Content. What this means is that a Content Item like a Blog-Post says \"Show this other content-block right...here\". To help 2sxc keep track of what is used where, this relationship is stored as a Content Block Reference. Inner Content from Another App Usually an App is self-contained, so everything it shows comes from the same App. This also means that exporting/importing an app will result in the same stuff arriving at the destination. The following diagram shows how Content can come from multiple apps Important So if you're using Inner Content and referencing content from another App, this crosses the borders between apps, and you'll need to export/import both Apps to get the same result."
  },
  "basics/cms/features/index.html": {
    "href": "basics/cms/features/index.html",
    "title": "Features Management | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Features Management Moved to Features Management"
  },
  "basics/cms/index.html": {
    "href": "basics/cms/index.html",
    "title": "Content Management and Data Editing | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Management and Data Editing Content management and editing data are core features of 2sxc. There are loads of features and functionalities you may want to discover, like: Basic content management Multi-Language content management Data management Permissions Page-Publishing Workflow - when changes are first in draft mode, till someone else publishes all the changes on the page Inner Content (placing content-in-content), like placing a gallery inside a blog post In-Page CMS Features Toolbars and Toolbar customizations Hide advanced features for normal editors Quick-Edit features - this is the small floating toolbar to add modules to a page without needing the clunky edit-mode"
  },
  "basics/cms/inner-content/index.html": {
    "href": "basics/cms/inner-content/index.html",
    "title": "Inner Content (Content Within Other Content) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Inner Content (Content Within Other Content) Inner Content is the feature to place content-blocks (apps or common content-items) inside another content-item. There are two common scenarios for this: Apps with list/details views, with a feature rich details-view. For example: a blog, which lets the editor add galleries and other apps into each blog-post. This is called a mashup app as it mixes apps together Apps which wrap other content/apps, for example an accordion-app which lets the editor add further content-blocks or apps into each collapsing segment. Basic Concept Inner Content links other content-blocks (apps, content) to a Content Item, allowing the template to then show this inner content where it wants to. An Item can have Many Sets of Inner-Content A template can have multiple sets of inner content. For example: a real-estate app showing a details-page with 2 columns, each containing an variety of content-items, different from house-item to house-item. One house could have a gallery-app in the first column, while the other house would have a 3D walkthrough app and preferr to use the gallery in the second column a Catalog app containing many WYSIWYG text blocks (ProductDescription, ShowCase, ApplicationSuggestions) shown in multiple tabs, each WYSIWYG containing apps inline between the paragraphs. To achieve this flexibility, the Inner Content items are linked not only to a Content Item but to a specific field in that item. So each set of related items is stored in one field, and by using multiple fields you can have multiple sets of items. This allows the template to handle each set separately. Standalone Inner-Content - like a Dnn Pane just for this item A common use case is to provide the editor with an area into which he/she can add as many content-blocks/apps as they want to. This feels like a Dnn-pane - the editor just adds apps as he needs them. This mode is common for mashup-apps and is mostly used on sophisticated details-pages with a clear area containing additional functionality. It's also common in layout-changing apps like the accordion app. In WYSIWYG Inner-Content this is new in 2sxc 8.9 Sometimes you may let the editor add inner-content blocks within a wysiwyg-field, so that normal written content can be interspersed with apps. This is common in news-style apps or blogs, where additional features are needed (galleries, code-snippets, etc.) but mixed with the main text and not in a separate area. Here is a blog tutorial on implementing Very Rich Text. The Parts that Make it Work For Inner Content to work, the following parts play together: Data storage: you need fields in your content-type to link to the external content blocks. Just create entity-fields and use the type Content Block Items. In many cases you also want to hide the field because it's not important to the content-editor. Just go to the field-settings and set Visible in Edit UI to off. Content-Block rendering in the templates, using the Razor API - it is prepared both for the standalone-area-mode as well as the merge-with-wysiwyg-mode. In-Page Editing: to allow the editor to add / edit content-blocks in the normal view, the UI must support it. This is handeled automatically by Quick-Edit. To do the in-page Editing, quickE needs to know some context information (what field to store the links in, etc.), provided in an HTML-attribute. It's either rendered in automatically when using the Razor commands or you can manually place them using [context attributes](xref:Razor.ContextAttributes]. If you want the WYSIWYG-integration the wysiwyg must know which field to use to manage the linked content-blocks. This is simply done by convention: as soon as a content-block field follows right after a wysiwyg-field, they will be linked and the button will appear. This also works it the content-block field is set to invisible. Read also Inner Content Blocks - blog about inner content-blocks V1 - the Area Mode Demo App and further links You should find some code examples in this demo App 2sxc blog History Inner Content 1.0 in 2sxc v08.04 Enhanced Razor API in v08.09 WYSIWYG mode in v08.09"
  },
  "basics/cms/languages/index.html": {
    "href": "basics/cms/languages/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to 2sxc Languages Overview"
  },
  "basics/cms/page-publishing/index.html": {
    "href": "basics/cms/page-publishing/index.html",
    "title": "Dnn/Evoq Page Versioning / Publishing and Workflow | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dnn/Evoq Page Versioning / Publishing and Workflow This page explains how a Dnn / Evoq does page versioning and workflow, and how to leverage this with 2sxc. Background: Dnn / Evoq Page/Module Versioning Dnn / Evoq had a few different ways of doing versioning, but since Dnn 7.4.2 it basically uses a model which works as follows: Each page has a live version number (for this demo we'll say version P27 - for page 27). On this page, various modules exist, each having their own version number. Let's say we have a gallery-module which is currently on version 6 (MG6) and a module with a form in version 12 (MF12). So the page information currently has: P27 live Module 1: MG6 live Module 2: MF12 live Basic Example with Adding Module If a new module with a form is added in between, Dnn will do the following P28 draft (P27 is still live) Mod 1: MG6 live (same version on live and draft) Mod 2: MF1 new, regarded as draft Mod 3: MF13 draft (the position has changed, so the module info has changed) As further changes to modules additions / removals / reordering happen, this happens on the P28 version only. So even if we delete or rename a module, the live version will not show this. So Dnn mechanims incl. moving/renaming of modules is a Dnn/Evoq responsiblity, and is versioned by Dnn/Evoq. We'll talk about the internal content of a module further down. Publishing a Page Basically when an editor publishes a page, Dnn will do the following: set P28 to the published page tell each module to publish in that version (in case the module support inner versioning - read on...) Dnn / Evoq Workflows Because these topics are almost undocumented - and exist in different implementations, they are confusing. You need to know the following about workflows: Workflows apply to the page only, so pages need to know if they have a workflow and which one Modules don't know about these workflows... ...because Modules only get notified when the workflow reaches a \"publish\" state Background: Module Inside/Inner Versioning Modules have their own content which may or may not be versioned. 99% of all modules don't version their content and have no history. And 99.9% don't support Dnn/Evoq page versions & publishing. So IF a module doesn't know about these mechanisms, then changes inside that module will not be versioned and they will be live immediately as they are applied. But let's assume our modules do support this, and let's say the gallery with module-info in V6 (it was moved a few times, so it has 6 versions) still has the initial V1 content, which we'll call MGi1 (Module Gallery inside V1). Module Version Tree with Inner Version So let's look at the versioning tree as it really is P27 live Mod 1: MG6 live with MGi1 Mod 2: MF12 live with MFi26 (had made configuration changes, each versioned) Now let's simulate a change... Inner Content Changes Let's say the editor makes a small change to the Form-module. This will notify Dnn of a change. As this happens, it must tell Dnn that it has a new version - like this, so Dnn will also place the page in a new version (for later publishing): P28 draft Mod 1: MG6 live with MGi1 live Mod 2: MF12 live with MFi27 draft Note that if the form module makes more changes, it can choose to report this or not, since basically the newest version is a draft already, on a draft-page. Inner Content Publishing Now once the user decides to publish this page, each module (incl. the Forms-Module) will be notified to publish it's version. Dnn will tell the form which version it should publish (in this case v27). The form must take care of whatever processing to ensure that this version is now live / public. 2sxc Support for Dnn / Evoq Publishing 2sxc support the core parts of Dnn/Evoq Publishing and versioning. To be more specific, it will detect if the page requires a publishing workflow tell Dnn/Evoq that on-page content was edited modify the GUI to only allow draft/publish options as it corresponds with the page information listen to Dnn/Evoq messages to publish on-page information This sounds simple, but it's very complex because 2sxc can be used in many scenarios, and in some it's not always clear when to draft or publish something. So there are some exceptions, which are documented below. Activating Page Publishing Feature on 2sxc You don't have to do anything - 2sxc asks the environment (Dnn/Evoq) it it expects any publishing steps, and will automatically adjust its behavoir. Making Changes Start a Dnn-Page Versioning This too happens automatically, if the page has a publishing setup in Dnn/Evoq. Auto-Draft and Auto-Publish explained To be sure you understand what's going on, please note the following: Only changes which directly relate to a page cause auto-draft / auto-publish Example 1: A user changes a blog post on a blog-page. The page will get a new draft version and the live blog will show the old one, while the draft will show the new one. When the page is published, the draft will become live. Changes to content-items which are not directly tied to a page, will not cause drafting / publishing Example 2: When the user edits the blog post he also creates another category (which is used as data and not as on-page content). This category is immediately live, but will probably not show up as it's only used in the edited blog-post. Example 3: An admin-user goes into the admin UI and creates a blog post from within the admin-UI. It will not auto-default to draft, as this is not specific to any page. But if the user manually sets it to draft, it will be published when a page showing it is released. Restoring Previous Versions Dnn / Evoq has a mechanism for restoring previous page versions, and when implemented perfectly, all modules inside it could also revert back to the state it was in at that time. Such a perfect world is hard to implement and nearly impossible in a dynamic-content setup. For example, apps may have been deleted or content-types (schemas) may have changed. So the idea sounds good, but is impossible to implement correctly. So 2sxc goes the pragmatic way: You can restore any item to a previous version - so you can always roll back a blog-post to a previous copy, but putting the page back into an old version will not roll back anything inside a 2sxc-module. To Restore previous versions of content-items, use the history (clock) icon in the toolbar. Technical Deep Dive - Behind the Scenes In case you run into trouble or need to know more about the mechanisms, here's what you need to know What is an On-Page Change and What is Not By definition, any item created or modified directly from a toolbar button in the front end is regarded as an On-Page change and will start the page-draft process. This is basically all the buttons which normal (non-admin) users see. If you haven't heard of hiding admin-buttons, please read the concept on hiding advanced features. Specifically, this includes the following actions: editing content directly from a toolbar button adding new content to the page from a toolbar button moving items up/down in a content-item list using a toolbar button replacing an item on a page using the toolbar button The following actions are not regarded as on-page changes, and don't auto-force drafting: editing any data from the Admin-UI editing app-resources or app-settings creating / modifying views importing data / importing apps What is Published on Page-Publish and What Not When a page is published, Dnn/Evoq will tell each module that it should now publish that specific version assigned to that page version. When this happens, 2sxc does the following: Retrieves the (usually invisible/secret) content-group entity which contains the information, what template and what items are shown on this module. This one is probably stored as a draft from previous changes, as this one keeps track of the items to show and the order to show them in. This draft is then published. Reviews all items on the four primary in-streams, checks each entity and publishes draft versions. The streams it will process are: Default (this is the one provided on Content) Presentation ListContent (the header-content item) ListPresentation (the header presentation item) Note that other streams are not auto-published. This is to prevent side-effects. For example, a Blog-View could have additional streams to visualize authors, categories etc. but these will not be auto-published, as it is assumed that these are helper-data and not specifically on-page data for this page. Publishing Additional Items If you want to auto-publish additional items, just add them to a stream PartOfPage. Inner Content Handling (Very Rich Content) Inner Content is not currently treated as belonging to the page, as it is inside content which is already drafted/published. So inner-content is always published when created. Note that this is not fully tested/implemented, you may have unexpected consequences when working with inner content. Image And Asset Handling Images and assets are not versioned / published, as Dnn provides no effective way to enable this. So as of now, the following will happen: if a content-type has a file-field using ADAM with a single file (not library), then draging in an additional file will behave like the publishing, because the new file has a new number, and this is not in use till the item is published if the user drags in an updated file with the same name, it will internally receive a number at the end, and also stay unpublished, as it's a different file on the server if a user manually replaces a file (not drag-drop in ADAM) or deletes a file and then uploads the file with the same name, then this file is live, as it really changed the file on the server if you are using a library-field in ADAM (often used in galleries), then these files are automatically live as well, and deleted files are also removed immediately In case you are using an ADAM library and would like to only show the files which existed before you created an unpublished draft, this can be done in your template. Just remember that certain changes (like file-changes on the server) could change the modified date, and that deleting files also really removes live files as well. Here's how you can change your Razor: @* before, showing all files *@ @foreach(var pic in AsAdam(Content, \"Files\").Files) { <span>@pic.FileName, @pic.LastModificationTime</span><br> } @* only showing \"older\" files *@ @foreach(var pic in ((IEnumerable<ToSic.SexyContent.Adam.AdamFile>)AsAdam(Content, \"Files\").Files).Where(f => f.LastModificationTime <= Content.Modified)) { <span>@pic.FileName, @pic.LastModificationTime</span><br> } Notes and Clarifications As mentioned, this is the default setup. In the case of data-oriented apps, which query data from somewhere, you may have other expectations. At the moment there is no additional mechanism to customize this any further, but we believe that you can easily cover all possible scenarios with this setup. Read also Data Model of Dnn-Modules mapping to content In-Depth information about content-binding History Introduces in 2sxc 9.5"
  },
  "basics/cms/permissions/index.html": {
    "href": "basics/cms/permissions/index.html",
    "title": "Permissions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Permissions you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } 2sxc / EAV permissions help you configure who may edit/create data - optionally with \"may only save as draft\" (new in 9.30). Note that if something doesn't have custom permissions, you'll still have default permissions that apply (see below): Introduction to Permissions Permissions are usually a list of zero or more permissions - like this: When you edit a permission, it looks like this: To access the permissions, you'll usually find a person-button in the actions of an item: Permission Overview Items which can accept permissions are: Content Types - permissions regulate who can create / edit items of that type Views / Templates - permissions regulate, who can see this view if accessed through url-parameter Apps - permissions regulate across all content types, who may edit/create etc. new in 9.30 Fields - permissions regulate, who may upload files new in 9.30 Permissions consist of the following parts: Requirements - what the current user must fulfill, for it to apply Grants - what is allowed with this permission Understanding Requirements For a permission to apply, you must specify for whom this is. To do this, you can choose various requirements: Dnn Permissions: in this case, you can specify if the user has view permissions, this applies User Identity: in this case you can specifiy a user GUID new in 9.30, requires the feature to be enabled Group ID(s): if a user is in any of these Dnn groups, the rule applies new in 9.30, requires the feature to be enabled Understanding Grants If a permission applies, it will grant the current user some rights - like creating or editing data. Grants are internally coded as a letter of the alphabet, like: c for create d for delete č for create drafts only f for full (all) permissions A grant can contain multiple rights - like crud for create, read, update, delete. Many grants like f will automatically grant other things (obviously). Default Permissions It's important to understand that for many scenarios, default permissions already apply. Super-users may always do everything, and admins may read/write all data. These default permissions cannot be reduced with new permissions at the moment, so an admin always has read/write and cannot be degraded to lower permissions. Using Permissions in Code As of now, the permissions API isn't final, so if you want to use it in code, you can immitate code you can find in the source. But these commands will change when the API is final, so you'll end up making adjustments. History Basic permissions (ContentType / View) added ca. 2sxc 7 Permissions for draft-save-only added in 2sxc 9.30 Permissions for user IDs and groups added in 2sxc 9.30"
  },
  "basics/cms/search/index.html": {
    "href": "basics/cms/search/index.html",
    "title": "Customize the Search-Index Results (Dnn ☢️ only) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Customize the Search-Index Results (Dnn ☢️ only) you are here (click to zoom) - discover the stack .context-box-summary .prepare-all { visibility: visible; } Dnn has a built-in search engine which crawls all the modules asking them for data. Every 2sxc module will be queried and will give the search index all the entities which are given to this module. Default Scenarios If a view shows data which was added by the editor these items will be in the Default stream and there may also be a single item in the Header stream. This data is given to the search index. This applies to both single-item templates as well as to lists. Note that Presentation items are not given to the search index as they should only contain settings how to show something, and not the real relevant data. If a view shows data from a Query then all the streams of that query will be given to the search index. Why Customize the Search Index? You can customize this behavior to your hearts desire. Here are typical reasons to do so: You may show the same items in many places - for example the Home page may show the top 3 news, but search results shouldn't point to these. A list/details setup would have each item in the list-view, but the search result should lead it to the details view You may want to exclude some query-streams in the search results - like exclude the categories-stream since it may not be relevant Ways to Customize the Search Results There are two ways to customize the search results: Using configuration new in v12 Using a separate code file which does this new in v12 Using code inside a Razor file not recommended, but works in older versions of 2sxc Customize the Search Results Using Configuration The following configuration options let you specify how data is handed to the Search Indexer. These options are set in the View configuration. Tip If you expect to use the same template in many places but need different search-configurations, just configure multiple views using different Search configs. Ensure Default Search Behavior By default the data given to the Module is also provided to the search. This is what it looks like in the View-Configuration. Don't Show Any Data in the Search Results Reasons for doing this: If you have views showing extracts of data (like the top 3 news) which are already added to the search index on the full news list, then you may create a Top News view which shouldn't return data If you show a tag-cloud this may not make sense to include in a search index This is where you can find the settings in the view configuration: Exclude Query-Streams from the Search Results In some cases your View may use a Query containing a lot of streams like Default and Categories, where only Default would make sense to include in the search. For this you can simply configure what streams you want. Note that these UIs automatically appear if you are using a Query: Custom Search-Index Using Code For very advanced cases you will want full control over what lands in the search index. To implement this, you can create your own Search Mapper in C#. This is how to configure this: \uD83D\uDC49 Read about Custom Search in C# here Note In older versions of 2sxc (between 6 and 12) the Search Customization code was placed in the Razor file. This is deprecated and should not be used any more. History Introduced in 2sxc 6.2 Added support for newer Dnn versions at a later time - not sure when Introduced Search Configuration in 2sxc 12.02 Introduced separate Code-File for this in 2sxc 12.02"
  },
  "basics/configuration/index.html": {
    "href": "basics/configuration/index.html",
    "title": "Configuration, Settings and Resources in 2sxc ✨ new | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Configuration, Settings and Resources in 2sxc ✨ new you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Settings can be a complex issue as the should have an effect on different scopes. Here are some examples: An input-field may have a setting to show/hide a button An App may have a setting which affects the entire App A system may have a setting which affects the entire installation In an ideal world, these settings can compound each other to determine defaults, fallbacks and overrides. 2sxc has some of this ready, other parts are still in development. Tip In 2sxc/EAV we talk about Configuration when something has a standard set of properties and about Settings when the properties can vary dynamically. So an App-Configuration contains standardized aspects like the Folder it's in, while App-Settings can be a dynamic set of properties that are different in each App. Resources on the other hand are simply meant for language/culture specific labels, logos and similar. They are also dynamic, so they can have as many values as you need. Settings and Resources are Stacked Settings and Resources can be configured at any level of the application. This is how it stacks up: \uD83D\uDC49 Learn more about the Settings Stack in 2sxc ✨ new! and the Resources Stack in 2sxc ✨ new! \uD83D\uDC49 Learn about the predefined System-Settings \uD83D\uDC49 Learn about the predefined System-Resources Global Level Global Configuration As of now (v12) global Configuration only exists for Features which can be enabled/disabled at the system level. This is primarily for security reasons. In addition some minor global Configuration exists for alternate Caching systems (like using Redis) but this is only for 2sxc Professional. Global Settings and Resources Global Settings and Resources were introduced in 2sxc 12.04. Read about configuring them in the Settings Stack in 2sxc ✨ new!. In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object. Note: there are some global ADAM Settings that can be configured in a different way, but it's not standardized/finalized yet, so not public, and we'll try to move that into the new standard. Note There is a small caching issue when creating the first ever global setting. ATM you'll need to restart DNN/Oqtane for it to be picked up. Once you have a global setting, you can change it without restarting DNN/Oqtane. Site Level (Portal) Site Configuration Only Languages are configured at Site-Level. Site Settings and Resources Site-Wide Settings and Resources were introduced in 2sxc 12.04. Read about configuring them in the Settings Stack in 2sxc ✨ new!. In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object. App Level App Configuration Apps have a standard App-Configuration containing their version, name, folder etc. In Razor you can access this on the dynamic App.Configuration object. App Settings and Resources Apps can have custom App-Settings and App-Resources which every app manages itself. The names/types of these settings can be freely configured, as each App has a Content-Type called App-Settings which can have different fields as needed. You can also configure the standardized SettingsSystem/ResourcesSystem. In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object. View Level View Configuration Each view has View-Configuration containing the name, how it works with data and more. In Razor you can access basic View information on the CmsContext.View object, like the Identifier or the Edition. See ICmsView View Configuration was introduced ca. v4 and made accessible to Razor in v12.02 View Settings and Resources A view can have Views-Settings and View-Resouces which apply to all uses of this View. Since View-Settings could be re-used in various views, the concept more flexible than App Settings/Resources, meaning that you could re-use both the content-type as well as the settings data. In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object. Content-Type Level Content-Type Configuration Each Content-Type has Content-Type Configuration with the description, icon and more. The Configuration can be multi-language. Content-Type Settings and Resources There are no Content-Type settings or resources. Attribute (Field) Level Attribute Configuration Each Attribute / Field can be configured as needed. The configuration options depend on the Attribute-Type. The Configuration can be multi-language. Attribute Settings and Resources There are no Attribute Settings or Resources. Entity (Item) Level Entity Configuration, Resources and Settings An Entity just has the data it caries, and no additional intrinsic Configuration, Settings or Resources. Entities themselves are multi-language. Per Entity-Use (Item-Use) Settings aka Presentation Settings Items can have a per-use setting called Presentation - see Content-Presentation. This means that when the item is shown in a specific view, there may be settings which configure how it's to be shown. Since each View may need different settings (a map View could need other presentation-settings than a text/image View) this is specific to each use of an Entity. Per List-Use Settings aka Header-Presentation Settings If a View is configured to be a List then it can also have a Header and also Header Presentation Setttings which work just like Content-Presentation. History View Configuration introduced ca. v4 App Configuration, Settings and Resources introduced in v6.0 View Settings and Resources introduced in v12.02 Site and global settings introduced in 2sxc 12.04 Full Settings Stack introduced in 2sxc 12.04 Full Resources Stack introduced in 2sxc 12.04"
  },
  "basics/configuration/preset-override.html": {
    "href": "basics/configuration/preset-override.html",
    "title": "Overriding Global Presets with JSON Files ✨ new v15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Overriding Global Presets with JSON Files ✨ new v15 you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } This is a new, advanced feature in 2sxc 15. In some cases you want to reconfigure the global presets, which are stored in JSON files in the App_Data/system folder. If you do this, any update of 2sxc would wipe out your changes. Override Feature Because of this, v15 has a feature to override settings-entities, and it works as follows: if there is an entity in App_Data/system-custom/entities with the same GUID as an entity in App_Data/system/entities Then the loader will use it to override the original entity. How to Create such A Configuration Find the \"original\" entity in the App_Data/system/entities and import it into any app in 2sxc. Make the changes you want Export it as json Place it in App_Data/system-custom/entities Verify it works, then distribute it to your installations. History Introduced in v15.00"
  },
  "basics/configuration/resources-stack.html": {
    "href": "basics/configuration/resources-stack.html",
    "title": "Resources Stack in 2sxc ✨ new! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Resources Stack in 2sxc ✨ new! you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Resources come in 2 distinct flavors: Standardized Resources marked with \uD83D\uDCCB are edited in a content-type called ResourcesSystem with a predefined structure. These resources are meant to be used across tools and apps. Dynamic Resources marked with \uD83D\uDCAA use content-types called App-Resources which you define. These resources can have any keys and values you want. The effect/reach of this depends on the level where you add it (global, site, app). The code using these will usually come from you, as these resources are not standardized. Resources are just like Settings The resources stack behaves just like the settings stack. So to keep things simple, we didn't repeat the documentation here. Please read about the Settings Stack to understand it. The only difference is The app-resources content-type is called App-Resources (this name is inconsistent for historical reason) the standard resources ContentType is called ResourcesSystem and ContentTypes for sub-configurations will always start with the emoji \uD83C\uDF10. History Full Resources Stack introduced in 2sxc 12.04 Dropped ResourcesCustom as a type in v13, as not needed any more because we changed how the site-level settings work"
  },
  "basics/configuration/resources-system.html": {
    "href": "basics/configuration/resources-system.html",
    "title": "System Resources in 2sxc ✨ new! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "System Resources in 2sxc ✨ new! you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Note: The System Resources feature is new in 12.04 so only a few settings are predefined as of now. This will expand in future releases. Tip These are just the predefined resources. Remember you can create any other settings on your own Resources ContentType Predefined System Resources as of 2sxc 12.04 As of now there are none, the API was just ensured to already be consistent with Settings Conventions used in System Resources The built-in system settings are meant to carry hundreds of settings. To enable that, the structure is always as follows: Every topic - like Help will have an own configuration ContentType All the names of these will probably start with the emoji \"\uD83C\uDF10\" so the ContentType will have a name like \uD83C\uDF10Help It should always have a field called SettingsIdentifier repeating the name like Help All of these fields should have an empty-state (like empty string, not-set-number) etc. ... Items and ... ItemIdentifier History Full Resources Stack introduced in 2sxc 12.04"
  },
  "basics/configuration/settings-stack.html": {
    "href": "basics/configuration/settings-stack.html",
    "title": "Settings Stack in 2sxc ✨ new! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Settings Stack in 2sxc ✨ new! you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Settings come in 2 distinct flavors: Standardized Settings use a content-type called SettingsSystem with a predefined structure. These settings are meant to be used across tools and apps. Dynamic Settings use a custom App-Settings content-types which you define. These settings can have any keys and values you want. The effect/reach of this depends on the level where you add it (global, site, app). The code using these will usually come from you, as these settings are not standardized. Settings can be edited on many levels. The most general or fallback settings are presets in 2sxc. The most specific settings only apply to a specific view. In most cases your templates and code will simply want to get the most-relevant setting, no matter where it was configured. To make this possible, settings are treated as a stack. This is how it stacks up: The most-relevant setting is top-most setting and is the one which will be used. So if a View setting and a Site setting have the same key, the View setting will be preferred. Take a look at this illustration: Assume the Blog App has a List View which needs Settings.Images.Content. The first Blog will look for it in the sequence of the blue arrows. The second will look in the sequence of the yellow arrows. So each Blog could get a different Setting, depending on where it is configured or overwritten. Settings Sources and Priorities The Settings are stacked in the following priority: ViewCustom - dynamic settings configured in the View AppCustom - the dynamic App-Settings (see App-Settings) of an App AppSystem - The SettingsSystem in the current App AncestorCustom - Optional, only on inherited Apps - App-Settings on ancestor app (v13) AncestorSystem - Optional, only on inherited Apps - SettingsSystem on ancestor app (v13) SiteCustom - an optional, manually created dynamic App-Settings on the Primary App of the current site SiteSystem - an optional SettingsSystem in the Primary App of the current site GlobalCustom - an optional, manually created dynamic App-Settings on the Global System App GlobalSystem - an optional SettingsSystem on the Global System App PresetSystem - the SettingsSystem which are included in the installation of 2sxc There is no setting called ViewSystem or PresetCustom. Review the Settings-Stack In case you need to see what setting applies to what view, you can easily analyze this in the App Administration. There you can see each setting and what source it came from + you can analyze all the sources which configure this setting: Next we'll explain where you can configure settings for different effects / scopes. Global Settings which Affect All Sites Global Settings for all sites are configured in the Global System App. It's usually on Zone 1 and App 1. go to the Global System App using this checklist. for Global System-Settings just edit them here for Global Custom-Settings just edit the App-Settings of the global app Tip This stuff is fairly new, and in rare cases new global settings don't automatically propagate to the sites. If you experience this, just restart the system. As of now, this only affects new fields, so once a field has been available changes will propagate as expected. Site Settings which Affect an Entire Site These are configured in the Primary App of the site you want to configure. go to the Primary App of the Site using this checklist for Site System-Settings just edit them here for Site Custom-Settings just edit the App-Settings of this app Tip This stuff is fairly new, and in rare cases new site settings don't automatically propagate to the apps. If you experience this, just restart the system. As of now, this only affects new fields, so once a field has been available changes will propagate as expected. App Settings which Affect an Entire App These settings override previous settings but only for a specific App. Go to the the App Configuration using this checklist for App System-Settings just edit them here for App Custom-Settings aka App-Settings you can edit them here or configure fields etc. directly from this dialog. Thisis feature has existed long before the stack was invented. See App Settings. View Settings which Affect a specific View As of v12.04 Views are only meant to have Custom Settings. It is still possible to override SystemSettings just by creating a field which has the same name, but we don't recommend it. To create Custom View Settings, create a custom content-type in the Configuration scope and use it in the view. See View Settings (Advanced ⚠). History Full Settings Stack introduced in 2sxc 12.04 Dropped SettingsCustom as a type in v13, as not needed any more because we changed how the site-level settings work Added AncestorCustom and AncestorSettings on v13 if the app inherits from an ancestor"
  },
  "basics/configuration/settings-system.html": {
    "href": "basics/configuration/settings-system.html",
    "title": "System Settings in 2sxc ✨ new! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "System Settings in 2sxc ✨ new! you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Note: The System Settings feature is new in 12.04 so only a few settings are predefined as of now. This will expand in future releases. Tip These are just the predefined settings. Remember you can create any other settings on the App-Settings ContentType Predefined System Settings Google Maps Settings Part Key Value in Default Introduced Comments GoogleMaps v12.04 Pls read special docs GoogleMaps InitialZoom # 14 v12.04 Initial maps zoom level GoogleMaps ApiKey $ AIzaSyAKEFB... v12.04 The API key used to show a Map GoogleMaps ShowApiKeyWarning b true v12.04 Show a warning if it's still the default key, which isn't meant for live sites GoogleMaps MarkerIcon $ (empty) v12.04 empty = google default \uD83D\uDCCD Images Settings Image settings are very sophisticated, so they are documented on an own page: \uD83D\uDC49 see Image Resize Settings in 2sxc WebResources Find out more about the Settings.WebResources here WebResources in Settings Stack ✨ new Work-in-Progress Settings Note: the following QuickEdit Settings exist but have no effect ATM Part Key Value in Default Introduced Comments QuickEdit.Default Enable b true v12.04 QuickEdit.Default AddApp b true v12.04 QuickEdit.Default AddContent b true v12.04 QuickEdit.Default Select b true v12.04 QuickEdit.Default Paste b true v12.04 QuickEdit.Default Move b true v12.04 QuickEdit.Module Enable b true v12.04 QuickEdit.Module AddApp b true v12.04 QuickEdit.Module AddContent b true v12.04 QuickEdit.Module Select b true v12.04 QuickEdit.Module Paste b true v12.04 QuickEdit.Module Move b true v12.04 QuickEdit.InnerContentArea Enable b true v12.04 QuickEdit.InnerContentArea AddApp b true v12.04 QuickEdit.InnerContentArea AddContent b true v12.04 QuickEdit.InnerContentArea Select b true v12.04 QuickEdit.InnerContentArea Paste b true v12.04 QuickEdit.InnerContentArea Move b false v12.04 QuickEdit.InnerContentDynamic Enable b true v12.04 QuickEdit.InnerContentDynamic AddApp b true v12.04 QuickEdit.InnerContentDynamic AddContent b true v12.04 QuickEdit.InnerContentDynamic Select b true v12.04 QuickEdit.InnerContentDynamic Paste b false v12.04 QuickEdit.InnerContentDynamic Move b false v12.04 Conventions used in System Settings ⚠ Advanced The built-in system settings are meant to carry hundreds of settings. To enable that, the structure is always as follows: Every topic - like GoogleMaps will have an own configuration ContentType All the names of these will start with the emoji \"⚙️\" so the ContentType will have a name like ⚙️GoogleMaps It should always have a field called SettingsIdentifier repeating the name like GoogleMaps All of these fields should have an empty-state (like empty string, not-set-number) etc. ... Items and ... ItemIdentifier History Full Settings Stack introduced in 2sxc 12.04"
  },
  "basics/configuration/settings/google-maps.html": {
    "href": "basics/configuration/settings/google-maps.html",
    "title": "GoogleMaps Settings in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "GoogleMaps Settings in 2sxc you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Tip This documentation is for 2sxc 12.04+. For older versions, consult this checklist. 2sxc include centralized settings for Google Maps. This ensures that people testing 2sxc can install/use apps which show maps. It also lets you set the API-Key and other settings at Global, Site or App level. Background Various Apps include templates which show Google Maps. Since 2016, Google requires all new domains using maps to first get a key. Because of this, the included maps include a demo-key which works, but you shouldn't use it in production. Consequences if you don't Replace the Key If you only disable the warning we added to the JS, then it would work for a short time. But it will randomly fail some time in the future, when your site is live. So don't try that. Why will it fail randomly? The included key can only generate a few thousand maps per day. If people start using it in production, then these maps will be added up. So every day a few thousand maps will work, and the rest will fail. This will feel very random, because all the maps generated on other sites are counted too. \uD83D\uDC49 So you must use your own maps API key How to Change the API Key History Global Maps Settings introduced in v12.04"
  },
  "basics/configuration/settings/images/index.html": {
    "href": "basics/configuration/settings/images/index.html",
    "title": "Image Resize Settings in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Image Resize Settings in 2sxc you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } This explains the Settings which will be used by subssystemms which... ...generate links for the Image Resizer using the Link.Image(...) API ...generate img and picture tags using the IImageService It is part of the System Settings. Settings seen here start with System.Images.... Predefined Image Settings - Overview These are the names of the predefined configurations. You can always create your own and give them other names (like Blog) or override these settings. You can do this at the global, site or app level. Content for any kind of images in the normal content of a page Lightbox for images which should open in a lightbox - usually almost full-screen Screen for images which cover the entire screen, like page-background images Section for images used in page sections, like parallax backgrounds Configurations on these Settings Each of these settings have the following properties: Width determines how wide an image should be - this should always be set, as it's very important for image resizing Height determines how tall an image should be - in most cases this should be empty AspectRatio also determines the height of the image, but using a factor of the width - so 2:1 means twice as wide ResizeMode how images are resized on the server - typically crop is what is used ScaleMode determines if resizing also happens, if the desired size is larger than the original image (upscaling) Advanced a complex JSON configuration used for advanced tuning of resizing and generation of img and picture tags. It uses the ImageService. \uD83D\uDC49 see Recipes in Image Resize Settings in 2sxc Note We recommend to use AspectRatio instead of Height to determine the image height, as it often makes a more consistent look and feel. If both Height and AspectRatio are set, then AspectRatio takes precendence. Values in the Images Settings of v12.04 and later Part Key Value in Default Introduced Comments Images.Content v12.04 For sizing Content-Images Images.Content Width # 1400 Full-Content-Width images Images.Content Height # 865 Based on golden ratio Images.Content Quality # 75 Good average jpg/png compression Images.Content AspectRatio # 1.618 Golden Ratio Images.Content ResizeMode $ crop Will fill area exactly Images.Content ScaleMode $ both Up-scale small images Images.Content Advanced $ {complex} v13.10 Sizes to use for SrcSets Images.Lightbox v12.04 For Lightbox-Images Images.Lightbox Width # 2000 Full-screen Lightboxes Images.Lightbox Height # 1500 4:3 Images.Lightbox Quality # 75 Good average jpg/png compression Images.Lightbox AspectRatio # 1.333 4:3 Images.Lightbox ResizeMode $ max Will keep image shape Images.Lightbox ScaleMode $ down Only down-scale, never up-scale Images.Lightbox Advanced $ {complex} v13.10 Sizes to use for SrcSets Images.Screen v12.04 For Screen-Size related images like backgrounds Images.Screen Width # 2000 Full-Content-Width images Images.Screen Height # 1500 4:3 Images.Screen Quality # 60 Stronger jpg/png compression Images.Screen AspectRatio # 1.333 4:3 Images.Screen ResizeMode $ crop Will fill area exactly Images.Screen ScaleMode $ both Up-scale small images Images.Screen Advanced $ {complex} v13.10 Sizes to use for SrcSets Images.Section v12.04 For Backgrounds in Content-Area Images.Section Width # 1600 Full-Content-Width images Images.Section Height # 1200 Based on golden ratio Images.Section Quality # 60 Stronger jpg/png compression Images.Section AspectRatio # 1.333 4:3 Images.Section ResizeMode $ crop Will fill area exactly Images.Section ScaleMode $ both Up-scale small images Images.Section Advanced $ {complex} v13.10 Sizes to use for SrcSets Images.Wysiwyg v16.01 For Backgrounds in Content-Area Images.Section Width # 1400 Full-Content-Width images Images.Section Height None, show as-is Images.Section Quality # 75 Stronger jpg/png compression Images.Section AspectRatio None, show as-is Images.Section ResizeMode $ max Preserve aspect ratio Images.Section ScaleMode $ both Up-scale small images Images.Section Advanced $ {complex} Sizes to use for SrcSets Images.Square v16.03 Square images / profile pics Images.Section Width # 1400 Full-Content-Width images Images.Section Height None, show as-is Images.Section Quality # 75 Stronger jpg/png compression Images.Section AspectRatio 1:1 None, show as-is Images.Section ResizeMode $ max Preserve aspect ratio Images.Section ScaleMode $ both Up-scale small images Images.Section Advanced $ {complex} Sizes to use for SrcSets History Full Settings Stack introduced in v12.04 and includes the here mentioned Image settings Advanced Json configuration with recipes added in v13.05 Images.Wysiwyg added in v16.01"
  },
  "basics/configuration/settings/images/recipes.html": {
    "href": "basics/configuration/settings/images/recipes.html",
    "title": "Recipes in Image Resize Settings in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Recipes in Image Resize Settings in 2sxc you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Version 13.10 will introduce a new ImageService which can generate advanced multi-resolution img and picture tags. As the configuration can be quite complex, it is explained here: A Resize Recipe A resize recipe has the following values, most of which are optional: Resize Settings variants (string) - determines which variant resolutions will be provided width (int) size of the initial image before variants are applied Restrictions forFactor if set, the rule will only apply to images which should be resized to this factor forCss if set, the rule will only apply to images when the page uses this Css Framework forTag if set, the rule will only apply to this tag type - either img or source Additional Effects setWidth (bool) will add an appropriate width attribute to the img tag if width is known setHeight (bool) will add an appropriate height attribute to the img tag if height is known attributes (Dictionary<string, object>) lists additional tag-attributes to apply to the img tag This is an example of a simple resize recipe: { \"recipe\": { // Means the initial image will be 700px wide \"width\": 700, // This will generate 3 variants: 700px, 1400px and 350px \"variants\": \"1*, 2*, 0.5*\", \"attributes\": { // This will always add an img-fluid class to the img-tag \"class\": \"img-fluid\" } } } Tip In v14.09 we updated the editor to use a JSON schema, so you should now get intellisense \uD83D\uDE09. Variants variants is a string which tells us which variants to generate. It is comma-separated. There are three different ways to specify the variants: By multiplier - marked by * or no trailing character 1* means the original image will be used 2* means the image will be resized to 2 times its original size 0.5* means the image will be resized to half its original size By Pixel size marked by w 700w means the image will be resized to 700px wide 1400w means the image will be resized to 1400px wide 350w means the image will be resized to 350px wide By Screen Pixel Density marked by x 1x means the image will be used as is, for normal screen pixel density 2x means the image will be douled in size for 2x screen pixel density 3x means the image will be trippled in size for 3x screen pixel density Warning It's tempting to mix these, but only * and w can be combined. Trying to combine x (pixel density) with any of the others results in an invalid configuration which the browser cannot handle. It will not generate an error, but the browser will usually then just ignore the x variants. Adding Many Recipes A perfect resizing system must actually behave differently in many scenarios. Here are some reasons, why we need many recipes: If we use Bootstrap5 we may want to add the class img-fluid, but not if we use Tailwind If we want an image that fits 1/2 the content-area and we have Bootstrap5, then 100% is 1230px, but a 50% image is 600px because of paddings So a really amazing configuration will need a LOT of recipes - easily 10-20 per CssFramework. This is how it's done: { // Default Recipe \"recipe\": { \"width\": 1400, \"variants\": \"1*, 2*, 0.5*\", \"setWidth\": true, // Sub-Recipes, which inherit all the settings from main, unless they override it \"recipes\": [ { // This section would only affect Bootstrap5 \"forCss\": \"bs5\", \"width\": 1230, \"attributes\": { \"class\": \"img-fluid\" }, // Sub-Sub-Recipes, which inherit from the BS5 and from main, unless they override it \"recipes\": [ { \"forFactor\": \"1\", \"width\": 1230 }, { \"forFactor\": \"1/2\", \"width\": 600 }, { \"forFactor\": \"12/3\", \"width\": 400 }, { \"forFactor\": \"12/4\", \"width\": 300 } ] }, { // This section would only affect non-Bootstrap5, as that would match first \"setWidth\": false, // override default to false \"attributes\": { \"class\": \"img\" } } ] } } Tip Sub-Recipes inherit everything from the parents. This is so you are DRY - you don't have to repeat yourself. It's important to know that at runtime this is flattened to a table. So the hierarchy you see in the JSON is purely to make the configuration easier to write. Tip Attributes are cummulative, so if a parent-node has attributes and a child-node has other attributes, they will be merged. Child node attributes will replace parent node attributes. To reset an attribute which the parent had set already, use null on the child node. Recipe in Content for 2sxc v14-v18 This is just for your info, in case you want to create your own based on this. { \"recipe\": { \"name\": \"default\", \"variants\": \"2*, 1*, 3/4*, 1/2*\", \"setWidth\": false, \"attributes\": { \"loading\": \"lazy\" }, \"recipes\": [ { \"name\": \"Bootstrap3\", \"forCss\": \"bs3\", \"attributes\": { \"class\": \"img-responsive\" }, \"setWidth\": false }, { \"name\": \"Bootstrap4\", \"forCss\": \"bs4\", \"attributes\": { \"class\": \"img-fluid\" }, \"setWidth\": true }, { \"name\": \"Bootstrap5\", \"forCss\": \"bs5\", \"attributes\": { \"class\": \"img-fluid\" }, \"setWidth\": true, \"setHeight\" : true, \"recipes\": [ { \"forFactor\": \"12/12\", \"width\": 1230, \"attributes\":{ \"sizes\": \"(max-width: 1400px) 100vw, 1230px\" } }, { \"forFactor\": \"11/12\", \"width\": 1100 }, { \"forFactor\": \"10/12\", \"width\": 1000 }, { \"forFactor\": \"9/12\", \"width\": 900 }, { \"forFactor\": \"8/12\", \"width\": 800 }, { \"forFactor\": \"7/12\", \"width\": 700 }, { \"forFactor\": \"6/12\", \"width\": 600, \"attributes\": { \"sizes\": \"(max-width: 1400px) 50vw, (max-width: 576px) 100vw, 600px\" } }, { \"forFactor\": \"5/12\", \"width\": 500 }, { \"forFactor\": \"4/12\", \"width\": 390, \"attributes\":{ \"sizes\": \"(max-width: 1400px) 34vw, (max-width: 991px) 50vw, (max-width: 575px) 100vw, 390px\" } }, { \"forFactor\": \"3/12\", \"width\": 285, \"attributes\": { \"sizes\": \"(max-width: 1400px) 25vw, (max-width: 991px) 50vw, (max-width: 575px) 100vw, 285px\" } }, { \"forFactor\": \"2/12\", \"width\": 170 }, { \"forFactor\": \"1/12\", \"width\": 75 } ] } ] } } History Advanced Json configuration with Recipe added in v13.05, to be released v13.10"
  },
  "basics/configuration/settings/settings-webresources.html": {
    "href": "basics/configuration/settings/settings-webresources.html",
    "title": "WebResources in Settings Stack ✨ new | 2sxc 19 for Dnn and Oqtane",
    "keywords": "WebResources in Settings Stack ✨ new you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } WebResources are JS/CSS libraries which your code will use, like Fancybox4. These can be managed in Settings to ensure that it can be changed as needed, and that all Apps will load the same versions. Important WebResources are not Resources. WebResources are JS/CSS needed in the browser. Resources are i18n language resources for multi-language assets. See also App Resources. The following Resources are pre-configured in Settings: Web Resource Added in 2sxc Comments Bootstrap4 v12.04 Bootstrap5 v12.04 fancybox3 v12.04 fancybox4 v12.04 FontAwesome5 v12.04 FontAwesome6 v13.00 You can override these configurations in the Settings at any level you want. Tip You can also just configure a WebResource to be deactivated (Enabled = false). You would do this if the skin already loads the assets you need. Usually your code will activate it using the IPageService. You can also access the values in Razor directly, like this: @Settings.WebResources.Bootstrap4.Enabled (will be true) History Settings WebResources introduced in 2sxc 12.04"
  },
  "basics/content/content-app.html": {
    "href": "basics/content/content-app.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to The Content App"
  },
  "basics/content/content-assets.html": {
    "href": "basics/content/content-assets.html",
    "title": "Content Assets / Images / Documents | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Assets / Images / Documents you are here (click to zoom) - discover the stack .context-box-summary .data-assets-entities { visibility: visible; } Content has Assets like images and documents. Private Assets By default, all Assets belong to the item and field they were uploaded on. This happens automatically and is managed by ADAM. Shared Assets You can also have shared assets which are stored in the Site content folder, but we don't recommend this as it makes clean-up very difficult. Learn More About ADAM - Automatic Digital Asset Management Image Resizer Fields for Links / Files / Folders Asset Metadata Asset Permissions / Protected folders in Dnn / Oqtane App Assets like icons / logos used in an App #todoc Add screenshots of drag-drop upload"
  },
  "basics/content/index.html": {
    "href": "basics/content/index.html",
    "title": "Content - Data made Useful | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content - Data made Useful you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data is just numbers and texts. Content extends Data to become information. Since this confuses many people, we must explain it in more depth. Important: This document is about the Concept of Content vs. Data. If you're looking for information about the Content-App go here. Content vs. Data Data in itself is just sets of values without context and meaning. An Entity containing a Title, Body and Image is Data. If you would find this in a database, and the title read Read more about this it would be fairly meaningless in itself. Tip A lot of data is managed in terms of lists and details which makes it useful that way. A Catalog is usually Data-Driven and this makes sense - the list/details templates will then make it useful. On the other hand we have Content placed on a specific page in a specific position, where the reader experiences it in the context and meaning of other stuff on the same page. Tip Content is created by editors on the page and the editor ensures that it makes sense together with other content on the same page. Content is Information The editor gives the Data context and meaning, and as such it becomes more useful. It becomes Information. So in summary: Data + Context = Meaning = Information The 2sxc/EAV CMS ensures that the editor experiences this as such, and doesn't feel like she's editing Data when adding Content. Content Blocks 2sxc keeps track of the pieces that belong together as Content Blocks. When Inner-Content is needed (placing content inside content) it uses Inner Content to keep track of that information. You may also want to know how Content Blocks fit into Dnn Modules. You may want to learn more about: Assets ADAM - Automatic Digital Asset Management"
  },
  "basics/content/lists.html": {
    "href": "basics/content/lists.html",
    "title": "Content Lists | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Lists you are here (click to zoom) - discover the stack .context-box-summary .data-entities, .context-box-summary .process-razor-app { visibility: visible; } Any View can be configured to be a List of Content Items, and if it is a list, it can also have a Header Item. When a View is a List... All Content Items in the List share the same Content-Type - like BlogPost Each item in the list can have it's own Presentation Settings but these settings all share the same Content-Type - like BlogPresentation Lists can have a single Header item of another Content-Type - like BlogIntro If the list has a Header it can also have a Header Presentation of a type like BlogIntroPresentation the first item in the List is still given to the Template as the Content variable Lists preserve the order of the items added to it The automatic toolbars change a bit when a list is being used Use in Code In C# you will usually do things like @foreach(var item in AsList(Data)) { ... } or similar. Check the C# API Docs for this. In Tokens you there is a special <repeat> tag. Check the Tokens docs. History Introduced in 2sxc v2.0 API was improved in 2sxc 8 The Header name was introduced to replace the confusing ListContent name in v10"
  },
  "basics/content/presentation.html": {
    "href": "basics/content/presentation.html",
    "title": "Content Presentation Settings | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content Presentation Settings you are here (click to zoom) - discover the stack .context-box-summary .data-entities, .context-box-summary .process-razor-app { visibility: visible; } When Data is used as Content it can also have Presentation settings. This is important because the same piece of content (like an Address) may need to be visualized different ways depending on how it's used. Quick Example Let's say we have an Address of 2sic in Switzerland as Data, and we're using it in a few places: In the footer of the website we're just showing it, the template says how it's shown In the We make Websites Page we have a CTA (Call to Action) with two addresses, and the 2sic address is configured to be highlighted using the Presentation We have a Contact Page where it's shown in a Google-Maps - there we configured the Presentation to use a pink pin Edit Behavior Since the Presentation is directly connected to the Item it's showing, the Edit-UI will open both items for editing together: More Use-Case Examples You have a template that shows simple content, and sometimes the title should be <h1>, sometimes <h2>, etc. Instead of creating 6 different templates, it would be easier to allow simple configuration of the heading-tag. This kind of presentation-configuration is handled by the Presentation-entity. Your Title/Text/Image allows the user to place the image no the right or on the left side. Instead of creating multiple templates, let's just let the user configure the variation he wants. This too is handled by the Presentation-entity. A complex template like a Google-map can configure 10-20 different parameters. These should not be set in the address which we will show - because these parameters have nothing to do with the address itself. So we need a way to provide 10-20 input-fields, drop-downs etc. - but not mix it with the address itself. These 10-20 input fields would be handled in a Presentation-entity. The same piece of information - like the address of 2sic - could be shown on different pages. Each instance might have some presentation configuration that differs from the other ones. It would be impossible to configure this if the config-fields were in the address-entity. So we place them in a separate Presentation-entity. Demo / Defaults Behavior One thing we discovered, is that configurable templates can be annoying because often there is a default configuration which applies to 90%. For example, if you create a configurable heading-tag <h1> through <h6>, usually 90% of the cases need <h1> because this is used on every page. Such defaults are handled easily by providing the template with a default-presentation entity containing these common settings. These will automatically be used if not overruled. Important Presentation Settings are not changed in 90% of all cases, so use Defaults whenever possible! Very often the Presentation contains default settings which are often left untouched. In these cases the Presentation-item is not stored, but the Demo-data is provided automatically. This allows you to update the defaults an any time and it will be reflected on all items which have unmodified Presentation settings. Here's what Presentation looks like when inheriting defaults: This is what Presentation looks like when you set it on the current item: Available on each Content-Item and on Header Presentation is available on each Content item and also in the Header (if a View is configured to have a List). Each Content item will have it's own presentation settings. The View configuration determines if there is a Presentation setting on Content (or Header) and what Content-Type is to be used. Use in Code In C# you will usually do things like @Content.Presentation.Color or similar. Check the C# API Docs for this. In Tokens you will usually do things like [Content:Presentation:Color]. Check the Tokens docs. Real Example Example: Using the Presentation to control the heading-tag in a template The Content-Types Simple Content - with the following fields Title (text, 1 line) Content (wysiwyg-text) Image (link to an image file) Presentation for Simple Content with the following field Heading (text, drop-down containing h1, h2, h3, h4, h5, h6) The template configuration specifies the simple-content as the content type, and the presentation-for-simple-content as the Presentation-type. The user now has an additional section in the Edit-UI to configure the presentation. The Template This The template would then contain the following fragment: Token Instead of the classic <h1>[Content:Title]</h1> it would have <[Presentation:Heading]>[Content.Title]</[Presentation:Heading]> Razor Instead of the classic <h1>@Content.Title</h1> ...it would have <@Presentation.Heading>@Content.Title</@Presentation.Heading> Power-Feature: Using Default-Values in this Presentation Now remember that probably 90% of all use cases for this will want an <h1> tag. It would be annoying to have to specify this every time, so please create a demo-entity and assign it in the template-configuration. Features and Behavior of Presentation-Data Presentation-Types are optional, templates don't require them Default-Values are optional, but highly recommended Data / Values in a presentation-content-type are not indexed by the search Presentation-Items are unique for every use. So if you show a piece of content in many places, each occurrence can have different presentation-settings Content-Items can have a presentation... ...List Headers can have their own, different presentation. This is used to configure the list (for example, how many items to show before paging) ...and List Headers can also have their own default presentations for fallback The UI always allows the editor to revert back to the default-settings History Introduced in 2sxc v3.0"
  },
  "basics/data/content-type-composition/index.html": {
    "href": "basics/data/content-type-composition/index.html",
    "title": "Content-Type Composition and Inheritance (new v18.02) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content-Type Composition and Inheritance (new v18.02) This explains Content-Type Composition and Inheritance. For an overview check out Understanding Data.... What is Content-Type Composition? Content-Type Composition is the ability to create a new Content-Type by combining fields from existing Content-Types. This is a powerful feature which allows you to create new Content-Types by reusing existing fields. Here's a simple example: You have a Person Content-Type with fields like Name, Email, Phone, Salutation You have a Company Content-Type with fields like Name, Address, Phone You want to create a Contact Content-Type with fields like Name, Email, Phone, Address, Salutation, Relationship With Content-Type Composition, you can create the Contact Content-Type by combining fields from Person and Company. This is what you could do: Field Person Company Contact Notes Name \uD83D\uDD0A Master \uD83D\uDEAB Own Field \uD83D\uDD17 Inherit Company name has different description etc. so it does not inherit Email \uD83D\uDD0A Master \uD83D\uDD17 Inherit Phone \uD83D\uDD0A Master \uD83D\uDD17 Inherit \uD83D\uDD17 Inherit Address \uD83D\uDD0A Master \uD83D\uDD17 Inherit Salutation \uD83D\uDD0A Master \uD83D\uDD17 Inherit Relationship \uD83D\uDEAB Own Field Or you could do this: Field PersonShared Person Company Contact Notes Name \uD83D\uDD0A Master \uD83D\uDD17 Inherit \uD83D\uDEAB Own Field \uD83D\uDD17 Inherit Company name is different so it does not inherit Email \uD83D\uDD0A Master \uD83D\uDD17 Inherit \uD83D\uDD17 Inherit Phone \uD83D\uDD0A Master \uD83D\uDD17 Inherit \uD83D\uDD17 Inherit \uD83D\uDD17 Inherit Address \uD83D\uDD0A Master \uD83D\uDD17 Inherit \uD83D\uDD17 Inherit Salutation \uD83D\uDD0A Master \uD83D\uDD17 Inherit \uD83D\uDD17 Inherit Relationship \uD83D\uDEAB Own Field How Does Composition Relate to Inheritance Note Inheritance is a basic concept where a master definition is used to create a new object which is a variation of the master. Basically an inheriting definition can only add properties, but not remove or change them. Composition on the other hand is much more flexible. You can inherit only a sub-set of fields from any master. You can inherit fields from multiple masters. You can inherit fields from masters and then add more fields. You can inherit some fields, but specifically implement certain fields yourself, for example when the Name on Company above should have a different description. Note The \"downside\" of composition is that inheriting definitions must specify which fields they inherit. So adding fields to the master does not automatically add it to any children. This is a good thing, but you must be aware of it. Important Things to Know Tip Content-Type Composition is a great way to standardize and improve your Content-Type definitions. Any changes to the master fields will automatically be applied to all inheriting fields. Warning Inheriting a field will only inherit it's definition, which includes label, description, dropdown values etc. The name of the field is not inherited, so you can specify a different name in the inheriting Content-Type. This provides some flexibility, but if you rename the master, it will not automatically rename the inheriting fields. Note Content-Type Composition is an advanced feature which is reserved to our patrons. If you don't have the feature enabled/licensed, it will still work, but show a license warning. But it can be a great solution to save time and streamline your work, so please look into sponsoring us. ➡️ See 2sxc Patrons Website How to Use Content-Type Composition Not every field is suitable for composition. Because of this, you must explicitly specify which fields are shared. This makes it easier for you to understand which fields are shared and which are not. 1. Share Fields To share a field, you must specify that it is shared. Follow these instructions: 2a. Create New Field Which Inherits When adding new fields which should inherit the settings, it's best to do this directly upon creation. 2b. Change Existing Field to Inherit Sometimes you already have a field, or you need a different name but it should inherit the settings. 3. Review Inheritance On the shared master, you can always review where it is used. And on the inheriting field, you can always review where the definition is from. 4. Change / Stop Inheritance As of now, there is no UI for this. For now, you'll need to manually change the SysSettings column in the SQL table of this field. If it turns out to be a common use case, we'll look at it in more detail. 5. Partial Inheritance There is a beta feature, where inheritance can be partial. This would allow you to inherit only the dropdown-definition, but allow you to configure your own title etc. At the moment this is not stable enough to use. History Introduced in 2sxc 16.0 for internal use Released in 2sxc 18.02 for public use (patrons only)"
  },
  "basics/data/content-types/index.html": {
    "href": "basics/data/content-types/index.html",
    "title": "Content-Type (Schema/Object-Type) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content-Type (Schema/Object-Type) This explains Content-Types. For an overview check out Understanding Data.... What is a Content-Type? Every Entity (thing, record or object) in 2sxc has a definition of fields it can have. So a Book may have fields like Name, Author, Title etc. The Content-Type will define what fields exist, what is required and what order the fields will appear in when editing the item. This definition of the Type is called a Content-Type and it contains specs as to the exact fields are used and what their field-types are. Other systems may call this Schema, Object-Type, Object-Structure or Table Definition Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read Dynamic Entity Objects. Where are Content-Types App Content-Types - this is the default, these Types are part of an App App Shared Content-Types - for advanced use cases System Content-Types - included in the default installation Global Shared Content-Types - for very advanced use cases What's Defined in a Content-Type? Content-Types are a configuration which contains: The list of fields the Content-Type has with the technical name, like ProfilePhoto Edit-UI information for the edit form The order of the fields should be shown in when editing A user friendly name like Profile Photo and editing help texts like This should only contain head & shoulders The Input-Type which the UI should show, like Hyperlink (which means that it's a link or file) Input-Type configuration, for example AllowUpload etc. Optionally some of the Edit-UI information in more languages like Profilbild in German Optionally permission information like May be used in Mobile Apps for read-only Nice to Know: Edit Content-Types Content-Types are configured in the App-Management UIs You can create new Content-Types at any time You can rename a Content-Type at any time If you change the display-name (like Blog Post to Blog Entry) then your code doesn't need changes. If you change the technical name (BlogPost to BlogEntry) then your code needs to be updated You can delete Content-Types at any time When you delete a Content-Type, all Entities/Items of that type are deleted Content-Types have additional descriptions and help-texts which are shown in the Edit-UI Content-Types can also have an icon, but that's only used in Content Mode Nice to Know: Edit Fields of a Content-Type You can always create new fields on a Content-Type When you add new fields, then existing data will have that field, but no values on these fields You can always delete existing fields on a Content-Type When you remove fields, existing data will lose those values You can always rename fields of a Content-Type When you change the display name of a field (like Persons Photo to Profile Picture) the technical field name doesn't change, so your code doesn't need modification. If you change the technical field name (like ProfilePic to ProfilePhoto) the code must be updated Nice to Know: Export / Import Content-Type Definition You can export a Content-Type into a JSON format You can import the Content-Type into another App using upload or drag-n-drop Important Exporting the Content Type Definition exports the schema / fields of that type. Exporting all the Items of a Content-Type is a table-export of all the data. Content-Type - More Information Identity of a Content Type: Name and StaticName Each content-type has a Name, which is nice for a human to read, use and program with. There is a second identifier called StaticName which is usually a GUID, but in rare cases it's a string like App-Settings. This identifier is used internally - for example when a View references a Content-Type. Storage Most Content-Types in your App are stored in the SQL database. System and global Content-Types are stored in the file system. These are called File-Stored Content-Types Field Types Each field will be of a simple type like text/string, number, boolean (yes/no) or other. You can find the list of types here. Relationships Fields can also be of type Entity in which case they point to other items. This would then establish a Relationship Input Forms and Fields (like WYSIWYG) The input mask is automatically generated from the Content-Type. Based on the specifications, it will generate the correct Input-Field like a simple text field, a multiline text field, a WYSIWYG or even a file-uploader. Scopes Content-Types have a Scope. Read about it Content-Type Scopes APIs ToSic.Eav.Data Namespace has almost everything you see here IContentType defines what fields exist, it's the ContentType / Schema IContentTypeAttribute contains the definition of an attribute , IMetadataOf contains information about the content-type (like nicer descriptions). This is also used for the Attribute-Metadata History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/names.html": {
    "href": "basics/data/content-types/names.html",
    "title": "Content-Type Names and StaticNames | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content-Type Names and StaticNames This explains Content-Type Names. For an overview check out Understanding Data.... What is a Content-Type Name? Each Content-Type has a Name which the admin gave it - something like Person. Internally there is another name called the StaticName and it's usually a GUID, something like ad59b44d-41f2-4f02-9a68-dd914a98c19a. The Name can be changed at any time, but you'll have to update code which uses this name. The StaticName should never be changed, it's used internally and also necessary for Shared Content-Types Special StaticNames used In Internal Types Some older internal types have StaticNames which are not a GUID. This is just a leftover from the old days, you should never do this yourself. History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/range-app-shared.html": {
    "href": "basics/data/content-types/range-app-shared.html",
    "title": "App Shared \"Ghost\" Content-Types (⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Shared \"Ghost\" Content-Types (⚠) This explains App Shared Content-Types which used to be called Ghost Content-Type. For an overview check out Understanding Data.... Warning This is a very advanced topic which less than 1% of all developers use. You almost certainly will not need this. So if you start playing around with this, make sure that you really need this. What is an App Shared Content-Type? App Shared Content Types are a Content Types which are defined in one App and re-used in specific other Apps. They can only be used inside the App which are configured to share the definition The App data is in the export/import, but not the Content-Type Definition If you import an App with such data, the App containing the definition must be imported first. These Content-Types are stored in the SQL database You rarely want to use this. How it works Shared Content-Types are defined in a Primary App which manages this type. Other Slave Apps are configured to also use this Content-Type. They automatically inherit every configuration of the primary App even when the schema changes. Why does this Feature exist? The feature was originally introduced in 2sxc 1.0 because at that time we didn't have Global Shared Content-Types It has since been used in various complex sites. An example is a installation which has many Sites, each having the same News App. In such scenarios it's hard to keep changes synchronized, so it's usually implemented as follows: A primary App is on a hidden Site which just manages the Content-Types A template App is configured to use thes Content-Types. It usually also uses shared Templates etc. The template App is then exported and imported in each site where needed. Why would you want to use this? If you are creating a complex system with many portals and apps which should share the schema Why would you not want to do this? Using Shared Content-Types is fairly technical, so the developer must understand what this is. History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/range-app.html": {
    "href": "basics/data/content-types/range-app.html",
    "title": "App Content-Types | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Content-Types This explains App Content-Types, the most common Content-Type. For an overview check out Understanding Data.... What is an App Content-Type? App Content-Types are the default kind of Content-Types which are defined in an app. They can only be used inside that App They are included upon export/import These Content-Types are stored in the SQL database History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/range-global-system.html": {
    "href": "basics/data/content-types/range-global-system.html",
    "title": "Global System Content-Types | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Global System Content-Types This explains System Content-Types. For an overview check out Understanding Data.... What is an System Content-Type? System Content-Types are built-in Content-Types which are defined in the 2sxc/EAV installation. These are internal Content-Types which are used to configure Fields, Data-Sources etc. They can only be used in every App They are not included upon export/import as they will also exist in the target system These Content-Types are stored in the File system History Introduced in 2sxc 1.0 Changed concept to File Storage in 2sxc 10.0"
  },
  "basics/data/content-types/range-global.html": {
    "href": "basics/data/content-types/range-global.html",
    "title": "Global Content-Types (⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Global Content-Types (⚠) This explains Global Content-Types. For an overview check out Understanding Data.... Warning This is a very advanced topic which less than 1% of all developers use. You almost certainly will not need this. So if you start playing around with this, make sure that you really need this. What is a Global Content-Type? Global Content Types are a Content Types which are defined in a central location and available in all Apps of your system. These are custom Content-Types which are treated like System Content-Types. They can be used inside every single App The App data is in the export/import, but not the Content-Type Definition. If you import an App with such data, the Global Type must be configured first. These Content-Types are stored in the file system For most scenarios you don't want to use this. How it works Global Content-Type are stored in special folders as JSON files and are loaded by the system when it starts. From then on they are automatically available in all apps for use. Since the schema is not stored in the SQL database, the Entities cannot use the normal storage system. Instead they are stored as JSON Entities in the SQL tables. Why does this Feature exist? 2sxc uses this concept for all the internal Content-Types. So any time you edit Field-settings or Visual-Query configurations, they use Global Content-Types. We also have some really sophisticated solutions which use this feature. Why would you want to use this? If you are creating a complex system with many portals and apps which should share the schema Why would you not want to do this? If you only want to share the Content-Type across 2-3 Apps, you should prefer App Shared Types instead If you have one specific App (like News) which is installed on many Sites you should prefer App Shared Types instead Important Warnings Since the data for the Global Content-Types is stored as JSON Entities there are a few drawbacks you should be aware of: If you plan on using the raw SQL data (not recommended anyhow) then the JSON format used in Global Content-Types adds quite a lot of complexity. If you ever rename fields in the Global Content-Type, the stored data will not follow the rename. From the systems perspective it has lost the old field and gotten a new one. Create a Global Content-Type Assume you really want to do this, here's how: Create the Content-Type in the normal way Export the Content-Type Definition as JSON Store it in your global custom folder (you may need to create these folders) In Dnn: [system-root]/DesktopModules/ToSIC_SexyContent/App_Data/system-custom/contenttypes In Oqtane: TODO Restart the system You should now have this Content-Type show up in every App. Update a Global Content-Type Make the updates in the original system Re-export the JSON Overwrite the original file Restart your system Delete a Global Content-Type Remove the JSON file Restart the system Best Practices From our experience the main use case for Global Content-Types is very technical, so the content-editor usually doesn't need to see this. So we strongly recommend placing it in an own Scope. History Introduced in 2sxc 9.7"
  },
  "basics/data/content-types/scopes.html": {
    "href": "basics/data/content-types/scopes.html",
    "title": "Content-Type Scopes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content-Type Scopes This explains Content-Type Scopes. For an overview check out Understanding Data.... What is a Content-Type Scope? Content-Types have a Scope. This is like a category for the Content-Type. Normally you only see the Content-Types and Entities of the default Scope. The other Scopes have internal and system Content-Types like @String. Here's the full list of current Scopes Switch Scopes Just use the built-in scope switcher like this: For older versions see this checklist on how to switch Scopes to manage data of other Scopes Nice to Know about Scopes You can easily create your own scope at any time. This is usually used for Global Content-Types (⚠) or if your App is getting really complex and has so many Content-Types that it confuses the Admin. History Introduced in 2sxc 2.0"
  },
  "basics/data/content-types/specs/file-storage.html": {
    "href": "basics/data/content-types/specs/file-storage.html",
    "title": "File-Stored Content-Types | 2sxc 19 for Dnn and Oqtane",
    "keywords": "File-Stored Content-Types This section explains File-Stored Content-Types. For an overview check out Understanding Data.... Usually Content-Types are stored in the database. For a special use case, content-type definitions can also stored in a json-file. This is used for System Content-Types and Global Content-Types. Examples of such types are: configurations of data-sources (like the SqlDataSource in 2sxc 9.8) any kind of input-configuration types (like string-dropdown, etc. starting in 2sxc 9.10) any kind of global types like view metadata etc. Overview Basically the app-repository is a folder which contains content-type definitions in a contenttype sub folder. The format is the json-format V1 Storage of System Content-Types This is located in: /desktopmodules/ToSIC_SexyContent/App_Data/system/contenttypes/ Storage of Custom Global Shared Content-Types This is located in: /desktopmodules/ToSIC_SexyContent/App_Data/system-custom/contenttypes/ Storage of Content-Types which are Part of a Dnn-Extension Dnn Extensions can include content-types, for example to configure a DataSource which is part of that Dnn Extension. These files can be anywhere in the system, but the DLL will have to tell 2sxc to load them. Limitation: No GUI As of now the system will pick up the content-types stored there and everything works. BUT there is no built-in UI to edit these. We (2sic) can easily create content-types in a normal 2sxc and export them to json for this purpose, but as of now there is no GUI to do so. This should not affect you, as it's not meant to be managed by anybody else than us as of now. When To Use You will almost never need these, except for 2 important scenarios: Shared Content-Types across all Apps (similar to Shared Content-Types) When you create a custom data-source, and want to distribute the Configuration Content-Type along with your DLL Future Features & Wishes App level content-types. This would dramatically enhance our ability to upgrade existing apps, as it's easier to detect type-changes. History Added in 2sxc 9.7"
  },
  "basics/data/content-types/specs/index.html": {
    "href": "basics/data/content-types/specs/index.html",
    "title": "Content-Type Technical Specs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content-Type Technical Specs This section explains Technical Specs of Content-Types. For an overview check out Understanding Data...."
  },
  "basics/data/content-types/specs/object-structure.html": {
    "href": "basics/data/content-types/specs/object-structure.html",
    "title": "Content-Type Object Structure | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content-Type Object Structure This section explains Content-Type Object Structure. For an overview check out Understanding Data.... Warning What follows is very technical. For most use cases you don't need to know this stuff. Content-Types are internally structured as follows (in C# / .net): Metadata of Content-Types and Attributes Both the Content-Type and Attributes can have Metadata providing more information about them. Since the Metadata for Content-Types and Attributes is stored as Entities, it's also multi-language History Added in 2sxc 1.0"
  },
  "basics/data/content-types/specs/sql-storage.html": {
    "href": "basics/data/content-types/specs/sql-storage.html",
    "title": "SQL-Stored Content-Types | 2sxc 19 for Dnn and Oqtane",
    "keywords": "SQL-Stored Content-Types This section explains SQL-Stored Content-Types. For an overview check out Understanding Data.... Usually Content-Types are stored in the database as part of the App they were defined in. This is how they are stored: A table contains the primary entry with StaticName (usually a GUID) and the nice Name - the one you give it. Other tables list the fields of this Content-Type and assigns them to the Type Description of the Content-Type is Metadata - so it's also a multi-lingual Entity which is stored in the App Descriptions of the Fields are also Metadata - so it's also a multi-lingual Entity which is stored in the App Nice to Know For advanced scenarios you can also share Content-Types across Apps In even more advanced scenarios you can use file based Content-Types History Added in 2sxc 1.0"
  },
  "basics/data/entities/index.html": {
    "href": "basics/data/entities/index.html",
    "title": "Entities (Data, Records, Items) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Entities (Data, Records, Items) This explains Entities aka Data Items. For an overview check out Understanding Data.... Every thing, record or object in 2sxc is called an Entity. So if you have a list of Book objects, then each Book is an entity. Many other systems use the term Record, Content Item, Item or Object. Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read Dynamic Entity Objects. Data Model: EAV+D = Entity-Attribute-Value + Dimension EAV stands for Entity, Attribute, Value The D stands for Dimension, it says what Dimension (Language) a Value is for How it Works Each Entity has many fields, some containing text, numbers etc. The fields an Entity can have is defined in the Content-Type, so each Entity is like a record of that type. This basic principle is used everywhere in 2sxc. For example, all these things are Entities: Simple Content items in the Content-App are entities containing a title, body and image View configurations are entities containing name, thumbnail, template-name etc. Blog posts in the Blog App are entities containing around 20 fields Tag items in the Blog App are also entities Anything you define in your apps will result in entities Multilanguage Data Each value can also be multilanguage, so there are actually many Descriptions in a multi-language product Entity. Relationships Entities are much more than just records, as they can have relationships. Input Forms and Fields (like WYSIWYG) The input mask is automatically generated from the Content-Type. Based on the specifications, it will generate the correct Input-Field like a simple text field, a multiline text field, a WYSIWYG or even a file-uploader. History Introduced in 2sxc 1.0"
  },
  "basics/data/entities/specs/object-structure.html": {
    "href": "basics/data/entities/specs/object-structure.html",
    "title": "Entity Object Structure | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Entity Object Structure This explains the C# Entity Object Structure. For an overview check out Understanding Data.... Warning What follows is very technical. For most use cases you don't need to know this stuff. Entities are structured as follows: EAV+D = Entity-Attribute-Value + Dimension EAV stands for Entity, Attribute, Value The D stands for Dimension, it says what Dimension (Language) a Value is for APIs ToSic.Eav.Data Namespace has almost everything you see here IEntity describes the main unit, the Entity IContentType defines what fields exist, it's the ContentType / Schema IAttributeBase, IAttribute, IAttribute<T>, IAttribute<T> determine the internal model how an attribute is built IValue, IValue<T>, determines how values in an attribute are stored, because an attribute like Description can have many values in different languages ILanguage, IDimension, ILanguage languages and dimensions determine how the values are used in each language , this determines if the Entity is by itself, or if it's enriching something else - in which case this Entity is Metadata. IMetadataOf sometimes an Entity may itself have more metadata, which would then be stored here. History Introduced in 2sxc 1.0"
  },
  "basics/data/export-import/index.html": {
    "href": "basics/data/export-import/index.html",
    "title": "Data Export / Import | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data Export / Import you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data can be Exported and Imported: Content-Types as JSON single Content-Items / Entities as JSON Tables of Content-Items as XML In addition, the App also has additional export/import features. You can also create custom exports as CSV etc. using Razor. Export / Import Anything \uD83D\uDC49 most of this is documented here: https://2sxc.org/en/learn/import-export"
  },
  "basics/data/fields/all.html": {
    "href": "basics/data/fields/all.html",
    "title": "General Field Settings | 2sxc 19 for Dnn and Oqtane",
    "keywords": "General Field Settings This explains General Field Settings. For an overview check out Understanding Data.... Every field has some general settings which apply to all fields. It's the information every field has to describe it's label, help-text etc. Configuring the All field-type Any field you open will contain the UI to configure the All fields. This is what it looks like: Name is the is the label to be shown (multi-language) Important: the name is not the name used in code, which shouldn't change - this is the visible label Default Value what is prefilled when you create a new item Notes / Description Placeholder Notes a short help-text which will appear in field notes Edit UI Settings Visible show this field in the UI Disabled if it's disabled (grayed out) Required if it's required DisableTranslate IsEphemeral for temporary variables which won't be saved Validation... what rule it must match to allow saving Technical Information This content type has a special name @All. History Introduced in EAV 1.0 / 2sxc 1.0"
  },
  "basics/data/fields/boolean-default.html": {
    "href": "basics/data/fields/boolean-default.html",
    "title": "Field Input-Type boolean-default | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type boolean-default Use this field type for configuring simple true/false UI elements, storing boolean/boolean data. It's an extension of the basic boolean field type. Features provide a basic on/off input field (toggle switch) Configure Boolean-Default No relevant settings to be configured. To configure the default value, set it in the general settings. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/boolean-tristate.html": {
    "href": "basics/data/fields/boolean-tristate.html",
    "title": "Field Input-Type boolean-tristate | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type boolean-tristate Use this field type for configuring simple true/false UI elements, storing boolean/boolean data. It's an extension of the basic boolean field type. Features provide a basic on/off input field (toggle switch) can also be switched to null (not set) Configure Boolean-Default No relevant settings to be configured. To configure the default value, set it in the general settings. History Introduced in 2sxc 11.0"
  },
  "basics/data/fields/boolean.html": {
    "href": "basics/data/fields/boolean.html",
    "title": "Field Data Type: Boolean | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: Boolean This explains Boolean Fields. For an overview check out Understanding Data.... The Boolean Data Type Boolean data is a basic data type and is for yes/no, true/false, 1/0 values. It can also contain null values. Features The basic boolean field doesn't have any features, since all the features are in the sub-types. Configuration Every boolean field can be configured to have special labels shown in each state. Input-Types of Boolean Fields boolean-default - simple on/off input field boolean-tristate on/off with optional null (not-defined) Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a true, false or null in json. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null, so you may need to catch this special exception in your code. A common shorthand to work with nulls is the ?? operator: @(Content.IsAdult ?? false) Another common use is to check for true. So instead of @if(Content.IsAdult) {...} Use if(Content.IsAdult == true) {...} History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/custom-gps.html": {
    "href": "basics/data/fields/custom-gps.html",
    "title": "Field Input-Type custom-gps | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type custom-gps Use this field type for selecting positions on a map, storing custom JSON data. Features Auto-find the location based on address data already added to the form Pin can be moved manually Configure Custom-Gps Configure which fields are to be used to find the coordinates History Introduced in 2sxc 2.0 - originally with a virtual field which placed the numbers into 2 number fields Modified behavior to use a JSON field instead ca. 2sxc 7 Improved Razor with ITypedItem to have a .Gps(...) method 2sxc 17"
  },
  "basics/data/fields/custom.html": {
    "href": "basics/data/fields/custom.html",
    "title": "Field Data Type: Custom | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: Custom This explains Custom Fields. For an overview check out Understanding Data.... Custom data is a basic data type. It's used to store JSON for special use cases. Sub-Types custom-gps custom-json Recommendation Since 2sxc 10 there is a special AsDynamic which you can use to work with JSON data in Razor templates. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a string value in json, so kind of JSON in JSON. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/datetime-default.html": {
    "href": "basics/data/fields/datetime-default.html",
    "title": "Field Input-Type datetime-default | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type datetime-default Use this field type for configuring dates and/or time values, storing date/datetime data. It's an extension of the basic datetime field type. Features allows users to enter a date through text input, or by choosing a date from the calendar also enables a time-choice if activated Configuring a DateTime-Default This shows the configuration dialog: Use Time-Picker is for enabling a time-choice. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/datetime.html": {
    "href": "basics/data/fields/datetime.html",
    "title": "Field Data Type: DateTime | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: DateTime This explains DateTime Fields. For an overview check out Understanding Data.... DateTime data is a basic data type and is used for dates and/or time values. Features The basic datetime field doesn't have any features, since all the features are in the sub-types. Sub-Types of DateTime Fields datetime-default - simple date and/or time input field (basic datepicker and/or timepicker) Shared Settings Don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a .net DateTime when the data is loaded. Storage in the SQL Database in the JSON-Model This is stored as a string-value in json using the standard ISO format, as there is no official format for dates or times in JSON. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null, so you may need to catch this special exception in your code. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/empty-default.html": {
    "href": "basics/data/fields/empty-default.html",
    "title": "Field Input-Type empty-default | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type empty-default Use this field type for grouping fields together under a title, storing empty (groups/title). It's an extension of the basic empty field type. Features a UI-only field for grouping fields together under a title Configuring a Empty-Default This shows the configuration dialog: Collapsed by default is for setting whether the field group is collapsed by default. If set to true, then the field group is collapsed by default. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/empty-end.html": {
    "href": "basics/data/fields/empty-end.html",
    "title": "Field Input-Type empty-end | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type empty-end Use this field type for closing a field-group. It's an extension of the basic empty field type. Tip Note that all field groups close automatically if another field group start afterwards. You only need the empty-end to close a group when you want the following fields to be in the normal / main group again. Features Closes a previously opened field-group Configuring a Empty-Default there is nothing to configure on this field - even the title will not be used for anything History Introduced in 2sxc 12.01"
  },
  "basics/data/fields/empty-message.html": {
    "href": "basics/data/fields/empty-message.html",
    "title": "Field Input-Type empty-message | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type empty-message Use this field type for showing a message in the edit dialog. It's an extension of the basic empty field type. Tip Messages can always be shown, or you can conditionally show/hide them using Formulas Features Show the title and message within the form Messages can be rich-text and contain formatted HTML Configuring a Empty-Default There is nothing to configure on this field which is special to empty-message. Just configure the normal Title/Comments and that will be shown. History Introduced in 2sxc 12.04"
  },
  "basics/data/fields/empty.html": {
    "href": "basics/data/fields/empty.html",
    "title": "Field Data Type: Empty | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: Empty This explains Empty Fields. For an overview check out Understanding Data.... Empty data is a basic data type and is for adding things to the UI (input form) which doesn't actually save any data. A common use is group-headers which contain a text, but don't result in data being stored. Tip 2sxc 12.01 also introduces Ephemeral Fields which are normal fields which don't save the value. Use that for fields which should behave like variables and not be saved. Features The basic empty field doesn't have any features, since all the features are in the sub-types. Sub-Types of Empty Fields empty-default - a UI-only field for things like grouping fields together under a title empty-end - a UI-only field to close a Field-Group empty-message - just a message in the edit form Shared Settings Doesn't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is not stored, as it is specifically meant to not store data. Storage in the SQL Database in the JSON-Model This is not stored, as it is specifically meant to not store data. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/entity-default.html": {
    "href": "basics/data/fields/entity-default.html",
    "title": "Field Input-Type entity-default | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type entity-default Use this field type for configuring an entity-picker storing Entity relationships. It's an extension of the entity field type. Features Selector where you can select entity items of a specific type Enables multiple items to select if activated Provide edit, add/remove, delete functionality if activated An order of the selected list is preserved and order can be changed with drag and drop Configuring an Entity-Default No relevant settings to be configured. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the entity field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanched in EAV 4 / 2sxc 7 when item-delete was introduced, to allow for \"private\" items"
  },
  "basics/data/fields/entity-query.html": {
    "href": "basics/data/fields/entity-query.html",
    "title": "Field Input-Type entity-query | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type entity-query Use this field type for configuring an entity-picker storing relationships. It's an extension of the entity field type. The special thing about this is that the items shown for selecting are retrieved from Query and not based on a content-type name. This allows you to look up any kind of data and offer it for selection. Features provide values to select from a query optionally specify other streams than Default optionally provide query parameters optionally use tokens in query-parameters, to pass on values from other fields in the form todo/maybe data is lazy loaded, so the query is only hit when the dropdown is opened Configuring an Entity-Query This shows the configuration dialog: Query the name of the query to use Advanced Parameters a string like country=Switzerland or country=[Country] to parameterize the query Stream Name the stream name, in case you don't want the Default stream In addition to these settings, you also have the basic entity settings which enhance the features you are using here. Cascading Dropdowns Dropdown-Fields can be cascaded - so that a selection on one dropdown changes the list of possible items on another dropdown. You'll have to work with the Parameters to get this to fly. S Important Notes Note that this stores item-relationships so you can only use it to select items which exist in the 2sxc/EAV database. You cannot use it to select items provided from non-entity sources, like Sql-data or File-lists. To select such data, you'll need the String-Dropdown-Query instead. History Introduced in EAV 4.x 2sxc 9.11"
  },
  "basics/data/fields/entity.html": {
    "href": "basics/data/fields/entity.html",
    "title": "Field Data Type: Entity (List of Entity-Items) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: Entity (List of Entity-Items) This explains Entity Fields. For an overview check out Understanding Data.... Entity or Item data is a basic data type and is used to mark item-relationships, like books-to-authors or blog-to-tags. Features The basic entity field simply allows you to select items of a specific type, with various add/remove/create/delete features. Sub-Types of Entity Fields entity-default - standard selector with type, add/remove, one/multi, delete, etc. entity-query for picking entities which were pre-processed in a query Shared Settings All Entity-Field Types have the following settings: Basic Entity Type Advanced UI Settings Multiple Items Enable Edit Enable Create New Enable Add Existing Enable Remove Enable Delete Specials of the Entity type: The entity-type has these specials it's good to know about It's always a list It preserves the relationship order Special #1: It's always a List Since it could contain 1 or many items (and the configuration can change whenever you want), reading it always means reading a list. So you'll always use something like this (C#): // full name of author var fn = Book.Author[0].FullName; // in case you're not sure if the author was added or null, you can do var fn2 = (Book.Author.Any() ? Book.Author[0].FirstOrDefault : \"\"); // This will also work in newer versions of C# // making fullName either the name, or a null var fn3 = Book.Author.FirstOrDefault()?.FullName; // the following won't work! var wontWork = Book.Author.FullName; // this won't work Or the same in JavaScript: var fn = Book.Author[0].FullName; // in case you're not sure if it has any // this uses the JS-syntax which returns the last-value of an && condition var fn = Book.Author && Book.Author[0].FullName; Special #2: It preserves Order If the user said a book has 2 authors: Daniel Abraham Then it's sometimes useful to preserve the order - in this case Daniel was probably the main author and Abraham helped out a bit. To allow for this, the Entity field will keep the order of items as they were added. Side-effect: Sometimes you want to have an A-Z order when showing items. As the order is not auto-sorted, you will have to do this yourself if you want to have them sorted. Use LINQ to do that. Technical Information Storage in the SQL Database in the EAV-Model This is stored in a special relationships-table, so internally the current DB IDs are used to track relationships. Storage in the SQL Database in the JSON-Model This is stored as an array of strings, which contain the GUIDs of the related information. Null Values not Possible These fields will never return a null. If there is no content, you'll just get an empty list. Read also Razor LINQ Tutorials History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanched in EAV 4 / 2sxc 7 when item-delete was introduced, to allow for \"private\" items"
  },
  "basics/data/fields/ephemeral.html": {
    "href": "basics/data/fields/ephemeral.html",
    "title": "Ephemeral / Temporary Fields for Variables | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Ephemeral / Temporary Fields for Variables This explains Ephemeral aka Temporary Variable Fields. For an overview check out Understanding Data.... Note In v14 we added data.parameters.* to the Formulas. It contains all parameters given in the prefill. Since ephemeral fields are mainly used in Formulas, you may not need to ephemeral fields for your scenario. The main reason to still use ephemeral fields over parameters is when you do additional initialization logic which would be used in many Formulas in the form. Sometimes you need fields which control the Form UI without being real data. Some examples: Toggles which show/hide other fields or field groups Hidden calculations which will consolidate other field values to determine if something else is required We don't want to save these fields as the data is not relevant, and often the value should be calculated upon opening the form - so it's important that they are reset. These kinds of fields are ephemeral = temporary To configure a field to not save and be temporary / ephemeral, use this setting: Tip Since these fields are usually used as variables, we recommend that you name the Var.... Example: VarShowAdvanced. History Introduced in 2sxc 12.01 Added data.parameters in v14 Shortlink to here: https://go.2sxc.org/ephemeral"
  },
  "basics/data/fields/hyperlink-default.html": {
    "href": "basics/data/fields/hyperlink-default.html",
    "title": "Field Input-Type hyperlink-default | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type hyperlink-default Use this field type for configuring normal links, page or file/image references, storing Hyperlink. It's an extension of the hyperlink field type. Features input field for normal links, page or file/image references ( like http://whatever/whatever, /some-relative-url, page:42, page:42?something=value, file:2750, file:2750?w=200 ...) allows users to pick files/images with ADAM (automatic digital asset manager) if activated allows users to pick page reference with the page picker if activated allows users to pick images with the the image manager if activated allows users to pick images with the the file manager if activated Configuring an Hyperlink-Default No relevant settings to be configured. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the hyperlink field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "basics/data/fields/hyperlink-library.html": {
    "href": "basics/data/fields/hyperlink-library.html",
    "title": "Field Input-Type hyperlink-library | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type hyperlink-library Use this field type for complete sets of files (like image galleries), storing Hyperlink. It's an extension of the hyperlink field type. Configuring an Hyperlink-Library This shows the configuration dialog: Folder Depth - if sub folders are allowed and how deply they may be nested. Use 0 for no sub folders, 1 for 1 level only, 2 for 2 levels (like /gallery/subgallery) etc. Use a large number like 100 for practically unlimited sub folders, but not recommended for realistic use cases. Allow assets In Root Folder - specifies if files may be placed in the core / root container, or if the user is required to create sub folders. This would be the case if you expect multiple groups of files, but never a top-level list. Metadata Content Types - the content-type (or types) to be used for assets in this library. To use this, first create a content-type (like DownloadMetadata or MugshotMetadata) and type the name of the content type into this field. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the hyperlink field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "basics/data/fields/hyperlink.html": {
    "href": "basics/data/fields/hyperlink.html",
    "title": "Field Data Type: Hyperlink | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: Hyperlink This explains Hyperlink Fields. For an overview check out Understanding Data.... Hyperlink data is a basic data type and is actually a string, but on reading it's automatically converts to an output-friendly format. It's used for normal links, page or file/image references as well as for complete sets of files (like image galleries). Features The basic hyperlink (links/files) field is used for normal links, page or file/image references as well as for complete sets of files (like image galleries) Sub-Types of Hyperlink Fields hyperlink-default - it's input field for normal links, page or file/image references. In menu it has ADAM (automatic digital asset manager), page picker, image manager and file manager. hyperlink-library - it's for complete sets of files (like image galleries). Shared Settings All Hyperlink-Field Types have the following settings: File Filter - list of extensions allowed in file/image picker. Example: .jpg,.bmp,.png,.gif Paths - this is only needed if you use the old file pickers (not ADAM). Root paths for the picker dialog - ideal if you want all images for this Content-Type to be in the same folder use the syntax foldername - without \"/\" in front to specify a subfolder of the site-root. Examples are \"Apps\" or \"Gallery\" or \"Employees/Photos\" you can also use subfolders - that would be \"Employees/Photos\" always remember that this folder must already exist, and Dnn must know that it is visible (readable) by the editing user. There are cases where the security settings were not set correctly in dnn - then the file picker won't show anything. Default Dialog - none, ADAM, page picker, image manager or file manager Show Page Picker - show page picker in the drop-down Show Image Manager - show image manager in the drop-down Show File Manager - show file manager in the drop-down Show Adam - show the ADAM (automatic digital asset manager) in the drop-down menu. Buttons - will let you specify which buttons are visible directly. The default is \"adam,more\" but you could also do \"adam,page,more\" or just \"page\". File / image are currently not supported, because as of now, Dnn doesn't have a good image/file browser so we discourage its use. Automatic Conversions of file and page references The hyperlink data internally can contain values like: http://whatever/whatever - will not be converted /some-relative-url - will not be converted page:42 - will usually be converted to the real url of the page in Dnn page:42?something=value - this will also be converted, but keeping the parameters page:42#something=value - this will also be converted, but keeping the parameters file:2750 - will usually be converted to the real url of the file in Dnn file:2750?w=200 - this will also be converted, but keeping the parameters (like for thumbnails) file:2750#page=2 - this will also be converted, but keeping the parameters (like for pdf-page-links) In 99% of all use cases, you want to generate html with a real link, which is why the content-objects in Razor will deliver an http:... instead of file:27. Some demo-code: // assume that Content is a dynamic entity // assume that Image actually contains \"file:274\" <img src=\"@Content.Image\"> // the result is now <img src=\"/portals/0/adam/20603963uaothutaoer/daniel.jpg\"> Accessing the Real Inner Value In rare cases you may want the originl page:22 instead of the converted value. To do this, use AsEntity(yourObject) and then use the EAV API on IEntity to read the underlying original value. Special: Hyperlink Libraries A special use case is Libraries - where a hyperlink-field doesn't actually contain anything, but is a placeholder for ADAM assets. In such a scenario, you will use AsAdam(...) in your code to get the folders/files in the ADAM repository. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null, so you may need to catch this special exception in your code. A common shorthand to work with this is either the ?? operator or using RazorBlade with Text.Has(...) or Text.First(...). Technical Information Storage in the SQL Database in the EAV-Model This is simply stored as a string in the DB, in the original format like page:22. Storage in the SQL Database in the JSON-Model This is simply stored as a JSON string in the original format like page:22. Read also Field Data Type: Hyperlink RazorBlade Text.Has(...) Tutorial RazorBlade Text.First(...) Tutorial History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "basics/data/fields/index.html": {
    "href": "basics/data/fields/index.html",
    "title": "Content-Type Fields | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content-Type Fields This explains Content-Type Fields. For an overview check out Understanding Data.... The EAV (Entity-Attribute-Value) system and 2sxc is all about data. The data in the Attributes (aka Fields, Properties) are have a Type This Value-Type or Data-Type describes how data is stored (persisted) in various formats (SQL, JSON, XML) and how it's used in code (C#, JavaScript, Tokens, Angular, ...). General Settings for all Fields General Settings contain core information about a field like name, help-text and more. Every field has these configurations. Field Types These are the core Field-Types. Each may have one or more Input-Types. Boolean - basic true/false or yes/no values Custom - a JSON data type for GPS and other JSON data DateTime - for dates and times Empty - a UI-only field for things like grouping fields together under a title Entity - an item-picker field to choose existing items, for relationships between items - like a book to the author or a blog-post to tags Hyperlink - a special string with helper objects which resolve \"file:72\" to the real link Number - for any kind of number like 1, 2, 3 or with decimals String - for string types or when you other options don't fit History Almost all types were introduced in EAV 1.0 2sxc 1.0 Changed continously - most of it in EAV 2-4 which matches 2sxc 4, 6 and 9"
  },
  "basics/data/fields/notes-null.html": {
    "href": "basics/data/fields/notes-null.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null, so you may need to catch this special exception in your code."
  },
  "basics/data/fields/number-default.html": {
    "href": "basics/data/fields/number-default.html",
    "title": "Field Input-Type number-default | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type number-default Use this field type for configuring simple number UI elements, storing number. It's an extension of the basic number field type. Features Input field of type \"number\". Can be used for numbers like: Simple numbers Numbers with decimal digits GPS-Coordinates Configuring a Number-Default This shows the configuration dialog: Number of Decimals is for setting the number of decimals. If a value is 0 then only integers ergo whole numbers allowed. Minimum minimum value (for example, if a number should never be smaller than 1970) Maximum maximum value (eg. 2013) History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/number-dropdown.html": {
    "href": "basics/data/fields/number-dropdown.html",
    "title": "Field Input-Type number-dropdown | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type number-dropdown Use this field type for configuring simple dropdown UI elements, storing number data. It's an extension of the number field type. Features provide values to select provide visible labels which are different from the stored value optionally allow users to type in something different choose between value-label and label-value ordering allow the use of : in values (just escape as \\:) Special Behavior When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually Configuring a Number-Dropdown This shows the configuration dialog: Using the Dropdown with the optional free-text-entry (2sxc 9.10) This is what the UI looks like, if Enable Free Text is enabled If the user then clicks on the I-bar icon (TT in v11+), the input will change to text so you could type something different - like a numeric value which wasn't suggested. History Introduced in EAV / 2sxc 12.04"
  },
  "basics/data/fields/number.html": {
    "href": "basics/data/fields/number.html",
    "title": "Field Data Type: Number | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: Number This explains Number Fields. For an overview check out Understanding Data.... Number data is a basic data type and is for any kind of number 1,2,3 or very detailed numbers like 47.020503020400203 which are common in GPS coordinates. Features The basic number field doesn't have any features, since all the features are in the sub-types. Sub-Types of Empty Fields number-default - is the input field for any kind of numbers like simple numbers, numbers with decimal-digits or very detailed numbers like 47.020503020400203 which are common in GPS coordinates. drop-down for simple number dropdowns Shared Settings Don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a number in json. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null, so you may need to catch this special exception in your code. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/pickers/fields/index.html": {
    "href": "basics/data/fields/pickers/fields/index.html",
    "title": "Picker Target Fields (new v18) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Picker Target Fields (new v18) The target field is where the selected values are stored. This can be a single value, a list of values, etc. Some options will not be available to all targets, e.g. a number can't contain a list of numbers, but a string can contain a list of strings (e.g. separated by commas). As of now, the targets are: Entity - one or more relationship to other entities, which can be manually re-ordered String - a string containing one or more values, which can be manually re-ordered Number - a number containing a value (or none) With time, we'll add more targets as they are needed. Examples would be: Link - a link to another image, document or page - e.g. file:72 or page:42 Boolean - a true/false value - this is not as amazing as others, but there are cases where a picker would be the better UI Dates - a date - for example when choosing one of a few possible dates History Picker Target Fields introduced as beta in v17 Regarded as Beta in 2sxc 18.01, but already used in production"
  },
  "basics/data/fields/pickers/formulas/index.html": {
    "href": "basics/data/fields/pickers/formulas/index.html",
    "title": "Picker Formulas (new v18) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Picker Formulas (new v18) Formulas are a powerful way to create dynamic sources for pickers. \uD83D\uDC49\uD83C\uDFFE see also Formulas With Pickers, formulas are a bit more complex, since they can be used for: Changing what is selected Changing what the options are Changing additional aspects of options, such as tooltips, disabled-state and more. This is still WIP and will be documented as it's developed. History Picker Formulas introduced as beta in v18.01"
  },
  "basics/data/fields/pickers/index.html": {
    "href": "basics/data/fields/pickers/index.html",
    "title": "Picker Fields Field (new v18) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Picker Fields Field (new v18) Many fields in a form are somehow meant to let the user pick / select something from a list of options. Classic examples include: String dropdowns listing a few possible values which were manually entered Entity dropdowns showing a list of all entities of a certain type More advanced examples include: String dropdowns listing possible values from an external source Entity dropdowns showing a list of entities which match a complex criteria / query Icon pickers showing a list of icons All these pickers have a lot in common, such as: There is a list of options The user can select one or more options The UI provided to the user can vary based on various settings - such as can-only-select-one, can-search, etc. In some cases, the order of the options is important (in others not) In some cases, the order of selection is important (eg. the first selected category may be more important) In some cases, the user can add new options In some cases, the user can edit the options In some cases, the user can delete options etc. To make this more generic, we've created a new concept called Picker Fields. This is a new field type which can be used to create all kinds of pickers. Top Level View of the Picker Architecture Pickers basically have: A source (e.g. manually entered list, a query, etc.) A target (state) - this is where the selected values are stored (e.g. a string, number, a list of entities, etc.) A UI which lets the user see what was selected and select new values (e.g. a dropdown, radio buttons, checkboxes, etc.) Settings to configure all this TODO: ILLUSTRATION History Initial Dropdowns (for string) added ca. 2sxc 2.0 Architecture change to generic pickers started in 2sxc 16 Regarded as Beta in 2sxc 18.01, but already used in production"
  },
  "basics/data/fields/pickers/sources/index.html": {
    "href": "basics/data/fields/pickers/sources/index.html",
    "title": "Picker Sources (new v18) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Picker Sources (new v18) The source of the picker is where the options come from. These sources are defined in 2sxc, and the definition can be reused in many pickers, so you can have a single source for all pickers which should show the same options. Sources can be: A manually entered list Entities retrieved from the server External sources JavaScript sources Source Name Source Type Description Example Custom List Manually entered A list of values and labels red:Error orange:warning black:ok CSV Manually entered A list of of values which can have more columns (mainly for additional hints / links) Red,Red,FF0000,https://... Entity Server-side A list of entities of a certain type Article Query Server-side A list of entities which are provided a certain query (with optional query-parameters to change what is retrieved) Article,Category=News CSS \uD83D\uDEA7 External A CSS file and rules how to find the relevant CSS rules (e.g. for icon-fonts) (not shown here) JavaScript \uD83D\uDEA7 Client-side A JavaScript function which will provide the options (implemented as a Formula) (not shown here) With time, we'll add more sources as they are needed. Examples would be: Files in a folder - for SVG icons History Picker Sources introduced as beta in v17 Regarded as Beta in 2sxc 18.01, but already used in production"
  },
  "basics/data/fields/pickers/ui/index.html": {
    "href": "basics/data/fields/pickers/ui/index.html",
    "title": "Picker UI Controls (new v18) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Picker UI Controls (new v18) The UI is what the user sees and interacts with. This can be a dropdown, radio buttons, checkboxes, etc. Some UIs also allow reordering what was selected, while others do not. As of now we have the following UIs: list - a list of options, where one or more can be selected, optionally with dialog to re-order the selected items radio - a list of radio buttons, where one can be selected checkbox - a list of checkboxes, where one or more can be selected auto-inline - automatic selection of the best UI, based on the number of options which can be selected (radio, checkbox) table - a table of options, where one or more can be selected, optionally with dialog to re-order the selected items dropdown (WIP/BETA) - a dropdown with a list of options, where one can be selected tree (WIP/BETA) - a tree of options, where one or more can be selected Picker UI Preview Most of the UIs will show a label as a preview, but there are more advanced cases such as: Icons Colors Images Fonts This is still WIP History Initial Dropdowns (for string) added ca. 2sxc 2.0 Architecture change to generic pickers started in 2sxc 16 Regarded as Beta in 2sxc 18.01, but already used in production"
  },
  "basics/data/fields/string-default.html": {
    "href": "basics/data/fields/string-default.html",
    "title": "Field Input-Type string-default | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type string-default Use this field type for configuring simple text UI elements, storing string/text data. It's an extension of the basic string field type. Features provide a textbox single-line or multi-line Configuring a String-Default This shows the configuration dialog: Row Count is for setting the text-box height. Empty means default = 1 Font Family is for setting the string field to use mono-space font (for code style input where each character has the same width) new in 12.02 History Introduced in EAV 1.0 2sxc 1.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Font-Family with monospace introduced in v12.02"
  },
  "basics/data/fields/string-dropdown-query.html": {
    "href": "basics/data/fields/string-dropdown-query.html",
    "title": "Field Input-Type string-dropdown-query | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type string-dropdown-query Use this field type for configuring a dropdown UI elements, storing string/text data. It's an extension of the string field type. The special thing about this is that the items shown for selecting are retrieved from Query and not pre-defined as part of the the field definition. This allows you to look up any kind of data and offer it for selection. Features provide values to select from a query optionally provide query parameters optionally use tokens in query-parameters, to pass on values from other fields in the form provide visible labels which are different from the stored value you can configure which field is stored (like an ID etc.) you can configure which field is shown visible in the drop-down data is semi-lazy loaded, so the query is only hit again, if the dropdown is opened after parameters change optionally allow users to type in something different, in scenarios where this is important Configuring a String-Dropdown-Query This shows the configuration dialog: Query the name of the query to use Advanced Parameters a string like country=Switzerland or country=[Country] to parameterize the query Stream Name the stream name, in case you don't want the Default stream Value Field the value which is stored - basically the field you want in your string at the end Label Field the label which is shown - basically for nice display in the UI Multi-Select Multiple Items enable this if you want to allow multi-select Separator the character which will separate the selected items, like \"company1,company2,company3\" Cascading Dropdowns Dropdown-Fields can be cascaded - so that a selection on one dropdown changes the list of possible items on another dropdown. You'll have to work with the Parameters to get this to fly. S Special Behavior When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually History Introduced in EAV 4.5 2sxc 9.11 Enhanced with options to allow edit/delete in 10.20"
  },
  "basics/data/fields/string-dropdown.html": {
    "href": "basics/data/fields/string-dropdown.html",
    "title": "Field Input-Type string-dropdown | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type string-dropdown Use this field type for configuring simple dropdown UI elements, storing string/text data. It's an extension of the string field type. Features provide values to select provide visible labels which are different from the stored value optionally allow users to type in something different choose between value-label and label-value ordering (2sxc 12.04) allow the use of : in values (just escape as \\:) Special Behavior When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually Configuring a String-Dropdown This shows the configuration dialog: Using the Dropdown with the optional free-text-entry (2sxc 9.10) This is what the UI looks like, if Enable Free Text is enabled If the user then clicks on the I-bar icon (TT in v11+), the input will change to text so you could type something different - like a value which wasn't suggested, or a token. History Introduced in EAV 2.0 2sxc 2.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Enhanced in 2sxc 9.10 - definition moved to json-based and added feature for enabling manual text entry New option to reverse order of keys/labels. This version also allows escaping the : with \\:"
  },
  "basics/data/fields/string-font-icon-picker.html": {
    "href": "basics/data/fields/string-font-icon-picker.html",
    "title": "Field Input-Type string-font-icon-picker | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type string-font-icon-picker Use this field type to create input-fields which let the user pick an icon. It stores a string/text data. It's an extension of the basic string field type. Features shows all icons from the icon-library allows searching supports libraries using prefixes (like font-awesome, which use fa-iconname) supports libraries using double classes (like glyphicons, which use glyphicons glyphicons-plus) supports custom libraries you can build, for example using fontello - see instructions lets you auto-load more css-files to load icon-definitions on the fly Result This is what it looks like for the user: Configuring a String-Font-Icon-Picker This shows the configuration dialog: CSS Prefix tells the UI to find all css-classes that start with this, and build icons with them Preview CSS Classes this tells the GUI to add this while showing a preview for icons in the library (so the preview works for Glyphicons etc.) Files tells the UI to load CSS files Important they should usually be in your project, because the UI-JavaScripts can't scan CSS files loaded from externally, like from a CDN Use the token [App:Path] to ensure that it's always loaded from the right Read more Read this post & watch the video which we created when we introduced it History Introduced in EAV 4.0 2sxc 8.4"
  },
  "basics/data/fields/string-url-path.html": {
    "href": "basics/data/fields/string-url-path.html",
    "title": "Field Input-Type string-url-path | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type string-url-path Use this field type to manage url-paths which you'll usually use to identify an item. For example, if you have a blog and each post has a url with the name, this is the field that you need to match the url to the item. It stores a string/text data. It's an extension of the basic string field type. Features ensure that only url-safe characters are used automatically generate a url based on one or many other fields when editing the first time keeps the generated url stable later on also allows manual editing if needed Configuring a String-Url-Path This shows the configuration dialog: Auto Generate... here you can build a template how the url should be auto-generated Allow Slashes this let's you choose if slashes are desired in this url-fragment - in most cases you don't want slashes Read more Read this post & watch the video when we introduced it History Introduced in EAV 4.0 2sxc 8.3"
  },
  "basics/data/fields/string-wysiwyg.html": {
    "href": "basics/data/fields/string-wysiwyg.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Field Input-Type string-wysiwyg"
  },
  "basics/data/fields/string-wysiwyg/index.html": {
    "href": "basics/data/fields/string-wysiwyg/index.html",
    "title": "Field Input-Type string-wysiwyg | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type string-wysiwyg Use this field type for configuring simple text UI elements, storing string/text data. It's an extension of the basic string field type. Features provide a wysiwyg text box rich WYSIWYG experience using TinyMCE ADAM support to drop images and documents Modes (new v15.04) The string-wysiwyg field type has these modes Default Text Text Basic Text Minimal Text Plain Rich WYSIWYG Mode default This is the standard mode, which is used if you don't specify a mode. It has various buttons to edit text and more. Mode text This is the basic text mode. It doesn't show as many buttons and disables features such as adding images to the content. The text-mode is meant for WYSIWYG where the user shouldn't add images. Mode text-basic This is a reduced text mode and doesn't provide the editor with headings. It's meant for simpler text where the editor should really not add headings to the content, but can still do basic formatting and add lists etc. Mode text-minimal This is a very reduced text mode which only provides basic formatting such as bold/italic. It's meant for inputs where the user should not be able to add headings or lists. Mode text-plain This is the most reduced wysiwyg mode, almost not a WYSIWYG at all. It's meant for teasers and other short texts, where the user can basically not paste formatted text or make anything bold/italic. In addition to the toolbar, the plain text mode also has the following configuration: Disable dialog mode. Since the plain text mode is meant for short texts, it's not really useful to have a dialog mode. Mode rich This is a new mode which is still in development. It provides special features to make content which is rich and responsive at the same time. Features include: Automatic image resizing of wysiwyg-images using the <picture> tag Image arrangements which work on all screens (eg. 4-in-a-row on desktop, but under-each-other on mobile) Optimized CSS to make this possible Special spacers to create proper gaps where necessary Image text wrapping so that multiple side-images are under each other and not staggered \uD83D\uDC49\uD83C\uDFFD See Field Input-Type string-wysiwyg Rich-Mode new 16.01 Configure a String-Wysiwyg The mode is configured in the normal field settings. History Introduced in EAV 1.0 2sxc 1.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Changed to be full-screen dialog editing only in 10.00 Added option to switch between full-screen or directly in the form in 10.09 Added options to enable / disable HTML and Advanced buttons in 10.09 Added modes in 15.04, released in 16.00"
  },
  "basics/data/fields/string-wysiwyg/rich.html": {
    "href": "basics/data/fields/string-wysiwyg/rich.html",
    "title": "Field Input-Type string-wysiwyg Rich-Mode new 16.01 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Input-Type string-wysiwyg Rich-Mode new 16.01 A wysiwyg field which can be configured to be in various modes - see Field Input-Type string-wysiwyg. When this configuration is set, it will: Provide buttons in the Edit UI to align images in a special way add splitters to reset content alignments after the splitter add spacers to create gaps of various sizes in content specify resizing using css-classes for the server-side image-resizing Allow the razor .Html(...) to automatically resize images make all images responsive using <picture> tags automatically add spacers To make all this happen it needs this: The new mode setting The new behavior in the Edit UI The new .Html(...) API Internal server-side code to find the images and replace them with responsive <picture> tags Special CSS to make it all work (see below) A special debug mode to help you in optimizing the CSS for your use case (see below) The Edit UI If a string-wysiwyg is configured to behave in the new rich mode, the toolbars will look as follows: The new buttons on the second row allow you to add spacers of various sizes. When you add images or spacers which resulting in extra padding, the padding will be shown in the UI as follows: When selecting a spacer, the context-toolbar will look as follows: When selecting an image, the context-toolbar will look as follows: This allows you to change the alignment (left/right) and to specify the size of the image. Important In the classic wysiwyg-mode, the image-alignment was done using the float css-property and the width uses the width css-property. In this new Rich mode, it will only set CSS classes like wysiwyg-left or wysiwyg-50. So the final output will only change, if the CSS definition exists. This happens automatically, when you use the .Html(...) method. CSS To make all of this work, we use a list of CSS classes which are applied in the edit-UI. The output must of course also have these classes, so that the final result looks the same. These are the classes that make it work: wysiwyg-container is set on the wrapper <div> so the classes inside will only apply to this field wysiwyg-100, wysiwyg-50 etc. are width classes on the image wysiwyg-left, wysiwyg-right etc. are alignment classes on the image which also apply a padding to the opposite side wysiwyg-splitter are classes applied to <hr> tags to reset image alignment and ensure the next content start below it wysiwyg-spacer-0, wysiwyg-spacer-s etc. are classes applied to <hr> tags to create gaps of various sizes The built-in CSS for this is automatically added to the page when you use the .Html(...) method. It ensures correct sizing and will also re-order the images to be above the text on mobile. It also ensures that multiple images on the same line will properly align and not stagger. For example, 3 images each being 33% should have a padding after the first two, but not after the last one. Image arrangements which work on all screens (eg. 4-in-a-row on desktop, but under-each-other on mobile) Image text wrapping so that multiple side-images are under each other and not staggered You can also add your own CSS to make it look different. Debug CSS If you specify debug: true in the .Html(..., debug: true) method, it will add some CSS to the page to help you see what's going on. This will show you: the exact size/location/placement of the wysiwyg-container - shown in fading magenta exact sizes of images - shown in bright fading green paddings around images - shown as shaded areas spacings / gaps of splitters - shown as shaded areas History Introduced in v16.01 on Towel Day 2023 Shortlink: https://go.2sxc.org/wysiwyg-rich"
  },
  "basics/data/fields/string.html": {
    "href": "basics/data/fields/string.html",
    "title": "Field Data Type: String | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Data Type: String This explains String Fields. For an overview check out Understanding Data.... String data is a basic data type and is very commonly used in many fields. It's used for any basic kind of text, be it a character, a single-line text or wysiwyg-content. Features The basic string field doesn't have any features, since all the features are in the sub-types. Sub-Types of String Fields string-default - simple one or multi-line inputs drop-down for simple dropdowns drop-down-query for dropdowns which retrieve the data from a server wysiwyg font-icon-picker url-path Shared Settings All string field types currently don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is simply stored as a string in the DB. Storage in the SQL Database in the JSON-Model This is simply stored as a JSON string. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null, so you may need to catch this special exception in your code. Read also RazorBlade Text.Has(...) Tutorial RazorBlade Text.First(...) Tutorial History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanced in 12.02 to show old, invisible configuration which may still have an effect and allow copy/purge"
  },
  "basics/data/how-data-flows.html": {
    "href": "basics/data/how-data-flows.html",
    "title": "How Data Flows | 2sxc 19 for Dnn and Oqtane",
    "keywords": "How Data Flows This is documented here: How Data Flows in the Server"
  },
  "basics/data/index.html": {
    "href": "basics/data/index.html",
    "title": "Understanding Data... | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Understanding Data... you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data in 2sxc covers various aspects: Data as a developers sees it - as tables of items / Entities Content as an editor sees it - basically bundles of text/image shown on a specific page Content Presentation Settings which configure how the content should be shown for each item Settings at App-Level Language Resources at App-level for multilanguage output Assets (images, documents) belonging to this each data-item / Entity This kind of data is usually used to: Show in the browser with HTML Show in the browser in a JS-application or SPA Edit in the browser Export / import data Combine with other data Use in other sites or mobile apps with a headless backend This kind of data can be used in many ways. Let's start by looking where this fits in the stack: you are here (click to zoom) - discover the stack .context-box2 .data-data { visibility: visible; } Tip The Edit UIs are automatically generated based on the Content-Type Schema which says what fields each kind of data has. App Data Model Every App contains Content-Types and Entities - like this: Content Types are the schema, they define what fields an entity has - peek the object structure. Entities are the data-items, they contain the content - peek the object structure. Let's look at each piece in detail. Content-types Content-types are the Schema. The are the rules which say that a Person has a FirstName, Photo and Birthday etc. An App usually has a lot of Content-Types. \uD83D\uDC49 Content-Type (Schema/Object-Type) \uD83D\uDC49 Content-Type Fields Global / Shared Types Usually a Content-Type is part of the App and only available inside that App. In rare cases you may have many sites (Portals) or many Apps which need the same Content-Type. In this case it's smarter to store this in a shared location. \uD83D\uDC49 App Shared \"Ghost\" Content-Types (⚠) Global-Types are Content-Types which are stored in a system folder so they can be used in all Apps of an installation. \uD83D\uDC49 Global Content-Types (⚠) Entities / Content-Items Entities are Dynamic Data Items. They always belong to a Content-Type and have all the fields specified in that Content-Type. This makes them very dynamic. A Person has different fields than a BlogPost All the Values in an Entity can also be multi-language by default \uD83D\uDC49 Entities (Data, Records, Items) Assets (Images / Documents) Assets come in 2 Flavors: Private Assets and Shared Assets. Private Assets By default, assets uploaded in the UI belong to the Entity and to the Field they were added to. So the photo daniel.jpg belongs to the Field ProfilePhoto of the Entity Person #5020. Shared Assets If the editor expects to re-use an asset elsewhere and if the Content-Type configuration allows this, then the asset can also be stored in a shared location. \uD83D\uDC49 Content Assets / Images / Documents ADAM - the Automatic Digital Asset Manager ADAM is a subsystem of 2sxc. It's responsible for managing the files and storing them in a way that assigns Private Assets to the Entities and Fields they belong to. \uD83D\uDC49 ADAM - Automatic Digital Asset Management External Data External Data can come from anywhere. Here are some common scenarios: SQL data coming from the Dnn database or from another DB CSV data from a file which an editor updates from time to time SharePoint document lists or tables JSON data from another REST WebService External Data is retrieved using one of the following methods: a VisualQuery which was configured to get / filter / sort this data C# code creating DataSource objects to retrieve this data C# code using standard .net APIs to get / use this data Once the data is retrieved it can be used in Templates, WebAPIs, JavaScript and SPAs. More Advanced Topics Entities and Dynamic Entities Using Entities as Content or as Data Content Lists of Entities VisualQuery Data Sources Headless APIs Metadata"
  },
  "basics/data/instance/index.html": {
    "href": "basics/data/instance/index.html",
    "title": "Instance Data (vs. All App Data) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Instance Data (vs. All App Data) you are here (click to zoom) - discover the stack .context-box-summary .server-all, .context-box-summary .data-all { visibility: visible; } Apps can have a lot of data and the entirety of this data is called the App Data. Usually every Instance (use) of a Template will only work with a selection of this data. You could write code to find the parts you need, but usually that work is automatically done by 2sxc. This is possible thanks to two common scenarios which determine what data should to be used: An editor added content manually, so this is the data that should be worked with A Query prepared data for this Module Instance Instance Data is data which is pre-selected for one Module Instance. Either because it was edited this way or because the View Configuration specified a Query. Common Scenarios for Instance Data Content with text, images etc. which should appear on a Module Lists of Content items which are added/edited individually Views which need a bit of configuration information specific to that instance Views which receive the data to work with from a Query (so the Query defines what Data should be used in this instance) Difference Instance-Data and App Data Instance Data is only a part of the App Data, while the App Data contains everything in the App. In your code, Instance Data is prepared by the engine and available on objects like Content if the editor added content or if a Query was specified. On the other hand the complete App Data is available on objects like App which are always available even if no Instance Data exists. Read more about where data comes from in your code History Introduced in 2sxc v1 App.Data added ca. 2sxc 6 App.Query added ca. 2sxc 7"
  },
  "basics/data/metadata.html": {
    "href": "basics/data/metadata.html",
    "title": "2sxc Data as Metadata | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Data as Metadata 2sxc has a powerful system to use it's entities/items as Metadata. Read about it in Metadata - (advanced ⚠)"
  },
  "basics/data/metadata/create.html": {
    "href": "basics/data/metadata/create.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to [](xref:Basics.Metadata.Create"
  },
  "basics/data/metadata/for.html": {
    "href": "basics/data/metadata/for.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Metadata For Something - (advanced ⚠)"
  },
  "basics/data/metadata/index.html": {
    "href": "basics/data/metadata/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Metadata Metadata now has an own documentation section here: Metadata - (advanced ⚠)"
  },
  "basics/data/metadata/of.html": {
    "href": "basics/data/metadata/of.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Metadata Of Something - (advanced ⚠)"
  },
  "basics/data/metadata/read.html": {
    "href": "basics/data/metadata/read.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Read / Access Metadata - (advanced ⚠)"
  },
  "basics/data/metadata/target-types.html": {
    "href": "basics/data/metadata/target-types.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Metadata Target Types"
  },
  "basics/data/multi-language/index.html": {
    "href": "basics/data/multi-language/index.html",
    "title": "Multilanguage Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Multilanguage Data you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data in 2sxc is Multi-Language by default, but the UI will only offer languages which have been activated in the Site settings. Multi-Language Attributes Every Attribute (like a Title) can be stored in multiple languages. So the data model of some content can look like this: Title en-US: Enjoy a Visit to our Headquarters de-DE: Genießen Sie einen Besuch in unserem Hauptquartier de-CH: Geniessen Sie einen Besuch in unserem Hauptquartier Photo *: file:7402 SloganImage en-US: file:7405 de-DE,de-CH: file:7406 GpsCoordinates en-US: { \"Long\": 74.6020030, \"Lat\": 53.002030060 } Employees (reference to other entities/items) *: [74, 592, 6030, 39] Some things to understand in the above data model: Title is translated in 3 languages (Germany/Switzerland only differing with ß vs ss) The Photo has the language * which means that it was edited before languages were enabled and doesn't map to any particular language The GpsCoordinates are only set in 1 language, so every language will show the same value The SloganImage is translated so en and de have different images The Employees relationship to other data is not translatable, and the order of the items is also preserved Language Assignment and Read/Write State Each Attribute or Property like Title has one or more Values. These Values are mapped to the Attribute with one or more languages. Each language-assignment also stores the read/write state for the UI. As such, a value can have different internal rules It can be assigned to one language only. It can be assigned to multiple languages and editable in the UI of each language. Changing it would change the value in all the languages. It can be assigned to multiple languages and editable in the UI of some of these languages. Changing it (in one of the editable languages) would change it in all assigned languages. The assigned languages which are not editable would always just show this language, but not enable editing in the UI. Relationships Cannot be Translated Relationships are not Translatable. If a Blog-Post references Tags, the same tags are referenced in all languages. Note that related items may again have multi-language properties, so even if the Authors list contains the same authors across languages, accessing the Bio of a related Author will probably return a different value. Assets are Multi-Language, but the Files are Shared Across Languages A link/file-field can have a different value in each language, but the files uploaded will be available to that field in the UI of every language. So a SloganImage field would show all the files that were uploaded to this field, but the selected file can be different in each language. This wil also affect Libraries of files - the libraries will always contain the same files/images in all languages. But if these files have Metadata, then that Metadata can be different in each language. Disable Translation for Individual Fields The UI can be configured to not allow translation of specific fields if this is desired (for example URL-key fields). See also Basics.Cms.Languages.Index. Internal Functionality When languages are enabled, this is what happens Every field can be translated individually - or you can translate all fields of an Entity On every Entity the primary language must always be created first The primary language will then serve as the fallback for all languages which have not been translated In addition to translating values you can also link them to other languages, so that editing a value in de-DE would automatically affect de-CH but not en-US History Introduced in 2sxc 2.0 Non-Translatable fields were made an option in 2sxc 11"
  },
  "basics/data/relationships/index.html": {
    "href": "basics/data/relationships/index.html",
    "title": "Entity Relationships | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Entity Relationships This explains Entity Relationships. For an overview check out Understanding Data.... Data can be related to other data, like when a Book belongs to a Category and also has an Author. Since all data-items are called Entities we call this Entity Relationships. Additionally, there are also Entities which explicitly enhance/describes another thing. That kind of relationship is called Metadata. How Entity-Relationships Work Each Entity has many fields, some containing text, numbers etc. but some can also point to another item. These kinds of fields are called Entity Fields. When configured correctly, an entity-field shows a dropdown of items. So in the case of a book, the Author field may show a dropdown of Person items. There are different types of relationships: 1:n means that one thing can refer to many other things - like a book which points to many categories n:1 means that many things can refer to one thing - like many books pointing to the same author n:n means that many things can refer to many things - like many blog-posts pointing to many tags (the blog can refer to many tags, and each tag may be pointed to by many blogs) 1:1 relationships are when one thing refers to one other thing, and neither are re-used again. This is not often used in CMSs. Relationships Preserve Item-Order Since 2sxc/EAV data is often used for Content-Management it's important to note that: Relationships preserve the Order of the Related Items. This means that an editor adding Author relationships to a Book can organize them in an order if he/she wishes to do this. The output template can then choose to either output these Authors in the order they were managed, or sort them by Title or other property if that would be more appropriate. Relationships are Cross-Language Values of Entities are multi-language, but relationships-connections apply to all languages. So the list of Authors is the same for all languages. Metadata Relationships This is a very different concept, where an Entity enriches something else. Read more about it in metadata. Advanced Topics Razor LINQ tutorial showing how to navigate between relationships RelationshipFilter Data Source to find items related to another item History Introduced in 2sxc 2.0"
  },
  "basics/edit/edit-form/custom-fields.html": {
    "href": "basics/edit/edit-form/custom-fields.html",
    "title": "Customizing the Form - 2sxc v11 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Customizing the Form - 2sxc v11 you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } 2sxc comes with thousands of features, and the more we add, the more features are requested \uD83D\uDE09. So it's important that you can implement many of these things yourself. Here's an overview over what's possible & how, + what's in store. Create Custom Input Fields This has been completely reworked in 2sxc 11. If you're new here, best watch this video: Then: Check out the Custom Fields Tutorials Read the overview Read about the connector Object Read about customizing the WYSIWYG History Custom Form Fields introduced in 2sxc 7 Completely recreated the system in 2sxc 11 using WebComponents"
  },
  "basics/edit/edit-form/field-validation.html": {
    "href": "basics/edit/edit-form/field-validation.html",
    "title": "Field Validation in 2sxc TODO | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Field Validation in 2sxc TODO This is still incomplete Regular Expression Field Validation As of 2sxc 10.23 there are two kinds of field validations Invalid field - preventing the user from saving the data Warnings - showing a warning but allowing save Read also todo History Introduced in 2sxc 1.0 Field Validation added in 2sxc 2.0 Field Warnings added in 2sxc 10.23"
  },
  "basics/edit/edit-form/fields.html": {
    "href": "basics/edit/edit-form/fields.html",
    "title": "Fields in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fields in 2sxc Fields are configured at the content-type level. These specs are not complete, but should mention a few special cases. Regular Expression Field Validation As of 2sxc 10.23 there are two kinds of field validations Invalid field - preventing the user from saving the data Warnings - showing a warning but allowing save Read also todo History Introduced in 2sxc 1.0 Field Validation added in 2sxc 2.0 Field Warnings added in 2sxc 10.23"
  },
  "basics/edit/edit-form/index.html": {
    "href": "basics/edit/edit-form/index.html",
    "title": "Edit Content or Data in Dnn / 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Edit Content or Data in Dnn / 2sxc you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } Editing mostly happens in stand-alone dialogs which are JavaScript based (built using Angular). These dialogs are typically dialogs like edit an item edit a combination of items - like a content item and an assigned presentation-settings item The configuration of these edit-dialogs happens in the Content Type configuration, which automatically generates the correct dialog for the user. To understand this better, you may want to research Content-Types which define what fields exist in the edit-dialog Field Data Types which determine what options a field has and how it's stored Custom input types for special input types not provided by default Presentation Settings which tell the view how an item is to be shown, check also the content/data differences View/Template configuration which assigns certain content-types to Templates - check out this tutorial Difference between Content and Data and how it affects the in-page editing features Learn More About... How to create Custom Input Fields Advanced fields like the GPS-picker Configuration like Enable-A-Field, Can-be-Translated, Default-values"
  },
  "basics/edit/edit-ux/context.html": {
    "href": "basics/edit/edit-ux/context.html",
    "title": "In-Page Editing Context (technical) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "In-Page Editing Context (technical) To ensure that client-side commands like edit can work (this includes all toolbar functionalities), the in-page scripts must pick up various things like AppId and more. This is provided as an Edit-Context and looks a bit like this: <div data-edit-context='{ \"Environment\":{\"WebsiteId\":0,\"WebsiteUrl\":\"//.../en/\",\"PageId\":56,\"PageUrl\":\"http://.../en/\",\"parameters\":[{\"Key\":\"TabId\",\"Value\":\"56\"},{\"Key\":\"language\",\"Value\":\"en-US\"}],\"InstanceId\":421,\"SxcVersion\":\"9.30.0.40333\",\"SxcRootUrl\":\"/\",\"IsEditable\":true}, \"User\":{\"CanDesign\":true,\"CanDevelop\":true}, \"Language\":{\"Current\":\"en-us\",\"Primary\":\"en-us\",\"All\":[]}, \"ContentBlock\":{\"ShowTemplatePicker\":true,\"IsEntity\":false,\"VersioningRequirements\":\"DraftOptional\",\"Id\":421,\"ParentFieldName\":null,\"ParentFieldSortOrder\":0,\"PartOfPage\":true}, \"ContentGroup\":{\"IsCreated\":true,\"IsList\":false,\"TemplateId\":3770,\"QueryId\":null,\"ContentTypeName\":\"e2351b42-87f2-427e-9566-ff271e3e5a9f\",\"AppUrl\":\"/Portals/0/2sxc/Content\",\"AppSettingsId\":null,\"AppResourcesId\":null,\"IsContent\":true,\"HasContent\":true,\"SupportsAjax\":true,\"ZoneId\":2,\"AppId\":2,\"Guid\":\"c238e78b-a6e5-4811-a5c9-51d5ebf48b39\",\"Id\":3894}, \"error\":{\"type\":null}, \"Ui\":{\"AutoToolbar\":true}}'> <span>more stuff...</span> </div> How the Edit-Context is Added By default, it is automatically added if the system detects that the current user has edit-permissions. In 2sxc 9.30 a feature was added to add the context in code, using the Edit.Enable(...) command. Inner-Context for Inner Content When inner content is used, each block of inner-content will change the context, because it will have different IDs etc. So inner-content blocks will add their own context-attributes. See also [Edit.ContextAttributes](xref:Razor.ContextAttributes]. How JS Picks up the Context In most cases the context is picked up automatically - like in such a code: <a onclick=\"$2sxc(this).run('edit', ...)\">edit</a> This kind of code traverses the HTML to look for the closes context-node, and uses it to figure out everything automatically. The second auto-pickup method uses the module/content-block ID, like this: <a onclick=\"$2sxc(4203).run('edit', ...)\">edit</a> This will also find the context, but instead of traversing the DOM upwards, it will check all DOM objects on the page and find the appropriate one for this ID. What's in the Context This information is just conceptual. Do NOT try to access these values in your code, because they will change, and it's not part of any public API!. The concept contains things like: versions (so that the UI can behave as needed and correctly load scripts with cache-breaking) urls so the GUI can perform certain actions correctly language information for the GUI various IDs like the current zone/app, item-IDs, module-IDs etc. Using Edit Context in Your Code You should not use this in your code, as it's not a public api and will change from time to time. History Introduced in 2sxc 1.0 constantly modified/extended in future versions"
  },
  "basics/edit/edit-ux/hide-advanced-features.html": {
    "href": "basics/edit/edit-ux/hide-advanced-features.html",
    "title": "Hide Advanced Features From Non-Admins | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Hide Advanced Features From Non-Admins you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } For many users 2sxc is too powerful, so there are various mechanisms for hiding the complexity from normal editors. Overview You can auto-hide all advanced toolbar buttons using a special security group. You can create custom toolbars for all users, or even for certain user groups inside a Razor template You can see even more advanced stuff by going into a special developer mode You can see more internal code and messages by loading the JS-Code unminified Auto-Hide Advanced Buttons From Non-Admins This is very simple - 2sxc asks Dnn if there is a security group called 2sxc Designers. If such a group exists, then only users in that group (and all host-users) see the advanced button, any other user will not see advanced buttons any more. You can find more instructions in this 2sxc Designers checklist. Custom Toolbars You can create any kind of toolbar, and you can decide to show/hide which ever you want based on security roles in Dnn. This requires standard C# / Razor skills and is not explained more in detail right now. Note that you'll find some snippets which should help you in the snippets, to both check what group a user is in, and to generate various custom toolbars. Read also Checklist to setup 2sxc Designers security group History Added ca. 2sxc 2.x"
  },
  "basics/edit/edit-ux/index.html": {
    "href": "basics/edit/edit-ux/index.html",
    "title": "Edit User Experience in the Page | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Edit User Experience in the Page you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } 2sxc has powerful CMS features, most of them just work by magic. You can also modify the behavior to fit your needs. When users edit content they usually use in-page buttons to access edit-dialogs and more. Here is a short overview and links to what you need to know. The Standard Edit Dialogs Editing mostly happens in stand-alone dialogs which are JavaScript based (built using Angular). These dialogs are typically dialogs like edit an item edit a combination of items - like a content item and an assigned presentation-settings item Note that other edit-actions happen in-page directly, like move-up/down in a list etc. All about Toolbars and Editing In-Page Item Edit Toolbars Most of the concept is explained in InPage Toolbars. You will usually create such toolbars from the Razor templates - read about Edit.TagToolbar and Edit.Toolbar The hovering insert-modules toolbar-system is called quickE for quick-edit. There you will also see how to customize the editing experience. Customize Toolbars and Buttons If you want to do more than the default toolbars do, you want to read about: Html toolbars and buttons to customize the toolbars Toolbar settings to configure alignment, hover etc. Buttons to understand in details how buttons work and how to customize them There is also a more technical article if you want to see deeper into the JavaScript. Commands to understand which commands the CMS can run, and how to call them from normal links Custom Code Buttons to create buttons which run your custom code Customize QuickE (Quick Edit) You can also Customize / Configure QuickE (Quick Edit). Create Custom Input Fields (in the Edit Form) How to create Custom Input Fields Customize the Inner-Content Editing Behaviors TODO: Inner Content - edit/config Documentation WIP - so for now just learn about Inner Content Read also Blog post about Introducing Shake - Mobile Content Editing just turned sexy Blog post about Toolbars for Designers and Developers Blog post about Customize in-page toolbars Blog post about Calling commands from links"
  },
  "basics/edit/edit-ux/quick-edit.html": {
    "href": "basics/edit/edit-ux/quick-edit.html",
    "title": "QuickE (Quick Edit) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "QuickE (Quick Edit) you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } QuickE (pronounced quick-e) is the quick-edit feature inside 2sxc to quickly add / move modules and inner content blocks. It supports touch and usually is used with a mouseover. In the current version, it allows you to do the following in normal view-mode: add a content or app module on any position in a Dnn panes move / delete any Dnn module using a copy-paste concept send any Dnn module to an empty pane (which couldn't do paste, as the target is invisible) add a content or app content-block to any inner-content area move / delete any content-block inside an inner-content area Since version 2.0 you can also configure some of this at skin and template level. How to use By default any page that has any 2sxc module added will automatically load quickE because it needs it to provide buttons/toolbars for inner content blocks. We also recommend to include the JS in the skin by default, so that quickE is already enabled on empty pages as well. You can find the necessary asp.net web-control in our Bootstrap Instant Theme Here's how: <%@ Register tagprefix=\"Edit\" tagname=\"QuickEdit\" src=\"~/DesktopModules/ToSIC_SexyContent/DnnWebForms/Skins/QuickEdit.ascx\" %> <Edit:QuickEdit runat=\"server\" /> The above lines first tell .net that this control QuickEdit exists, and then adds it to the page using the <Edit:...> tag. Note that this tag won't create any HTML, it will just tell Dnn that it must load the relevant JavaScripts when a user is logged on. Once it's included, it will just work automatically. Auto-Disabled Module-Quick-Edit on Details Pages By default quickE will change it's behavior if it finds inner-content blocks. The reason is that often inner-blocks are found on child pages of something, for example in blog-post details. If the user could insert both modules and inner-content on a details page, then the user would often by accident insert modules (instead of content-blocks). The user would believe that he did the right thing, when in reality the newly added module would now show up on all other details-pages as well. Now there are cases where this auto-disable shouldn't happen - for example in accordeon-style modules which are used on normal pages. This can be configured as explained below: Configuring quickE Quick-Edit Since quickE 2.0 (released in 2sxc 8.7) you can now also configure it a bit. Here are the most important features enable / disable the entire quickE enable / disable module quick-edit enable / disable inner-block quick edit Read more about this in the Html Js documentation page Read also Inpage Toolbars - the item-scoped toolbars used for editing Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App 2sxc blog History quickE 1.0 in 2sxc v08.04 quickE 2.0 with move/delete dnn module and configurable in 2sxc 08.07.00"
  },
  "basics/edit/edit-ux/toolbars/button-groups.html": {
    "href": "basics/edit/edit-ux/toolbars/button-groups.html",
    "title": "Custom Toolbars: Button Groups | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Toolbars: Button Groups you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } Buttons in the Toolbars can be grouped into various sets of buttons. This will show the users only a subset of the buttons, and let him access other groups using the ellipsis button. You can set them in C# APIs as well as JS APIs. Since the values and everything applies to both, the possibilities are documented here. Group Names in the default Toolbar The following button groups exist by default. You can target them to add your buttons, or remove them using -group=name: default - the main initial buttons like edit, add etc. list - anthing having to do with the current list - move-up/down etc. edit-advanced - advanced, not-recommended buttons like delete view - anything related to the view - edit template etc. app - app related buttons History Introduced custom Toolbars in 2sxc ca. v5 Added to 2sxc 10.27 .01 in March 2020"
  },
  "basics/edit/edit-ux/toolbars/button-ui.html": {
    "href": "basics/edit/edit-ux/toolbars/button-ui.html",
    "title": "Custom Toolbars: Button UI Rules | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Toolbars: Button UI Rules you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } Buttons in the Toolbars can have custom UI parameters. You can set them in C# APIs as well as JS APIs. Since the values and everything applies to both, the possibilities are documented here. Overview of UI Rules on Button icon color show classes title group position Icon &icon=icon-class-name allows you to set an alternate icon Since v14.07.05 you can also specify an SVG like this: &icon=<svg... This would use the specified SVG directly on the button, but there are some caveats: The SVG will need to auto-resize to fit the button. Because of that, your SVG will either need to specify a viewBox or it will be auto-calculated for you. Since an SVG usually contains many characters that won't work in a URL, it must be base64 encoded, so it's more like &icon=base64:PHN2ZyB... Color &color=... gives the button other colors Both settings and buttons can have an &color=... parameter. The ... can be just one color or two, like &color=red,green or &color=brown. When specifying colors you can either use standard names like red or HEX-codes like FF0000. You cannot use the # hash symbol, so when specifying hex-colors, always just write the characters. The button rendering system will auto-detect hex color codes. Note that you can also use semi-transparent hex-codes, like FF000088. Show Force show/hide a button. This is only used in cases where show is auto detected, and you wish to override it. &show=true or &show=false Most common use case is to force-show or hide an existing button. For example, if you think it's ok to show the delete button, just use delete&show=true Class Add more classes to your button for custom styling. &class=your-class add one or more classes to the button to affect styling Title &title=some-text - mouseover message Group This is used in toolbars which have many button groups - either the standard groups or groups you made yourself. By specifying the group you can make sure a button is in another button group. &group=my Position &pos=0 - add the button to the front of the list &pos=-1 - add the button to the end of the list Read also check out the list of commands/buttons History Introduced custom Toolbars in 2sxc ca. v5 Added to 2sxc 10.27 .01 in March 2020 Prefill support added in 10.27 .02 in April 2020 SVG Icon Support added in v14.07.05"
  },
  "basics/edit/edit-ux/toolbars/customize.html": {
    "href": "basics/edit/edit-ux/toolbars/customize.html",
    "title": "Custom Toolbars | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Toolbars you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } The standard toolbars are great for default use cases. But often you want to simplify the edit-UI even more, so that editors will be faster and make fewer mistakes. 2sxc 10.27+ offers a new way to build and create toolbars. Instead of the difficult to use object-structure it has a much simpler commands syntax. These are specs for the command syntax. Tip Read how to use in the How-To Customize Toolbars section. Overview The new toolbar builder works in this way: First, take a toolbar template - typically default or empty Then make changes like adding or removing buttons Optionally override certain defaults Render the toolbar with optional overrides These instructions are a simple list of strings. For example: toolbar=empty tells the system to load the empty template new?contentType=Person will add a button new for the type Person edit?entityId=5593 will add an edit button for the item 5593 These instructions are provided as a JSON array of strings - like this: [\"toolbar=empty\", \"new?contentType=Person\", \"edit?entityId=5593\"] Examples of Build-Instructions Every build instruction consists looks as follows: \"\" - an empty string is valid but not very useful \"/this is just a comment\" - a comment if you need to document something inline \"new\" or \"+new\" - add a new-button \"-edit\" - remove a button - like when slimming down a default toolbar \"%delete&show=true\" - a button modifier - to change a default (the delete button is always hidden by default) \"group=my-group\" or \"+group=my-group\" add a button-group \"+group=my-group&pos=2\" add a button group at index 2 (so in the 3rd-position, 0-based) \"new-quote=new?contentType=Quote\" - an identifier followed by a button name - when having multiple new buttons \"%more&color=red\" - a modifier which changes the color of the icon General Syntax of a Build-Instruction The general syntax is as follows (build-instruction)(&build-params optional)(?call-params optional) Build Instructions A build instruction consist of 1-3 parts an optional prefix like + to add a button or group (this is the default if no prefix is given) % to modify a default thing - like change a the color of the new-button - to remove a button or group from the list $ for system/global things (this is the default if the command is toolbar, params or settings) / a comment - like \"/here comes a special add-button\" a command and optional addition like toolbar - for setting the default toolbar template toolbar=default will load the default toolbar with all standard buttons toolbar=empty will load an empty toolbar without any buttons settings - for configuring the toolbar settings - see below params - for parameters which are used in all buttons - see below group - to add a group of buttons group=my-group-name gives the group a name, for placing buttons in it `-group= add, edit etc. - all known commands of buttons Build Parameters (&...) If you have a build-instruction and need to add some parameters you must separate them with an & and add the parameters in url-style, like &color=red. Build Parameters for Toolbar (toolbar) The toolbar currently doesn't have any additional parameters. But you can add &key=value which will be used as settings, if settings are not also provided. Build Parameters for Settings (settings) Settings affect how the toolbar is shown. These are the known settings: color=... - specify a different button - see color hover=left or =right or =none - default is right class=my-class to add one or more classes to the toolbar autoAddMore = auto default end if right-float, start if left-float, new in 14.07.05 end used to be the default start never new v14.07.05 Build Parameters for Params (params) Params don't have any additional settings - they only have parameters (after the ?). See below. Build Parameters for Groups (group) Groups currently don't have additional parameters. \uD83D\uDC49\uD83C\uDFFC see also Custom Toolbars: Button Groups Build Parameters for Buttons \uD83D\uDC49\uD83C\uDFFC see Button UI Rules Call Parameters (?) Most instructions can have additional call-parameters - separated by a ?.... For example, this would create an additional + button to create a new contact: add-contact=add?contentType=Contact Call Parameters for Toolbars & Settings The toolbar and settings don't have any additional parameters. But you can use ?key=value&key2=value on the toolbar, which will be used as params if params are not provided. Call Parameters for Params Params at the global level will be used by all buttons. The most common params are entityId=some-number - mainly used for edit, delete etc. entityGuid=guid-guid-guid - mainly used for delete contentType=ContentTypeName - mainly used for adding new items title=some-text - mainly used to show a title when asking to delete something isPublished=true|false prefill:Field1=val1&prefill:Field2=val2 etc. for=someKey or for=targetType,keyType,key for list management useModuleList=true|false sortOrder=# Using Prefill Parameters Prefill parameteres are mainly used for creating new items like add?contentType=Book&prefill:Title=This is nice title The syntax is a bit special because you may need to add multiple prefill parameters, like: add?contentType=Book&prefill:Title=Please enter name&prefil:Author=unknown Since many things can go wrong with prefills, this is what you need to know All prefill parameters start with prefill: followed by the field name. The field name is case sensitive, so you'll probably have to write Title instead of title. You can use multiple prefills, like ...&prefill:Title=Hello&prefill:Intro=welcome! When using special characters which cause trouble in urls, make sure they are uriEncoded. If you do the prefill using the razor tag @Edit.Toolbar(...) or @Edit.TagToolbar(...) this happens automatically, but if you use JavaScript to prepare it, you should use encodeURIComponent to prepare the value (not the prefix prefill:...) Special considerations for each type of field for text fields just write the text as is like prefill:Title=Todays News - remember to encode if you expect special characters. When you encode things, you can also prefill html. for number fields just use prefill:Priority=47 for boolean switch fields just use prefill:UseLightbox=true for dates we suggest to use the same ISO format prefill:PublicationDate=2020-04-01 as this will always be recognized correctly. If you use another format like 4/1/2020 you risk that the UI will auto-detect the date based on the user and maybe pick the wrong number as the month. for dates with time you should really use ISO with Zulu time code like prefill:ShowFrom=2020-04-01T10:30Z. The Z at the end means that it won't adjust for time zones - otherwise the UI may show a different time. for related entities (like prefilling a category) use the target Guid, like prefill:Category=b7c1c2e1-4896-4999-a0bc-87ddf3ce31cb. As of now, you must always use the Guid, IDs are not supported because as the app is exported and re-imported, the IDs will change. to assign multiple entities (like for category fields with multiple categories), separate them with commas, like prefill:Category=b7c1c2e1-4896-4999-a0bc-87ddf3ce31cb,91753b4d-4932-4b22-af1c-f6ac2b76c67a Using Filter Parameters Filter parameteres are mainly used for creating dialogs which show only some items like contentitems?contentType=Book&filter:ModuleId=573 The syntax is a bit special because you may need to add multiple filter parameters, like: contentitems?contentType=Book&filter:ModuleId=573&filter:Author=Daniel Since many things can go wrong with filters, this is what you need to know All prefill parameters start with filter: (without an s) followed by the field name. The field name is case sensitive, so you'll probably have to write Title instead of title. You can use multiple filters, like ...&filter:Title=Hello&filter:ModuleId=52 When using special characters which cause trouble in urls, make sure they are uriEncoded. If you do the prefill using the razor tag @Edit.Toolbar(...) or @Edit.TagToolbar(...) this happens automatically, but if you use JavaScript to prepare it, you should use encodeURIComponent to prepare the value (not the prefix filter:...) Using Metadata Parameters The metadata parameters are for creating new metadata or editing existing data. There is a short and a long syntax: for=key - for example, for=file:930 - this will create metadata for a CMS-object with the ID file:930. for=targetType,keyType,key like for=10,string,file:930 which has the same effect as the previous example. Note Metadata buttons always also need a contentType parameter and usually an entityId parameter. So if an entity already has this metadata-assignment, the dialog will show an edit for that and not create a new one. The entityId should be 0 when no entity exists yet. To use metadata, read more about metadata (TODO). Read also check out the list of commands/buttons Demo App and further links You should find some code examples in this demo App TODO: History Introduced custom Toolbars in 2sxc ca. v5 Added to 2sxc 10.27 .01 in March 2020 Prefill support added in 10.27 .02 in April 2020"
  },
  "basics/edit/edit-ux/toolbars/index.html": {
    "href": "basics/edit/edit-ux/toolbars/index.html",
    "title": "In-Page Edit-Item Toolbars and Buttons | 2sxc 19 for Dnn and Oqtane",
    "keywords": "In-Page Edit-Item Toolbars and Buttons you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } 2sxc provides super-fast in-page buttons and toolbars for the content-editor to manage and edit everything. The system is very advanced, so what at first may seem trivial can become very complex as you go deeper into customizing it. Best Practice: Hover vs. Inline Toolbars The toolbars for the editor can be hovering above the elements - usually appearing on mouse-over, or directly inline. Hover-toolbars can also be configured to always be visible, but this is a rare use case. Recommendation Hover-Toolbars are highly recommended. These appear when the mouse moves over the item to be edited. It gives the editor a perfect preview of the page, without cluttering the screen with buttons. Toolbars which hover and are always visible make sense for buttons which the editor may not discover on his own if they are not always visible, or when the item to hover on would be very small, and hard to discover. Inline (non-hovering) toolbars which are always visible should be used as rarely as possible. A good use for this are admin-tables where each row should directly show the edit-button in a buttons-column. How the System Work To make the magic work, these parts are involved: Server side code detects that editing is allowed. This automatically adds context-information to the module in the form of a hidden JSON attribute. You can see these large attributes in the source-code if you are logged in. It also ensures that the edit-javascripts are loaded by the page. This is either auto-detected, because the user has edit-rights Or it was explicitly enabled using @Edit.Enable(...) in razor. Server side code adds stuff to mark where toolbars should appear... ...either (new in 2sxc 9.40) it adds hidden JSON attributes called sxc-toolbar='{...}' to any tag that should have a hover-menu with the desired configuration and settings, added like this <div @Edit.TagToolbar(...)>...</div> in razor ...or it adds an empty <ul toolbar='{...}' settings='{...}> tag to the page, also with the configuration and settings, added using @Edit.Toolbar(...) in razor or the [Content.Toolbar] equivalent in tokens. These toolbars can also hover using an old convention of adding an sc-element class, but that is deprecated since 2sxc 9.40. JavaScript on the client looks at the HTML and picks up both the special <ul> tags as well as all tags having the sxc-toolbar attribute, reads the configuration and generates the necessary html-tags with the buttons and hover-effects. Based on the context-information and the configuration it will choose if advanced button should appear (like edit-template, which only admins should see). Special hover-placement and other visual things are picked up from the settings. If an editor interacts with the menu, each click will result in JavaScript looking at the closest context-information in the page, and using this information to run a command like edit, new or template-develop. When a command has completed, certain code may reload the view, either using ajax or by reloading the page if ajax is not supported by this particular view. Short Example The toolbar system is 100% JavaScript but offers special helpers to improve the experience in other dev-environments. Here's a simple example using Razor: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> This creates a invisible toolbar which appears and hovers when the mouse moves over the <h1> tag (if the user has edit-permissions). The toolbar has all the buttons for this Content item. The next example is similar, but instead of all default buttons it only shows the edit-button: <h1 @Edit.TagToolbar(Content, actions: \"edit\")> @Content.Title </h1> Basic Toolbar Concepts and Functionality each toolbar is specific to a content-item a page can have many toolbars, each for a different element / purpose usually toolbars are invisible until the mouse hovers over the area to be edited (best practice, but configurable) various show and hover/float behaviors each toolbar is fully customizable - both in regards to which buttons are shown as well as how they are grouped, how they look etc. toolbars are multi-language easy to add in your template or to your JS Apps mobile capable with shake support How to Use We'll try to provide you with full details of the toolbars for advanced use cases. But in most cases you will need the default toolbars minimal or no customizations. For these common cases you should continue on. Razor @Edit.TagToolbar(...) attribute (hovering, recommended) Razor @Edit.Toolbar(...) (non-hovering) Token Toolbars (using simpler placeholder templates) Core JavaScript Architecture Parts Commands This is what is executed when a button is clicked. Commands are things like edit. Some commands need additional parameters like EntityId, resulting in a command more like run('edit', {EntityId: 27}). Commands can also be run without toolbars, for example from edit links in tables etc. You can read more about Commands, incl. the full list of current command, parameters and how to create custom commands in the Commands section. Buttons This is a square thingy with an icon, which is will run a Command. When the button is created, it is fully configured with icon, commmand and command-parameters. Button-Group: This is a set of one or more -Buttons_ which are shown together. Often there will be a more button at one end of the set, which will show another button-group when clicked. Toolbar: This is a set of one or more Button-Groups. Toolbar Builder: This is an API-layer which builds the HTML for the Toolbar. Toolbar Bootstrapper: This will pick up HTML placeholders for toolbars and run the Toolbar Builder for these. Defaults: For the entire chain to work properly, various initial configurations Read also quickE - the quick-edit hover toolbar - the quick-edit hover-toolbar for inserting/moving modules Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App 2sxc blog History Added toolbars in 2sxc 1.0 ca. 2011 hundreds of ongoing optimizations Added new feature with the Edit.TagToolbar which works using an sxc-toolbar attribute instead of an <ul> tag in 2sxc 9.40. In this version we also changed the CSS functionality to not use the sc-element attribute, but still support it for backward compatibility."
  },
  "basics/edit/formulas/index.html": {
    "href": "basics/edit/formulas/index.html",
    "title": "Formulas (Logic) in the Edit Form | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas (Logic) in the Edit Form you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } 2sxc provides Formulas which let you dynamically change all kind of things in the edit UI. With it you can dynamically change the value of the field Field settings like Visibility to show/hide a field Disabled to enable/disable a field Required to change required or not Name to change the label ...and many other settings Field validation messages Demo Get Started Formulas ar written in JavaScript. \uD83C\uDF93 Get Started with the Formulas Guide Planned Future features Ability to read other properties of fields - like check if a field is visible Ability to read other entities / check their types etc. Ability to read fields of other entities History Introduced in 2sxc 12.01 Extended with Required ca. v13.00 Extended with Notes ca. v13.10 Improve formula designer to allow creating new formulas directly in the designer ca. v14.00 Added formula designer API help ca. v14.00 Massively improved v2 Formulas in 2sxc 15.07 (officially released in 16.0) Shortlink to here: https://go.2sxc.org/formulas"
  },
  "basics/edit/formulas/specs.html": {
    "href": "basics/edit/formulas/specs.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Formulas Targets and Return Values"
  },
  "basics/edit/index.html": {
    "href": "basics/edit/index.html",
    "title": "Edit Content or Data in Dnn / 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Edit Content or Data in Dnn / 2sxc you are here (click to zoom) - discover the stack .context-box-summary .browser-edit, .context-box-summary .browser-edit-ui { visibility: visible; } 2sxc has powerful CMS features, most of them just work by magic. You can also modify the behavior to fit your needs. When users edit content they usually use in-page buttons to access edit-dialogs and more. Here is a short overview and links to what you need to know. The Standard Edit Dialogs Editing mostly happens in stand-alone dialogs which are JavaScript based (built using Angular). These dialogs are typically dialogs like edit an item edit a combination of items - like a content item and an assigned presentation-settings item This is documented in Edit Content or Data in Dnn / 2sxc In-Page Toolbars and User Experience The edit UX begins in the page showing the content/data. Things like toolbars opening dialogs or performing actions like publish, move up/down etc. quickE (Quick Edit) to customize the toolbar which adds / deletes modules inner-content editing Learn More About... You may want to learn more about: Customize the Toolbar in JavaScript or Razor Call CMS commands from buttons without using the toolbar Show certain HTML to editors only"
  },
  "basics/image-resizer/index.html": {
    "href": "basics/image-resizer/index.html",
    "title": "Image Resizer | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Image Resizer you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } 2sxc has an awesome Image Resizer built in. It's really easy to use - just add url parameters to the image. So instead of img.jpg add img.jpg?w=200 to resize it to 200px width. How to Use You can learn about the url parameters in the Image Resizer URL Parameters But normally you won't use them directly, because it's better to use APIs which will set these parameters for you. Your best options are: The IImageService with .Img(...) or .Picture(...) which will create the best possible HTML for you The Link.Image(...) which will create the best possible URL for you In most scenarios you will prefer the IImageService. In cases where you need exactly 1 url (like in background-url CSS) you will probably use the Link.Image(...). How it Works Tip This is just additional info in case you run into problems and need to dig deeper. The image resizer is built into 2sxc 13+ and uses the amazing ImageFlow library (previously ImageResizer.net). It's installed automatically by 2sxc but it can also be installed standalone (Dnn / Oqtane). ImageFlow Setup in DNN In DNN the DLLs are located in: [root]/bin/ToSic.Imageflow.Dnn.dll [root]/bin/Imageflow.Net.dll [root]/bin/Imazen.Common.dll [root]/bin/Imazen.HybridCache.dll [root]/bin/Newtonsoft.Json.dll - ATM part of DNN, but also used by ImageFlow in current version [root]/bin/System.Text.Json.dll - ATM part of 2sxc, and not used by ImageFlow, but will be used in future versions [root]/bin/ImageFlow/*.dll - ca. 12 Microsoft DLLs with specific versions for ImageFlow They are located in this folder as they would sometimes create version conflicts with other DLLs in DNN The web.config must be updated, which happens automatically. It will: enable url-handling of image files (eg. .jpg should be handled) register all the Microsoft DLLs in the ImageFlow folder so they are available for exactly this version The web.config changes look like this (v16.07): <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <!-- other stuff --> <system.webServer> <!-- other stuff --> <modules> <!-- other stuff --> <add name=\"ImageflowModule\" type=\"ToSic.Imageflow.Dnn.ImageflowModule, ToSic.Imageflow.Dnn\" /> </modules> </system.webServer> <!-- other stuff --> <runtime> <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <!-- other stuff --> <!-- Register all Microsoft/System DLLs necessary for ImageFlow so they are available for exactly this version --> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Buffers\" publicKeyToken=\"cc7b13ffcd2ddd51\" /> <bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <codeBase version=\"4.0.3.0\" href=\"bin\\Imageflow\\System.Buffers.dll\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <bindingRedirect oldVersion=\"4.0.3.1-32767.32767.32767.32767\" newVersion=\"4.0.3.0\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Configuration.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <bindingRedirect oldVersion=\"2.2.0.0-32767.32767.32767.32767\" newVersion=\"2.2.0.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Configuration.Abstractions.dll\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <bindingRedirect oldVersion=\"0.0.0.0-2.1.1.0\" newVersion=\"2.1.1.0\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Logging.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <bindingRedirect oldVersion=\"2.2.0.0-32767.32767.32767.32767\" newVersion=\"2.2.0.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Logging.Abstractions.dll\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <bindingRedirect oldVersion=\"0.0.0.0-2.1.1.0\" newVersion=\"2.1.1.0\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Primitives\" publicKeyToken=\"adb9793829ddae60\" /> <bindingRedirect oldVersion=\"2.2.0.0-32767.32767.32767.32767\" newVersion=\"2.2.0.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Primitives.dll\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <bindingRedirect oldVersion=\"0.0.0.0-2.1.1.0\" newVersion=\"2.1.1.0\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Memory\" publicKeyToken=\"cc7b13ffcd2ddd51\" /> <bindingRedirect oldVersion=\"0.0.0.0-32767.32767.32767.32767\" newVersion=\"4.0.1.2\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Numerics.Vectors\" publicKeyToken=\"b03f5f7f11d50a3a\" /> <bindingRedirect oldVersion=\"0.0.0.0-4.1.3.0\" newVersion=\"4.1.3.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <codeBase version=\"4.1.3.0\" href=\"bin\\Imageflow\\System.Numerics.Vectors.dll\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <bindingRedirect oldVersion=\"4.1.3.1-32767.32767.32767.32767\" newVersion=\"4.1.4.0\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" /> <bindingRedirect oldVersion=\"0.0.0.0-4.0.4.1\" newVersion=\"4.0.4.1\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <codeBase version=\"4.0.4.1\" href=\"bin\\Imageflow\\System.Runtime.CompilerServices.Unsafe.dll\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" /> <bindingRedirect oldVersion=\"4.0.4.2-32767.32767.32767.32767\" newVersion=\"6.0.0.0\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.DependencyInjection.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.DependencyInjection\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.DependencyInjection.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.FileProviders.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.Extensions.Hosting.Abstractions\" publicKeyToken=\"adb9793829ddae60\" /> <codeBase version=\"2.2.0.0\" href=\"bin\\Imageflow\\Microsoft.Extensions.Hosting.Abstractions.dll\" /> </dependentAssembly> <dependentAssembly xmlns=\"urn:schemas-microsoft-com:asm.v1\"> <assemblyIdentity name=\"Microsoft.IO.RecyclableMemoryStream\" publicKeyToken=\"31bf3856ad364e35\" /> <codeBase version=\"1.2.2.0\" href=\"bin\\Imageflow\\Microsoft.IO.RecyclableMemoryStream.dll\" /> </dependentAssembly> </assemblyBinding> </runtime> </configuration> ImageFlow Setup in Oqtane In Oqtane they are all located in the main bin folder. for development it's in [root]/bin/Debug/.net7.0/ (or .net8.0 for Oqtane 5) for production it's in [root]/ (the main folder of Oqtane) Oqtane does not need web.config changes. The URL handling is activated using the IServerStartup interface as seen in this code. Troubleshooting Usually the image resizer just works, but if you run into problems, here are some tips. New Servers: Make sure Visual C++ Redistributable is Installed The Imageflow library is built with a mixture of Rust and C and requires the Visual C++ runtime to run. These runtime libraries are usually pre-installed, as they are a common dependency for a lot of software. However, they are missing on newer Windows Server Core, so this is a common issue. Microsoft docs Direct Download VC 16 Redistributables First: Make Sure ImageFlow is Used To start you may need to find out if ImageFlow is used at all, or if something else is handling the images. check if there is something else that could handle images registered in the web.config it's quite common to still have some ImageResizer.net entries there check if you have a folder for the cached images and if it gets new files as you try different resize combinations (eg ?w=1000 v ?w=1001) in DNN / Oqtane check the folder [root]/App_Data/imageflow_hybrid_cache an indication we found is to check the response headers with F12 loading an image - we found the following difference we believe that if ImageFlow is used, it seems to return an ETAG header without quotes, eg: ETAG: ybLeicE_NA97ZbYIyeURwOcFAn77bg45utBbtzOzgB0 we believe that IIS returns an ETAG with quotes eg. ETAG: \"54fa36c88844d41:0\" Also check your log files. If you believe that ImageFlow isn't being used, the try to fix that first. Suggestions: install ImageFlow by itself from the git repos (Dnn / Oqtane) compare a brand new system with 2sxc which it works with the broken setup History Introduced in 2sxc 5.03 Special Razor API to create links called Link.Image introduced in 12.04 Introduced ImageFlow in v12 for Oqtane Switched to ImageFlow in 13.0 for both Dnn and Oqtane Introducing IImageService in 13.05 beta, released in 13.10 Improved docs for DLLs etc. 2023-10 Shortlink: https://go.2sxc.org/resize"
  },
  "basics/images/guide/index.html": {
    "href": "basics/images/guide/index.html",
    "title": "Images Guide (Best Practices & Code) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Images Guide (Best Practices & Code) you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } Images are a crucial part of every website and CMS. We want to be sure that: Perfect Editing Editors can easily add images Editors can give titles to images Editors can have some control over how the image is shown - but not too much, it must be within the restrictions of the design Perfect Output Images look great no matter what the editor does Images are accessible (for people with disabilities, etc.) Images use the latest possible file formats Images load quickly - which also requires images to be the best-possible size Perfect SEO & Page Speed Images are optimized for search engines Images are optimized for page speed, especially mobile page speed Pefect Control by the Designer The designer determines how images should look in various scenarios Tip This guide should help you understand the big <picture> \uD83D\uDE0F. Best read this while looking at the Tutorial For every detail there is much more technical documentation, which will be linked here. Part 1: Edit UI / UX The Edit UI presents various options to the user for uploading and configuring images. It's important to note that v13.10+ has a new feature to let the user customize what part of the image is really important (what corner/edge). This is important in scenarios where a resize would otherwise always show the middle, which may not be appropriate. Since this feature will only affect the output if the Razor template uses the IImageService, the designer must activate it on the field. Otherwise the feature is not available. Important: The config-button is only available... If the Razor template uses the automatic APIs to render the image When using the new Typed code, using the something.Img(\"Image\") API (see Img(...) and Picture(...)) or using the IImageService (older way) ...and IF the file is an image ...and IF the file \"belongs\" to the item being edited If the file is a general file from another item or from the root folder, the metadata is not available. This is important because files from elsewhere could be shared, and editing the metadata could have unexpected side-effects. Part 2: Image Metadata When a user edits the image settings in the UI, the data is stored as metadata for this image. This is important, because generating a perfect <img> or <picture> tag requires this information. Part 3: Razor Code to Generate HTML for Images Part 3a: Modern Typed Code When using modern typed code, the object containing the data is an ITypedItem or something which inherits from it. In this case, the API will take care of almost everything. Just use one of these methods to create the HTML: thing.Img(\"Image\") - for a simple <img> tag thing.Picture(\"Image\") - for a <picture> tag Part 3b: Legacy Code (older APIs) The older API used the IImageService to generate the HTML. This in turn needed a IField object to figure out what to do. Part 3b Legacy Code - Dynamic Field If a content item stores the image on a property .Image then something like Content.Image would return /Portal/0/Adam/some-image.jpg. In this case, the IImageService cannot find the metadata. This is why we need to give it the entire field, not just the value. This is done using Content.Field(\"Image\") and will get your code a IDynamicField. Part 3b Legacy Code - ImageService The IImageService will take all the known information and generate an <img> or a <picture> tag. This can be used in its default implementation just using .Img(Content.Field) or .Picture(...). In this case is uses the default Content settings (see below). If you need more control, there are 3 options: The Img(...) command has many more parameters for common scenarios such as using other settings, factor, imgAlt or imgClass You can also generate very custom settings using the .Settings(...) command on the ImageService You can also take the resulting object like var img = imgSvc.Img(Content.Image) and use it to generate the final tag yourself. Some Tutorials to learn this ImageService Img Tutorial ImageService Picture Tutorial ImageService Guide Part 4: Settings and Recipes Settings are pre configured parameters how the image is to be resized. They are stored at App, Site, Global or Preset level. By default the configuration called Content is used for images in the Content of the page. Other settings also exist, such as Lightbox or Screen. You can also create your own configurations, such as PersonProfile. \uD83D\uDC49\uD83C\uDFFC Read more about Image Settings In your Razor code you can create new settings or modify existing ones using the .Setting(...) command on the ImageService. To create settings based on the Content use .Setting(\"Content\", ...) To create brand new settings, use .Setting(false, ...) Recipes define what variants of the image should be generated for other sizes, as well as other parameters to use when generating img or picture tags. The initial configuration is also stored in the settings and will be used, unless you specify something different. \uD83D\uDC49\uD83C\uDFFC Read more about Image Recipes You can also generate your own recipes: create a new recipe like this: .Recipe(\"2x, 3x\") - this is only meant to create a quick recipe with a few variants. inherit/expand an existing recipe like this: .Recipe(originalRecipe, ...) Good to Know: Link.Image(...) API In the rare cases where you just need a URL and not the full HTML, check out the Link.Image(...) API. It is not as powerful as the ImageService but if you only need a URL it may be what you need. \uD83C\uDF93 Image Resizer Parameters with Link.Image History Guide created for v13.10 Updated for v16 which introduced the new Typed API"
  },
  "basics/images/index.html": {
    "href": "basics/images/index.html",
    "title": "Images in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Images in 2sxc you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } Images are a crucial part of every website and CMS. You should learn about: Image Formats Tutorial Guide how to use the Image Service Image Resizing History Image Resizer Introduced in 2sxc 5.03 Switched to ImageFlow in 13.0 for both Dnn and Oqtane Introducing IImageService in 13.10"
  },
  "basics/images/lightbox/index.html": {
    "href": "basics/images/lightbox/index.html",
    "title": "Image Lightbox (new v17) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Image Lightbox (new v17) you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } Images should often show a lightbox when clicked. This is especially important for galleries, but also for single images. 2sxc 17 introduces the ability that images can be \"lightboxed\" according to editor input. Previously only image where the Razor code explicitly set a lightbox would be shown this way. Important This feature requires the new Typed APIs (v17+) to be used, as the Razor code must generate the HTML to make this happen. This include the Img(...), Picture(...) and Html(...) APIs. Lightboxes for Images, Pictures and Media in HTML Contents The automatic lightbox feature is available for images, pictures and images/pictures in HTML contents. Three Places to Enabled/Disable/Configure Lightboxes Not every image should be lightboxed, so there are three places to control this: In the code, the API which creates the image can be told to use (or not use) a lightbox At the Field Configuration level (usually done by the admin) to set the default for this field. On each specific image 1. Code Configuration (new v18.03) When creating an image, the code can specify if the image should be lightboxed or not. This feature is new in v18.03 as it requires the new tweak API. @something.Picture(\"GroupPic\", tweak: t => t .LightboxEnable() .LightboxDescription(\"All participants\") .Resize(t => t.Factor(0.5)) ) 2. Field Configuration When configuring the field, the admin can set the default for the field, which can be overridden by the editor when editing the content. For example, the Blog App has Lightboxes enabled on all posts in the latest version like this: This will configure the field so all images are lightboxed by default, and treated as a gallery together. 3. Configuration per Image In most cases the field-configuration is all you need. But the editor can choose to override this on a per-image basis. For example, he/she could configure a lightbox where the field didn't auto-configure it, could change the gallery-behavior and/or could disable the lightbox for a specific image. History Introduced ca. 2sxc 17 Better documented in 2sxc 18.03 Shortlink: https://go.2sxc.org/image-lightbox"
  },
  "basics/images/perfection/index.html": {
    "href": "basics/images/perfection/index.html",
    "title": "Images Perfection | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Images Perfection you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } Perfect images in HTML will have a big impact on User Experience and SEO Pages load faster The browser loads images in the perfect size based on it's screen Google PageSpeed returns a better score Mobile devices are much faster For perfect images, you must do quite a bit Images should load lazy Images should specify width and if possible, height Images should be resized on the server to match what's needed In most cases, use a <picture> tag instead of img so you can provide multiple formats such as jpg and webp You should provide the best possible format (often webp) You should provide multiple formats (jpg/webp, png/webp) so browsers can pick You should provide multiple sizes so the browser can pick the best one You should include resolution-factors or screen-factors for the sizes You should include sizes-information so the browser can better select the perfect resolution All this while still Using images the content-editor added ...with optional custom alt-text adjusting to the editors needs (sometimes it should crop, sometimes not, ...) Automatically behave differently depending on the format (svg, png, jpg, etc.) Automatically behave differently depending on the size that should be shown (like 1/3 of the screen) Automatically give larger images when the screen gets smaller (eg. when a 1/3rd image becomes full-width) So instead of this... <img src=\"/[path]/jellyfish-img-srcset-2000.jpg\" /> ...you should provide this for every image you have: <picture> <source type=\"image/webp\" srcset=\" /[path]/jellyfish-img-srcset-2000.jpg?w=2460&amp;h=1520&amp;quality=75&amp;mode=crop&amp;scale=both&amp;format=webp 2460w, /[path]/jellyfish-img-srcset-2000.jpg?w=1230&amp;h=760&amp;quality=75&amp;mode=crop&amp;scale=both&amp;format=webp 1230w, /[path]/jellyfish-img-srcset-2000.jpg?w=922&amp;h=569&amp;quality=75&amp;mode=crop&amp;scale=both&amp;format=webp 922w, /[path]/jellyfish-img-srcset-2000.jpg?w=615&amp;h=380&amp;quality=75&amp;mode=crop&amp;scale=both&amp;format=webp 615w \" sizes=\"(max-width: 1400px) 100vw, 1230px\" /> <source type=\"image/jpeg\" srcset=\" /[path]/jellyfish-img-srcset-2000.jpg?w=2460&amp;h=1520&amp;quality=75&amp;mode=crop&amp;scale=both 2460w, /[path]/jellyfish-img-srcset-2000.jpg?w=1230&amp;h=760&amp;quality=75&amp;mode=crop&amp;scale=both 1230w, /[path]/jellyfish-img-srcset-2000.jpg?w=922&amp;h=569&amp;quality=75&amp;mode=crop&amp;scale=both 922w, /[path]/jellyfish-img-srcset-2000.jpg?w=615&amp;h=380&amp;quality=75&amp;mode=crop&amp;scale=both 615w \" sizes=\"(max-width: 1400px) 100vw, 1230px\" /> <img src=\"/[path]/jellyfish-img-srcset-2000.jpg?w=1230&amp;h=760&amp;quality=75&amp;mode=crop&amp;scale=both\" loading=\"lazy\" class=\"img-fluid\" width=\"1230\" height=\"760\" /> </picture> Super Easy with Image Service 2sxc 14 introduced the Image Service. It will do all of this and more, and is super configurable. So to get the entire code above all you need is this: @Kit.Image.Picture(App.Path + \"/img/assets/jellyfish-img-srcset-2000.jpg\") \uD83C\uDF93 See a live example in the tutorials All of it is fully automated. By default, you will get the core functionality such as automatic resize etc. The full scope of features requires a Patron Perfectionist licenses for 10 USD/month. Only then will all the things you see above work. Otherwise you can still code it yourself \uD83D\uDE09. \uD83E\uDDB8\uD83C\uDFFB‍♀️ Learn about Patron Perfectionist \uD83E\uDDB8\uD83C\uDFFB‍♀️ Learn about becoming a Patron More Some Tutorials to learn this ImageService Img Tutorial ImageService Picture Tutorial ImageService Guide You can also do some really advanced custom configuration to change how the resizer behaves. \uD83D\uDC49\uD83C\uDFFC Read more about Image Settings \uD83D\uDC49\uD83C\uDFFC Read more about Image Recipes History Added in v14"
  },
  "basics/index.html": {
    "href": "basics/index.html",
    "title": "2sxc Basics Overview | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Basics Overview In 2sxc most things just magically work. These docs give you a deep understanding of how they work so you can figure out really cool stuff. The Stack: How Systems and Users Interact This is what web-systems do from a bird's-eye perspective. On the top you see what happens in the browser: Show content / output using HTML Interactive Content or SPAs where the UI is smart and works with data Editing content and data works by default, and you can do a lot more The bottom shows what happens on the server: Awesomeize is where you template the data and add logic on the Server. Prepare is a layer of data processing where the desired data is selected to be shown, filtered, sorted etc. Your Data is the original material - created by an editor in the CMS or it's data coming from SQL, CSV or elsewhere. How to Learn the Basics To learn the basics it's probably best tof first discover Tutorials and many example Apps The Stack in Detail you are here (click to zoom) - discover the stack Learn more about... What Happens in the Browser... What Happens on the Server... Prepare Data for Templates and WebApi Understanding Data..."
  },
  "basics/languages/activate-languages.html": {
    "href": "basics/languages/activate-languages.html",
    "title": "Activate Languages in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Activate Languages in 2sxc Each Site determines what languages are active in this specific site. Here's how:"
  },
  "basics/languages/auto-translate-api-key.html": {
    "href": "basics/languages/auto-translate-api-key.html",
    "title": "2sxc Auto-Translate - Google API Key | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Auto-Translate - Google API Key Auto-Translate uses Google Translate, and all Google services require an API Key to work. Use of the Google Translate Service is free for up to 500'000 words a month, so most users will be able to use a free key. 2sxc includes a built-in API key for demo purpose. But because this is used on all sites which don't specify their own key, it can easily happen that the limit is exceeded. Because of this you will need to register your own API key. Register a Google Translate API Key \uD83D\uDC49\uD83C\uDFFE See Googles Instructions Activate the Google Translate API Key in the 2sxc/EAV Settings The API Key is stored in the Settings. Make sure you are familiar with them. In the settings, this is where you would configure them: You can place the key in 4 different locations: A specific App (not recommended) A specific Site Global settings on all Sites of an installation (recommended) In the presets (for scenarios where you pre-install the same API key in many installations, not documented ATM) Note There is a small caching issue when creating the first ever global setting. ATM you'll need to restart DNN/Oqtane for it to be picked up. Once you have a global setting, you can change it without restarting DNN/Oqtane. History Introduced in 2sxc v15 Shortlink: https://go.2sxc.org/translate-api-key"
  },
  "basics/languages/auto-translate.html": {
    "href": "basics/languages/auto-translate.html",
    "title": "2sxc Auto-Translate Overview (new v15) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Auto-Translate Overview (new v15) 2sxc 15 adds a new feature to automatically translate content in the Edit UI. Here's what you need to know. Patrons Only Feature This is a patrons only feature. To use this feature, need the license [Patrons Advanced CMS](xref:2sxc Auto-Translate Overview). See activation instructions. Auto Translate uses Google Translate Auto Translate uses the Google Translate API. It is available in the Edit UI. This way the editor can run auto-translate, optimize the results and save. This requires a Google API key for each site. Auto Translate User Experience The user can choose to auto-translate a single field or all fields. After this, the user must select what source language should be used. The UI will show you how many fields of the available source languages have content. In the end you'll get the result for further editing. HTML and Unknown Content are Preserved Google Translate will preserve anything it can't translate - such as names (if it can tell it's a name) as well as HTML formatting. Not all Fields are Auto-Translated Some fields are not auto-translated - either by default, or by configuration. Some fields will not be translated by default Fields which can't be translated - such as entity-pickers Fields which don't make sense to translate - eg. Numbers, Links, GPS coordinates Some fields are configured to not translate this can be configured at the field level Name fields should be configured to not translate Address fields (street, city, etc.) should be configured to not translate Some fields were already translated manually, and will not auto-translate this is to prevent manual translations from being overwritten Fields which are not auto-translated will keep their previous status - in most cases locked (auto-inherit). To configure a field to not auto-translate, you can do this here: FAQ Q: Is it possible to just auto-translate at runtime? A: Fully automatic translate at runtime is not useful so this is not what the feature does. History Introduced in 2sxc 2 ca. 2012 Auto-Translate Content added in v15"
  },
  "basics/languages/index.html": {
    "href": "basics/languages/index.html",
    "title": "2sxc Languages Overview | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Languages Overview 2sxc is exceptionally good at multi-language content. All content/data is Multi-Language by default. As such, there are different parts that make it work: Multi language principles and data model Manual Content localization / translation / internationalization (i18n) Automatic Content translation (new in v15) Translation Permissions TODO: DOCS UI localization Multi-Language Principles The internal EAV Data Model stores each value with language assignment. Key facts: There is always a primary language which is set by the platform (DNN/Oqtane). The primary language must always be filled first. Other languages cannot be edited without the primary language having content. Other languages will inherit the values from the primary language by default. Changing the primary language can have suprising side-effects, because it can result in scenarios where the primary language is missing. In such scenarios the system will still try the primary language, but if it's empty, will fall back to the first language having any content for a specific field. Values can be for a single language only, or shared across languages In read/write shares, any change made in the value will automatically apply to all languages that use this value In read-only shares, the value can only be edited in the main language; all other languages just \"inherit\" the value In secondary languages which are not translated, they are not translated and will automatically fall back to the primary language \uD83D\uDC49\uD83C\uDFFD Read more about the Multilanguage Data Model Edit-UI Translation Features The Edit-UI can make a field editable in certain languages and not in others. These are the factors that control it: Data is missing in the primary language (then translating it isn't possible yet) Some data is not multi-languages so it's either not editable in other languages, or the changes automatically affect all languages. This specifically affects these two cases: Related items (which are the same across languages) Asset-files (which are the same across languages) Field-Configuration disables translation of field (common in url-id-fields) Export-Import of Multi-Language Content This is documented in Data Export / Import. Manual Content Translation Editors can always unlock any field (or all fields) to manually translate them. In that case it will copy the original value from the primary language. Users can also link languages together. This is ideal in scenarios where multiple secondary languages are closely related, such as de-DE and de-CH. TODO: SCREENSHOTS? Automatic Content Translation This is a new feature in 2sxc v15 and available to Patrons (people who wish to support the development of 2sxc). \uD83D\uDC49\uD83C\uDFFD Read more about Automatic Translation Translation Permissions TODO: UI Localization The Edit-UI is localized at two levels: Custom Inputs, Help-Texts etc. System labels (like Save buttons) The Admin UI is not localized, it's English only. TODO: History Introduced in 2sxc 2 ca. 2012 ... Auto-Translate Content added in v15 Shortlink: https://go.2sxc.org/translate"
  },
  "basics/licenses-features/features.html": {
    "href": "basics/licenses-features/features.html",
    "title": "Features Management | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Features Management you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } A feature is a functionality of 2sxc or EAV, which can be enabled/disabled at system level. Each feature is identified by a unique key, such as PasteImageFromClipboard. \uD83D\uDC49\uD83C\uDFFE See the full list of licenses and features Behavior if Feature is Disabled If a feature is not enabled and code needs to use the feature, it will either show an error OR simply skip that functionality. This varies from feature to feature. If an error is thrown, the system will include a link to the missing feature as well as instructions to enable. Managing Features This is done through the Apps-Management. This is what it looks like: Read about managing features in the blog about features-management How the Feature-Configurations are Stored Features use a json-file called features.json located in the [website-root]/desktopmodules/tosic_sexycontent/App_Data/system-custom/configurations folder. Read also Blog about new security mechanisms in 9.30 History Feature system introduced in v9.30 Improved to work with licenses in v13.01 New IFeaturesService in v13.01"
  },
  "basics/licenses-features/index.html": {
    "href": "basics/licenses-features/index.html",
    "title": "Licenses and Features | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Licenses and Features you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } The basics Features are global aspects in 2sxc which can be activated or also disabled by configuration. Some features are enabled by default, others are disabled by default. Some features may affect security. This information is shown in the admin UI. Some features require a license to be activated. Licenses are keys which allow the use of advanced features. Some features are automatically activated when a license is activated, but can be disabled. Start Using it \uD83D\uDC49\uD83C\uDFFE See the full list of licenses and features \uD83D\uDC49\uD83C\uDFFE Licenses - How they Work and How to Activate \uD83D\uDC49\uD83C\uDFFE Manage Features History Feature system introduced in 2sxc 9.30 License system introduced in 2sxc 13.01 UIs massively enhanced in v15"
  },
  "basics/licenses-features/licenses/debug.html": {
    "href": "basics/licenses-features/licenses/debug.html",
    "title": "Debug License Issues in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Debug License Issues in 2sxc If your license is producing unexpected results, you can use the following steps to debug the issue. Go to 2sxc Insights Make sure you're on Insights home Click on License Here you'll see a grid of all the licenses which are in the license file, as well as a status which checks succeeded or failed. In the example above you can see: The license for Core is auto-enabled The licenses for various packages are enabled Another license file was loaded, but the fingerprint checks failed, so they are not valid History Licenses introduced iv v13.02 Enterprise Licenses introduced in v15"
  },
  "basics/licenses-features/licenses/enterprise.html": {
    "href": "basics/licenses-features/licenses/enterprise.html",
    "title": "Enterprise Licenses in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Enterprise Licenses in 2sxc Most licenses are system bound. This means that the system generates a fingerprint, and the license is then activated for that specific system. You can read more about it in licenses. Enterprise Licenses are hear for scenarios where you must license many system with a special agreement with 2sxc. Common examples are: Hosters who wish to activate certain optimizations on all the systems they host Features sponsors who \"own\" a feature and get to use it on all the systems they have Enterprise customers with web-farms who have more complicated setups - eg. where the DB name changes, resulting in different fingerprints How it Works Enterprise licenses consist of two files: An Identity containing a fingerprint which is stored in a special data file A License file which is stored just like any other license Both files are stored at the system level in a folder which is preserved through upgrades. The location is: On Dnn this is: [WebRoot]/DesktopModules/ToSIC_SexyContent/App_Data/system-custom/ On Oqtane this is [WebRoot]/Content/2sxc/system/App_Data/system-custom/ \uD83D\uDC49\uD83C\uDFFB See also Platform Folders Within this folder, there are two sub-folders: entities - which contains the Identity file configurations - which contains the License file A typical setup will look like this: [...]/App_Data/system-custom/ entities/ 12345678-abcd-abcd-abcd-1234567890ab.Company-Name.json configurations/ Company-Name.license.json At startup, these files are loaded and security checks are performed, then the licenses are activated. License Deployment You will receive the files from 2sxc. Manual One-Time License Deployment You can upload them manually to the system. Just make sure the files are really in that location. Automated License Deployment Please use one of the following options: Include the files in your Dnn / Oqtane template Create a module for Dnn / Oqtane with these files Create PowerShell scripts to deploy the files History Licenses introduced iv v13.02 Enterprise Licenses introduced in v15"
  },
  "basics/licenses-features/licenses/index.html": {
    "href": "basics/licenses-features/licenses/index.html",
    "title": "Licenses in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Licenses in 2sxc Licenses are special keys which will allow your system to use more advanced features. Some of the additional features are free while others are only for supporters (Patrons) of 2sxc. System Fingerprint To understand how the license ties to your installation, you should first know about the fingerprint. Every system has a digital fingerprint which consists of platform name (Dnn/Oqtane), platform version, 2sxc version and more. Every system has a generated fingerprint. It will stay the same until you do a major upgrade of the platform or 2sxc, or if you migrate the system. Enterprise scenarios with many installations can also add a custom fingerprint in addition to the default fingerprint. This allows web companies to auto-enable certain licenses across all installations. Custom fingerprints are provided by the makers of 2sxc and stored as json files in the global App_Data/system-custom new in v15 Registration Every system which wishes to use advanced features (free or paid) must be registered on 2sxc Patrons. There are two types of users on 2sxc Patrons: If you have a GitHub Login you can use it to log on If you need an enterprise login or just don't have a GitHub login, you can log on using a normal DNN user in Patrons Registration can be automatic or manual, depending on your needs. The automatic registration can be triggered from inside your 2sxc installation. Manual registration requires you to copy/paste your fingerprint from your 2sxc to Patrons. License Selection Once a system is registered on 2sxc Patrons, you can select what licenses you want to enabled for that system. If you don't support 2sxc you can activate free licenses If you are a Github-Sponsors patron then you can activate as many features as your contribution allows If you are an Enterprise patron then you can activate the features based on the contract with the makers of 2sxc. Advanced Licenses for Patrons To activate advanced licenses/features, you have two options: Become a GitHub Patron - this is only available for GitHub logins Reach out to makers of 2sxc to get a custom license and an official bill. This works for both GitHub logins as well as enterprise logins. You can now activate additional licenses based on your contribution and/or enterprise agreement. License Activation The license file is a JSON file containing the activated licenses, the fingerprint and a digital signature. This file must be transferred to your system to work. The transfer can happen automatically or manually, depending on your needs. Note that all licenses will be stored as *.license.json in this folder: [website-root]/DesktopModules/ToSIC_SexyContent/App_Data/system-custom/configurations/ Automatic Activation When you activate the license automatically you just have to click this button: For this to work, the web server must be able to access the internet. The license will be downloaded and stored in [license-folder]/default.license.json. Manual Activation Manual activation is useful when the web server is not able to connect to the internet. In that scenario, you can download the license file directly from Patrons and upload it using Upload License button. Note that the manual license download has a different name than the default one. This is by design, because 2sxc can use multiple licenses files. Just remember that a future auto-download will not replace the manual file. Multiple Licenses The licensing system allows multiple licenses to be activated. This is useful in scenarios where you have an enterprise license on all systems to activate some features (maybe Patron Infrastructure) and a system-specific license to add more features (like Patron Sentinel). For this, all the licenses must be located in the license folder. History Licenses introduced iv v13.02 UIs massively enhanced in v15 Ability to have 1-day trial licenses per feature added in 2sxc 15.02"
  },
  "basics/licenses-features/licenses/warning.html": {
    "href": "basics/licenses-features/licenses/warning.html",
    "title": "Warning: Registration is Invalid | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning: Registration is Invalid After a major upgrade you may see a message similar to this: or this: The message appears, because The system has one or more license files None of them are valid for the current system As a result, any special features which are licensed / activated will be disabled. The reason is that a license file was installed for a previous version of 2sxc, and must be upgraded to the new version. Background 2sxc uses licenses to activate special features. These licenses are usually system-bound, meaning that they are activated for a specific system. This is done by generating a fingerprint of the system, and then activating the license for that fingerprint. Since 2sxc does not communicate with the license server, it cannot know if the license is valid for the current system. So it uses a security hash which also contains the major version of 2sxc, requiring you to upgrade the license when you upgrade 2sxc. \uD83D\uDCD6 Read more about it in Licenses in 2sxc How to Fix Just re-register your system using patrons. Exact Warning Messages These are included in case users google this exact message: The text in v15 is: Warning: Registration is Invalid. Some features may be disabled because of this. Please reactivate the registration in Apps Management. The text in v16 is: Warning: Registration not valid so some features may be disabled. Please re-register in System-Management. This is common after a major upgrade. See r.2sxc.org/license-warning. History Licenses introduced iv v13.02 Enterprise Licenses introduced in v15 Message updated in v16 Shortlink: https://go.2sxc.org/license-warning"
  },
  "basics/metadata/create.html": {
    "href": "basics/metadata/create.html",
    "title": "Create Metadata - (advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Create Metadata - (advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } To create Metadata, new data must be assigned to a Target the moment it's created. Metadata can be created in 3 ways Through the Edit-UI: If the toolbar which opens a new dialog adds metadata information, then the newly created item will be stored as metadata In the REST WebAPI: the REST calls for creating new data can contain target information In the App.Data.Create(...): The Create(...) command can include target information Create when Opening the Edit-Dialog #todoc The toolbar has various commands like new where you can include target-information which will then ensure that it's set when saved. In addition there is a simpler button/command called metadata which will create metadata if it doesn't exist, or edit existing if it's already created. This is documented in Toolbar Customizations for Metadata Create Automatically on any ADAM field in the Edit-UI #todoc Create using the Headless REST API #todoc Create using the C# API #todoc Manually create Metadata for Tests #todoc The Admin-UI has a special feature to manually create Metadata. It's technical, but it's meant to quickly create some test-metadata. Demo App and further links #todoc Fancybox Gallery App History Introduced in 2sxc v2"
  },
  "basics/metadata/decorators/index.html": {
    "href": "basics/metadata/decorators/index.html",
    "title": "Metadata Decorators - (advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Metadata Decorators - (advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata Decorators are system Metadata which enhance the configuration of something. Examples the IsDefault Decorator can be used to set a view to being the default, even if it's not the first one in alphabetical order the IsShared marks Apps so they can be inherited in other sites the Requirement marks the IsShared so it's only available if feature & license are enabled List of Current Decorators Decorator Added Description Remarks IsDefault 13.00 Marks an item as default Primarily used for views IsObsolete 13.00 Marks an item as obsolete Used for InputTypes IsRecommended 13.00 Marks an item as recommended Used for InputTypes IsShared 13.02 Marks an App as being shared/global Only for Apps Languages 13.02 Special language configuration Only for ContentTypes MetadataExpected 13.02 MetadataFor 13.02 Marks a type as being recommend for a specific target Only for ContentTypes Note WIP Requirement 13.02 Marks a requirement to use something, like a minimum license Only for ContentTypes SaveEmpty 13.00 Marks a ContentType to enable saving even if it has no fields Only for ContentTypes Special Notes Some decorators have no field, as adding the decorator already contains all the information necessary. By default, 2sxc would not save empty data, so to enable this, these Decorators must themselves have a SaveEmpty Decorator. Discover More Metadata - (advanced ⚠) History Introduced in 2sxc v13"
  },
  "basics/metadata/for.html": {
    "href": "basics/metadata/for.html",
    "title": "Metadata For Something - (advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Metadata For Something - (advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data. When an Entity/Item is for something else (we call it the Owner) then we call this item as being Metadata For the Owner. To be Metadata For something, an Entity must have Target information. Every Entity can be Metadata For something else An item can only be Metadata For one thing Tip When looking at Metadata from the Owner object, we call it Metadata Of the Owner. When looking at it from the Metadata-items point of view, they are Metadata-For the Owner. The MetadataFor Property To find out if an object is Metadata for something, check the .MetadataFor property which contains the Target Information. You can read about the Target APIs here. History Introduced in 2sxc v2 Continuously improved in 2sxc 7, 8, 10 and 11"
  },
  "basics/metadata/index.html": {
    "href": "basics/metadata/index.html",
    "title": "Metadata - (advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Metadata - (advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data. In 2sxc/EAV we talk about Metadata being Data which has a Target that it applies to. The 2sxc-EAV system has had extensive Metadata functionality built in since v2 but we haven't talked about it much yet. Example: File Metadata Imagine you have a file system containing images and the file system has standard functionality to store data like file name, path, file size and created / modified. Sometimes we need more. Let's assume you wanted to show a gallery with images and you want to manage additional information like Tags and a short Description. In this scenario the File is the Target and the additional Tags/Description data is the Metadata. Example: User Metadata Let's say you have a system which stores basic user data like UserId, UserName and Password and you want to manage additional information like Biography. IF the platform (Dnn) already offers features to manage such additional info, it is not Metadata. But if the information is added on top like with a third-party system (like 2sxc) then this is Metadata. How 2sxc/EAV uses Metadata Most internal configuration of 2sxc works as Metadata. Fields on a Content-Type is stored as just the technical Name (which is used in code). Any additional information for the Edit-UI like description, default-value, etc. is stored as Metadata. Content-Types just have some internal IDs and names. Any additional information like description, icon, help-text etc. is stored as Metadata. App Configuration is treated as Metadata and most of the stored values are available on the App object Various Apps like the Fancybox Gallery App allow the editor to add more information to uploaded images How 2sxc Metadata Works Every Entity in 2sxc can be assigned to any other Target data. This happens through a Target Identifier which consists of 2 parts: The Target ID which can be a number, guid or string The Target Type which is important to ensure that an ID like 5027 is pointing to the person 5027, not the page 5027 Noteworthy to know most entities don't have Target Identifiers so most of the data is not Metadata assigning an entity to a target can only be done when the Entity is created and not later on In the data-lists of the Admin-UI you can see if an item is Metadata - it will have a tag-icon in the ID column Discover More Create Metadata - (advanced ⚠) Read / Access Metadata - (advanced ⚠) Metadata Target Types ToSic.Eav.Metadata Demo App and further links Fancybox Gallery App History Introduced in 2sxc v2 Continuously improved in 2sxc 7, 8, 10 and 11 Shortlink: https://go.2sxc.org/metadata"
  },
  "basics/metadata/of.html": {
    "href": "basics/metadata/of.html",
    "title": "Metadata Of Something - (advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Metadata Of Something - (advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data. When working with things (let's call it the Target or Owner) which have metadata, we talk about the Metadata being Metadata Of the Owner. In 2sxc many object have Metadata, such as Apps Content-Types Attribute Definitions Entities You can always access the Metadata through the .Metadata property. Tip When looking at Metadata from the Target object, we call it Metadata Of the Target. When looking at it from the Metadata-items point of view, they are Metadata-For the Target. The Metadata Property You can probably learn a lot by looking at the API docs of MetadataOf but here are the important parts: You can loop through the Metadata property The Metadata-Property will always return at least 1 item, even if no metedata was specified. If no data was specified, the returned item will have an Id of 0 (zero) Additional helpers like GetBestValue let you quickly get a value without going through the items themselves History Introduced in 2sxc v2 Continuously improved in 2sxc 7, 8, 10 and 11"
  },
  "basics/metadata/read.html": {
    "href": "basics/metadata/read.html",
    "title": "Read / Access Metadata - (advanced ⚠) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Read / Access Metadata - (advanced ⚠) you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } There are two ways to read / access Metadata On most 2sxc Data-objects there is a property called Metadata which contains everything you need To get Metadata for other Data there is a simple API to retrieve it Get Metadata on 2sxc Data Objects #todoc Many standard 2sxc object have a property Metadata to quickly access all Metadata of that object. You can find the docs in IMetadataOf. This applies to all kinds of objects like Entities Content-Types Apps ADAM files and folders Get Metadata for ADAM Files and Folders #todoc All ADAM Assets also have the .Metadata property to read the metadata as well as a .HasMetadata to quickly see if Metadata has been set. Edge cases of the .Metadata Property Since .Metadata is often used in dynamic code it's optimized to just work. This means it has the following effects It will always return a valid object, even if there is no metadata attached If no metadata exists, the EntityId will always equal zero 0 If it has one or more metadata items attached, the EntityId will be that of the first Metadata-Entities found #todoc - this should probably be moved to the C# API infos Get Metadata for Data outside of 2sxc #todoc To read Metadata for non-2sxc objects you must request it from the App.Data.Metadata or from the AppState.MetadataSource object. Both are a a . Use commands like GetMetadata<T>(...) to access the metadata you need. Read also #todoc Demo App and further links #todoc Fancybox Gallery App History Introduced in 2sxc v2"
  },
  "basics/metadata/target-types.html": {
    "href": "basics/metadata/target-types.html",
    "title": "Metadata Target Types | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Metadata Target Types you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data. For this to work, Entities which are Metadata store the ID of the Target. In addition, they must know what Target Type this ID describes, because an ID like 20503 could be in use in many systems. The Target Type is a simple number and all known Target-Types are stored in the SQL-Database. Any Target-Type number from 1-100 are reserved for 2sxc/EAV predefined types, any number above 100 you can define yourself for your use case. Reserved / Built-In Target-Types The following list are internally reserved Target-Types Anything with 1 (or 0) is defined as not being Metadata Attribute/Property Metadata - key should be number App Metadata - key should be number (AppId) Entity-Metadata - key should be guid of entity Content-Type Metadata - key should be string static-name Zone Metadata Scope Metadata Dimension (Language) Metadata Reserved CMS-Item (like file:72 or page:42) - key should be string System Metadata Site Metadata Reserved Page Metadata Reserved Module Metadata Reserved User Metadata 19-89 are Reserved 90 Custom Metadata target - for your most common custom target that only you care about 91 Custom1 - additional custom target for your own use, only your app cares about this 92 Custom2 - ... 93 Custom3 94 Custom4 95 Custom5 96 Custom6 97 Custom7 98 Custom8 99 Custom9 100 Reserved 101+ is free to define for your own purpose, but ATM you probably shouldn't use them See also TargetTypes Custom Target Types You can easily add custom types as you need them in the SQL database yourself. Just make sure your type-id is greater than 100. History Introduced in 2sxc v2 The 100 top numbers reserved for 2sxc in 2sxc v5"
  },
  "basics/mobile-apps/index.html": {
    "href": "basics/mobile-apps/index.html",
    "title": "Native Mobile Apps & PWAs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Native Mobile Apps & PWAs you are here (click to zoom) - discover the stack .context-box-summary .interact-mobile { visibility: visible; } 2sxc is great both for providing data to Native Mobile Apps as well as for creating PWAs and Mobile Web Apps. Native Mobile Apps If you have a Native Mobile App for Android or iOS and need to get either 2sxc Data or Dnn Data to that App, you should check out: Headless Web APIs Custom WebAPIs Automatically resizing images to any resolution Web Server Hosted PWA PWAs or Progressive Web Apps are technically web pages which look and behave like Native Apps. 2sxc is great for creating this and we've created our first PWAs in 2014."
  },
  "basics/notes/index.html": {
    "href": "basics/notes/index.html",
    "title": "Notes for Productivity | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Notes for Productivity Tip The key concept behind Notes is being able to add notes and warnings anywhere you need them. You can add notes to 2sxc in many places, to help you: Document anything that's special Add warnings to help you remember things Mention pending tasks (still WIP) Notes in Entities You can add notes to almost all entities (items) in the system, in the top right corner. It looks like this: Once added, editors will always see the yellow note-icon in the top right corner. Make a Note become a Warning Notes can also be converted to warnings, in case it's really important. Future of Notes (WIP) We have many plans for notes, incl.: Ability to add to pages Ability to show in the page if an item has a note Ability to use notes as tasks, to collect things which must still be completed How Notes Work Notes are simply Metadata of the thing they describe. They are stored as normal entities with a pointer to the thing they describe. History Notes added in 2sxc 13.03 to use on entities"
  },
  "basics/permissions/index.html": {
    "href": "basics/permissions/index.html",
    "title": "Permissions in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Permissions in 2sxc 2sxc permissions are interlinked with the users and roles of the platform (Dnn or Oqtane). So if Dnn or Oqtane say a user may do something, 2sxc will follow that. But there is more to it. Many situations require some control which the platform doesn't offer. Here are some examples: Admins in DNN are often just content-editors, and shouldn't be able to reconfigure 2sxc Headles APIs (REST) needs permissions which you cannot set in the platfrom Custom APIs (C# Controllers) need permissions which are not platform-configurable This section will help you understand how permissions work and where to configure them. Platform Permissions System Admins aka Super Users (SystemAdmin) A super-user (host-user) has full permissions on everything. There is no way to change this. This means that super users can install, configure, query, edit and delete everything. In C# you can always detect this on the CmsContext.User.IsSystemAdmin Site Admins (SiteAdmin) Admin users have full permissions on a specific site (Dnn: portal). So by default they can do everything which only affects the current site. If you have special Roles such as 2sxcAdministrators then this can behave differently. In C# you can always detect this on the CmsContext.User.IsSiteAdmin Content Admins (ContentAdmin) Many admins are just configured as admins to allow them to edit everything. So often the status Administrator is only given because it's the only real way to ensure the user can change every page, without wanting to allow the user to edit other users or reconfigure the site. Because of this, we have the concept of ContentAdmins The platforms Dnn and Oqtane currently don't offer a pure content-admin role. Because of this, 2sxc allows us to do this in another way. If the site/portal has a role called 2sxcAdministrators (previously 2sxc Designers) then all administrators will be treated as ContentAdmins with less permissions. Any administrator which is then in this role 2sxcAdministrators will have higher rights. For further details, see role 2sxcAdministrators In C# you can always detect this on the CmsContext.User.IsContentAdmin Edit Permissions The platform Dnn/Oqtane can give users Edit permissions. On both platforms this can be assigned at the page as well as the module permission. Users with edit permissions will be able to edit content or change what layout is used, but not be able to access advanced admin features. App Permissions For special use cases you may want to give users permissions in a specific App. For example, a Classifieds App or a Comments App could allow registered users to add their own posts and also edit them. Warning Be careful with such permissions, as you don't want to open up your entire App. Normally you will only want to assign permissions to a specific Content Type. Content-Type Edit Permissions These permissions can be configured at the Content-Type level. A typical example would be Registered Users can create a new Comment Registered Users can read the schema of Comment so the edit-UI can be accessed Registered Users can edit Comments which they own/created Tip Just because the permissions allow editing doesn't mean the UI will automatically show toolbars. This is because you may have special buttons or My Comments page or something to do this. So don't forget to ensure the UI is available as you want it. REST API Permissions (Headless) To use data on the REST API you must also determine what is allowed. You can configure this at the App Content-Type level. WebApi Controller Permissions When you create custom WebApi controllers, you will have to use C# attributes to configure permissions. Please check the examples, ATM we don't have time to document the details. Polymorph Editions The System Admin can also review new code on the live system without affecting other users. This feature is called Polymorphism. It is only available to SystemAdmins. Checking Permissions in Formulas Formulas allow you to check the basic permissions such as isSystemAdmin etc. on the context.user object. Please check the examples, ATM we don't have time to document the details. History Basic permissions introduced in 2012 for 2sxc 1 Special role 2sxc Designers introduced ca."
  },
  "basics/permissions/role-2sxcadministrators.html": {
    "href": "basics/permissions/role-2sxcadministrators.html",
    "title": "Permissions in 2sxc – 2sxcAdministrators Role | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Permissions in 2sxc – 2sxcAdministrators Role If your site has a role called 2sxcAdministrators (before v14 2sxc Designers) it will change what Admin users can do. Without the role 2sxcAdministrators all Admins are regarded as SiteAdmins and can do anything With the role 2sxcAdministrators all Admins are treated as ContentAdmins With the role 2sxcAdministrators all Admins which have this role are again treated as real SiteAdmins ✅ Consult this checklist to set this up: https://azing.org/2sxc/r/t104-orQ History 2sxc Designers introduced ca. 2sxc 5 2sxcAdministrators introduces as replacement in 2sxc 14.00"
  },
  "basics/polymorphism/index.html": {
    "href": "basics/polymorphism/index.html",
    "title": "Polymorphism aka Open-Heart-Surgery | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Polymorphism aka Open-Heart-Surgery Tip The key concept behind Polymorphism is having the same template and code in various editions (morphs) which are automatically used based on certain rules. Polymorphism Addresses 3 Problems #1 Workin on Live Sites aka Open-Heart-Surgery Imagine you have a running system and you want to make some changes on the live installation. During the time you work, you would always risk breaking the site, but we usually don't have the time to create a staging environment. #2 Creating Templates that work with Multiple CSS-Frameworks When the same design must work in various CSS-Frameworks, you actually need different templates for each - and switching between them must be automatic. #3 A/B Testing In marketing, we want to test various design with different audiences and measure what works best. Polymorph Folder Structure Let's compare the perfect multi-edition (polymorph) setup to the classic solution: Note Automatic View-Polymorphism replaces the manual approach for CSS-Framework and common Open-Heart-Surgery scenarios. The manual approach is still recommended for complex polymorphism as well as A/B Testing. View Polymorphism Automatic View Polymorphism based on CSS-Framework The system is fairly easy to understand. So if polymorphism is activated for CSS-Framework detection, here are the rules: The default template file is the one configured in the view configuration 2sxc will try to find file with the matching name in 2 locations using the name of css framework published by the skin in the koi.json beneath the current folder in the app root folder If nothing is found, the default template file is used If a match is found, it will load that. Note that if the theme does not have a koi.json, the code used is unk for unknown. Here's a checklist how start using View Polymorphism with CSS-Frameworks: Automatic View Polymorphism based on SuperUser Permissions This is meant for Open-Heart-Surgery - so you can work on templates on a live site without breaking the output for normal users. This is how it works (if you have turned it on): The default template is the one configured in the view configuration 2sxc will try to find a file with matching name in either the [root]/staging (for super users) or [root]/live (for normal users) If it is found, 2sxc will render that template Otherwise the default template is used Here's a checklist to get started: Manual View Polymorphs In case the automatic setup doesn't suit your needs, you can do it manually like this: Razor Guide to View Polymorphism Tip These are just a few hints for you as you work with it. Don't forget to activate it in the settings If the Razor code ever wants to know what edition (morph) it's in, check the CmsContext.View.Edition property. You would do this for things like If you need a JS or CSS from the same folder If you need to link to a WebApi of the same edition WebAPI Polymorphims Api Controllers are already fully polymorph. They can be placed in a subfolder like [app-root]/live/api/WtfController.cs and can be accessed using a url with the edition in the name, allowing multiple identically named controllers to be used. Views are polymorph if you do the view selection manually. This means, you can place your views in a subfolder like [app-root]/live/list.cshtml and then have an entry-point [app-root]/list.cshtml which will choose which edition to use - then using @Html.Partial(...) to pick that edition. This is still manual, because we're not sure yet what the perfect implementation is, so we would rather wait before standardizing a bad solution. Everything that is data (schemas, items, queries, settings and resources) is still one edition only. The data model is able to perform multi-edition content-management, but we're not ready yet to provide the UIs etc. for this, as it could lead to confusion, so we'll hold back on this for now. How to use WebApi Polymorph As of now, to use the WebApi Polymorp, this is what you would do: instead of placing your WtfController.cs in the [app-root]/api/ folder, you place it in a [app-root]/live/api folder. the live, default JS would then access it using [dnn-api-root]/app/auto/live/api/Wtf You can then copy this controller to [app-root]/dev/api and make your changes there. In your JS, you would then (while testing/developing) access this edition using [dnn-api-root]/app/auto/dev/api/Wtf without causing problems on the live solution, as all other users are still accessing the live edition, while you're working on the dev edition. Once everything works, deploy (copy) the now modified WtfController.cs from the dev/api folder to live/api and all users benefit from the changes. Data Polymorphism Data Polymorphism has not been implemented yet. The idea would be that changes to data or even schemas (fields of a type) would be staged as we work. For now, Data-Polymorphism is low priority, because we're not sure yet if we can \"pull this off\" in a way that won't confuse the users. Read also WebApi DotNet-WebApi Checklist for Polymorphism Blog Post around Polymorphism Demo App and further links The default Content Templates use CSS-Framework Polymorphism to automatically look great in Bootstrap 3 and 4 The Mobius Forms App uses SuperUser Polymorphism so you can develop new forms in the background without breaking functionality History WebAPI Polymorphims was introduced in 2sxc 9.35 Manual View-Polymorphism was introduced in 2sxc 9.35 Automatic View Polymorphism introduced in 2sxc 11.0 (css-frameworks and super-user)"
  },
  "basics/prepare/index.html": {
    "href": "basics/prepare/index.html",
    "title": "Prepare Data for Templates and WebApi | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Prepare Data for Templates and WebApi you are here (click to zoom) - discover the stack .context-box-summary .prepare-all { visibility: visible; } A common Step in the data-flow is the Data Preparation before the View or Custom WebApi work with it. This is fully automated and has three common scenarios: No Prepare where no Data is used or at least no Instance Data Default where content added to a Module by an editor is retrieved and prepared Query where a custom VisualQuery is configured to get the data Note: A special case where data is prepared is when it's used for indexing in the full-text search. This is documented in Search. No Preparation Two cases need no preparation at all Templates / code which don't use any data Templates / code which use only general App data or Queries but not instance data In these cases the View is configured to not use data and the template or WebApi will either not use data or will only access it through the App.Data which has all data at it's disposal. Default Preparation: Instance Data By default all Module Instances can have data which the editor has added manually in the CMS UI. This corresponds to the normal Content Editing scenario. Internally it uses a Query which looks like this: This does the following (starting from the bottom): The ICache is an IAppRoot DataSource which hass all data of this App The PublishingFilter will then ensure that editors can see draft-data, and public users can only see published data The ModuleDataSource is a CmsBlock which will select all relevant data of this Module instance It then provides the retrieved data on a Stream Default (all the items) and Header (previously ListContent) The Template or WebApi running for this Module Instance will then have this data Content or often @Content has the first item on the Default stream Header or ofter @Header has the first and only item on the ListContent stream Data will contain all the streams as configured in the above query, usually you will use Data[\"Default\"] to loop through lists of all the content items Note that the ModuleDataSource also does some more magic like Retrieve the Demo-Item as configured in the View, if no data exists (or a public user is looking at the page, and the data is still draft) Add more information like IsDemoItem to each piece of Information The Content App only has this kind of preparation. Customs Apps can also use this, but it can also be configured to use custom Queries (see below). Query Preparation If your View is configured to use a Query it will instead run this query. Note Note that your query can also extend the standard Query as mentioned above and provide both the normal edited content and add more streams as needed. Tip A common use case for Queries extending the default query is scenarios where the edited content provides parameters for the Query. For example, the Header of the News App could contain a property Category which the editor can choose. The rest of the Query could then use this category to filter what items are retrieved. Note about Accessing all App Data in your Code Your template / WebAPI can also always access all the data in the App using App.Data. You may Also want to Learn about Create queries using VisualQuery Prepare data in code Prepare data for the full-text search index of the platform Headless WebAPI DataSources Read more Queries Content App"
  },
  "basics/principles/index.html": {
    "href": "basics/principles/index.html",
    "title": "2sxc Principles and Values | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Principles and Values To make a large system such as 2sxc easy and consistent, we need guiding principles and values. If you create solutions with 2sxc, it's good to know these. If you help us create 2sxc, you must know these. Systems Design Principles Separation of Roles We usually differentiate between the Content-Editor, the Web-Designer and the Developer. Each have a unique skill set and unique needs, which you can address perfectly with 2sxc. Separation of Concerns Content, data, layout, functionality, business-logic - all these shouldn't be mixed. Stay out of the way 2sxc helps you do amazing things - with other existing technologies and tools. So 2sxc does many important things for you, but it mainly helps you leverage other technologies like HTML5, CSS, JavaScript, knockoutJS, AngularJS, bootstrap etc. Keep things simple Managing content is very complex and time consuming. And we want to help your content-editor to focus on that, and not on technical implementations. Reusability Things we or you create with 2sxc are very easy to adapt to other use cases. Values Open-Source We keep our work open, create demo-apps and write blogs. All for free. Please give back, contribute to the community with your own Apps and blogs on how you leverage 2sxc."
  },
  "basics/query/data-sources/index.html": {
    "href": "basics/query/data-sources/index.html",
    "title": "All DataSource Objects in 2sxc / EAV | 2sxc 19 for Dnn and Oqtane",
    "keywords": "All DataSource Objects in 2sxc / EAV you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } 2sxc provides a large set of DataSource objects which either get data from somewhere (SQL, CSV, ...) or modify data on the In and passing it to Out. This page will give you an overview and link you to further sources if you need to know more. All Public DataSources These are all the data sources which are either provided in the default installation of 2sxc. Data Source Purpose Description & Details Ver. App Get Data Provides each content-type on the out-stream AppRoot Get Data This is the root cache node per App AttributeFilter Modify Removes properties/attributes. AttributeRename Modify Renames properties/attributes. CacheAllStreams Caching Cache all streams passing through Children Relationships Get all related child entities v12.10 CmsBlock Get Data Current Module instance data … Will get the content-items assigned to a Dnn-Module. This is used internally on each view, but can also be used when using module-data to configure a query. Csv Get Data Get data from a CSV-file DataSourceBase (base) The base class for all DataSources DataTable Get Data Base class for coding using .net Tables EntityIdFilter Filter Get one or more items with specific Ids EntityTypeFilter Filter Get items of a specific content-type Error (internal) Generate an error for testing VisualQuery debug CustomDataSource (base) Base Class for custom data DataSources ItemFilterDuplicates Logic Find and remove OR retrieve duplicate items LanguageModeler Modify Restructure imported data to be multi-language v11.20 OwnerFilter Filter Get items created by specific user Pages CMS Data All the pages of the current site v15 Paging Logic Page through items Parents Relationships Get all related parent entities v12.10 PassThrough (internal) Do-Nothing DataSource mainly for testing PublishingFilter Filter Filters items the current user shouldn't see … This is part of the \"Unpublished-Data\" concept. Since each item could be either published or draft, this helps you show the correct ones for the current user based on his edit-rights. It's automatically in the default pipeline, unless you explicitly don't want it. Query (internal) Internal system to run Queries QueryRun Sub-Query Run another query and use results RelationshipFilter Filter Filter items with a specific relationship Serialization Configuration special Control created JSON content for security and optimization Sites CMS Data All the sites of the current system v15 Shuffle Logic Shuffle/randomize item order Sql Get Data Get SQL data as entities … This lets you get data from any SQL data base. It also has powerful script-injection protection, so messy parameters won't hurt it. StreamFallback Logic Returns the first stream having data … Use this to choose from multiple in-streams which data to show. It will use all the in-streams sorted A-Z, and return the first stream which can deliver data. The remaining streams will not be queried. StreamMerge Logic Merge multiple streams into one StreamPick Logic Pick a stream by stream-name… Use this to pick one of multiple in-streams by name. Often used together with the token [Params:ShowDrafts] SystemStack Get Data All the Settings / Resources of the current System and App v15 TreeModeler Modify Restructure imported data to have tree-relationships v11.20 ValueFilter Filter Filters by value ValueSort Sort Sorts all items by values Dnn DataSources These are Dnn specific DataSources and won't work on Oqtane. Data Source Purpose Description & Details Dnn FormAndList Get Data Get data from the old FnL Use old FnL data in 2sxc … Will let you access Form-And-List aka UDT (Universal Data Table) data. Note that this DataSource is in external DLLs and has not been maintained, it probably doesn't work any more. DnnSql DataSource Get Data Get data from the Dnn Database DnnUserProfile Get Data Get Dnn Users and profiles Internal / System DataSources These data sources are used internally, like for selecting an App in an edit dialog. Data Source Purpose Description & Details Ver. Apps (system) Get all Apps in a Zone/Site Attributes (system) Get all Attributes of a Content-Type Block (system) Helper to correct data with Templates ContentTypes (system) Get all ContentTypes of an App Features (system) All the features in the the current system v15 Licenses (system) All the licenses in the the current system v15 MetadataTargetTypes (system) All the Metadata Target Types in the EAV v15 QueryInfo (system) Provide debug info when creating Queries Scopes (system) All the sites of the current system v15 Zones (system) Get all Zones (Sites) in an installation Demo App and further links You should find some code examples in this demo App ... More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "basics/query/data-sources/share-point/index.html": {
    "href": "basics/query/data-sources/share-point/index.html",
    "title": "SharePoint DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "SharePoint DataSources you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } 2sic can help you with additional DataSources for SharePoint 2016/2019/Online. These are third-party DataSources and not part of 2sxc. They require a purchase of this DataSource. The Solution contains 2 DataSources SharePointList SharePointSearch History Created ca. 2017 for 2sxc 7 Continously updated for 2sxc 9 and 10 Latest Version for 2sxc 11.14"
  },
  "basics/query/data-sources/third-party.html": {
    "href": "basics/query/data-sources/third-party.html",
    "title": "Third-Party DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Third-Party DataSources you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } Anybody can create additional DataSources for your use. They will require separate installation of the DataSource and may not be free. Our goal is to list the known stable DataSources of other parties here. Create and Add your DataSource To create your own DataSources check out the Custom DataSources. To add your DataSource to this list, please contact us. List of Third-Party DataSources The following list was updated April 2021 SharePointList DataSource Property Description Purpose Get data from a SharePoint List or Document Library Creator 2sic Free no Last Update 2021-04 2sxc Versions v7 - 11.14 Dnn Versions v7.4.2 - 9.* Details SharePoint DataSources SharePointSearch DataSource Property Description Purpose Run a Full-Text Search on SharePoint Creator 2sic Free no 2sxc Versions v7 - 11.14 Dnn Versions v7.4.2 - 9.* Details SharePoint DataSources"
  },
  "basics/query/debug/index.html": {
    "href": "basics/query/debug/index.html",
    "title": "VisualQuery 3: Debugging | 2sxc 19 for Dnn and Oqtane",
    "keywords": "VisualQuery 3: Debugging you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } In 2sxc 11.13 we're introducing VisualQuery 3 with two new feature to help you create VisualQueries Stream Debugging Non-Breaking Errors Stream Debugging After running a query and closing the result-preview, you'll see how many items were on each stream. In VisualQuery 3 you can now click on that stream to see exactly what was contained in the stream itself. Note that in the image you see The title showing that you're looking at a stream The items in that stream An info that VisualQuery only picked the top 25 entries, but that you can re-run it with more results. Non-Breaking Errors Previously if there was an error in a Query, the entire query would fail and you would get a error message which was very difficult to debug. Now the system is much simpler. If any Stream has an error it will actually still provide a single Entity containing the error information. This looks like this: If you then click on the ⚠ you'll see the full message like this: The button below will bring you to the 2sxc Insights... ...where you can click on a request and search for Error or Exception to find out more: Security Considerations All the error information is also logged into Insights, so super-users can check that for more details. If the query blows on a normal user, the data will not contain any important information - so no paths, no internal values, etc. If the query blows on the Super-User we'll sometimes include more information - like the Path to the CSV file History Introduced in VisualQuery 3, 2sxc 11.13"
  },
  "basics/query/export-import.html": {
    "href": "basics/query/export-import.html",
    "title": "Export / Import Queries | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Export / Import Queries you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } Queries are can be exported as JSON files and imported anywhere you need them. The exported JSON contains the entire query definition with all parts, settings, test-values and everything. Export a Query Just follow these steps: Import a Query Just drag an exported JSON file into the Queries tab or go through the dialogs: History Export/Import added ca. 2sxc 11.10"
  },
  "basics/query/index.html": {
    "href": "basics/query/index.html",
    "title": "Query and VisualQuery | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Query and VisualQuery you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } 2sxc Templates and Headless APIs can use Queries to access data. This is pretty amazing: You create such queries using a VisualQuery designer Queries can then be assigned to a View so the template recieves this as the data to work with Queries can also be used directly in the Headless API if you configure the permissions for this The Edit-UI can also use queries in dropdown fields You can also access queries using App.Query[\"QueryName\"] In addition, there are also some built-in System Queries built-in which will get system data for you like a list of Content-Types or Apps in the System. Tip Note that Queries can created in code and using VisualQuery. The code method is very advanced. You can read more about using DataSources in C# / Razor code. The rest of this page is about VisualQuery. Queries in an App All Queries (except for the System-Queries) are stored in the App - this is what it looks like: Create Queries To create a new Query hit the + and continue from there: Edit Queries Use the VisualQuery Designer Export / Import \uD83D\uDC49 Export / Import Queries Technical Implementation When queries run they behave like Data-Sources while internally chaining various other Data-Sources to query the underlying data. History introduced in 2sxc 6 continuously enhanced"
  },
  "basics/query/look-ups.html": {
    "href": "basics/query/look-ups.html",
    "title": "LookUp System | 2sxc 19 for Dnn and Oqtane",
    "keywords": "LookUp System you are here (click to zoom) - discover the stack .context-box-summary .lookup { visibility: visible; } Many things in the EAV and 2sxc require it to look up parameters. Examples could be: The current Page ID to then find metadata for this page The current Date to filter out news items which should be published in future An Id from the URL Parameters to show details about this id This is done using Tokens which look like [QueryString:Id]. \uD83D\uDC49 For more about LookUps, read LookUp System"
  },
  "basics/query/parameters/index.html": {
    "href": "basics/query/parameters/index.html",
    "title": "Parameters for the DataSources and the Query | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Parameters for the DataSources and the Query you are here (click to zoom) - discover the stack .context-box-summary .query-params, .context-box-summary .lookup { visibility: visible; } DataSources are parts of a query, and each performs certain functions. To do this, it needs parameters which it can get from many sources The Configuration-UI of this specific Data The general Query-Parameters Various Look-Up Sources (Tokens) Other DataSources which give the configuration value on an In-Stream Configuration UI of a Part = Settings Each part is a DataSource. If it's configurable you'll see a button appear when you mouse over it like this: The dialog which appears will be different for each type of DataSource. In the C# code of the DataSource, these parameters are available as Settings. Configuration can be Values or Tokens Almost all configuration values are strings, even if the DataSource expects a number. This allows you to write either 27 or [QueryString:Id] depending on your needs. Here's an example: Queries can be parameterized with token placeholders like [QueryString:Id] [App:Settings:PageSize] [Params:Sort] To understand these placeholder tokens, best read up on LookUp Tokens Explained. There you'll read about how tokens work, where they come from, how to use default/fallback values and more. Aside from the normal LookUps like QueryString, User etc. there are two special LookUps which you should know about: Params and In. Global Query Parameters with Params-Token Each Query can have a list of Parameters which all parts can access through the Params LookUp. This has some great benefits: A developer can always see what parameters affect the Query If you use the same parameter in various places, you can be sure that it's always the same value. These Parameters can also be set from another query calling it This is what it looks like in VisualQuery: You will find a full explanation of this here: Params LookUp in Query Parameters. Tip You can write the tokens you need like [QueryString:Id] directly into any DataSource configuration. But we highly recommend that you create a param for it and use that instead. It just makes it easier for people looking at your query to see what will affect its results. Get Configuration from Another DataSource Often some stored data will be used to change what a DataSource does. Here's an example which will retrieve a Category either pre-defined or from the URL, then use that category to apply a filter: Here's how the settings of that are configured: Read more about the In LookUp. Settings from the Current Module (CmsBlock) Another common use case is when a normal Module-Content provides more settings. This uses the CmsBlock DataSource: This shows how the In will look in the Mod stream to find the PortalId. Read more about this In LookUp CmsBlock Test your Query with Test Parameters \uD83D\uDC49 Query Development - Test Parameters Read Also VisualQuery Designer Set Query Parameters in your Code Blog Posts about VisualQuery Designer History Introduced in 2sxc 07.00 In added in 2sxc 07.00 Params added in 2sxc 10.22"
  },
  "basics/query/parameters/test-parameters.html": {
    "href": "basics/query/parameters/test-parameters.html",
    "title": "Query Development - Test Parameters | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Query Development - Test Parameters you are here (click to zoom) - discover the stack .context-box-summary .query-params, .context-box-summary .lookup { visibility: visible; } This is how to test your Query with Test Parameters: The VisualQuery Designer also allows you to set test-values for testing the query. The test-values should define all the full tokens to replace. Example: [QueryString:Id]=27 [QueryString:SortOrder]=Desc [Params:FilterLastName]=Mettler [Params:FilterNameSort]=[QueryString:SortOrder||Asc] Here's an example: You will find a full explanation of this here: Params LookUp in Query Parameters. Tip As you can see in the example, even test params can contain more tokens if you need them. In the above example, Params:FilterNameSort would resolve to Desc because it will first check the QueryString:SortOrder which also has a test-value of Desc. Read also VisualQuery Designer Blog Posts about VisualQuery Designer History Introduced in 2sxc 07.00 Query Params added in 2sxc 10.22"
  },
  "basics/query/query-in-view.html": {
    "href": "basics/query/query-in-view.html",
    "title": "Export / Import Queries | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Export / Import Queries you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } The most common way to use Queries is as a Data provider for a View. In such a case, the View will recieve data as the Query processes it, and can template it as needed. Configure in the UI In a View configuration, this is where you tell it to use a Query to provide data: History Introduced with Queries ca. 2sxc 6"
  },
  "basics/query/query-system.html": {
    "href": "basics/query/query-system.html",
    "title": "System Queries | 2sxc 19 for Dnn and Oqtane",
    "keywords": "System Queries you are here (click to zoom) - discover the stack .context-box-summary .query-built-in { visibility: visible; } This is a very internal spec - you probably don't need this \uD83D\uDE09. System Queries are stored as json in DesktopModules\\ToSIC_SexyContent\\App_Data\\system\\queries. Queries and Parameters Note In v15 the names changed, to simply start with System.. The old names still work, but you should stop using them. System.Apps - retrieve all apps Parameters ZoneId System.Attributes - retrieve all the attributes of a content-type Parameters ContentTypeName System.ContentTypes - retrieve all content-types Parameters AppId Scope System.Pages - retrieve all pages of the current site (v15) Parameters no parameters System.Queries - retrieve all queries Parameters no parameters System.QueryInfo - retrieve all streams and fields of a query Parameters QueryName StreamName System.Roles (BETA v15) System.Settings (BETA v15) System.Resources (BETA v15) System.Users (BETA v15) System.Zones - retrieve all zones Parameters no parameters Old Queries before v15 These queries have been renamed. The old name still works, but you should stop using it. We are only listing queries, which we believe may have been used publicly. Eav.Queries.Global.Apps - retrieve all apps Eav.Queries.Global.ContentTypes - retrieve all content-types Eav.Queries.Global.Queries - retrieve all queries Parameters no parameters History Introduced in 2sxc 07.00 In added in 2sxc 07.00 Params added in 2sxc 10.22"
  },
  "basics/query/ref-edit-form.html": {
    "href": "basics/query/ref-edit-form.html",
    "title": "Use Queries in Edit-UI Dropdowns | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use Queries in Edit-UI Dropdowns you are here (click to zoom) - discover the stack .context-box-summary .query-app, .context-box-summary .process-headless { visibility: visible; } Dropdown fields (Related-Entity or String) in the Edit-Form can be configured to show values from a Query. They can also be cascaded - so that a selection on one dropdown changes the list of possible items on another dropdown. Read more about it here: Field Input-Type entity-query Field Input-Type string-dropdown-query"
  },
  "basics/query/ref-headless.html": {
    "href": "basics/query/ref-headless.html",
    "title": "Use Queries in Headless APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use Queries in Headless APIs you are here (click to zoom) - discover the stack .context-box-summary .query-app, .context-box-summary .process-headless { visibility: visible; } All Queries can be used in the Headless WebAPI. Read more about it here: Headless WebAPIs in 2sxc Query REST Web API"
  },
  "basics/query/ref-in-code.html": {
    "href": "basics/query/ref-in-code.html",
    "title": "Use Queries in C# Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use Queries in C# Code you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } Queries can easily be used in code. Read more about that Using Queries in your Code"
  },
  "basics/query/serialization/index.html": {
    "href": "basics/query/serialization/index.html",
    "title": "Fine-Tune Serialization in Queries (new v11.13) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Fine-Tune Serialization in Queries (new v11.13) you are here (click to zoom) - discover the stack .context-box-summary .query-app, .context-box-summary .process-headless, .context-box-summary .format-json-headless { visibility: visible; } You can now customize a lot how Query data is made available in the Headless API. You can control things like If Id, Guid and Titles are included If Metadata-For is included If Metadata is included and which identifiers If Relationships are included and which identifiers This is made possible through the new SerializationConfiguration DataSource. Just try it out. Todo: #todoc screenshots etc. History Introduced in 2sxc 11.13"
  },
  "basics/query/streams/in.html": {
    "href": "basics/query/streams/in.html",
    "title": "VisualQuery: In Streams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "VisualQuery: In Streams you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } DataSources often have In Streams. Some are required and some are optional. There are three common cases: No In-Streams because the DataSource generates data (eg. the Sql DataSource) In-Streams which supply data for processing In-Streams which simply supply configuration The counterpart of In-Streams are Out-Streams. This is what In-Streams look like in VisualQuery: The Three Common Cases Case 1: DataSources without In-Streams Root DataSources generate or get data, and don't need an In-Stream. Here's an example from a CSV DataSource. Case 2: In-Streams for Data Processing This is a most common case, where a datasource gets one or more streams, and filter or modify the content. Here's an example of the StreamPick DataSource which has 3 inbound streams, and picks the one called Default to pass on: Case 3: In-Streams for Configuration In addition to data providing In-Streams, a DataSource may also use the data from an In to get a setting. In these cases the first item in the stream can be used as a parameter in the Settings using In-Lookups like [In:Module:Category]. Read more about In-LookUps. In-Stream Names The names on an In-Stream are important since they affect how the stream is used. Note that the names must be unique. This is case-insensitive, so Default and default are regarded as the same name and wouldn't be valid. Pre-Named In-Streams If the DataSource has special In-Streams which have a pre-defined purpose they are pre-named. This example of the ValueFilter DataSource can run a filter on Default, and if it ends up empty, can deliver a Fallback stream: The Country filter - it didn't find anything in the Default for the filter, so it receives 11 items and forwards 11 items from the Fallback Test data for Country is blank The Industry filter - it did find something, so it only forwards the 2 matching items Test data for the Industry expects Web Dynamic In-Streams Some DataSources can handle an infine amount of In-Streams like the StreamPick DataSource. This is indicated by the orange \uD83D\uDD3A on mouse-over: This means you can connect as many In-Streams as you want. Just make sure the names are unique. Rename In-Streams You can always rename a connection by clicking on the name and typing in a new name. Required vs. Optional In-Streams Some streams are optional, some are required. In the example of the ValueFilter above, the Default is required, and the Fallback is optional. In-Streams Cannot be Re-Used An Out-Stream can be connected to multiple In-Streams but the opposite is not possible. So an In can only have one source, but an Out can give it's data to multiple In sources. Nice to Know By convention, the default In-stream is called Default In-Streams have data which can be used, but they are not accessed until you really need them History Introduced ca. in 2sxc 6 Dynamic-In has existed since 2sxc 6 but the visual queue was added in 2sxc 11.13"
  },
  "basics/query/streams/out.html": {
    "href": "basics/query/streams/out.html",
    "title": "VisualQuery: Out Streams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "VisualQuery: Out Streams you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } All DataSources must have Out Streams. By convention, the primary Out is called Default. Such a Stream will contain zero, one or many Entities (items of data) depending on the logic in the DataSource and the data/configuration which was handed in. The counterpart of Out-Streams are In-Streams. Out Streams in VisualQuery These are predefined Out Streams where each DataSource declares what it can offer: Some Sources can have Dynamic Out where you can create as many Out streams as you want. Usually the name you give each stream will affect what is in it: Rename Out-Streams You can always rename a connection by clicking on the name and typing in a new name. Out-Streams are Run Once If an Out-Stream is accessed in a web-request it will run the code to create the Stream. If it is accessed again (re-used) within the same request, it will simply return the data from the first run. Out-Streams are Lazy An Out-Stream offers Data, but the underlying code is not executed unless accessed. This is for performance reasons. For an Out-Stream to be accessed, it must be connected to one or more In-Stream of other DataSource which in turn are accessed. Note that when debugging in VisualQuery, all Out-Streams of the final target are accessed to show statistis, but if the Query is used elsewhere very often not all streams are accessed. Unused Out-Streams If an out-stream is not connected to anything, it's not used and the underlying code which generates this data will not be accessed. Out-Streams can be Reused An Out-Stream can be connected to multiple In-Streams but the opposite is not possible. So an In can only have one source, but an Out can give it's data to multiple In sources. The underlying code will still only be run once. History Introduced ca. in 2sxc 6 Extended with Dynamic Out ca. 2sxc 8"
  },
  "basics/query/sub-query/index.html": {
    "href": "basics/query/sub-query/index.html",
    "title": "Sub-Queries: Re-Use Queries in Other Queries | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Sub-Queries: Re-Use Queries in Other Queries you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } You can re-use a Query inside another one, just like calling functions in your code. This feature uses the QueryRun DataSource. Example in VisualQuery As you'll see in the image below, the QueryRun DataSource actually runs another query and re-uses it. Walkthrough Video Watch this video for a walkthrough to learn how to use it yourself. Checklist to Use Sub-Queries Best Practices In many cases you'll have sub-queries which expect parameters. You could assume that they come from the URL like [QueryString:Id] but when re-using the query it's better to pass it through the parameters because it will give the caller more control over what parameters are used. In the above example, it's better to do this: The sub-query would use [Params:Id] to use the Params-ID The caller would then set Params:Id=[QueryString:Id] or anything else as needed History Introduced in 2sxc 10.24"
  },
  "basics/query/visual-query/index.html": {
    "href": "basics/query/visual-query/index.html",
    "title": "VisualQuery Designer | 2sxc 19 for Dnn and Oqtane",
    "keywords": "VisualQuery Designer you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } 2sxc includes a visual designer for creating queries called VisualQuery. It's drag-and drop, and each component can be configured to your needs. The Designer This is what it looks like: This is what you see when you run a query: Add Parts / DataSources Just add parts to your query as you need them: ...and drag them around for positioning as you want: Connect Parts / DataSources Now just connect Out Streams of some parts to the In Streams on other parts: In some cases, the connection to drop unto already has the right name, otherwise just click on the name to rename it: Tip Renaming connections can be very important, as the receiver of data may expect a specifically named In Stream to bring it data. The most common name is Default BTW. You can also rename the Outbound connection if you want this: Tip Just like the In-Streams, the Out-Streams names can have an important effect. In the example above, renaming the Out means that the shown App DataSource will only give data of the type Company on this stream. Save, Run and Debug Here's an example of the result after running the query shown above: As you can see, the designer shows each connection and how much data was in it (and you'll see a dialog showing the data). If we click on a stream we can also see exactly what was in the stream: Read more about this in VisualQuery 3: Debugging. Add more DataSources and Connect To build your dream-query, add more parts as you need them... As you can see, the resulting stream has 0 items in it. Let's configure the Item-ID Filter to do something usefull: Configure the Parts All parts which can be configured show a gear-icon when you mouse over them: ...which then show a dialog for this specific DataSource: \uD83D\uDC49 Learn more about Configuration and Parameters Where to go from Here Try out various apps to see how they use VisualQuery Discover all the features in these docs (see menu to the left) Read also Blog Posts about VisualQuery Designer Data Sources (IDataSource) History Introduced in 2sxc 07.00"
  },
  "basics/server/asset-optimization/index.html": {
    "href": "basics/server/asset-optimization/index.html",
    "title": "Optimizing Template Assets / Client Dependencies (JS & CSS) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Optimizing Template Assets / Client Dependencies (JS & CSS) you are here (click to zoom) - discover the stack .context-box-summary .asset-optimizer { visibility: visible; } Learn about using the Dnn Client-Resource-Management aka Dnn Client-Depedency-Management in 2sxc templates. Whenever a template needs additional files, specifically JavaScripts CSS Styles Image Resources Fonts These should be included in an optimized form to enhance performance dramatically. This is all about reducing the amount of server requests (very important for end-user performance) and delivering them in the order / places in the HTML-file, optimal for their purpose. So far 2sxc will take care of your JS/CSS files by bundling and minifying them, at the position and order you need. How to use Here's a trivial example for optimizing a CSS with default settings: <link rel=\"stylesheet\" href=\"@App.Path/style.css\" @Kit.Page.AssetAttributes() /> This will Create a link to the file styles.css in the current App Add some attributes which will enable optimizations If you have Content Security Policy (CSP) enabled, it will also whitelist the resources in CSP Here's a more typical example, showing an optimization for a style & js which are inside the app-folder. This example uses Razor, so we use @App.Path to ensure it's picking up the right folder (use [App:Path] in token-templates): <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" @Kit.Page.AssetAttributes(priority: 150) /> <link rel=\"stylesheet\" href=\"@App.Path/assets/lazy.css\" @Kit.Page.AssetAttributes(position: \"bottom\") /> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" @Kit.Page.AssetAttributes(priority: 200, position: \"bottom\") /> </script> This shows: a CSS with lower priority (150 instead of the default 100) a css with which will be placed at the page bottom (so it will load later) a script-tag and specifies priority and placement inside the HTML document How it works Basically all <script> tags and all <link rel=\"stylesheet\"> tags can have a special attribute, which the system will parse according to the environments capabilities. In Dnn 7/8/9 this means it can can assign priorities (to ensure load-order) can assign placement in the html-document (head, body, bottom) Understanding Priorities There is a fairly complicated article in the dnn wiki about client resource management which explains most of it. In general you can say that all Dnn scripts load with priorities below 100, the default for all standard scripts is 100, and from there you can order things as you need them. We usually prioritize libraries like 2sxc or angular.min.js with 100 or larger, and then place our own script (like an app-blog.min.js) at numbers like 200. Understanding Placement Placement information can only be supplied in 2sxc 8.9 or higher. The three positions are: head meaning that the resulting data is requested in the HTML header. So it will be loaded before the page is rendered, meaning it's available right from the start but also delays page-build. This is often detrimental in terms of page-load times. this is the default location for CSS files body meaning it will be loaded in the beginning of the HTML body tag. Again this means it's there very early, but will slow down page buildup. this is the default location for JS files bottom meaning it will be loaded at the end of the html document. This is actually great for page-loading performance to improve above-the-fold loading. But it takes a bit of work to perfect its application. Read also Dnn API Documentation Blog about problems with the Dnn resource management in case you run into problems Demo App and further links You should find some code examples in this demo App basically this is used in every app in the app-catalog Old API Before v14 The syntax above using the @Kit.Page IPageService. It was introduced in v14 and requires your Razor to inherit from Razor14 or later. This is the recommended way of doing this. But there is also a more manual way for older razor files, like this: <link rel=\"stylesheet\" href=\"/style.css\" data-enableoptimizations=\"true\" /> <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" data-enableoptimizations=\"150\" /> <link rel=\"stylesheet\" href=\"@App.Path/assets/lazy.css\" data-enableoptimizations=\"bottom\" /> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" data-enableoptimizations=\"200:bottom\" /> </script> History Introduced in Version 04.00 with true/false Enhanced in Version 06.00 with priority numbers Enhanced in 08.09 with position head/body/bottom"
  },
  "basics/server/caching/app-state/app-state.html": {
    "href": "basics/server/caching/app-state/app-state.html",
    "title": "App State | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App State you are here (click to zoom) - discover the stack .context-box-summary .data-data { visibility: visible; } The EAV caches everything in memory, to ensure that everything is super-fast and doesn't require lazy loading. This is because lazy-loading has a dangerous tendancy to ping-pong a lot of requests if the code isn't very optimized - and caching everything solves that problem. Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read Dynamic Entity Objects. Once an app is accessed by code, a sophisticated internal system loads everything into the app-state which is then cached. Everything then uses this data, and save-operations usually do a partial update of the cache. This is one of the things that makes 2sxc and the EAV so amazingly fast. Usually you don't care much about the app-state, since you simply use the data provided by the current context. If you want to know more, check out the ToSic.Eav.Apps.AppState. History Introduced in 2sxc 5.0 Partial Updates introduced in 2sxc 9.14"
  },
  "basics/server/data-flow.html": {
    "href": "basics/server/data-flow.html",
    "title": "How Data Flows in the Server | 2sxc 19 for Dnn and Oqtane",
    "keywords": "How Data Flows in the Server you are here (click to zoom) - discover the stack .context-box-summary .process-all { visibility: visible; } 2sxc is simple to use, but to enable that, it's pretty sophisticated on the inside. Let's take a look at how data is accessed, cached, queried, maybe cached again, and provided to the output. Note All the data handling systems come from the EAV. This is then enhanced and customized by Sxc and Sxc.Dnn. Core Paradigms Rule #1: Data is Reactive As you'll soon see, the EAV performs a lot of automatic lookup and caching, but as a first rule, this happens Reactively, only when data is actually accessed. This is similar to how ReactiveX or NgRx work, just much simpler. Rule #2: Data is Read-Only Any data the code receives as IEntity objects is read-only. This allows for a much more robust data model and API which in a CMS environment is usually 99% read, 1% write. Rule #3: Data Always Comes from DataSources Inside the system everything is loosely coupled (think Depedency Injection). So anything requesting data will always use a DataSource provided by some magic, and then use what was given. Rule #4: Data is Managed and Cached per App Once data from an App was requested, the entire app is loaded and cached. Within an app a lot of data can be linked together using Content-Types, Relationships, Sub-Lists, Metadata and more. If we would lazy-load this on-demand from the storage system (SQL), it would result in a ping-pong of requests, which would be very inefficient. This unit of cache is called an AppState. Overall Flow When Creating Html Imagine that your custom Razor template in a Dnn module is initialized. Here's what happens: 1. Preparation 2sxc starts with the ModuleId as it's inside a Dnn Module. It will then create a Block for this InstanceId (which is the ModuleId). The Block internally will create a CmsBlock DataSource, pass in the InstanceId and then wait for data to pour in. The CmsBlock knows about Dnn, and will use the InstanceId to get the ModuleSettings in Dnn. This contains only 2 pieces of information: the AppId which it is visualizing, and a ContentBlockId which is the full configuration of the Content-Block which will be shown. The CmsBlock also knows if the user is an editor (which would result in draft-items being included). The CmsBlock DataSource will then ask the underlying EAV for this block configuration (stored as an Entity) which is then loaded from the Cache. When the configuration is found, the CmsBlock then knows what View will be used. The CmsBlock itself is a DataSource and is now configured to deliver the data which the view expects. Note The CmsBlock doesn't know about the internals of the cache, it just asks for it. The cache will auto-initialize the AppState if it hasn't been accessed before. Note The CmsBlock will also not load any data yet. It just knows what would be loaded, should it ever be accessed. Tip When you use views which don't have a content-type configured, then properties like Data, Content or Header will be null. But App.Data will still work. 2. Execution The Block is now ready. 2sxc now consults the View to find out which Engine to use (Razor or Token). It will now load this engine, give it the Block and wait for the resulting Html to be created. The engine loads the template and lets it do what it should. If the template has code accessing Data then the underlying source will retrieve the necessary data. If it's a normal content-view, then the items provided will be the ones which an editor has manually added, since they were referenced in the ContentBlock. If the view relies on a Query, then this query is built and will be waiting to execute if the data is accessed. If the code accesses App.Data then this data source will build up everything necessary so it just works. If the code accesses App.Query then the underlying system will prepare the Query as needed. Note All the data retrieving features like Data do not actually retrieve any data unless accessed. This also means that Content or Header won't use any CPU cycles unless accessed. The same goes for App.Data - nothing is processed unless it's accessed. Note The queries are only provided by the App for immediate use. They won't be built or executed unless they are actually read. Overall Flow when Creating WebAPIs This works just like the Html creation, except that we don't need an engine. The code which inherits from ApiController now works with the data as needed. The same lazy-execution rules apply: neither Data, Content, App.Data or App.Query use any CPU cycles, unless the data is actually pulled by reading it. Read Also Templates Rendering Engines like Token/Razor Content-Blocks Custom WebApi (which is also kind of a dynamic rendering engine)"
  },
  "basics/server/index.html": {
    "href": "basics/server/index.html",
    "title": "What Happens on the Server... | 2sxc 19 for Dnn and Oqtane",
    "keywords": "What Happens on the Server... you are here (click to zoom) - discover the stack .context-box-summary .server-all { visibility: visible; } You should get an idea of how the system works and all the things you can customize. This overview lets you see the essential parts of any App including the main Content. This is what web-systems do from a bird's-eyes perspective. This is what happens on the server: Awesomeize - this is where you tell the system how the output should look, what image sizes you want, how the HTML should be built etc. Prepare is a layer of data processing where the desired data is selected to be shown, filtered, sorted etc. By default this happens automatically, you don't have to do anything! But you can customize it anyhow you want. Your Data is the original material - probably created by an editor using the CMS UI or in advanced cases it's data coming from SQL, CSV or elsewhere. This data could also be combined from multiple sources. By default this just magically works, you don't have to do anything! Awesomeize / Customise you are here (click to zoom) - discover the stack .context-box-process .process-all { visibility: visible; } You may want to learn more about: Bundling / Optimizing Assets Image Resizing Create App Templates using Razor Create custom WebApi Controllers The Headless REST API Preparing Data Something must determine what data should be shown or worked on, which is what happens in the Prepare step. you are here (click to zoom) - discover the stack .context-box-prepare .prepare-all { visibility: visible; } \uD83D\uDC49 See Prepare Data for Templates and WebApi Understanding Data you are here (click to zoom) - discover the stack .context-box-data .data-all { visibility: visible; } \uD83D\uDC49 Data has it's own chapter in the docs Understanding Data..."
  },
  "basics/server/render/razor/index.html": {
    "href": "basics/server/render/razor/index.html",
    "title": "Razor Templates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor Templates you are here (click to zoom) - discover the stack .context-box-summary .process-razor { visibility: visible; } Token Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Note The View determines which template file is being loaded. How it Works Razor templates are files in the App Folder or a subfolder, beginning with an _ and ending with .cshtml. Here's a simple example from the Tutorial: @inherits Custom.Hybrid.Razor12 <h2>Hello World</h2> <div> Now is @DateTime.Now </div> \uD83D\uDC49 The technical details are explained in Razor Components / Templates Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. History Introduced in 2sxc 2.0"
  },
  "basics/server/render/tokens/index.html": {
    "href": "basics/server/render/tokens/index.html",
    "title": "Token Templates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Token Templates you are here (click to zoom) - discover the stack .context-box-summary .process-razor { visibility: visible; } Token Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Note The View determines which template file is being loaded. Tip Token templates are by far not as powerful as Razor Templates. We always recommend Razor. Example Template <h1>[Header:Title]</h1> <ul> <repeat> <li><a href=\"[Content:Link]\">[Content:Title]</a> [Content:Toolbar]</li> </repeat> </ul> How it Works Token templates use a Token Engine to generate Html. The convention uses placeholders like [Scope:Property] to put data into the Html. The template files usually reside inside app root folder or sub folder. These end with .html. Placeholders and code usually is marked with [...] like [Content:Name]. Internally the Token-Engine uses LookUps to find what can be shown. Tip Tokens are very limited, we strongly recommend to use Razor Templates templates instead. Read more about it in the Token Basics Content, Presentation and Toolbar Tokens [Content:PropertyName] like [Content:FirstName] [Content:Presentation:PropertyName] like [Content:Presentation:UseLightbox] [Content:Toolbar] to get a Toolbar for the Content-object with it's Presentation Token Toolbars only support the basic toolbar, not the newer TagToolbar. Read more about Toolbars. Header Tokens Note that in Token-templates the Header is called the ListContent for historical reasons, not Header like in Razor. [ListContent:PropertyName] like [ListContent:Title] [ListContent:Toolbar] for the toolbar [ListContent:Presentation:PropertyName] like [ListContent:Presentation:UseLightbox] Common LookUp Sources App Sources App - the current App, which can give you folders (to link JS files) ☢️\uD83E\uDE78 App:Settings - app settings ☢️\uD83E\uDE78 App:Resources - app resources, translated labels etc. ☢️\uD83E\uDE78 Web Server and System Sources Hybrid These work both on Dnn and Oqtane (2sxc 12+) [Query] ☢️\uD83E\uDE78 Web Server and System Sources QueryString - url parameters ☢️ Form - form post parameters ☢️ DateTime - current date/time information ☢️\uD83E\uDE78 CMS / Dnn Sources [Site] [Page] [Module] Portal - the current Dnn portal Tab - the current Dnn page Module - the current Dnn module User Information Sources User Membership User Profile Read more about LookUp Sources Repeaters / Lists Token templates have a trivial mechanism to loop through lists. Note that we strongly recommend you use Razor Templates instead. Here's how it works: <ol> <repeat repeat=\"Item in Data:Default\"> <li> [Item:Title] [Item:Toolbar] <br> <a href=\"?details=[Item:UrlKey]\">Details...</a> </li> </repeat> </ol> In a repeater the Toolbar can be added using [repeater-name:Toolbar]. Read also Views Templates Razor Templates Razor Tutorial History Introduced in 2sxc 1.0"
  },
  "basics/server/web-api.html": {
    "href": "basics/server/web-api.html",
    "title": "WebApi and Headless APIs on the Server | 2sxc 19 for Dnn and Oqtane",
    "keywords": "WebApi and Headless APIs on the Server you are here (click to zoom) - discover the stack .context-box-summary .process-apis { visibility: visible; } Every App has built-in WebAPIs for Headless use and you can create your own custom C# Controllers as well. Learn more about WebApi in general Headless WebAPIs in 2sxc 2sxc Custom C# Web APIs"
  },
  "basics/style-guide/index.html": {
    "href": "basics/style-guide/index.html",
    "title": "Style Guide for Dnn / 2sxc Solutions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Style Guide for Dnn / 2sxc Solutions Provide a clear, common guideline for Dnn and 2sxc development. The current version is the Style Guide 2020 - beta Style Vocabulary Each guideline describes either a good or bad practice, and all have a consistent presentation. The wording of each guideline indicates how strong the recommendation is. + Do is one that should always be followed. Always might be a bit too strong of a word. Guidelines that literally should always be followed are extremely rare. On the other hand, you need a really unusual case for breaking a Do guideline. testing + Consider Consider guidelines should generally be followed. If you fully understand the meaning behind the guideline and have a good reason to deviate, then do so. Please strive to be consistent. - Avoid indicates something you should almost never do. Code examples to avoid have an unmistakeable red header ? Why explains why this is recommended"
  },
  "basics/style-guide/style-guide-2020.html": {
    "href": "basics/style-guide/style-guide-2020.html",
    "title": "2sxc Style Guide - Best Practices v2020 DRAFT | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Style Guide - Best Practices v2020 DRAFT This Style Guide should help you create best-practice solutions with 2sxc. It has the version 2017 so that you can reference it as your standard, and if larger recommendation changes are made or if the standard grows, we'll create a new standard. This is the current version How to use This style guide is built according to our role-model the Angular 2 style guide by John Papa. This style guide presents our preferred conventions and, as importantly, explains why. Table Of Contents General Principles Solution Architecture File Structure Content Types Fields Using Items as Content or Data Working with Presentation and Demo-Data Templates in General Token Templates Razor Templates JavaScript Templates Querying Data General Principles Use Visual Studio Code Style 01.11 + Consider use Visual Studio Code and your preferred code editor ? Why it's the most agile, best aligned code-editor for modern solutions on the MS-stack it's great for editing all kinds of modern file formats incl. HTML, Razor, Markdown, etc. it's great for quickly opening a single file or an App-folder it offers full Git integration there is a 2sxc code-snippet extension for VS-Code Use Git to Version your Work - In Local Systems as Well Style 21.01 + Do always initialize your solution (both App or Content) into a local git regularly commit your work into your local git + Consider publish your work to a server git, like github or your company internal git-repo adding a readme.md for everybody who is new to your system ? Why if ever you want to undo something later on, you'll be glad you have older versions if ever you want to compare a deployed version with your dev-history, you'll be glad 2sxc supports git and github by placing everything in files, and also exporting the database into a git-versionable XML Use International Naming Strategy Style 11.21 + Do use english words for all content-types, fields, file-names, folder-names and variables ? Why easier to share both code and partial solutions consistent setup, as often other languages will be added and English is the best shared language fewer problems when writing code using English variable names and english property names avoid special characters/words of other languages in code-parts User Nice, Localized Naming for Editor UX Style 11.22 + Do provide localized (translated) names for everything the editor sees, to improve his user experience after creating the english-named items you can translate them into any other culture to improve the end-user experience use nice labels with spaces and more, making it easy to read apply this for all content-types in the main Content (as they are shown in normal drop-downs), view-names both in Content as well as Apps and field-names and help-texts ? Why great editor user experience fewer editor mistakes and frustrations Solution Architecture ...to do... File and Folder Structure LIFT Style xx.xx + Do structure the app such that you can Locate code quickly, Identify the code at a glance, keep the Flattest structure you can, and Try to be DRY. place a nice app-icon.png file containing the app-image and place it in the main folder make sure it is square and at least 200x200, ideally 500x500px in size ? Why LIFT Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. To confirm your intuition about a particular structure, ask: can I quickly open and start work in all of the related files for this feature? consistent with other style guides See also Locate, Identify, Flat and T-DRY of the Angular Style Guide. Provide an app-icon.png in each App folder Style xx.xx + Do create an icon for each app place a nice app-icon.png file containing the app-image and place it in the main folder make sure it is square and at least 200x200, ideally 500x500px in size ? Why In a future version, app-choice will also show an icon. Provide one today to be sure that it will look great. Place only Template-Files in the Main Folder Style xx.xx + Do place all templates and sub-templates in the main folder of the App or the Content place all non-template files in sub-folders ? Why This provides for a maximum overview when working on solutions It ensures the developer sees all views that exist Note: there are a few system files which will also reside in this folder, especially the app-icon.png. This of course will also be in this folder. Use src and dist folders Style xx.xx + Consider place all original assets incl. images, js, css into the src folder place all runtime files incl. copies of the images, compiled js/css into the dist folder ? Why Modern developement uses many source files and much fewer runtime files it's a big help to keep them clearly desingnated the src with dist structure has been very established in the web and JS community Structure the folders by Topic/Component Style xx.xx + Do structure your folders - especially in src - by topic containing all files of that topic, no matter what type place different file types (js/css) belonging to the same topic into the same folder - Avoid organizing your folders by data-type (js, images, etc.) ? Why consistently works both for large and simple solutions easier to maintain easier to grow into larger solutions consistent with recommendations of other style guides like the Angular Style-Guide Content-Types ...to do... Use Singular Naming for Content-Types Style 21.01 + Consider Use the singular form to name a content type, so BlogPost instead of BlogPosts, Tag instead of Tags The localized name can be different as your editors need it ? Why Content-Types describe the type of an item, not the collection of all items. So by definition it's not the table-of-Tags but the schema-of-a-tag-item. consistency is key, and it helps to always do things the same way Fields ...to do... Using Items as Content ...to do... Notes and Clarifications TOOD... Read also InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "docs-versions.html": {
    "href": "docs-versions.html",
    "title": "2sxc Docs Version Hub | 2sxc 19 for Dnn and Oqtane",
    "keywords": "// get url parameters version and path var urlParams = new URLSearchParams(window.location.search); var version = urlParams.get('version'); var path = urlParams.get('path'); 2sxc Docs Version Hub This page is a hub to all the documentation versions. It should help users find older/newer versions of the documentation. This page was created 2023-11 and is still WIP. As of now, there is only 1 documentation which is the latest, but future releases will start creating separated documentations. Tip You came from Version: document.write(version); Path: document.write(path); ...this path may or may not exist in other versions Latest Docs Docs Home document.write('<a target=\"_blank\" href=\"https://docs.2sxc.org' + path + '\">...with original path <code>' + path + '</code></a>'); Previous Versions Archive v16.09 Docs v16 Home document.write('<a target=\"_blank\" href=\"https://v16.docs.2sxc.org' + path + '\">...with original path <code>' + path + '</code></a>'); Older Versions as of now there are no older documentation versions Internal Notes / Information This is an experimental page WIP 2023-11 Goal is to have old versions of the documentation available and linked from here. Old versions must always link here using the short-link below. Shortlink: https://go.2sxc.org/docs-versions Expected url parameters: version and path"
  },
  "find.html": {
    "href": "find.html",
    "title": "Find and Redirect | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Find and Redirect This page will redirect you to the correct page based on an XREF documentation reference. Looking for: loading... Target is: loading target... Auto redirect in 1 second unless you press escape or XREF not found... redirect cancelled by user ⛔ Internal Notes / Information Goal is to redirect to a documentation XREF or Namespace. If we ever make bigger changes which change important XREFs, we would add manual redirect XREFs to the /xrefmap.yml. Shortlink: https://go.2sxc.org/find Url parameter: xref Example: https://go.2sxc.org/find?xref=ToSic.Eav.Data Test Links (for debugging only) Older shortlink current version of the docs: https://go.2sxc.org/xref17 Test this directly: ToSic.Sxc.Data Test this directly: ToSic.Sxc.Data.ITypedItem Test using redirect: https://go.2sxc.org/find?xref=ToSic.Eav.Data Test current version redirect: https://go.2sxc.org/xref17?xref=ToSic.Eav.Data Note: The /xref.html links are deprecated and should be removed in future updates. History Introduced ca. 2022 handling inbound links, using the go.2sxc.org/xref17 shortlink Improved 2025-02-15 with the nicer go.2sxc.org/find shortlink Improved 2025-02-15 with find.html; xref.html should be deprecated"
  },
  "guides/app-development/common-problems/index.html": {
    "href": "guides/app-development/common-problems/index.html",
    "title": "Common Problems in App Development | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Common Problems in App Development"
  },
  "guides/app-development/common-problems/no-demo-data/index.html": {
    "href": "guides/app-development/common-problems/no-demo-data/index.html",
    "title": "Common Problem: No Demo Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Common Problem: No Demo Data Sometimes you will see a message like this when adding a module to a page (v17.06+): Or for v16 and earlier: Or for v14 and earlier: This is because a view can be configured to get data in many ways. The message you see indicates that you configured a view to have own data so the system assumes that your Razor template will try to visualize the data. Now if the module was just added, it may not have any data yet to visualize. Since the configuration assumes own data it will only show something, if there is data available. This is to prevent the Razor from throwing errors when trying to access non-existing data. To correct this, you have two options: Add an item to the current module using the toolbar edit button. Add a Demo Item to the view configuration, so that there is always something to visualize. Shortlink: https://go.2sxc.org/no-demo-data"
  },
  "guides/app-theme/index.html": {
    "href": "guides/app-theme/index.html",
    "title": "App Theming / Styling / Design - Guide (\uD83C\uDF1F v17) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Theming / Styling / Design - Guide (\uD83C\uDF1F v17) 2sxc Apps can be themed / styled using any method you desire. This page will help you understand our recommendations and best practices, which we apply to the Apps we distribute. Conventions for 2024 using Bootstrap 5 As of now our preferred CSS framework is Bootstrap 5, which is migrating to CSS Variables. Our current convention is meant to be compatible with this. ➡️ See Styling Guide 2024 History Added 2023-12 Shortlink: https://go.2sxc.org/app-theme"
  },
  "guides/app-theme/styling-2024.html": {
    "href": "guides/app-theme/styling-2024.html",
    "title": "App Theming / Styling / Design - Guide v2024 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App Theming / Styling / Design - Guide v2024 As of now our preferred CSS framework is Bootstrap 5, which is migrating to CSS Variables. Our current convention is meant to be compatible with this. Goals of the 2024 Convention The convention tackles many use cases, such as: By default, all possible design parameters such as colors should be inherited from the site theme. for this to work, the site theme must also use Bootstrap 5 and CSS variables If the site theme doesn't use Bootstrap 5 or doesn't provide a value, the App should provide a fallback value. this is done by defining the CSS variable fallbacks in the App's theme.css file Simple customizations should be possible with just editing a text file and not require any compilation. this is done by defining the CSS variable fallbacks in the App's theme.css file Advanced customizations should be possible by editing the SCSS files and recompiling. this is done by modifying files in the styles folder and running webpack Folders and Files in the 2024 Convention Our concept has 3 locations: a theme folder which contains CSS files which don't need to compile - changes to this will take immediate effect a styles folder which contains the SCSS files - changes to this will require recompiling a dist folder which contains the compiled CSS and JS files - this is where the compiled files arrive Different folder depth depending on use of Editions In basic apps, the folders are all in the root folder, so you'll see something like this: dist styles theme In advanced Apps using editions, these folders can exist multiple times. For example apps using live/staging would have this setup: live dist styles theme staging dist styles theme Customize Look and Feel If the Site Theme adheres to the latest Bootstrap 5 conventions, then our Apps will automatically inherit the CSS variables from the theme. So in most cases, you won't need to adjust anything. Customize Look and Feel - Simple For this use case, locate the /theme/theme.css file and edit it. Changes you make should be visible immediately. This is an example of such a theme file, which adheres to Bootstrap 5 conventions: /* Bootstrap 5 uses CSS variables. You can use app-related variables in this file. The standard Bootstrap values are used as a fallback Check our Docs for more information: https://go.2sxc.org/app-theme */ #theme-page-main { --bs-primary: var(--bs-primary, #0060AC); --bs-secondary: var(--bs-secondary, #001D38); --bs-body-color: var(--bs-body-color, #222222); --bs-link-color: var(--bs-primary); } Tip This uses CSS-Variables, so if you don't understand this, better read up on it first. The default rules basically say to use the variable if it exists, and if not, use the fallback value. So for a brief primer --bs-primary is the name of the variable var(--bs-primary, #0060AC) is the value, which means \"use the value of --bs-primary if it exists, and if not, use #0060AC\" #0060AC is the fallback value, which is used if the variable doesn't exist so if the skin specifies this variable, it will simply be inherited, and if not, the fallback value will be used if you wish to manually set it, you can simplify to --bs-primary: #0060AC; since you don't need the logic Important If Dnn is configured to optimize the CSS, you may need to clear the cache to see the changes. If you don't know how to do this, google it :) - keywords client dependency management. Customize Look and Feel - Advanced For this use case, you need to edit the SCSS files in the /styles folder. Building it uses standard WebPack mechanisms, which you'll need to understand to use this. History Added v17.00 2023-12"
  },
  "guides/data-sources/index.html": {
    "href": "guides/data-sources/index.html",
    "title": "DataSources - Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSources - Guide This guide will help you understand and better use DataSources. Basics DataSources are either a source providing fresh data, or helpers which transform data. To learn the basics, you should: Watch the video DataSources in 2sxc Check out the List of all DataSource Objects Start playing with Visual Query Create Your Own 2sxc 16 makes creating your own DataSources much easier. To learn more, you should: Watch the video DataSources in 2sxc Look at live code in the DataSource Tutorials Continue with the Custom DataSource Guide Last update: 2023-06-05 Shortlink: https://go.2sxc.org/guide-ds"
  },
  "guides/hot-build/index.html": {
    "href": "guides/hot-build/index.html",
    "title": "HotBuild - AppCode - Guide (\uD83C\uDF1F v17) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "HotBuild - AppCode - Guide (\uD83C\uDF1F v17) 2sxc 17 introduces a major new feature HotBuild: Precompiled App Code. This guide will help you understand what this is, how it works, and how to use it. ➡️ Check out the HotBuild Introduction Blog Background The Original Problem In more sophisticated apps, you will often create code which is used in multiple places. This kind of code would be placed in separate C# files, like helper.cs and then used like this. // Get the helper - the helper object is dynamic var helper = GetCode(\"helper.cs\"); // Use the helper to get some info - the someInfo object is dynamic // Note that the compiler cannot know if helper has a method called GetDetailsFor var someInfo = helper.GetDetailsFor(something); // Get some value from the result (which is dynamic) // this results in isImage being dynamic (not bool, which you could assume) // the compiler also doesn't know if someInfo has a property called FileIsImage var isImage = someInfo.FileIsImage; As you can see, the code looks simple, but has a lot of possible traps which are hard to debug. The Way C# Would Like it In C# you would create a class - eg. public class Helper, and then use it like this: // Reference the namespace of the helper class @using AppCode; // Create an instance of the helper class - this is typed, NOT dynamic var helper = new Helper(); // Use the helper to get some info - the someInfo object is typed var someInfo = helper.GetDetailsFor(something); // Get some value from the result (which is typed) // this results in isImage being bool, just as expected var isImage = someInfo.FileIsImage; This all appears very obvious. The reason this didn't work before, is that our helper code is not compiled into a DLL. Because of this, the compiler would already die on @using AppCode because it doesn't know what that is. Hot App Code and Intellisense 2sxc 17 introduces a new feature called Hot App Code. It allows you to write code just like C# would like it. It also allows VS-Code to assist you with IntelliSense, but you must configure VS-Code separately. How To Use Hot App Code Rules All of the helper code must be placed in the folder /AppCode/ or in its sub folders. Sub folders are not supported yet. All of the helper code must be in a file with the extension .cs. All of the helper classes must be in the namespace AppCode or anything below it eg. AppCode.Logic. How It Works Internally 2sxc will setup a file-watcher for this folder. Whenever a file changes, it will be compiled into a DLL and loaded into some magic place. This uses the Roslyn compiler, the same compiler used by Visual Studio. Whenever a Razor or .cs file (outside of the App_Code folder) is compiled, it will also reference this magic place. Note that this magic hot DLL is only referenced if the Razor or C# has a using AppCode. Important Special Note for Dnn ☢️ Since this feature is still very new and we're still working on it, by default Razor is still compiled using the built in System.Web.Compilation.BuildManager which will only support C# 7.3. The trigger to use the latest Roslyn compiler looks for @using AppCode in the Razor file, or using AppCode in the C# file. This means that adding the using statement also activates the latest C# 8 Limitations As of now, only Typed Razor and Typed C# files (inheriting from RazorTyped or CodeTyped) can use the DLLs created by HotBuild App Code. Functionality / Features Takes everything in the /AppCode/**/*.cs folder and compiles it into a DLL. The DLL is loaded dynamically for C# files elsewhere and Razor so it can be used (see Dnn requirements above). Also takes everything in /[edition]/AppCode/**/*.cs and compiles it into separate DLLs. This allows you to have different editions of your app, each with different code. The DLLs are loaded dynamically for C# files / Razor within that /[edition] folder. This allows for Open-Heart-Surgery. Monitors the folders and files to recompile the DLLs on the fly. This means that you can edit the code, save it, and it will be recompiled and used immediately. Automatically invalidates dependently compiled Razor/C# so they too will be recompiled when used. Tips Classes created in the /AppCode/ folder should be in the namespace AppCode or anything below it. If you're using Dnn, you must add @using AppCode to the top of your Razor files to activate the new compiler. This will also activate C# 8.0. Your Razor can then simply use var helper = new YourClassName() You can also access other objects etc. with constants If a C# class in your AppCode inherits from CodeTyped it may want to access the Kit or MyContext. In this case, the class needs to get some context, which it gets automatically if you use var helper = GetService<YourService>(). Note that for this to work, your class needs no constructor or an empty constructor. Debugging Tip Any compiling / HotBuilding is logged to the insights. If problems appear, check that out. History Added v17.00 2023-12 Added support for sub folders in v17.02 Added support for editions in v17.02 Changed namespace from /ThisApp to /AppCode in v17.02 Shortlink: https://go.2sxc.org/hot-build"
  },
  "guides/index.html": {
    "href": "guides/index.html",
    "title": "2sxc Guides | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Guides Tip This section is still WIP It's meant to hold cross-topic guides, or link to guides which are in other sections."
  },
  "guides/vscode/index.html": {
    "href": "guides/vscode/index.html",
    "title": "Visual Studio Code - Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Visual Studio Code - Guide This guide will help you get VS Code Setup as best as possible for 2sxc development. Tip You'll often write code in your 2sxc Apps - either as C#/Razor or JavaScript. 2sxc is a very open system, so you can use any editor you like. For quick fixes and simple things, use the built-in editor, which is based on Monaco (VS Code Online). But for more sophisticated stuff we highly recommend VS Code. Important In 2024-05 the C# DevKit suddenly stopped working. We found a fix - pls update your app.sln to the newest sample below. Prepare VS Code for 2sxc VSCode is amazing right out of the box, but to really be productive, you need to do a few things: Install VS Code Install the C# DevKit extensions Configure each App with Intellisense (see below) Ignore the obj and .vs folders (see below) Check possible edge cases (see below) With these preparations, VS-Code is able to assist in basic C# code. It can't provide IntelliSense for 2sxc specific APIs yet, so for that, read on. Configure an App for Razor IntelliSense Apps are usually opened as a folder in VS-Code. The problem for IntelliSense is that it doesn't know which DLLs it should use. So you need to tell it. This is done by adding a .sln solution file and a .csproj project file. Tip Adding these files helps VSCode provide IntelliSense. But be aware that it can't help with dynamic code. To get the full benefit, use typed code. Add the following two files to the root of your app: Template for the /app.sln file Microsoft Visual Studio Solution File, Format Version 12.00 # Visual Studio Version 17 VisualStudioVersion = 17.5.002.0 Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"App\", \"app.csproj\", \"{9F7A078F-99D5-4EF4-8EC0-C6B920FE679C}\" EndProject # # Visual Studio .sln File for 2sxc App # This is necessary so that VS Code can perform intellisense in Razor # It also requires a csproj file to exist as well # # Read more and get help for issues on https://go.2sxc.org/vscode # # Addition 2024-05 # The following section is suddenly required by the C# DevKit # See https://github.com/microsoft/vscode-dotnettools/issues/1151 Global GlobalSection(SolutionConfigurationPlatforms) = preSolution Debug|Any CPU = Debug|Any CPU Release|Any CPU = Release|Any CPU EndGlobalSection GlobalSection(SolutionProperties) = preSolution HideSolutionNode = FALSE EndGlobalSection EndGlobal Template for the /app.csproj file <Project Sdk=\"Microsoft.NET.Sdk.Web\"> <!-- This file helps VS Code provide IntelliSense - see https://go.2sxc.org/vscode --> <!-- Template v2024-06-19. If you have issues, try getting a newer copy from the url above --> <!-- Specify the default Namespace for C# code in this specific App --> <PropertyGroup> <RootNamespace>AppCode</RootNamespace> </PropertyGroup> <!-- First: Detect if it's running in Dnn, Oqtane-Production or Oqtane-Dev --> <PropertyGroup> <RunningInDnn Condition=\"Exists('..\\..\\..\\..\\bin\\DotNetNuke.dll')\">true</RunningInDnn> <RunningInOqtane Condition=\"Exists('..\\..\\..\\Oqtane.Server.dll') Or Exists('..\\..\\..\\bin\\Debug\\net8.0\\Oqtane.Server.dll')\">true</RunningInOqtane> <OqtaneIsProd Condition=\"Exists('..\\..\\..\\Oqtane.Server.dll')\">true</OqtaneIsProd> <OqtaneIsDev Condition=\"Exists('..\\..\\..\\bin\\Debug\\net8.0\\Oqtane.Server.dll')\">true</OqtaneIsDev> </PropertyGroup> <!-- Settings for Dnn --> <PropertyGroup Condition=\"'$(RunningInDnn)' == 'true'\"> <!-- Specify .net 4.7.2, C# 8.0 and Bin folder for DNN - see https://go.2sxc.org/vscode --> <TargetFramework>net472</TargetFramework> <LangVersion>8.0</LangVersion> <PathBin>..\\..\\..\\..\\bin</PathBin> </PropertyGroup> <!-- Settings for Oqtane --> <PropertyGroup Condition=\"'$(RunningInOqtane)' == 'true'\"> <!-- Oqtane 5+ uses .net 8 and a very new C# language version --> <TargetFramework>net8.0</TargetFramework> <LangVersion>latest</LangVersion> <!-- PathBin Oqtane production, the bin folder is in the root, just up 3 folders, no bin-subfolder --> <PathBin Condition=\"'$(OqtaneIsProd)' == 'true'\">..\\..\\..</PathBin> <!-- PathBin Oqtane dev/debug, the bin folder is deeper down, up 3 folders and current build folder --> <PathBin Condition=\"'$(OqtaneIsDev)' == 'true'\">..\\..\\..\\bin\\Debug\\net8.0</PathBin> </PropertyGroup> <!-- IntelliSense: Load all DLLs which exist in Dnn and Oqtane from the bin folder --> <ItemGroup> <Reference Include=\"$(PathBin)\\ToSic.*.dll\" /> <Reference Include=\"$(PathBin)\\Connect.Koi.dll\" /> <!-- Common Microsoft DLLs --> <Reference Include=\"$(PathBin)\\System.Text.Json.dll\" /> <!-- Also load files in the Dependencies folder of the current App --> <Reference Include=\"Dependencies\\*.dll\" /> </ItemGroup> <!-- IntelliSense: DNN specific --> <ItemGroup Condition=\"'$(RunningInDnn)' == 'true'\"> <!-- also add System.Web and DotNetNuke DLLs - useful when creating APIs, but be aware that it may make your code less hybrid --> <Reference Include=\"$(PathBin)\\DotNetNuke.dll\" /> <Reference Include=\"$(PathBin)\\DotNetNuke.*.dll\" /> <Reference Include=\"$(PathBin)\\System.Web.Http.dll\" /> <Reference Include=\"$(PathBin)\\System.Web.WebPages.dll\" /> <!-- System.Web is not in the DNN folder but in the .net Framework installed on the server --> <Reference Include=\"System.Web\" /> <Reference Include=\"System.Net.Http\" /> </ItemGroup> <!-- Polymorphism - if have files with the same classes confuse IntelliSense - see https://go.2sxc.org/vscode --> <!-- Example: exclude /live as we're always working on /staging --> <ItemGroup> <None Remove=\"live\\**\" /> <Content Remove=\"live\\**\" /> <Compile Remove=\"live\\**\" /> <EmbeddedResource Remove=\"live\\**\" /> </ItemGroup> </Project> More About the .csproj File The following are some additional notes about the .csproj file, how it works and it's values. Detect Dnn or Oqtane At the top of the .csproj file, we detect if we're running in Dnn or Oqtane like this: <!-- First: Detect if it's running in Dnn, Oqtane-Production or Oqtane-Dev --> <PropertyGroup> <RunningInDnn Condition=\"Exists('..\\..\\..\\..\\bin\\DotNetNuke.dll')\">true</RunningInDnn> <RunningInOqtane Condition=\"Exists('..\\..\\..\\Oqtane.Server.dll') Or Exists('..\\..\\..\\bin\\Debug\\net8.0\\Oqtane.Server.dll')\">true</RunningInOqtane> <OqtaneIsProd Condition=\"Exists('..\\..\\..\\Oqtane.Server.dll')\">true</OqtaneIsProd> <OqtaneIsDev Condition=\"Exists('..\\..\\..\\bin\\Debug\\net8.0\\Oqtane.Server.dll')\">true</OqtaneIsDev> </PropertyGroup> This sets variables such as RunningInDnn and RunningInOqtane which you can use later in the file. You can see it in action in things such as: <!-- Settings for Dnn --> <PropertyGroup Condition=\"'$(RunningInDnn)' == 'true'\"> <!-- this is only applied, if the condition above is true --> <TargetFramework>net472</TargetFramework> </PropertyGroup> About PropertyGroup and ItemGroup In case you're not familiar with .csproj files, here's a quick overview: PropertyGroup is used to define variables which are used later in the file ItemGroup is used to define lists of items, like files, references, etc. Both of these can have conditions, so you can define different settings for different situations. Target Framework and C# Version The TargetFramework is the .net Framework you are targeting. The value like net472 or net48 are called target framework moniker or TFM. You can find a list of them on the Microsoft Docs. Recommended values: Dnn: net472 or net48 (officially, Dnn requires 4.7.2, but 4.8 is what is normally installed because of security) Oqtane: net8.0 (Oqtane 5+) The LangVersion is the C# version you are using. You can find a list of them on the Microsoft Docs. Recommended values: Dnn: 8.0 (Dnn 9.6.1+ using 2sxc 17 and Roslyn Compiler) Oqtane: latest or 12.0 (Oqtane 5+) PathBin The PathBin variable is used to specify the path where the DLLs are. This allows us to use the same rules for Dnn and Oqtane, just with a different path to start from. Here's what you should know: Dnn usually has the App files in /Portals/[portal]/2sxc/[app]/ so the DLLs relatively in ..\\..\\..\\..\\bin Oqtane has the App files in /2sxc/[site-id]/app/ but the DLLs are in different locations depending on Dev vs. Production builds in development built it places the DLLs in \\bin\\Debug\\net8.0 so the relative path is usually ..\\..\\..\\bin\\Debug\\net8.0 in production builds it places the DLLs in the root folder, so the relative path is usually ..\\..\\.. Ignoring Files for Polymorphism If you're working with Polymorphism then you have many of the same files, which confuses IntelliSense. For example, /live and /staging have the same files, and /bs3, /bs4 and /bs5 have the same files. So intellisense might find the same class in multiple places, and show warnings. To handle this, you should decide which is your primary folder, and then exclude the others. This is just an example to exclude /live as we're always working on /staging: <!-- Example: exclude /live as we're always working on /staging --> <ItemGroup> <None Remove=\"live\\**\" /> <Content Remove=\"live\\**\" /> <Compile Remove=\"live\\**\" /> <EmbeddedResource Remove=\"live\\**\" /> </ItemGroup> GitIgnore Temporary Folders Add these lines to your .gitignore file to prevent temporary files from being added to your repository: .vs/ obj/ bin/ Check for Edge Cases - DNN with .net 4.7.2 / 4.8 If you're using DNN with .net 4.7.2 or 4.8, you may have to do some extra work. We're still not 100% sure what this is, since our dev PCs are always setup with all kinds of build tools where it works. According to research by Accuraty you may need to follow the instructions as noted on the C# extension. The C# extension is auto-installed by the Dev-Kit, but there is this (quoted): Note Note: If working on a solution that requires versions prior to .NET 6 or non-solution based projects, install a .NET Framework runtime and MSBuild tooling. Set omnisharp.useModernNet to false and set dotnet.server.useOmnisharp to true Uninstall or disable C# Dev Kit we're not sure if this is correct any more! Windows: .NET Framework along with MSBuild Tools MacOS/Linux: Mono with MSBuild According to our current understanding you don't need to do this is you have Visual Studio 2022 installed. We assume that already includes all the bits which VS Code needs as well. We haven't been able to verify or simplify this, but if you're having trouble, do read the blog post by Accuraty as well. Warnings when Using IntelliSense Warning IntelliSense can show you internal APIs which will change over time. IntelliSense is an amazing productivity boost, but you should avoid using internal APIs. To make this unlikely, we spent a LOT of time to clearly mark internal stuff. Avoid the following: Almost everything in the ToSic.Eav.* namespace is usually internal, so avoid using it Exception: ToSic.Eav.DataSource and ToSic.Eav.DataSources are really public Anything in a *.Internal namespace Anything in a *.Integration namespace Anything in a *.Backend namespace Anything in a *.Sys namespace Anything marked with [Obsolete] Anything marked with [EditorBrowsable(EditorBrowsableState.Never)] - IntelliSense will not show these APIs Properties beginning with an underscore, eg _Something Known Issues when C# IntelliSense is not Working Tip Here we try to collect known issues and solutions. A razor file has the same name as a C# class in the AppCode Folder This will confuse the IntelliSense, since the Razor file will magically be seen as a class with the same name. Solution: Rename the Razor file to something else. Configure an App for JavaScript IntelliSense TODO: this is not yet documented Other Guides Very helpful guide by Accuraty History Added v16.07 2023-10 2024-06-19 - Added more details about the .csproj file incl. date-version and correct DNN System.Net.Http reference Shortlink: https://go.2sxc.org/vscode"
  },
  "guides/wysiwyg/index.html": {
    "href": "guides/wysiwyg/index.html",
    "title": "Wysiwyg - Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Wysiwyg - Guide This guide will help you understand how to use the Wysiwyg editor and output it in 2sxc. What is Wysiwyg? 2sxc has various fields and input types. String fields can have a WYSIWYG input type. When content is edited this way, it will be stored as a string containing HTML. Types of Wysiwyg As of v15.0x there are two core types of Wysiwyg content. The main difference is how the edit UI provides special features and adds styling to the content. Standard wysiwyg (the only option before v15) In standard mode the editor is limited in what he/she can do, and styling (eg. image size or alignment) is applied directly to the HTML as style attributes. Since the HTML contains everything, you simply have to output it as raw HTML. Use @Html.Raw(item.FieldName) to output it. Text wysiwyg (new v15) In text mode the editor is limited in what he/she can do, for example (WIP) they can't add images Since the HTML contains everything, you simply have to output it as raw HTML. Use @Html.Raw(item.FieldName) to output it. Rich wysiwyg (new in v15) In rich mode the editor can do more, and styling is applied as CSS classes. An important difference is that images are not inside p tags, but always outside of them. Since the HTML only specifies classes, these classes must be defined in your CSS to have an effect. Use @Cms.Show(item.Field(\"FieldName\")) to output it, which also ensures that the default CSS is added to the page. You can set more parameters on Show(...) for finer control. Note As we'll improve the features, the differences in the editor will become more apparent. We plan to also introduce lightweight Text modes which prevent image uploading and more. TODO: how to select these modes Rich Wysiwyg Classes The following should explain the various features in Rich mode so you have an idea of their purpose and how they are applied. When using the @Cms.Show(...) method, it will create a wrapper with a wysiwyg classes, so it will look ca. like this: ... <div class='wysiwyg-container'> ... <img class='wysiwyg-left wysiwyg-50' src='...'> <hr class='wysiwyg-splitter wysiwyg-spacer-s'> <img class='wysiwyg-right wysiwyg-33' src='...'> </div> Tip You can of course specify a different tag than div and also change other defaults. The CSS that is automatically added will do some magic: the main wysiwyg-container will receive a container-type of inline-size - see mdn docs Image Alignment todo Classes wysiwyg-left wysiwyg-right wysiwyg-center In the standard implementation, alignments apply to large, desktop/ipad-sized containers. This means that if final HTML is shown on a wide div, the alignments will be applied. However, if the final HTML is shown in a narrow div, the alignment will be ignored. Your skin or module CSS can override this behavior - see below. Image Size Sizes in rich mode are meant to be responsive, so they are not absolute pixel sizes, but relative sizes. The ratios like 33 (1 of 3) are what desktop users should see, and the built-in CSS will adjust the size for mobile devices. Classes wysiwyg-100 - full width wysiwyg-50 - half width wysiwyg-33 - 1/3 width wysiwyg-66 - 2/3 width wysiwyg-25 - 1/4 width wysiwyg-75 - 3/4 width In the standard implementation, alignments apply to large, desktop/ipad-sized containers. This means that if final HTML is shown on a wide div, the alignments will be applied. However, if the final HTML is shown in a narrow div, the alignment will be ignored. Splitters and Spacers Splitters break the page into sections, so that the content following a splitter is freshly aligned. This is important to ensure that aligned content doesn't get stacked, but starts anew below the previous content. Splitters are implemented as <hr> tags with special CSS classes (see below). Spacers are splitters with additional CSS classes which determine the height of the gap. This allows the editor to add standardized space between content. Classes wysiwyg-splitter wysiwyg-spacer-0 wysiwyg-spacer-s wysiwyg-spacer-m wysiwyg-spacer-l What Cms.Show does todo: link to Cms..."
  },
  "index.html": {
    "href": "index.html",
    "title": "2sxc and EAV Docs v19.03.05 LTS | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc and EAV Docs v19.03.05 LTS This is the technical documentation for 2sxc and it's parts such as the EAV system. \uD83D\uDCA1 If you're new to 2sxc, best start with 2sxc.org. 2sxc turns Dnn & Oqtane into a CMS Tip 2sxc is a CMS- and Meta-Plugin for Dnn ☢️ and Oqtane \uD83E\uDE78. In many ways it's a lot like Elementor for WordPress. It makes content editing fun and easy, while giving the designer full control. So it's an open-source Enterprise Content Management System The designer and developer can define fields, layout, relationships and more The editor can then create pages, add content, manage images and more without breaking the design 2sxc is used to provide web-site-builder functionality. It has a simple Content mode where users just add images, designed text/image blocks, links etc. Then there's the sophisticated App mode, where users add standalone functional apps like blogs, galleries and more. Most apps are on GitHub and can be downloaded from the app-catalog. 2sxc is a Low-Code Application Framework & CMF 2sxc is also a Low-Code Application Framework and CMF like Drupal. So you can extend on existing building blocks to create new functionality, or you can build your own from scratch. It's a dynamic data system, where you can define your own data-structures It's a very cool EAV (Entity-Attribute-Value) data-management system It's extensible DataSource system lets you add custom logic and integrate anything It's programmable forms allow you to customize the editing experience It's a headless REST API. It's 1000x more than you think. Where to Start If you are just getting started, then this is probably not where you should be looking. Focus first on: The Basics which tells you about Architecture, Data Models and more Content on 2sxc.org like the learn section Apps on 2sxc Catalog which contains many ready-to-use apps like blogs and news, as well as tutorials The Dnn Tutorials on 2sxc.org \uD83D\uDC49 With this knowledge, you can already create amazing stuff. 2sxc is very flexible and can be used for almost any kind of content-management needs or app development needs. Because of this, different documentations help you work with different things. Here's the overview: Many solutions and recommendations are found in the Blog on 2sxc.org Many demo, template and tutorial Apps are found in the App Catalog on 2sxc.org 2sxc / EAV Roadmap Pending Documentation Work Next to document Finish metadata documentation Create in the APIs (simplify APIs first) Create good sample of Page-Metadata App These topics are insufficiently documented... URL and REST API for changing data Future topics, lower priority 2. React and 2sxc (todo) etc. To Doc about Docs All kinds of customizations How Illustrations work (SVGs, CSS, JS etc.) How version switcher works How TOC customizations work icons in .net API Other Cool Tools & Resources 2sxc Toolbar Builder by 10Pound Gorilla Gorillafied Blog Accu4.com - blog, experiments, tutorials"
  },
  "js-code/2sxc-api/2sxc.cms.html": {
    "href": "js-code/2sxc-api/2sxc.cms.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcGlobalCms"
  },
  "js-code/2sxc-api/2sxc.env.html": {
    "href": "js-code/2sxc-api/2sxc.env.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcGlobalEnvironment"
  },
  "js-code/2sxc-api/2sxc.html": {
    "href": "js-code/2sxc-api/2sxc.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Introduction to the 2sxc JavaScript APIs"
  },
  "js-code/2sxc-api/2sxc.http.html": {
    "href": "js-code/2sxc-api/2sxc.http.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcGlobalHttp"
  },
  "js-code/2sxc-api/2sxc/2sxc.cms.html": {
    "href": "js-code/2sxc-api/2sxc/2sxc.cms.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcGlobalCms"
  },
  "js-code/2sxc-api/2sxc/2sxc.env.html": {
    "href": "js-code/2sxc-api/2sxc/2sxc.env.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcGlobalEnvironment"
  },
  "js-code/2sxc-api/2sxc/2sxc.http.html": {
    "href": "js-code/2sxc-api/2sxc/2sxc.http.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcGlobalHttp"
  },
  "js-code/2sxc-api/2sxc/index.html": {
    "href": "js-code/2sxc-api/2sxc/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Introduction to the 2sxc JavaScript APIs"
  },
  "js-code/2sxc-api/2sxc/obsolete/2sxc.cms-v9.html": {
    "href": "js-code/2sxc-api/2sxc/obsolete/2sxc.cms-v9.html",
    "title": "The OLD $2sxc.cms.run(...) API v9.30 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "The OLD $2sxc.cms.run(...) API v9.30 Warning This is documentation for an old feature. You should use the new one instead How to use (v9.30) Before you start, ensure you have the necessary JS scripts loaded. See Activate 2sxc JavaScript APIs on a Page. Simple example: <script> // simple function to run the command and handle the returned promise function addProject(tag) { $2sxc.cms.run(tag, \"new\", { contentType: \"Project\"}) .then(function () { alert(\"Thanks - we'll review your entry and publish it.\") }); } </script> <span onclick='window.addProject(this)'> add your project </span> the first parameter is an HTML tag in the DOM, which is used to look up the context automatically (see edit-context) the second parameter is the verb for the cms-command to run the third parameter is additional parameters for that command Demo App and further links Tutorial app for Public Forms Blog Recipe for using Public Forms with 2sxc History Introduced in 2sxc 09.30 Made obsolete with new RunParams in 2sxc 12.10 to support registering workflows - see SxcGlobalCms"
  },
  "js-code/2sxc-api/basics/activate.html": {
    "href": "js-code/2sxc-api/basics/activate.html",
    "title": "Activate 2sxc JavaScript APIs on a Page | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Activate 2sxc JavaScript APIs on a Page you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc, .context-box-summary .edit-custom { visibility: visible; } If you are logged in as SiteAdmin or SystemAdmin, all the JS APIs are already loaded. So if you only want to customize the edit experience for admins, you can skip this step. If you need to use the JS APIs on public pages, you must first activate them. Activate the JS APIs in v13+ In 2sxc v14 or newer you would do this: @inherits Custom.Hybrid.Razor14 @{ // Tell the page that we need the 2sxc Js APIs Kit.Page.Activate(\"2sxc.JsCore\"); } This will load and activate the standard JavaScript APIs and let you get data using the Data Service and the Query Service. If your public / anonymous users also need CMS features (such as open the edit dialog), you would replace the \"2sxc.JsCore\" with \"2sxc.JsCms\". To even create visible toolbars (which requires some CSS) use \"2sxc.Toolbars\". Read more about activating page features here. Activate JS APIs in v9.30+ Since v9.30, you can activate the JS APIs using the Razor @Edit.Enable(...) function. Warning Avoid this if possible, as we plan to phase it out in the next few years. <div> @Edit.Enable(js: true) </div> You can also enable more features, like these: <div> @Edit.Enable(api: true, forms: true, context: true, autoToolbar: false) </div> Activate the JS APIs in Older Versions Before 2sxc 9.30 there was no real API to do this. You had to use a <script> tag like this: Warning Avoid this if possible, as we plan to phase it out in the next few years. How Things Work Internally Each template that needs the $2sxc-file when not logged in must include it, to be sure it's always there when needed. Note that we've included various features to prevent duplicate execution. if the file is included multiple times, it will only execute once if the file is included minified and unminified, it too will only be executed once if you need to debug the JS for whatever reason with F12 in the browser a sourcemap is included Note that the only global variable on window created is the $2sxc. History Added the script method ca. v4 Added the Edit.Enable v9.30 Replaced Edit.Enable(js:true) with the new IPageService.Activate(\"2sxc.JsCore\") in v13.0"
  },
  "js-code/2sxc-api/basics/get-sxc.html": {
    "href": "js-code/2sxc-api/basics/get-sxc.html",
    "title": "Get the Current Sxc Object | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Get the Current Sxc Object you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } This assumes you have the JS API page features enabled, either because you are logged in as Admin, or because you activated them. Get the Sxc using $2sxc There are four get-signatures: With an HTML Tag: $2sxc(tag: HTMLElement) - recommended With a Module ID: $2sxc(moduleId: number) - oldest way, very common Using a Context: $2sxc(context: ContextIdentifier) - new in v11.11 $2sxc(moduleId, contentBlockId) - a special version for internal use only For demos it depends a bit on your scenario. Vanilla JavaScript or TypeScript Inline JavaScript - easiest to use External JavaScript External JavaScript with turnOn - recommended! \uD83D\uDE80 External JavaScript Framework such as Angular, Vue or React Get Sxc with Inline JavaScript This is the easiest to use, but we suggest you try to avoid it, because of CSP-Hardening. Get with an HTML Tag (Inline) We recommend the HTMLElement syntax. With this syntax, $2sxc will go up through the DOM-tree and find the module it's in (or the content-block). It will then auto-configure itself. What's nice about this is that this method works without any server-side support (which you need for the other methods). Here's a simple example: <a onclick='$2sxc(this).cms.run(\"layout\")'>layout</a> In the above example, the HTMLElement is given by the current click, which puts the current <a> node in the this object. Here's a JS example: var x = document.getElementById(\"myApp\"); // get a dom element inside this 2sxc app var sxc1 = $2sxc(x); // use it // the same thing in 1 line var sxc2 = $2sxc(document.getElementById(\"myApp\")); With jQuery (not recommended, jQuery should be seen as end-of-life): // the same thing in 1 line var sxc = $2sxc($(\"#myApp\")[0]); Note that the simple example above assumes that there is only one item on the page, but there can often be more. In that scenario you'll need to loop or something. Get with a Module ID (Inline) In this method, you need to get the ModuleId from somewhere, usually provided by the server-side template. In a Token-Template you would use [Module:ModuleId] and in a Razor-Template it's @Dnn.Module.ModuleID (large \"ID\"). The same code in Razor for Dnn and Oqtane would be: $(function () { var sxc = $2sxc(@CmsContext.Module.Id); alert(\"edit mode: \" + sxc.isEditMode()); }) The same code in Tokens would be: $(function () { var sxc = $2sxc([Module:ModuleId]); alert(\"edit mode: \" + sxc.isEditMode()); }) You can also find an example of finding all of our nodes and initializing them in the TimeLineJS App. If you're interested, here's the js-initializer. Get Sxc with External JavaScript When using external vanilla JavaScript, you will need: either a strong naming convention - such as making sure your app always has a tag with id myAmazingApp or pass it a tag or ID to get started. If you use a strong naming convention, this is the same as the inline-JavaScript-method. // the same thing in 1 line var sxc = $2sxc(document.getElementById(\"myAmazingApp\")); If you want to pass in the name or something, then the external file would look something like this: function startWithId(moduleId) { var sxc = $2sxc(moduleId); alert(\"edit mode: \" + sxc.isEditMode()); } function alertFromTag(tag) { var sxc = $2sxc(tag); alert(\"edit mode: \" + sxc.isEditMode()); } And the page would contain code such as: <!-- Run a script--> <script> startWithId(@CmsContext.Module.Id); </script> <!-- use the this-dom element --> <a onclick='alertFromTag(this)'>show edit mode</a> Get Sxc with External JavaScript and turnOn turnOn is a special helper to boot your JavaScript. It's especially useful because you cannot always rely on the loading order / speed of scripts, on scripts which may depend on other libraries to run as well. Read more about turnOn. Use Module ID with turnOn Razor File - example taken from the Counter App: @inherits Custom.Hybrid.Razor14 @using ToSic.Sxc.Services; @{ // Basics / Preparation Kit.Page.Activate(\"turnOn\"); var domId = \"app-counter2-js-\" + CmsContext.Module.Id; } <div id=\"@domId\" data-count=\"@fact.Number\"> <!-- more --> </div> @* include the JS, at the bottom of the page *@ <script src=\"@App.Path/scripts.js\" @pageSvc.AssetAttributes(position: \"bottom\") ></script> <turnOn turn-on='{ \"run\": \"window.initMyApp()\", \"data\": { \"domId\": \"@domId\" }}'></turnOn> JavaScript / TypeScript File: function initMyApp({ domId } : { domId: string }) { var sxc = $2sxc(document.getElementById(domId)); // ... } Use Tag with turnOn This is almost the same as with the Module ID, but the tag is passed in automatically. Note that this requires v14.02 with turnOn v0.1.2. JavaScript / TypeScript File: function initMyApp(data: any, context: any) { var sxc = $2sxc(document.getElementById(context.tag)); // ... } Technical Features Explained Everything is Cached We optimized for just about every thinkable situation, so the $2sxc will build a controller-object for a module, but following calls to it will use the cached information. Example: var sxc = $2sxc(42); // initial call, will build controller for Module 42 var sxc2 = $2sxc(42); // second call, will use cached controller var sxc3 = $2sxc(domNodeInsideTheModule42); // another call, will also used cached controller History Introduced in 2sxc 04.00 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11"
  },
  "js-code/2sxc-api/basics/how-it-works.html": {
    "href": "js-code/2sxc-api/basics/how-it-works.html",
    "title": "How $2sxc and Sxc Actually Work | 2sxc 19 for Dnn and Oqtane",
    "keywords": "How $2sxc and Sxc Actually Work you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } This is more internal information in case you're curious. Or if things don't behave as expected. Environment and Context Data Needed by $2sxc to Work The $2sxc object needs a few pieces of information to work properly, which are usually stored in two locations: In a page-header Meta tag with the Id _jsApi In JSON in the HTML where the Module start So the Module-DIV-Tag is actually enhanced with additional pieces of information. This structure is open and easy to read, but the structure can change from time to time, so don't read/rely on that JSON, use the $2sxc to access any information. There are even situations where additional context data in inserted into the HTML rendered by your template. This has to do with inner-content (see next section) and the same \"don't rely on the JSON\" applies. How Page and Portal Information is Found This is for information the $2sxc needs for WebApi calls. This here applies to 2sxc 10.25+ It first checks the html-head section for a meta tag with the name _jsApi. If this exists, it contains a JSON with everything it needs. If that doesn't exist it will retry 3x times (in case the head wasn't ready yet) and otherwise falls back to the old mechanism. The old mechanism (Dnn only) is to ask Dnn and the ServicesFramework for this information. This is always available when you're logged on as an editor, but it's only on the page for anonymous users IF ...you are either using the old mechanisms ...or your Razor activated it on explicitly How Module-Level Information is found When you use $2sxc(moduleId) it scans the DOM for the <div> tag that contains the module with that ID When you use $2sxc(htmlNode) it starts from that node and scans all parents till it finds the <div> which is the module wrapper Once it finds that, it knows what module it's for and configures itself Module-Instances and Content-Blocks This is a very advanced topic, so if you're new - just skip this. Also if you use content-blocks you don't need to understand this, it's just included for completeness. A 2sxc-module can contain many 2sxc-content-blocks since version 8.4 because an item could have independent, inner content-blocks. Because of this, the controller may need an additional parameter, so instead of $2sxc(moduleId) it can also use $2sxc(moduleId, contentBlockId). As mentioned above, you never need to work with this, it's included for completeness. Since the now recommended method to initialized $2sxc is not with the moduleId but with a DOM-node, that call will automatically resolve everything correctly. Everything is Cached We optimized for just about every thinkable situation, so the $2sxc will build a controller-object for a module, but following calls to it will use the cached information. Example: var sxc = $2sxc(42); // initial call, will build controller for Module 42 var sxc2 = $2sxc(42); // second call, will use cached controller var sxc3 = $2sxc(domNodeInsideTheModule42); // another call, will also used cached controller History Introduced in 2sxc 04.00 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11"
  },
  "js-code/2sxc-api/cms/cms.command-workflow.html": {
    "href": "js-code/2sxc-api/cms/cms.command-workflow.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to CMS Command Workflows for Commands and Toolbars"
  },
  "js-code/2sxc-api/cms/cms.run.html": {
    "href": "js-code/2sxc-api/cms/cms.run.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to CMS Commands in JavaScript"
  },
  "js-code/2sxc-api/index.html": {
    "href": "js-code/2sxc-api/index.html",
    "title": "Introduction to the 2sxc JavaScript APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Introduction to the 2sxc JavaScript APIs you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc, .context-box-summary .edit-custom { visibility: visible; } The JS APIs let you do many things such as: get or create data of the current App from the headless REST APIs or the VisualQuery call custom backend WebAPI controllers provide a custom edit experience This is very simple, but you need to know some basics. Step 1: Activate the JS APIs If you are logged in as SiteAdmin or SystemAdmin, all the JS APIs are already loaded. So if you only want to customize the edit experience for admins, you can skip this step. If you need to use the JS APIs on public pages, you must first activate them. In 2sxc v14 or newer you would do this: @inherits Custom.Hybrid.Razor14 @{ // Tell the page that we need the 2sxc Js APIs Kit.Page.Activate(\"2sxc.JsCore\"); } This will load and activate the standard JavaScript APIs and let you get data using the Data Service and the Query Service. If your public / anonymous users also need CMS features (such as open the edit dialog), you would replace the \"2sxc.JsCore\" with \"2sxc.JsCms\". To even create visible toolbars (which requires some CSS) use \"2sxc.Toolbars\". Read more about activating page features here. For older versions consult the activate instructions. Step 2: Get the Current Sxc Object Once you've activated the JS APIs, there will be a window.$2sxc(...) function/object. It's primary purpose is to get you an Sxc object. Tip A page can contain many 2sxc Apps and Modules. For your code to work easily, it needs to get an Sxc object for the current App. There are a few ways to get the current Sxc object: Using the module ID with inline code: const sxc = $2sxc(17); Using the module ID with inline code and Razor: const sxc = $2sxc(@CmsContext.Module.Id); Using any html tag in the DOM: <a onclick='alert($2sxc(this))'>layout</a> There are more ways to do this - see How to get Sxc. Step 3: Use the Sxc to get Data or Perform CMS Actions Once you have the Sxc object of the current App, you can do all kinds of things. Use the .data(...) to get or create data on the current App Use the .query(...) to get data from a Query Use the .webApi.fetchJson(...) to get data from a WebAPI Use the .cms.run(...) to run CMS commands"
  },
  "js-code/2sxc-api/sxc.data.html": {
    "href": "js-code/2sxc-api/sxc.data.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcData"
  },
  "js-code/2sxc-api/sxc.html": {
    "href": "js-code/2sxc-api/sxc.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to The App / Module Sxc Instance"
  },
  "js-code/2sxc-api/sxc.manage.html": {
    "href": "js-code/2sxc-api/sxc.manage.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Manage Everything With the manage Instance"
  },
  "js-code/2sxc-api/sxc.query.html": {
    "href": "js-code/2sxc-api/sxc.query.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcQuery"
  },
  "js-code/2sxc-api/sxc.webapi-bare-metal.html": {
    "href": "js-code/2sxc-api/sxc.webapi-bare-metal.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to The WebApi Helpers on the Sxc Controller - Bare Metal"
  },
  "js-code/2sxc-api/sxc.webapi-fetch.html": {
    "href": "js-code/2sxc-api/sxc.webapi-fetch.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to The WebApi Helpers on the Sxc Controller using Fetch"
  },
  "js-code/2sxc-api/sxc.webapi-jquery.html": {
    "href": "js-code/2sxc-api/sxc.webapi-jquery.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to ZzzSxcWebApiDeprecated"
  },
  "js-code/2sxc-api/sxc.webapi.html": {
    "href": "js-code/2sxc-api/sxc.webapi.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcWebApi"
  },
  "js-code/2sxc-api/sxc/_data-history.html": {
    "href": "js-code/2sxc-api/sxc/_data-history.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 in 2sxc 4.0 there was also a data object but it had a very different purpose and rarely used 2sxc 13 created a new data(...) function based on the new fetch as a data service 2sxc 13 introduced query(...)"
  },
  "js-code/2sxc-api/sxc/_webapi-history.html": {
    "href": "js-code/2sxc-api/sxc/_webapi-history.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 - see old docs fetchRaw(), fetchJson(), url(), headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded url(...) enhanced with parameters object in v12.11 fetchRaw(...) created to fix difficult naming in 12.10; fetch(...) is now deprecated and will stop working some day fetchRaw, fetchJson, sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "js-code/2sxc-api/sxc/index.html": {
    "href": "js-code/2sxc-api/sxc/index.html",
    "title": "The App / Module Sxc Instance | 2sxc 19 for Dnn and Oqtane",
    "keywords": "The App / Module Sxc Instance you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The module-specific sxc-instance is the core JavaScript object helping you in these cases: if you want full control over the edit-experience with custom buttons etc. when you want to use view-data as an asyc-JS call if you wish to work with WebAPI REST calls - of your own App-WebApi, 2sxc-WebApi or Dnn-WebApi How to use First you must ensure that you have the $2sxc global on your page, which will get you a module-specific sxc. Here's a simple example (assuming you have the $2sxc global): <a onclick=\"var sxc = $2sxc(this); alert(sxc.isEditMode())\"> click me </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) global, based on the current context this how to ask if we're in edit-mode Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); How to Get the Current Context's sxc Instance Before you continue, make sure you know how to resolve/get your sxc, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Global docs. The API of an Module sxc Instance \uD83D\uDCD6 Sxc Common Tasks Work with the JSON Data of the Current Module \uD83D\uDCD6 In v.13+ you should should use the Data Service Work with REST Api to Read/Write Content-Items / Data \uD83D\uDCD6 In v.13+ you should should use the Data Service In older versions, use the Sxc WebApi Use App-Queries with $2sxc \uD83D\uDCD6 In v.13+ you should should use the Query Service objects. In older versions, use the Sxc WebApi Work with Custom C# App WebAPIs \uD83D\uDCD6 Read about it in the Sxc WebApi page. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs History Introduced in 2sxc 04.00 Enhanced with SxcData and SxcQuery in 2sxc 13.00"
  },
  "js-code/2sxc-api/sxc/obsolete/sxc.manage.html": {
    "href": "js-code/2sxc-api/sxc/obsolete/sxc.manage.html",
    "title": "Manage Everything With the manage Instance | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Manage Everything With the manage Instance Warning This is obsolete code and will stop working soon. Please use newer APIs instead like .cms.run(...) you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The manage object helps you manage content, allowing you to run(...) commands or to get buttons or toolbars. How to use Each content-block (usually a Dnn-Module) has it's own 2sxc-instance, which also gives you a prepared manage-object to work with. Here's an example <a onclick='$2sxc(this).manage.run(\"layout\")'>layout</a> this click-event will look up the 2sxc-instance using $2sxc(this), then use the manage-object provided by this to then run the layout command. The layout command opens the change-template dialog. Here's an example to generate a toolbar from code: <p class=\"sc-element\"> mouse over this to see the js toolbar generated by the groups of buttons <toolbarsGroups></toolbarsGroups> </p> <script> var toolbarsGroups = { groups: [ { buttons: \"layout,more\"}, { buttons: \"app,zone,more\" } ] }; $(function(){ $(\"toolbarsGroups\").each(function(index, element){ var sxc = $2sxc(element); var toolbar = sxc.manage.getToolbar(toolbarsGroups); $(element).replaceWith(toolbar); }); }); </script> The example above has a function which will look for all <toolbarsGroups> tags and replace them with the HTML provided by manage.getToolbar(...). How it works Basically the manage-property only exists when the user has edit permissions, as 2sxc will automatically include the necessary JS in the page. So if the user doesn't have edit-rights, the .manage property will be undefined. If it does exist, it can be used to do perform these kinds of actions. Properties and Methods We try to keep APIs very light, so all the internal properties/objects are not documented and should not be used. These properties and methods can be treated as stable: void .run(...) - used to run a command string .getButton(...) - used to generate HTML for a single button (which when pressed, runs a command) - see buttons and toolbars string .getToolbar(...) - used to generate HTML for a toolbar (with buttons, which run commands) - see buttons and toolbars Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Officially released & documented for use in 2sxc v08.06"
  },
  "js-code/2sxc-api/sxc/sxc.cms.html": {
    "href": "js-code/2sxc-api/sxc/sxc.cms.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcCms"
  },
  "js-code/2sxc-api/sxc/sxc.data.html": {
    "href": "js-code/2sxc-api/sxc/sxc.data.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcData"
  },
  "js-code/2sxc-api/sxc/sxc.query.html": {
    "href": "js-code/2sxc-api/sxc/sxc.query.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcQuery"
  },
  "js-code/2sxc-api/sxc/sxc.webapi-bare-metal.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi-bare-metal.html",
    "title": "The WebApi Helpers on the Sxc Controller - Bare Metal | 2sxc 19 for Dnn and Oqtane",
    "keywords": "The WebApi Helpers on the Sxc Controller - Bare Metal you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } In most cases you will want to use the new fetch APIs in 2sxc 12.10+. But there are cases where you want to create your own calls using Axios, jQuery, SuperAgent, Angular HttpClient or whatever API system you want. In these cases, you just need some help to... Get the correct URL for the endpoint Probably get all the headers you need for the security tokens This is what the Bare Metal APIs are for. Bare Metal APIs These APIs get you things you need to construct your own fetch, Request, XHR XMLHttpRequest or any of the above framework are these: webApi.url(url, params?) webApi.headers(verb?) webApi.url(...) This method will extend short API / Content / Query URLs for you. This means it will handle URLs like this: Simple api-urls like controller/method or controller/method?params will be converted to the full API needed Longer API urls like app/auto/controller/method will also be converted to the full url Parameters in the object params will be added as ?...=... v12.11+ webApi.headers(verb?) This will get you an object containing all the headers you need for a common WebAPI request. It includes things like: ModuleId and PageId Security headers/tokens Encoding headers - this will vary based on the optional verb you pass in If you don't specify a verb, GET is assumed, so it will only have encoding-headers for the response. History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 - see old docs fetchRaw(), fetchJson(), url(), headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded url(...) enhanced with parameters object in v12.11 fetchRaw(...) created to fix difficult naming in 12.10; fetch(...) is now deprecated and will stop working some day fetchRaw, fetchJson, sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "js-code/2sxc-api/sxc/sxc.webapi-fetch.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi-fetch.html",
    "title": "The WebApi Helpers on the Sxc Controller using Fetch | 2sxc 19 for Dnn and Oqtane",
    "keywords": "The WebApi Helpers on the Sxc Controller using Fetch you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Modern browsers all support fetch and this is now the preferred way to get data. 2sxc 13 introduce new JS APIs for this. Note: If you want to use other AJAX libraries, check out the Bare Metal APIs. Simple APIs The simple APIs perform a browser fetch and return a promise. This is very similar to jQuery. webApi.fetchRaw(...) performs a basic fetch and returns a standard promise containing a Response object webApi.fetchJson(...) performs a fetch and returs a promise containing an object which came from JSON recommended Parameters All of these methods can be called with just 1 parameter, the url. But for more control, you can have these parameters: url - short api url like controller/method?params or other variations (see below) data - optional POST data, empty by default. Can be a string or an object. If it's an object, it will auto-convert to JSON method - optional method name, default is GET, unless you specify data, in which case it defaults to POST Url The url can be any one of these: Api URL pointing to a WebAPI of the app - short like controller/method or long like app/auto/controller/method Query url with a query name like app/auto/query/queryName Data url pointing to the data like app/auto/data/contentType These can also have parameters like controller/method?id=27 or app/auto/data/contentType/574 depending on what the endpoint expects. Helper for URLs with Parameters v13 2sxc 13 enhances the webApi.url(...) function to build a url using a parameters object. So you can do either one of these examples: var webApi = $2sxc(moduleId).webApi; var jsonPromise1 = webApi.fetchJson('blog/rss?category=17'); var jsonPromise2 = webApi.fetchJson(webApi.url('blog/rss', { category: 17 })); Tutorial \uD83D\uDC49 We've updated the simple web api tutorials to demo this Demo App and further links You should find some code examples in this demo App TimeLineJS History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 - see old docs fetchRaw(), fetchJson(), url(), headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded url(...) enhanced with parameters object in v12.11 fetchRaw(...) created to fix difficult naming in 12.10; fetch(...) is now deprecated and will stop working some day fetchRaw, fetchJson, sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "js-code/2sxc-api/sxc/sxc.webapi-jquery.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi-jquery.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to ZzzSxcWebApiDeprecated"
  },
  "js-code/2sxc-api/sxc/sxc.webapi.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to SxcWebApi"
  },
  "js-code/angular-js/angularjs-1-overview.html": {
    "href": "js-code/angular-js/angularjs-1-overview.html",
    "title": "AngularJs 1 Overview (obsolete) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "AngularJs 1 Overview (obsolete) Warning This is old, obsolete information. AngularJS is really dead. You should use Angular The files in the folder /js/angularjs such as 2sxc4ng.js, 2sxc4ng.min.js and angular.min.js were supposed to be removed in v12.0 but were somehow included again by accident. We discovered this and removed them again in v16.06. If for some random reason you need it, get them from this git repo: 2sxc-js-archive 2sxc contains a special helper called 2sxc4ng which takes care of starting your app inside Dnn and providing you with toolbars and data from 2sxc. How to use Until we find time to document everything, here's the short version To use 2sxc4ng you must include a JS file in your template, and you must bootstrap your app using this (not using the standard angularjs bootstrapping) this is to ensure that multiple Angular apps can run on the same page, and to provide your app with the necessary context so it knows what module it's working on, etc. Here's an introduction to that. To get your current sxc-controller there are two objects $2sxc and sxc which you can just include it in your function definition, like module.controller('AppCatalogCtrl', function ($2sxc, sxc, $http, ...) { The sxc is the one you want most, it is already set to your current instance, so you can ask it things like sxc.manage etc. The $2sxc is the same as the global $2sxc object you know from jquery. You could of course also do $2sxc(27).manage to access the manage, but that's unnecessarily complicated Additional services provided when bootstrapping with 2sxc4ng is content(typename) - a service which requests content-data from the current app / context, can also delete / create items etc. query(queryname) - a service which gets data from app-queries Additional directives sxcToolbar - a create-toolbar directive to provide in-app toolbars to edit/manage etc. for <sxc-toolbar toolbar=\"...\"> tags Todo: a simple full example right here Including All Necessary Files You need three files + your code 2sxc.min.js - only necessary, if you intend to work with 2sxc data items & toolbars, must come before 2sxc4ng Angular - ideally from a CDN 2sxc4ng.min.js - only necessary, if you intend to work with 2sxc data items & toolbars, must come after angular Your code Example: <script src=\"/desktopmodules/tosic_sexycontent/js/2sxc.api.min.js\" data-enableoptimizations=\"100\"></script> <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.min.js\" data-enableoptimizations=\"101\"></script> <script src=\"/desktopmodules/tosic_sexycontent/js/angularjs/2sxc4ng.min.js\" data-enableoptimizations=\"110\"></script> <script src=\"@App.Path/dist/angular-app.min.js\" data-enableoptimizations=\"120\"></script> Toolbar Directive Quick example - this requires 2sxc 8.8 // a quick sxcToolbar example <li ng-repeat=\"app in apps\"> <sxc-toolbar toolbar='{ \"entityId\": app.EntityId }' settings='{ \"hover\": \"left\", \"align\": \"left\" }'></sxc-toolbar> ... </li> Content Service This is a quick example of the content service Todo: you can find some infos till then in the (http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng)(http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng) article Important: you can use the content service to get all of a type get one of a type create one of a type (if permissions have been configured for that type) delete one of a type (permissions...) quick demo of syntax var cSrv = content(\"BlogPosts\"); var onePromise = cSrv.get(740); var allPromise = cSrv.get(); var createPromise = cSrv.create({ \"Title\": \"hello\", \"Body\": \"great article\"}); var deletePromise = cSrv.delete(7740); Query Service This is a quick example of the query service Todo: you can find some infos till then in the (http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng)(http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng) article // this example assumes you added the query service in your constructor // it also assumes you created a visual-query called \"All-blog-items\" var qAll = query(\"All-blog-items\"); qAll.get().then(function (result) { ... // some code here }); // this assumes you want to query the data from the current view // so the real items assigned to this instance // or processed inside the view in a PrepareData() method var qCurrent = query(); qCurrent.get().then(function (result) { ... // some code here }); When working with queries that expect parameters, you can pass them in the get() call qAll.get({ data: { \"sort\": \"EntityTitle\" }, }).then(...) Notes and Clarifications On Bootstrapping Just fyi: in 2sxc 6.0 till 2sxc 8.8.0 the AngularJS bootstrapping needed to know the module-id. This was done by either providing an attribute like iid=\"@Dnn.Module.ModuleId\" or for tokens iid=\"[Module:ModuleId]\" providing the mod-id in the app name like sxc-app=\"MyApp-@Dnn.Module.ModuleId\" This is because it needs if for webservice calls. In 2sxc 8.8.1 the bootstrapping will auto-detect the module id, so you don't have to provide it any more. Read also Full explanation of bootstrapping and how/why etc. - which tells you why the current code is running so you could change the data added Demo App and further links You should find some code examples in this demo App Various AngularJS based apps History Introduced in 2sxc ??.?? sxcToolbar released in 2sxc 8.8.0"
  },
  "js-code/angular/dnn-sxc-angular/context.html": {
    "href": "js-code/angular/dnn-sxc-angular/context.html",
    "title": "Context (dnn-sxc-angular) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Context (dnn-sxc-angular) you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } dnn-sxc-angular can give you a lot of Context Information like this: what Page the app is on what Module it's on the $2sxc object of the page the sxc object of the current module ...and more Example We'll explain how to get one or many items based on the Template App. Check out the team.service.ts - you'll see some code like this: @Injectable({ /* ... */ }) export class TeamService { private selectedBu$ = new BehaviorSubject<string>(''); /** This will contain the persons returned from the API */ team$: Observable<Person[]>; constructor(data: Data, context: Context) { // also get guid if in edit mode const withGuid = context.sxc?.isEditMode() ? '&includeGuid=true': ''; this.team$ = this.selectedBu$.pipe(switchMap(bu => data.query$<Person[]>(`BusinessUnitTeam?bu=${bu}${withGuid}`))); } } In the above example you'll see these lines: const withGuid = context.sxc?.isEditMode() ? '&includeGuid=true': ''; Here we're asking the context object for the current sxc instance (of this module) to find out if we're in edit-mode. In this example it will then affect the Query to include more data for the in-page editing experience. More APIs The Context has more to offer - just check out the intellisense in VS Code."
  },
  "js-code/angular/dnn-sxc-angular/data-api-dollar.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-api-dollar.html",
    "title": "Data.api$<T>(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data.api$<T>(...) you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access WebAPIs on the backend. The easiest way is to use data.api$<T>(...) which gets you a Stream ($) of objects from a custom WebAPI. Here's what it does: data.api$<T>(...) will get you... ...an observable of T you'll often use <YourType[]> if you expect an array the controller & route ('simple/hello') Example We'll explain how to get call the backend based on the Template App. Check out the api-demo.component.ts - you'll see some code like this: @Component({ /* ... */ }) export class ApiDemoComponent { numbers$: Observable<number[]>; constructor(data: Data) { // simple version for just a quick call, not re-using the api object this.numbers$ = data.api$<number[]>('simple/Numbers'); } } In the above example you'll see this line: this.numbers$ = data.api$<number[]>('simple/Numbers'); This is a quick call to a backend controller called Simple and the action Numbers. Difference to Data.api(...) The Data object also has a api(...) without the $. That doesn't return a stream/observable of data, but instead returns an Api object which can be used for multiple get<T>(...) calls."
  },
  "js-code/angular/dnn-sxc-angular/data-api.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-api.html",
    "title": "Data.api(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data.api(...) you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access WebAPIs on the backend. If you want to make multiple calls to the same controller, the easiest way is to use data.api<T>(...). Here's what it does: data.api(...) will get you... an Api object which will only talk to the controller in (...) - like ('simple') You can then use it multiple times with get() and post() Example We'll explain how to get one or many items based on the Template App. Check out the api-demo.component.ts - you'll see some code like this: @Component({ /* ... */ }) export class ApiDemoComponent { apiMessage$: Observable<string>; nameMessage$: Observable<string>; something$: Observable<Something>; constructor(data: Data) { // version for using the api-object many times; const simple = data.api('simple'); // short call version - without parameters this.apiMessage$ = simple.get<string>('hello'); // short call version - with parameters this.nameMessage$ = simple.get<string>('hello', new HttpParams().set('name', 'Michael')); this.something$ = simple.get<Something>('Something', new HttpParams().set('name', 'Samuel Jackson')); } } In the above example you'll see these lines: // version for using the api-object many times; const simple = data.api('simple'); // short call version - without parameters this.apiMessage$ = simple.get<string>('hello'); // short call version - with parameters this.nameMessage$ = simple.get<string>('hello', new HttpParams().set('name', 'Michael')); this.something$ = simple.get<Something>('Something', new HttpParams().set('name', 'Samuel Jackson')); This shows how to use the api(...) to get an object to re-use, and you can also see how parameters are added to the call. Difference to Data.api$<T>(...) The Data object also has a api$<T>(...) with a $. That is for single-call use."
  },
  "js-code/angular/dnn-sxc-angular/data-content-dollar.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-content-dollar.html",
    "title": "Data.content$<T>(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data.content$<T>(...) you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access Data from the backend. The easiest way is to use data.content$<T>(...) which gets you a Stream ($) of Entities of the expected Content-Type. Here's what it does: data.content$<T>(...) will get you... ...an observable of T you'll usually use <YourType[]> since you'll get an array back the Content-Type name is specified in the ('BusinessUnits') Single-Item Call you can optionally specify an id, like ('BusinessUnits', 4020) when you use an ID, you'll expert a single item back, so you'll use <YourType> Example We'll explain how to get one or many items based on the Template App. Check out the business-unit-selector.component.ts - you'll see some code like this: @Component({ /* ... */ }) export class BusinessUnitSelectorComponent { /** Stream of business units, provided back the backend */ businessUnits$: Observable<BusinessUnit[]>; constructor(private data: Data) { // Query backend for stream of BusinessUnit[] // #ExampleData this.businessUnits$ = data.content$<BusinessUnit[]>('BusinessUnit'); } } The important line is this: this.businessUnits$ = data.content$<BusinessUnit[]>('BusinessUnit'); This will get all BusinessUnit Entities from the backend. Here's what it does We're using the Data object provided by dnn-sxc-angular The content$<T>(...) requests an observable stream of BusinessUnit[] objects The term ...('BusinessUnit') means that this is the Content-Type we are looking for. Difference to Data.content<T>(...) The Data object also has a content<T>(...) without the $. That doesn't return a stream/observable of data, but instead returns a Content object which can be used for multiple get(...) calls."
  },
  "js-code/angular/dnn-sxc-angular/data-content.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-content.html",
    "title": "Data.content<T>(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data.content<T>(...) you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access Data from the backend. One way to do this is using a helper-object which is pre-configured to a specific Content-Type, and can be re-used for multiple requests. This is what the .content<T>(...) will get you. On this page we'll explain how to get a object to manage a specific content-type using the Data.content<T>() command. Example This is some example code @Component({ /* stuff */ }) export class BusinessUnitSelectorComponent { constructor(private data: Data) { // Query backend for stream of BusinessUnit[] // This creates a content-manager object (note the missing $) const businessUnits = data.content<BusinessUnit>('BusinessUnit'); // now get all const businessUnits$ = businessUnits.get(); // or just one by ID const oneBu$ = businessUnits.get(402); oneBu$.subscribe((bu) => console.log(`Got BU ${bu.Name}`, bu)); // update a value (note: not implemented yet as of dnn-sxc-angular v11.01) businessUnites.post(402, { Name: 'New Name' }); } } Difference to Data.content$<T>(...) In most cases you'll prefer to use the content$ (...) API which is single use. The only really good case to use this is for updating data, but that hasn't been implemented yet. If you want to update data for now just use the normal sxc object on the Context"
  },
  "js-code/angular/dnn-sxc-angular/data-query-dollar.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-query-dollar.html",
    "title": "Data.query$<T>(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data.query$<T>(...) you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access Data from the backend. The easiest way to access a Query is to use data.query$<T>(...) which gets you a Stream ($) of Entities from a Query. Here's what it does: data.query$<T>(...) will get you... ...an observable of T you'll usually use <YourType[]> since you'll get an array back the Query name is specified in the ('BusinessUnitTeam') Example We'll explain how to run a query based on the Template App. Check out the team.service.ts - you'll see some code like this: @Injectable({ providedIn: 'any', }) export class TeamService { /** This will contain the persons returned from the API */ team$: Observable<Person[]>; constructor(data: Data, context: Context) { this.team$ = data.query$<Person[]>(`BusinessUnitTeam?bu=Web`); } } The important line is this: this.team$ = data.query$<Person[]>(`BusinessUnitTeam?bu=Web`); This will query the BusinessUnitTeam Query on the backend with parameter bu being Web (to only get members of the Web-team). Here's what it does We're using the Data object provided by dnn-sxc-angular The query$<T>(...) requests an observable stream of BusinessUnit[] objects The term ...('BusinessUnitTeam') is the name of the query The additional parameters like ?bu=Web is expected by the query (in this case the query could also accept an empty BU) Other overloads The query$<T>(...) has various other overloads to include parameters. You'll see them in the intellisense in VS Code. Difference to Data.query<T>(...) The Data object also has a query<T>(...) without the $. That doesn't return a stream/observable of data, but instead returns a Query object which can be used for multiple calls. As of now it's probably not very usefull, so let's stick to this."
  },
  "js-code/angular/dnn-sxc-angular/http-interceptor.html": {
    "href": "js-code/angular/dnn-sxc-angular/http-interceptor.html",
    "title": "dnn-sxc-angular HttpInterceptor | 2sxc 19 for Dnn and Oqtane",
    "keywords": "dnn-sxc-angular HttpInterceptor you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } One of the core challenges when using any JavaScript in Dnn is ensuring that WebAPI calls have all the important http headers to make it work. This is what the HttpInterceptor does. It ensures that: Security headers like the RequestVerificationToken are included Context headers like ModuleId are correct Shorthand api urls like app/data/BlogPost are mapped to the correct endpoints How it works For this to work, the page must have this data available before Angular loads. Thanks to 2sxc (the non-angular parts) this is automatically provided ahead of time. Here's the initialization process behind the scenes: 2sxc adds important headers to the page on the server for 2sxc and dnn-sxc-angular to work (this happens automatically) When the root module is built (usually called AppModule) it must include DnnSxcRootModule to register the Http-Interceptor When Angular bootstraps the base class DnnAppComponent gets everything from the page when it's constructed. Without this the Http-Interceptor wouldn't have the configuration necessary. After this has happened, all calls using the Angular HttpClient will automatically behave as expected."
  },
  "js-code/angular/dnn-sxc-angular/index.html": {
    "href": "js-code/angular/dnn-sxc-angular/index.html",
    "title": "NPM Package @2sic/dnn-sxc-angular | 2sxc 19 for Dnn and Oqtane",
    "keywords": "NPM Package @2sic/dnn-sxc-angular you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } We've created a library to help you connect Angular with Dnn called dnn-sxc-angular. You can find it here: dnn-sxc-angular on Npm. To start, you should learn how to install. The library contains the following bits of magic to get you going: Http Interceptor which ensures that all calls to Dnn have the necessary security headers Data API to quickly get data from WebAPIs CMS directives to create toolbars in the Angular App for editing content Context information about the page/module and current sxc-objects History ca. 2015 first version for Angular 2 ca. 2016 enhanced for Angular 6 and latest 2sxc features 2019 Enhanced with Hot-Reloading features for Angular 8 and completely reworked how context is detected in Dnn 2020 Improved Hot-Reloading 2021-02 Added tag-toolbar attribute and created refresh callback so the page doesn't reload (requires 2sxc 11.12) 2021-02-26 v.11.01 - added new attribute angular-path to use as base for lazy loading To Do Status 2021-03 enhance the content-manager to provide write commands (ATM read-only) - you can still do this, but must use the context.sxc... classic JS API enhance the content-manager to provide create-metadata commands - you can still do this, but must use the context.sxc... classic JS API"
  },
  "js-code/angular/dnn-sxc-angular/install.html": {
    "href": "js-code/angular/dnn-sxc-angular/install.html",
    "title": "Installing and Bootstrapping dnn-sxc-angular | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Installing and Bootstrapping dnn-sxc-angular you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } Step 1. Install the Package Just run npm i \"@2sic.com/dnn-sxc-angular\" This will download dnn-sxc-angular on Npm and add it to your package.json. Step 2. Add to your Root module Here's an extract from Template Angular App - in /ng/src/app/app.module.ts: /* --------------------------------------------------------------------------- Tutorial --------------------------------------------------------------------------- This main module configuration has two special things it includes - DnnInterceptor: this ensures all http-requests will have the neecessary Dnn headers - ContentManagerModule: this enables attributes like sxc-toolbar for editing UIs --------------------------------------------------------------------------- */ import { BrowserModule } from \"@angular/platform-browser\"; import { NgModule } from \"@angular/core\"; import { HttpClientModule } from \"@angular/common/http\"; import { ContentManagerModule, DnnSxcRootModule } from \"@2sic.com/dnn-sxc-angular\"; import { AppRoutingModule } from \"./app-routing.module\"; import { AppComponent } from \"./app.component\"; import { TitleComponent } from \"./layout/title.component\"; import { NavigationComponent } from \"./layout/navigation.component\"; @NgModule({ declarations: [ AppComponent, TitleComponent, NavigationComponent, ], imports: [ BrowserModule, // this tells Angular to run in a browser AppRoutingModule, // this contains the application link-structure HttpClientModule, // this enables web-api calls and should only be included in the App root // Impontant: don't load sub-modules here if you want lazy-loading to work // ExamplesModule, // not added here, as it should lazy-load // 2sxc Module #StepBootstrap DnnSxcRootModule, // this is important in the app-root, as it ensures that context is shared in sub-modules ContentManagerModule, // this is needed for edit-toolbars to work ], providers: [], bootstrap: [AppComponent], }) export class AppModule {} The most important bit is to ensure that HttpClientModule is imported here DnnSxcRootModule is imported here Step 3. Ensure Correct Bootstrapping dnn-sxc-angular must do some initial work when loading, so the AppComponent must inherit from the DnnAppComponent. Heres' the code from /ng/src/app/app.component.ts: /* --------------------------------------------------------------------------- Tutorial --------------------------------------------------------------------------- This entry component extends the DnnAppComponent By doing this, it will - pick up any configuration attributes on the <app-root> tag - automatically initialize all http adapters to auto-set Dnn headers - ensure that hitting an enter-key on an input field doesn't submit the page, because asp.net would do that #StepBootstrap --------------------------------------------------------------------------- */ import { Component, ElementRef } from '@angular/core'; import { DnnAppComponent, Context } from '@2sic.com/dnn-sxc-angular'; @Component({ selector: 'app-root', templateUrl: './app.component.html' }) export class AppComponent extends DnnAppComponent { constructor(el: ElementRef, context: Context) { super(el, context); } } This ensures that DnnAppComponent has a chance to initialize the Http-Interceptor and pick up any other configuration the app-root tag may have."
  },
  "js-code/angular/dnn-sxc-angular/toolbars.html": {
    "href": "js-code/angular/dnn-sxc-angular/toolbars.html",
    "title": "Toolbars in Angular (dnn-sxc-angular) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbars in Angular (dnn-sxc-angular) you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } dnn-sxc-angular provides directives/components which allow to place toolbars in an Angular App. Prerequisite is an Angular App running with dnn-sxc-angular. How to use Place the toolbar directives/components in your templates. There are two different ways to place your toolbars, the tag-toolbar (default) and the inline toolbar, depending on the use case. In most cases, you will want to use the [sxc-toolbar] tag-toolbar directive In rare cases you may prefer the inline <sxc-toolbar> toolbar is useful when you want to show the toolbar without the need to hover over the target element. Example We'll explain how to use toolbars based on the Template App. Check out the team.component.html - you'll see some code like this: <!-- #ExampleContentManagement - this shows how to use the toolbar with just the add-button for a specific type and also do custom view refresh --> <div [sxc-toolbar]=\"toolbarFor()\" (refresh)=\"teamSvc.refresh()\"> <h2>Team</h2> <app-business-unit-selector></app-business-unit-selector> <ol> <!-- #ExampleContentManagement - this will create a delete/edit toolbar for this item and will also do custom view refresh--> <li *ngFor=\"let person of team; trackBy: trackById\" [sxc-toolbar]=\"toolbarFor(person)\" (refresh)=\"teamSvc.refresh()\"> <app-person [person]=\"person\"></app-person> </li> </ol> <hr /> <app-team-explained></app-team-explained> </div> The code of team.component.ts is this: @Component({ /* stuff */ }) export class TeamComponent { /** The data which is shown in the template */ team: Person[] = []; constructor(private route: ActivatedRoute, public teamSvc: TeamService, private cdr: ChangeDetectorRef) { this.teamSvc.team$.subscribe((newTeam => { this.team = newTeam; })); } /** * Create a toolbar configuration for a person or for new * #ExampleContentManagement */ toolbarFor(person?: Person) { const mainConfig = 'toolbar=empty?contentType=Person&entityId=' + (person?.Id ?? '0'); return person ? [mainConfig, \"edit\", \"delete&color=gray?entityGuid=\" + person.Guid + \"&title=\" + person.Name] : [mainConfig, 'new'] } } As you can see, the [sxc-toolbar] attribute activates the sxcToolbar directive of dnn-sxc-angular. The configuration for the toolbar is provided by the toolbarFor(...) call in the controller class and it uses the simple toolbar configuration system. That's how easy it is to create CMS toolbars in Angular \uD83D\uDE09."
  },
  "js-code/angular/index.html": {
    "href": "js-code/angular/index.html",
    "title": "Using Angular in 2sxc / Dnn | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Using Angular in 2sxc / Dnn you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } Angular is an awesome JavaScript framework to build applications, especially SPA style applications. We've created a full solution for integrating Angular with Dnn and 2sxc and it's documented here. The core parts are: Integrate Angular in Dnn for runtime or development Integrate Dnn into Angular Integrate 2sxc and CMS features into Angular Introduction Video Get Started Discover the Template Angular App to first experiment with it Then either just modify the Template App to make it into anything you want Or create an own solution using the parts you like"
  },
  "js-code/angular/integrate-angular-development.html": {
    "href": "js-code/angular/integrate-angular-development.html",
    "title": "Integrate Angular for Runtime in 2sxc / Dnn | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Integrate Angular for Runtime in 2sxc / Dnn you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } This explains how to best integrate Angular development in Dnn so you can enjoy hot-reloading while developing, and still use Dnn/2sxc Endpoints at the same time. Note that you can find a working demo of this in the Template Angular App. Goals of the Runtime Integration The Angular App can be developed using best-practices incl. partial loading and hashed files We can see the dev-build in Dnn in real-time The dev-build can access Dnn endpoints as if it were running in production Hot-reload works, so saving files automatically reloads the Dnn page Implementation The Template App is installed in Dnn and we have the full copy of it on our local dev environment. Dev-server will run on localhost:4200. The way it's integrated in the template app is that the main file _AngularApp.cshtml has some code like this: @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @{ // ... // Add <base> tag using RazorBlade - Angular needs this so that links changing dialogs (routes) work properly HtmlPage.AddBase((Link.Base())); // ... // Create helper to integrate angular best-practice var ngHelpers = CreateInstance(\"./shared/_Angular.cshtml\"); // ... @ngHelpers.LoadFromNgServe() // ... } We've removed some of the code here for simplicity, but the important parts are Add <base> header to the page for Angular Routing to work properly LoadFromNgServe will load the standard Angular files from localhost:4200 To see the full source code, get the Angular 18 Template App or browse it here Angular 11 Template App Github Repo History First version for Angular 4 created in 2017 Enhanced for Angular 6 in 2019 Enhanced for Angular 8 in 2020 Enhanced for Angular 11 and dnn-sxc-angular 11 in February 2021"
  },
  "js-code/angular/integrate-angular-runtime.html": {
    "href": "js-code/angular/integrate-angular-runtime.html",
    "title": "Integrate Angular for Runtime in 2sxc / Dnn | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Integrate Angular for Runtime in 2sxc / Dnn you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } This explains how to best integrate Angular in Dnn. Note that you can find a working demo of this in the Template Angular App. Goals of the Runtime Integration The Angular App can be compiled using best-practices incl. partial loading and hashed files The Angular solution can be easily distributed to another Dnn/2sxc as a 2sxc App package We can run multiple editions of the same app, like a live and a staging edition for internal review The final page has the app tag and all the script/css resources as the Angular compiler generated them Changes to the Angular App are automatically included without manual changes Implementation In the Template App the compiled Angular SPA is in [app-root]/live/dist/ng-app/. The way it's integrated in the template app is that the main file _AngularApp.cshtml has some code like this: @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @{ // ... // Add <base> tag using RazorBlade - Angular needs this so that links changing dialogs (routes) work properly HtmlPage.AddBase((Link.Base())); // ... // Create helper to integrate angular best-practice var ngHelpers = CreateInstance(\"./shared/_Angular.cshtml\"); // ... @Html.Raw(ngHelpers.ImportAngularHtml(editions.CurrentEdition)); } We've removed some of the code here for simplicity, but the important parts are Add <base> header to the page for Angular Routing to work properly ImportAngularHtml which will scan the index.html which Angular creates, extract all the important parts and add them to the page Note that there is a bit more magic happening to ensure we can run multiple editions (live, staging, ...). To see the full source code, get the Angular 18 Template App or browse it here Angular 11 Template App Github Repo History First version for Angular 4 created in 2017 Enhanced for Angular 6 in 2019 Enhanced for Angular 8 in 2020 Enhanced for Angular 11 and dnn-sxc-angular 11 in February 2021"
  },
  "js-code/angular/template-app.html": {
    "href": "js-code/angular/template-app.html",
    "title": "Angular Template App for Dnn / 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Angular Template App for Dnn / 2sxc you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } To quickly get started we've created the Angular 18 Template App. It demonstrates how to... Integrate Angular in Dnn to run perfectly while using Dnn and 2sxc WebAPI endpoints during development with hot-reloading so you can see the real solution in Dnn while working Integrate Dnn into Angular So that all http-calls have all the necessary security headers So that hitting enter on an input-field doesn't reload the page Integrate 2sxc into Angular So it's easy to access Data like Content, Queries and custom WebAPI controllers So you can use CMS features like editing content directly from Angular Introduction Video Next Steps Install and try the Angular 18 Template App Maybe browse the code here Angular 11 Template App Github Repo Learn about the runtime integration or the development integration History First version for Angular 4 created in 2017 Enhanced for Angular 6 in 2019 Enhanced for Angular 8 in 2020 Enhanced for Angular 11 and dnn-sxc-angular 11 in February 2021 Enhanced for Angular 14 and toolbars in 2022 Updated to Angular 18 in 2024-10-01"
  },
  "js-code/commands/WorkflowStepCode.html": {
    "href": "js-code/commands/WorkflowStepCode.html",
    "title": "Function Signature WorkflowStepCode | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Function Signature WorkflowStepCode Signature of your code which is used in workflows. Basically it's just a function receiving WorkflowStepCodeArguments export type WorkflowCode = (args: WorkflowStepCodeArguments) => WorkflowStepCodeArguments; To use you would do this: code: (wfArgs) => { console.log(\"We are doing something - here are the details.\", wfArgs); } If your code is triggered, it will receive a wfArgs object containing a lot of internal stuff, workflow information and more note that this object isn't 100% final, it may still change a bit in future versions. We don't expect breaking changes, but be aware of this if you use deep properties. If your code returns false, the command (like refresh) will stop - this can prevent the dialog from openening and the page from refreshing See also: CMS Command Workflows for Commands and Toolbars History Introduced in 2sxc 11.12 Api Js SxcJs WorkflowStepCode"
  },
  "js-code/commands/content-items.html": {
    "href": "js-code/commands/content-items.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to CommandDataParams"
  },
  "js-code/commands/custom-code-v9.html": {
    "href": "js-code/commands/custom-code-v9.html",
    "title": "Use the Old Signature of Custom Code up to V9 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use the Old Signature of Custom Code up to V9 you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } How to use OLD v9 Here's a basic example showing a 2sxc-toolbar with a custom code: <ul class=\"sc-menu\" data-toolbar='{ \"groups\": [{ \"buttons\": [{ \"command\": { \"action\": \"custom\", \"customCode\": \"alert(\\\"custom button!\\\")\" } }] }] }'></ul> This shows 2sxc-toolbar with 1 button, calling the command custom and giving it the code customCode which will be executed. Here's a more extensive example: <div class=\"sc-element\"> custom js action <ul class=\"sc-menu\" data-toolbar='{\"groups\": [ { \"buttons\": [ { \"command\": { \"action\": \"custom\", \"customCode\": \"alert(\\\"custom button!\\\")\" }, \"icon\": \"icon-sxc-code\", \"title\": \"my custom code\" },{ \"command\": { \"action\": \"custom\", \"customCode\": \"someCustomAction(settings, event, sxc);\" }, \"icon\": \"icon-sxc-code\", \"title\": \"my custom code\" }, \"layout\", \"more\" ]}, { \"buttons\": \"layout,more\" } ], \"debug\": true}'></ul> </div> <script> function someCustomAction(settings, event, sxc) { console.log(\"found these settings: \", settings); console.log(\"for this click event: \", event); console.log(\"in the context of this sxc: \", sxc); alert(\"check js console output\"); } </script> The above example also provides a custom icon, a title and a second button which also knows about the event (the click), the settings (like the entityId) and the sxc (the controller). How it works Internally, the command custom is meant to simply execute the code which is in the attribute customCode. That's all it does. JSON Encode if using data-toolbar attribute If you're adding this in the HTML, then everything must be correctly JSON encoded (which isn't exactly fun). So if you plan to do that, we recommend to put most of the JS in an external file and just put the call to it in the button itself. More Specs On Click The second example shows 3 additional variables which are available inside the click event. They are settings - these are the parameters passed in, like entityId event - this is the JS event like click sxc - this is the current sxc-controller - you can also access sxc.manage if you need it History Introduced in 2sxc v08.06 Basically obsolete since v10 where you should use call instead"
  },
  "js-code/commands/custom-code.html": {
    "href": "js-code/commands/custom-code.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to CommandCodeParams"
  },
  "js-code/commands/delete.html": {
    "href": "js-code/commands/delete.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to CommandDeleteParams"
  },
  "js-code/commands/index.html": {
    "href": "js-code/commands/index.html",
    "title": "CMS Commands in JavaScript | 2sxc 19 for Dnn and Oqtane",
    "keywords": "CMS Commands in JavaScript you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Whenever you press a button in the edit-ui, a edit-command is handled by the javascript layer. These commands are things like: edit an item on the screen open the layout-picker dialog for a content-block Each command needs 3 things a short CommandName like new parameters entityId which differ for each command a context - usually the current module It always returns a promise. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Run Commands and Parameters Two commands in the 2sxc APIs allow running CMS commands $2sxc.cms.run(params: RunParamsWithContext) This is the run on the Global Cms object sxc.cms.run(params: RunParams) This is the run on the Instance Cms object Both of these commands will run a CMS command with parameters. Important There are some possibilities for confusion which you should be aware of. The $2sxc.cms.run(...) has a few old overloads with other parameters. We plan to discontinue these, as it had to do some magic to figure out what is what. So even if you find such code, please use the method described here. Read more: Various Run Commands Requirements and Prerequisites For this to work, the CMS JavaScripts must be loaded. This is done automatically or manually. If your user is an admin/editor, this happens automatically. If your user is not defined as an editor, but should still have these commands (possibly because the Content-Type allows editing for this user), you'll need to activate it manually. To activate these features manually just use the IPageService and activate 2sxc.JsCms. How to use (v14+) Simple example: @* enable editing for all users *@ @Kit.Page.Activate(\"2sxc.JsCms\") <script> // Run the command and handle the returned promise // This uses the Instance object retrieved using $2sxc(tag) function addProject(tag) { $2sxc(tag).cms.run({ action: \"new\", params: { contentType: \"Project\"} }) .then(function () { alert(\"Thanks - we'll review your entry and publish it.\") }); } // This is the alternate way to write the code, using the Global object function addProjectAlternative(tag) { $2sxc.cms.run({ tag: tag, action: \"new\", params: { contentType: \"Project\"}}) .then(function () { alert(\"Thanks - we'll review your entry and publish it.\") }); }</script> <span onclick='window.addProject(this)'> add your project </span> the tag is an HTML tag in the DOM, which is used to look up the context automatically (see edit-context) the action is the verb for the cms-command to run the params contains additional parameters for that command Returned Promise The run always returns a promise. As you can see in the sample above, this lets you show a specific message or do other things after the command has run. To handle special cases like prevent a page-refresh or to do custom JS actions at certain points, check out the Workflows. RunParams and RunParamsWithContext Both commands take one object with named properties, to help keep the API stable across changes. Tip The Instance call on sxc.cms.run(...) uses the RunParams. It will throw an error if a context is also provided, because that indicates you're doing something wrong. On the other hand the Global call on the $2sxc.cms.run(...) explicitly needs RunParamsWithContext either tag or context, and will throw an error if both are missing. Command Workflow Example Commands can be called with additional workflow steps which are processed before or after certain steps. For example, you can prevent the page from refreshing - to trigger an own JS-Reload or something. \uD83D\uDC49 Read more about Workflows and Steps. Command With Custom Code There is a command called custom which is meant to be used for this. Check out the example on Custom Code All Commands & Parameters \uD83D\uDC49\uD83C\uDFFC CommandNames Details about some specific commands: ContentItems with Filters Delete Custom Code Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App Blog post about Calling commands from links Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. History Global $2sxc.cms.run(...) introduced in 2sxc 09.30 Enhanced with RunParams in 2sxc 12.10 to support registering workflows Use with context instead of tag added in v13.03 Instance version added in v13.03"
  },
  "js-code/commands/run-variations.html": {
    "href": "js-code/commands/run-variations.html",
    "title": "Various Run Commands | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Various Run Commands you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The API of 2sxc has changed with time, and we try ensure all samples include the latest best practices. But sometimes you'll stumble over old code or old samples, so we believe it's important you understand the differences. Newest CMS Run on the Sxc Object As of v13.03+, you should always use the .cms.run(...) command on the Sxc object. It always expects an object such as this: $2sxc(moduleId).cms.run({ action: \"edit\" }); $2sxc(moduleId).cms.run({ action: \"edit\", params: { entityId: 27 } }); $2sxc(moduleId).cms.run({ action: \"edit\", params: { entityId: 27 }, event: event }); This may feel a bit complicated, but it's to ensure that the API doesn't change as we add new features. Tip This is the only recommended run API we recommend as of now. It also supports workflows, so you can add code to intercept what happens, such as preventing page reloads after an edit command. This was introduced ca. 2sxc v13.03. Global CMS Run on the $2sxc Object The $2sxc.cms.run(...) is also available, but it's not recommended. It has many different overloads with different kinds of parameters which tend to confuse developers. Since most run-commands also need a context, you must provide this on the global run(...). If you would use the Sxc.cms.run(...) above, this isn't necessary as the context is known. This was introduced ca. 2sxc v9.30. Old Manage Run on the Sxc objects Previous versions of 2sxc had similar functionality on $2sxc.manage.run(...) $2sxc(moduleId).manage.run(...) These continue to work for compatibility reasons, but we highly recommend using the new .cms.run(...) instead. An important difference for the old manage.run(...) is that you could just write the command name into the call, such as $2sxc(moduleId).manage.run(\"edit\"). This may feel simpler, but it led to a lot of difficulties when more parameters were needed. This resulted in JS code that tries to guess what parameter was meant for what, so it's just not recommended. Some old examples: <!-- quick version with name only --> <a onclick=\"$2sxc(this).manage.run('layout', event)\"> change layout </a> <!-- expanded version --> <a onclick=\"$2sxc(this).manage.run({ action: 'layout' }, event)\"> change layout </a> <!-- expanded version with many params --> <a onclick=\"$2sxc(this).manage.run({ action: 'new', contentType: 'BlogPost' }, event)\"> createBlogPost </a> These examples example gets the $2sxc-controller related to the <a> tag using $2sxc(this) and thereby giving it a context so it knows what module-id, etc. Then it executes the command. This was introduced ca. 2sxc v4.0. Warning Remember this is a depracecated API. It's only included to better understand old code. Use the new API. History Introduced old method ca. v4 Official API since 2sxc 08.06 Improved in 9.30 Massively improved in 13.03"
  },
  "js-code/commands/workflow.html": {
    "href": "js-code/commands/workflow.html",
    "title": "CMS Command Workflows for Commands and Toolbars | 2sxc 19 for Dnn and Oqtane",
    "keywords": "CMS Command Workflows for Commands and Toolbars you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } CMS Commands which are triggered using JS or using the toolbar can also have special workflows to customize what happens. Examples of things you can do You can conditionally intercept commands and prevent them You can prevent the page-reload after certain dialogs You can log things to the console for debugging Anything you want Simple Example This is a simple workflow step, which would log what's happening internally on every command which is executed by an action: // This workflow step will run on every action, just to log what's happening const workflowToLog = { command: 'all', // Run on every command/action phase: 'all', // Run before and after code: (wfArgs) => { console.log(\"We are doing something - here are the details.\", wfArgs); } } Workflow Object the Workflow Step object: WorkflowStep the Wolkflow Step Code signature: Function Signature WorkflowStepCode Register Workflow Steps Register When Using cms.run(...) When calling Commands from JavaScript, the workflow steps are directly included in the call, like this: <div class=\"alert alert-primary\" style=\"width: 50%;\"> The following command will open an edit dialog. When you click it and close the dialog again, the page will <em>not refresh</em>. <br> Instead, you'll see console messages that a custom JS took over the process. <br> <a href=\"#\" onclick=\"openAndCancelRefreshAfterwards(this, 'new', { contentType: 'UiEmptyHelloWorld'})\">Run open command</a> </div> <script> function openAndLogEverything(tag, action, params) { // This workflow step will run on every action, just to log what's happening const workflowToLog = { command: 'all', // Run on every command/action phase: 'all', // Run before and after code: (wfArgs) => { console.log(\"We are doing something - here are the details.\", wfArgs); } } // This is the workflow step we will register to stop page refresh const workflowToDisableRefresh = { command: 'refresh', // The command name it's for phase: 'before', // The workflow-step should run before the command is executed code: (wfArgs) => { // The code which should be run console.log('Asked to refresh, will return false to stop it. These are the arguments we got.', wfArgs); return false; // Return false to stop this command from happening } }; var steps = [workflowToLog, workflowToDisableRefresh]; $2sxc(tag).cms.run({ action: action, params: params, workflows: steps}) .then(function(data) { console.log(\"after run\", data); return false; }); } </script> Register With Toolbars When calling a command from a toolbar, you can't directly include it. Instead, you must add an event to register workflow steps when the toolbar executes an action. This is described in detail in Toolbar Workflows Demo App and further links Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. History Global $2sxc.cms.run(...) supporting workflows introduced in v12.10 Instance version added in v13.03"
  },
  "js-code/custom-fields/connector.html": {
    "href": "js-code/custom-fields/connector.html",
    "title": "API of Connector Object in Custom Input Fields | 2sxc 19 for Dnn and Oqtane",
    "keywords": "API of Connector Object in Custom Input Fields you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } The connector object provides values to your WebComponent and let's you communicate with the form. Here's the API you need: Background The connector object is attached by the form to your custom WebComponent before the connectedCallback() is triggered. So you can access it using this.connector. connector API data - a ConnectorData<T> object which has various properties you need to read/write values dialog - a ConnectorDialog<T> object which lets you open/close details-dialogs in your component field - contains a FieldConfig object telling you about the field, it's configuration etc. field$ - an observable with the field configuration, will emit a new FieldConfig whenever it changes loadScript(...) - a helper method to load additional javascript files _experimental - internal API for things which do not have a stable API yet connector.data Object The data object is of type ConnectorData<T>. It has these members: export interface ConnectorData<T> { /** Current value of the field */ value: T; /** * Client updates value in the host * @param newValue - New value of the field from the client */ update(newValue: T): void; /** * Client adds callback functions to be executed every time value changes in the host. * So call it to register your function which should run on change. * * Use this if you are not familier with observables. * @param callback - Function to be executed every time value changes in the host */ onValueChange(callback: (newValue: T) => void): void; /** * Observable on field value * Use this if you are familiar with observables. */ value$: Observable<T>; /** * Fired before form is saved. * It tells your control that the form is about to save, and that this is the last moment you can update the value. * Used in case your input doesn't always push changed values, like in WYSIWYG and other complex input fields which may buffer changes. */ forceConnectorSave$: Observable<T>; } connector.dialog Object This is the API to open a new dialog or close it again. /** * Responsible for opening/closing dialogs in a control. */ export interface ConnectorDialog<T> { /** * Opens a dialog and shows a WebComponent inside it. * * @param {string} [componentTag] name of the WebComponent which will be loaded inside the dialog */ open(componentTag?: string): void; /** * Closes the dialog */ close(): void; } connector.field FieldConfig Object This gives you information about the field. For simplity in maintaining the docs, here's a copy of the type file: export interface FieldConfig { /** Static name of the field */ name: string; /** Ordering index of the field inside the form */ index: number; /** Field label */ label: string; // updated on language change /** Field placeholder text */ placeholder: string; // never updated atm. Probably will be /** Input type of the field. e.g. string-default, string-dropdown, etc. */ inputType: string; /** Data type of the field. e.g. String, Hyperlink, Entity, etc. */ type: string; /** Tells whether the field is required */ required: boolean; // updated on language change /** Tells whether the field is disabled. This is the initial value that was set in settings for this field */ disabled: boolean; settings: FieldSettings; } connector.field and connector.field$ FieldConfig Object The connector.field object tells you how the field is configured. Note that if you use this object directly, you won't be notified of changes. For that you should use the connector.field$ stream. export interface FieldConfig { /** Static name of the field */ name: string; /** Ordering index of the field inside the form */ index: number; /** Field label */ label: string; // updated on language change /** Field placeholder text */ placeholder: string; // never updated atm. Probably will be /** Input type of the field. e.g. string-default, string-dropdown, etc. */ inputType: string; /** Data type of the field. e.g. String, Hyperlink, Entity, etc. */ type: string; /** Tells whether the field is required */ required: boolean; // updated on language change /** Tells whether the field is disabled. This is the initial value that was set in settings for this field */ disabled: boolean; /** * Settings of the field, as configured in the UI * This is just a normal dictionary-object with keys having the same names as the fields in the configuration dialog. * Note that most keys are PascalCase, not camelCase. */ settings: FieldSettings; } connector.loadScript() Method /** * Load a script into the browser - but only once. * Makes sure that script with the same source is loaded only once and executes callback. * * @param {string} globalObject - name on window.xxx which is checked if the js is already loaded * @param {string} src - path to the script * @param {(...args: any[]) => any} callback - your callback function * @memberof Connector */ loadScript(globalObject: string, src: string, callback: (...args: any[]) => any): void; Read Also How To Create Custom Input Fields Tutorials for Custom Input Fields History Introduced in 2sxc 11.02"
  },
  "js-code/custom-fields/field-wysiwyg.html": {
    "href": "js-code/custom-fields/field-wysiwyg.html",
    "title": "Customizing the WYSIWYG Field in 2sxc 11 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Customizing the WYSIWYG Field in 2sxc 11 you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } These are the technical specs for reference. Make sure you first read the how to before you start. Since WYSIWYG is so complex, with image-handling, special paste etc. we believe most developers are better of using the existing system, and just reconfiguring it. That's what we'll explain here. Make sure TinyMCE is loaded We must first load the standard WYSIWYG control before we start, otherwise you'll run into timing issues. The best way to do this can be seen in the tutorial, but this is what you need: const builtInWysiwyg = '[System:Path]/system/field-string-wysiwyg/index.js'; /** Our WebComponent which is a custom, lightweight wysiwyg editor */ class StringWysiwygCustom extends HTMLElement { /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { // We need to ensure that the standard WYSIWYG is also loaded this.connector.loadScript('tinymce', builtInWysiwyg, (x) => { this.initWysiwygCallback() }) } initWysiwygCallback() { // ... } } This way the form will load the built-in WYSIWYG control and trigger your callback, OR if it has already been loaded, immediately trigger your callback. Configure the TinyMCE WYSIWYG Web Control The control has these public properties: mode - values can be edit and preview, default is preview connector - the object that every form control needs. You must connect this reconfigure a special object that can change the configuration at various points Code Sample: const tagName = 'field-string-wysiwyg-micro'; const builtInWysiwyg = '[System:Path]/system/field-string-wysiwyg/index.js'; /** Our WebComponent which is a custom, lightweight wysiwyg editor */ class StringWysiwygCustom extends HTMLElement { /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { // We need to ensure that the standard WYSIWYG is also loaded this.connector.loadScript('tinymce', builtInWysiwyg, (x) => { this.initWysiwygCallback() }) } initWysiwygCallback() { // 1. Create a built-in field-string-wysiwyg control const wysiwyg = document.createElement('field-string-wysiwyg'); // 2. tell it if it should start in preview or edit wysiwyg.mode = 'edit'; // can be 'preview' or 'edit' // 3. attach connector wysiwyg.connector = this.connector; // 4. also attach reconfigure object which can change the TinyMCE as it's initialized wysiwyg.reconfigure = new WysiwygReconfigurator(); // 5. Append it to the DOM. Do this last, as it will trigger connectedCallback() in the wysiwyg this.appendChild(wysiwyg); } } /** The object which helps reconfigure what the editor will do */ class WysiwygReconfigurator { configureOptions(options) { options.toolbar = \"undo redo | bold italic\" return options; } } // Register this web component - if it hasn't been registered yet if (!customElements.get(tagName)) customElements.define(tagName, StringWysiwygCustom); connector Object for the connector object please consult connector API Understanding TinyMCE and Life-Cycle TincMCE has a huge set of options, so let's just get a quick idea of how things work inside it Once loaded, there is a global tinymce object which is like a master-controller for all tinyMCE editors. We call it the Editor Manager Each editor has a personal editor object which has the configuration for just that editor What is configured on tinymce? The global tinymce controller is responsible for things like Translations options, including plugins which are activated skin and theme custom_elements ...and way more What is configured on an editor? Buttons (for use in Toolbars) Toolbars ADAM and Dnn-Bridge Initialization Process / Life-Cycle This is how the control is loaded / built in the 2sxc/EAV form. Note that for each method explained on the reconfigure object, the initializers will do duck typing to check if that method exists and if detected, will run that. #1 Load Phase The field-string-wysiwyg WebControl is created At this time, the mode, connector and reconfigure must already be set by the parent It will requests that the from loads all the TinyMCE JavaScripts When that has completed, it will fire a callback to start translating / configuring #2 Translation Phase In this phase, translation maps are built, so buttons can show labels in various languages. This map is global, so try to avoid name clashes. First the built-in translations of 2sxc/EAV are added Then reconfigure.addTranslations(editorManager, currentLanguage) is called. In this phase you can add your own translations according to tinyMCE standards or modify prebuilt translations. #3 Manager Configuration Phase At the beginning reconfigure.managerInit(editorManager) is called so you can pre-initialize something. We don't really know why you would need this, but we added it just in case. Then the default options are generated Now reconfigure.optionsInit(options, buttonOptions) is called. Here you can change the objects as you need to add/remove options. the options are the standard tinyMCE options which have been prebuilt The buttonOptions are a special object which affects automatic button definitions. This is still WIP Now the configuration system builds more options based on the environment, features etc. Then it calls reconfigure.optionsReady(options) so you could make some final changes. Now tinymce (the Editor Manager) receives the options to start. This also includes a callback (provided by our form) which will do editor initialization. #4 Editor Configuration Phase When the tinyMCE editor is finally created, a callback or the wysiwyg is triggered. This will attach various events like init, focus, blur, change, undo etc. Once attaching these events is done, it calls reconfigure.editorBuilt(editor) so you could make changes. When init is triggered, it will first call reconfigure.editorInit(editor) so you can make changes or add buttons using the tinyMCE API. It will then run internal code to add all the button definitions like H1, H2 etc. Then it asks for reconfigure.disablePagePicker and if not true, will attach the Dnn page picker It will also ask for reconfigure.disableAdam and if not true, will attach ADAM functionality How to Modify the Behavior Best check out these tutorials Basic tutorial, just providing 4 standard buttons Advanced tutorial adding a custom button History New system in 2sxc 11 using WebComponents (previously this was not possible)"
  },
  "js-code/custom-fields/index.html": {
    "href": "js-code/custom-fields/index.html",
    "title": "How To Create Custom Input Fields (v11.2) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "How To Create Custom Input Fields (v11.2) you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } Sometimes you want a custom input field - as color-picker, dropdown-from-api or whatever. Tip 2sxc 11 finally allows you to do this using simple WebComponents Registering these happens by placing them in a specific folder You can also make them configurable by placing a content-type json in another folder Note There are more ways to provide and register custom input fields - like when you need them globally across many apps and portals. That is not discussed here. Quick-Start Video and Tutorial If you're new here, best watch this video: Then check out the tutorials. What kind of Custom Input Field can you Create You can create any kind of custom input field, as a JavaScript WebComponent. Look and Feel however you want it Any kind of JS code Talking to any other system (Google Maps, etc.) Talking to any endpoint (weather APIs) Tip This overview will get you started, but we've already created demos on the 2sxc Tutorials. If you want to know more, you should also read the specs Getting Started with Custom Input Fields Basically a custom Input Field is just a index.js in the correct folder. These are the specs: An input field as described here is an App Extension. All App Extensions must each lie in an own folder... within a folder called system inside the App folder The folder name for your custom input field must obey certain naming rules so that they are auto-detected. The javascript that will be loaded must be called index.js Your script must register a custom element - a WebComponent - in the browser The name of your custom element is predefined, and must adhere to the naming rules. Here's a checklist to get this setup Note Once you have that setup, the input field is automatically detected and a user can choose it as a field type in the configuration. Some Background on WebComponents The WebComponent has a simple lifecycle - from when it's created to when it receives data and can push changes back to the form. The form itself is reactive. This means that your field will receive messages when the value changes or when other values change (in case you want to use other field values in your input). The API to communicate with the form has a few complexities you need to know. This is because the form is very dynamic - so the user could switch languages, and your input field needs to react to this. So let's get started \uD83D\uDE80! Getting the HTML into the Custom Input WebControls are developed using pure JavaScript, but a control is automatically a rich DOM object. So your this object can do all kinds of DOM manipulations, but in most cases you'll just do something like this: this.innerHTML = 'Hello <em>world</em>!'; Now you have to wait with doing this, till your object has been added to the DOM, so you need to kick this off in the connectedCallback() like this: class EmptyHelloWorld extends HTMLElement { /* Constructor for WebComponents - the first line must always be super() */ constructor() { super(); } /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { this.innerHTML = 'Hello <em>world</em>!'; } } Read and Write Values The 2sxc form will initialize your custom element and attach a connector object. This happens automatically, so you will have it once connectedCallback() is fired. This connector is a rich object with lots of stuff, but for your field value you need to know these bits connector.data.value gets you the current value connector.data.update(newValue) updates the form with the changed value connector.data.value$ is the observable version of the value - this is great for advanced use cases, but otherwise you can stick to the simple .value Tip Avoid calling update(...) if nothing changed - as it will make the form dirty, so the user will be asked if he wants to save when cancelling the dialog, even though nothing changed. Tip Check out this tutorial example of Pickr to see all this in action Load Custom CSS and JS Libraries Since this is all standard JavaScript, you can do it anyhow you want. For example, to load some CSS we recommend that you simply add a <link> tag to your html, like this: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css\"/> For JavaScript you can do the same, either using a <script> tag or telling the browser to load the JS using DOM commands. We also provide a helper on connector.loadScript(name, url, callback) which does the following: Check if the name given in the first parameter exists on the window object (to check if it's already loaded) If not, load the script provided in the url Watch the window object using polling to see when the item with name is created Then trigger your callback function Tip Check out the tutorial example of Pickr to see all this in action Make your Fields Configurable Now you have a color-picker, but each field may require a different set of preconfigured colors. Or maybe your date picker has could optionally restrict dates to weekdays. In these cases, you need configuration specific for the field. Tip 2sxc 17 introduces the ability to configure exactly what content-types are provided to configure the Input-Type. So without this config, the default system always uses a @All, @Xyz where Xyz is the name of the data eg. String, and @exact-name-of-the-input-type eg. @string-my-picker. With the config, you can eg. skip the @String even if you have a string field. Create Your own WYSIWYG Field WYSIWYG fields are very hard to do right. Basically you can simply create your own using the same principles as mentioned above. But we recommend that you use the existing WYSIWYG field provided by 2sxc and just change some of the configurations. Tip By just reconfiguring the existing 2sxc WYSIWYG you will benefit from ADAM file-upload and continuous updates to the main component. Here's what you need to know The WYSIWYG field is based on TinyMCE - so to make configuration changes, you'll need to understand that API pretty well. To change it, you need to create a wrapper component which contains the standard 2sxc-wysiwyg and give it different configurations. To do this, we are calling various methods on a reconfigure object of your wrapper - so you can override most of the defaults To learn more, best look at the tutorials and the API Basic tutorial, just providing 4 standard buttons Advanced tutorial adding a custom button WYSIWYG Reconfigure API"
  },
  "js-code/dnn/jquery.html": {
    "href": "js-code/dnn/jquery.html",
    "title": "JQuery in Dnn and 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JQuery in Dnn and 2sxc you are here (click to zoom) - discover the stack .context-box-summary .frameworks-js { visibility: visible; } Often you'll need and want jQuery, but when you don't it shouldn't be loaded for performance reasons. Tip Removing jQuery and jQueryUI will boost your mobile PageSpeed like crazy. So only include it on pages where you really need it. Warning We believe jQuery was once amazing, but should be seen as end-of-life. Our docs still show how to work with it, but we highly recommend to stop using it. See also our blog How Dnn Auto-Loades jQuery There is some history to this which we'll explain briefly. Dnn made jQuery a first-class citizen around Dnn 4, and since then most of the UI was jQuery based. For a while there even was a standard that buttons etc. should be built and styled with jQuery UI. That is not the case any more. You can now easily run Dnn (at least in browsing mode, not editing) without jQuery. But because jQuery was always there developers never noticed that they could leave it away, and many parts like Templates would simply rely on them. There were also many things that automatically added jQuery but were never noticed. Here some important examples: 2sxc always used the ServicesFramework of Dnn which internally auto-added jQuery Most Dnn websites use popups for login, and just doing this automatically adds jQueryUI and jQuery to the page. You can easily stop this using the recipe Remove jQueryUI from my page In case your code is running on a page without jQuery but you need it, your code should tell Dnn that you want jQuery, like this: Warning Don't manually add urls to the jQuery files, make sure you use the official API. This should help you prevent loading jQuery multiple times and avoid conflicts between jQuery version. Tip If you do need a newer version of jQuery, that is possible but needs some tweaking to get them to run side-by-side. It's done using the jQuery.noConflict(). How 2sxc loads jQuery in Dnn Up until 2sxc 10.24, every 2sxc module automatically loaded jQuery because 2sxc used the ServicesFramework of Dnn Starting from 2sxc 10.25 old templates auto-load jQuery for backward compatibility. This includes token-templates and Razor templates which don't have an @inherits statement at the beginning. Anything new done using the RazorComponent will not do that unless your template code requests it. In 2sxc 10.25 and newer, all core features of 2sxc don't need jQuery. So anonyomus browsing of your site won't require jQuery at all, even if you're doing API calls or using the $2sxc javascript API. But what you do need if you're using the new RazorComponent, is to tell 2sxc that you plan to use JavaScript and APIs. This lets 2sxc add the stuff to the page to make the magic happen. See Activate 2sxc JavaScript APIs on a Page. Because 2sxc doesn't use jQuery any more for normal stuff, this will have the following effect: Add a special header to the page containing information needed for API calls Load the 2sxc.api.min.js in the correct way It's important to note that this will not load jQuery."
  },
  "js-code/edit-form/dialog-settings/index.html": {
    "href": "js-code/edit-form/dialog-settings/index.html",
    "title": "Edit - Dialog Settings (beta v19) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Edit - Dialog Settings (beta v19) In v19 we're trying to allow more control over what the dialog provides. A feature which is still in beta, is to control which languages are used to show labels, help-texts, buttons etc. in the dialog. Standard Setup By default, the user can customize his preferred languages in the dialog settings. Now there are probably special cases, where these settings should be provided by the opening button, or possibly prevent the user from changing them. Warning This is still experimental, and the details could change in future versions. Customizing the Dialog This would create a toolbar which would open the dialog with the specified language settings: <!-- set only the UI language --> @Kit.Toolbar.Empty().Edit(itemToCopyTyped, tweak: t => t.Parameters(new { dialogSettings = new { languageUi = \"de-de\", } }) ) <!-- set the UI language and the form-language --> @Kit.Toolbar.Empty().Edit(itemToCopyTyped, tweak: t => t.Parameters(new { dialogSettings = new { languageUi = \"de-de\", languageForm = \"en-us\" } }) ) This would open the dialog with the specified language settings, and prevent the user from changing the UI language: @Kit.Toolbar.Empty().Edit(itemToCopyTyped, tweak: t => t.Parameters(new { dialogSettings = new { languageUi = \"de-de!\", languageForm = \"en-us\" } }) ) This would simply disable the user settings: @Kit.Toolbar.Empty().Edit(itemToCopyTyped, tweak: t => t.Parameters(new { dialogSettings = new { languageUserSettings = false } }) ) This would combine the preset with deny-change. Note that we're still using the ! to indicate that the user can't change the UI language. This is because the user could have configured these settings in a previous dialog, so then those settings would still apply. Kit.Toolbar.Empty().Edit(itemToCopyTyped, tweak: t => t.Parameters(new { dialogSettings = new { languageUserSettings = false, languageUi = \"de-de!\", languageForm = \"en-us\" } }) ) History Introduced in 2sxc 18.06 as beta"
  },
  "js-code/edit-form/formulas/app-settings.html": {
    "href": "js-code/edit-form/formulas/app-settings.html",
    "title": "Use App Settings in Formulas | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use App Settings in Formulas Sometimes your App will have App Settings to configure how it should behave. In Razor, there was always an API to read the setting so the output could react to this. In v16 you can also use these settings in formulas, so you can do things like this: var showAdvanced = context.app.getSetting(\"Settings.FormulaDemoShowAdvanced\"); This allows your UI to show/hide fields based on activated features. It also lets you specify all kinds of things in a central manner. Prerequisite: Specify what Settings are available For security reasons, the API can't read any settings by default. This is because Formulas run in the context of the current editor, and some settings are sensitive. So to enable the settings, you must first specify which settings are available. You can do this in the ContentType configuration here: You can specify any App Setting as well as Site or Preset settings here from the Settings Stack. Create the Formula Here's an example as it's shown in the tutorial (it controls the Visible property of a field): v2((data, context) => { return context.app.getSetting(\"Settings.FormulaDemoShowAdvanced\"); }); Tip Every setting must be prefixed with Settings. for now. History Introduced in 2sxc 16.00"
  },
  "js-code/edit-form/formulas/context.html": {
    "href": "js-code/edit-form/formulas/context.html",
    "title": "context Object in Formulas | 2sxc 19 for Dnn and Oqtane",
    "keywords": "context Object in Formulas The context contain additional information about the context we're running in. app - contains information about the current app new 13.07 appId zoneId isContent isSite isGlobal cache - an object which is only for this function and will be persisted across calls - use it to save temporary values debug - a true/false toggle if the form is in develop/debug mode - Use this to show/hide really advanced fields. new in 12.02 target - everything about the target of the formula - the current field type = What the function processes Field.Value or Field.Settings (Future: Form.Variable etc.) name - field name or setting-name, so FirstName or Visible entity id - the id of the entity - 0 if it's new guid - the GUID of the entity, always provided type - entity type information guid name culture code name - this will return undefined scenarios where no languages are activated features new v13.10 isEnabled('FeatureName') - will return true if this feature is enabled. Important: only admins users will know about all available features, non-admins will only have a subset marked as public. form new v13.10 runFormulas() (deprecated in v2) - will run all formulas in the current form. This is typically meant for use in fetch-promises after the data returned and was put in the cache new 13.07 user new in v13.11 email new v16.00 guid new v16.00 id user id or -1 if anonymous isAnonymous - true if the user is not logged in isContentAdmin new v16.00 isSiteAdmin isSystemAdmin name new v16.00 username new v16.00 experimental - this is for internal APIs we're testing, they are not public. You can use them, but expect the APIs to change in near future Using the context.cache In some cases you may want to remember a result of intermediate work. For this you can use the context.cache object. A simple exammple would be if you only want to run something once, in which case you could write something like this v1(data, context) { // don't do anything on following runs / return existing value if(context.cache.notFirstRun) return data.value; context.cache.notFirstRun = true; return true; } History Introduced in 2sxc 12.01 Added context.features.isEnabled('FeatureName') in v13.10 Added context.features.get('FeatureName') in v13.10 Added context.app in v13.10 Added context.user in v13.11 Added context.form.runFormulas() in v13.11 Shortlink to here: https://go.2sxc.org/js-fcontext"
  },
  "js-code/edit-form/formulas/data.html": {
    "href": "js-code/edit-form/formulas/data.html",
    "title": "data Object in Formulas | 2sxc 19 for Dnn and Oqtane",
    "keywords": "data Object in Formulas The data object contains the most commonly used data, specifically value - the value which would be used if the function didn't run default - the default value this thing would have based on field configuration (use for reset to default) prefill - the prefill value initial - the initial value this setting/field had when it was loaded (use for reset to initial) new in 12.02 [FieldName] - all the values of the other fields parameters.[ParamName] - all the parameters passed to the dialog, currently the ones in the prefill - v13.10 Example of the data object in a Formula which would set the Visible property of a field FullName: data = { \"value\": true, // It's visible ATM \"default\": false, // Originally hidden till first/last were given \"prefill\": undefined, // Would contain prefill information \"FirstName\": \"Douglas\", // string \"LastName\": \"Adams\", // string \"Birthday\": \"1952-03-11T00:00:00.000Z\", // string, always as neutral/Zulu/UTC time \"Awards\": [\"guid-guid\", \"guid-guid\"], // IDs pointing to other entities \"FullName\": \"Douglas Adams\", // calculated by formula \"Photo\": \"file:72\", // link information \"Album\": \"\", // library fields have no value } Special Remarks about Date Values Dates are stored as strings, not as Date objects. The UI doesn't care about time zones, so the strings always use Zulu time and not the local time zone. This may cause some challenges which you want to know about. \uD83D\uDC49\uD83C\uDFFD See returning dates History Introduced in 2sxc 12.01 Added data.parameters in v13.10 Shortlink to here: https://go.2sxc.org/js-fdata"
  },
  "js-code/edit-form/formulas/designer/index.html": {
    "href": "js-code/edit-form/formulas/designer/index.html",
    "title": "Formula Designer | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formula Designer you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } In the Edit-UI you can always enter a Developer-Mode to develop / debug your formulas using real life data. Enter Developer Mode When the edit form is open, press Ctrl + Alt + Shift (Ctrl + Option + Shift on Mac) and click anywhere in the form. The debug bar should appear. If you have difficulties, use this checklist. Select Formula to work On In the dialog you'll see dropdowns to select the entity, field and property. Things that already have a formula are bold: The Formula Designer These are the important parts in the UI: Tab for the Formula Designer Tab for logs/errors caused by formulas Pick the Entity on which to edit a formula - this often has only 1 entry Pick the Field on which to edit the formula Pick the Property or select Value to determine what the formula affects Free-Text entry to create formulas for other properties. Use Fields.Settings.SettingName Help Formula code - see JS Formulas docs Data-Snippets showing you what the data object has for use in your code This is only visible in v1, but not in v2, as v2 has intellisense and doesn't need this Results (live) when the formula is running to show what came out of it Edit to enter formula edit mode Reset the formula to what it was originally Save Play / Run the formula Debug Formulas By default, as soon as you're working on a formula, it will dump the data, context and result to the console once it's running. This is what that looks like (Make sure to enter developer mode in Chrome using F12): You can also to do additional debugging. For that please consult the JavaScript Formulas Docs History Added in 2sxc 12.01 Ability to also create new formulas directly in the UI ca. 2sxc 14 Enhanced new v2 API in 2sxc 15.7 - officially released in 16.0"
  },
  "js-code/edit-form/formulas/faq.html": {
    "href": "js-code/edit-form/formulas/faq.html",
    "title": "Formulas Frequently Asked Questions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas Frequently Asked Questions you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } Where are Formulas Stored? See Where Formulas are Stored. When do Formulas Run? As of now, they run whenever any data changes in the form. This can mean that they run multiple times because if formulas depend on each other, there may be a few cycles till all values stabilize. Can Formulas detect Lifecycle Information? As of now the formulas always run on every change detection. The following information is currently not yet given to the formula: What phase of the lifecycle the formula is on (init, pre-render, etc.) Events which happened before Run-count If you really need this, your formula can track this using the context.cache object. Can Formulas be Disabled? Stored Formulas can be disabled with a toggle in the field settings. In v2 (\uD83C\uDD95 2sxc 16) this is possible by returning a object with {stop: true}. This will stop the formula from running again. In v1 you cannot disable Formulas at runtime. Even Formulas whose result is discarded are still run on every cycle - this is by design. If you need to stop a formula in v1, do this by placing a value on context.cache (see Formulas Tutorials). Can Formulas run on Specific Events? This is not yet possible."
  },
  "js-code/edit-form/formulas/guide.html": {
    "href": "js-code/edit-form/formulas/guide.html",
    "title": "Formulas in the Edit UI Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas in the Edit UI Guide you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } This guide will help you get started with Formulas. Start with an Overview Before you even start it's best to have an overview. The 2sxc 12 Formulas Release Video is a good place to start. Step 1: Discover Live Examples \uD83D\uDD2C First you must look at the live samples in Formulas Tutorials If you did this, you should now have seen What formulas tend to look like All kinds of things they can affect That they run in the browser, and keep updating with every interaction Step 2: Get to Know the Formula Designer \uD83D\uDC49 To develop Formulas use the Interactive Formula Designer Step 3: Try it Yourself \uD83D\uDC49 Check out the JS Formula Documentation - also the data and context objects \uD83D\uDC49 Also read about the Formula Targets and Return Values Tips and Tricks While developing, always keep the F12-Console open to see what's happening You can always add a console.log(data, context); or similar in your code to see in real time what's being processed. You can also add a line debugger; and the browser will stop at this line so you can inspect the variables and watch your code. Do use Formulas as pure functions. Step 4: Go Deeper You should also check Ephemeral / Temporary Fields as they are very useful together with Formulas. Know that you can also use webApi calls on the context.sxc.webApi to get data from the backend (see tutorials) Also read about the empty-end Field to close a Field-Group as it's useful when grouping fields. History Introduced in 2sxc 12.01 Extended with Required ca. v13.00 Extended with Notes ca. v13.10 Improve formula designer to allow creating new formulas directly in the designer ca. v14.00 Added formula designer API help ca. v14.00 Massively improved v2 Formulas in 2sxc 15.07 (officially released in 16.0) Shortlink to here: https://go.2sxc.org/formulas"
  },
  "js-code/edit-form/formulas/index.html": {
    "href": "js-code/edit-form/formulas/index.html",
    "title": "Formulas JavaScript Specs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas JavaScript Specs Formulas let you create JavaScript functions to calculate Values and Properties of things in the edit form. Learn about the Formula concepts here. It also shows you the UIs, how to configure etc. Then you should continue with the Formulas Guide \uD83C\uDF93 Examples Set Field Value to missing-data if empty This formula would be applied to the fields Value. v2((data) => { return data.value ? data.value : 'missing-data'; }); Set Field Visibility based on another Toggle Switch This formula would be applied to the Setting Visible. v2((data) => { return data.ShowAdvanced; }); Add an Emoji to a Group-Heading if inside it an important property was set This formula would be applied to a group headings Setting Name which is the visible title: v2((data) => { return data.default + (data.EditInstructions || data.ListInstructions ? ' ✅' : ''); }); Note that we're returning data.default and some more text, not data.value. This is because the value would change on each cycle, but data.default contains the original value. History Introduced in 2sxc 12.01 Added data.parameters in v13.10 Added context.features, context.app, context.user, context.sxc etc. in v13.10"
  },
  "js-code/edit-form/formulas/return-date.html": {
    "href": "js-code/edit-form/formulas/return-date.html",
    "title": "Return Date-Values in Formulas | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Return Date-Values in Formulas Date values can cause problems, because when you are working with them in JavaScript, the time zone is always important. Internally dates are stored as strings, not as Date objects. The UI doesn't care about time zones, so the strings always use Zulu time and not the local time zone. This may cause some challenges which you want to know about. Returned Date Objects If your function returns a date-object we will assume that you were creating a new date and didn't worry about time zones. So we will simply drop the time-zone information and assume that's what you wanted. So if you do return new Date(); it will contain something like Tue Jun 08 2021 11:22:33 GMT+0200 (Central European Summer Time). We will treat this as 2021-06-08T11:22:33 and ignore the time zone. The UI will then also show 2021-06-08 11:22:33 Returned Date Strings If you return a date-string without time-zone like 2021-06-08 10:00 we will assume this is what you want, and treat it as such. If you return a date-string with time zone like 2021-06-08 10:00 +0200 we will assume you used something like new Date().toString() and ignore the time zone, so we'll keep 2021-06-08 10:00 because you almost certainly didn't realize that the toString() would result in a wrong time. Likely Problems on Date-Formulas Basically if you create a new Date() object and return that, everything will work as expected. And you construct a UTC-only date everything will work too. Where things will surprise you is when you convert the data.value and simply return it without making corrections. These things will cause problems: Problem: return new Date(data.value); No Problem: return new Date(); Problem: var x = new Date(data.value); x.setMinutes(0); x.setSeconds(0); return x; No Problem: var x = new Date(); x.setMinutes(0); x.setSeconds(0); return x; Problem: var otherFieldDate = new Date(data.Birthday).getDay(); will probably return the wrong day This is because our data.value doesn't have a time zone, and converting it to Date(...) will construct a date in the users time zone resulting in a shift by a few hours. So this will only affect formulas which use the existing date, modify it, and are not aware of the time-zones. To fix this, make sure that if you convert existing data to a Date, you pretend it's in the time-zone changes of the current browser. This example shows a formula that will remove the time on a new date or the existing one. v1(data, context) { // Use existing date (but pretend it's local time by dropping 'Z') or use current Date var date = data.value ? new Date(data.value.replace('Z', '')) : new Date(); date.setHours(0,0,0,0); // flush all time parts return date; } Another option is to work with the Zulu time but make sure you UTC it when returning, or work with .getTimezoneOffset(). History Introduced in 2sxc 12.01"
  },
  "js-code/edit-form/formulas/storage.html": {
    "href": "js-code/edit-form/formulas/storage.html",
    "title": "Where Formulas are Stored | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Where Formulas are Stored you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } Formulas are stored as Field Metadata as part of the Content-Type. If ever you need to do some manual operations (which you shouldn't need to do), you can find them here: Tip Normally you will just add/edit formulas in Interactive Formula Designer As shown in this image, all fields having formulas are easy to discern: You can create or edit Formulas them in the general field settings: History Introduced in 2sxc 12.01 Extended with Required ca. v13.00 Extended with Notes ca. v13.10 Shortlink to here: https://go.2sxc.org/formulas"
  },
  "js-code/edit-form/formulas/targets-and-return.html": {
    "href": "js-code/edit-form/formulas/targets-and-return.html",
    "title": "Formulas Targets and Return Values | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas Targets and Return Values you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } These are additional infos about Formula Targets and cases where they need a special result, so you understand the behavior better. The Target The target key of a formula determines what your Formula will affect. Since data.value contains what would be used if your formula didn't run, then this of course will also contain the previous value of the target. These are the possible targets: Field.Value - will get / set a value on a field Field.Settings - will get will get/set a setting of the field. This is just the Type identifier. A full key often includes the exact setting to be addressed, like Field.Settings.Name - change the label / name / title of a field Field.Settings.Visible - Controls the visibility of the field / group. true means visible Field.Settings.Disabled - controls that the field can be interacted with or is disabled. true means it's blocked Field.Settings.Required - shows if a field is required warning required isn't fully implemented ATM - the form will not always reliably enforce this if it's changed dynamically *. Field.Settings.Notes to change the description / help-text (v14) Field.Settings._[Anything]_ - other Settings that can be changed, eg. Field.Settings.Collapsed on a field-group to change if it's open/closed Field.Settings.DropdownValues on dropdown fields (new v15) Field.Validation - show errors/warnings on a field based on the input \uD83C\uDD95 v16 Tip Remember that data.value contains the value which is used if the formula doesn't run or doesn't return anything. If you need the value in the field/setting at form-load, use data.default. And if you are doing some prefill-magic, you can get that on data.prefill. \uD83D\uDC49 Read more about this is the JS Docs. Field Value Formulas These are the most common formulas, as they are used to get/set the value of a field. Each field type or property may expect a different data type. Make sure you provide that. So if you are updating a boolean field, you should return a boolean value. Formulas for Common Settings Field.Settings.Name - Label of a Field This can be changed as needed. We recommend that you never add * to the name, as this is the indicator for required and would confuse users. On field groups we often use this to add emojis such as ✅ or ❌ to indicate if the fields inside are what is needed. Expected type: string Field.Settings.Visible - Show/Hide a Field Shows/hides a field or a group of fields. When you set this on a group, it applies to all properties in the group. So hiding a group hides all fields inside it, showing it shows all fields inside it. Expected type: boolean Field.Settings.Disabled - Enable/Disable a Field If you return true to set Disabled=true it will disable the UI. Of course if the field is already not visible, the user won't see this. Important Even if you set Disabled=false other rules may override this. For example, if the field may not be translated and you're on a secondary language, it will still remain disabled. Important Disabling a group will not disable all the fields in it. We may consider implementing this some day, but as of now it won't happen, so you'll need to disable each field if this is what you need. Expected type: boolean Field.Settings.Required - Mark Field as Required This determines if the Field is required. Important Changing the required changes the * indicator on the UI, but as of v12.01 it doesn't yet affect the validity checks in the form. This is an important limitation to be aware of. Expected type: boolean Formulas for Special Settings Field.Settings.Collapsed - for Groups This is a setting which only would affect group fields. Setting Collapsed to true collapses the group, to false opens it. Tip Remember that data.default will always give you the initial state of this setting. Expected type: boolean Field.Settings.DropdownValues - for DropDowns Field.Settings.[Anything] Since many controls can have other settings these can be controlled by formulas as well. Important We haven't tried every setting and some may not have the expected result, since the form has never been this dynamic before. We'll work on fixing issues as we hear about them. Formulas for Validation Field.Validation - Show Errors/Warnings This is a special kind of formula as it only affects the hints below the input field. Best check out the tutorials to see it in action. Expected type: json object { severity: 'warning', message: 'please use lower case only', } History Introduced in 2sxc 12.01 Dramatically enhanced with v2 in 2sxc 16.00"
  },
  "js-code/edit-form/formulas/v1.html": {
    "href": "js-code/edit-form/formulas/v1.html",
    "title": "Formulas JavaScript V1 Specs \uD83E\uDD71 (obsolete) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas JavaScript V1 Specs \uD83E\uDD71 (obsolete) V1 formulas were the first formulas introduced. The documentation for them is preserved, as you'll still see them around. V1 Function Specs All functions must be called v1, it must be lower case This is important because we cannot guess when the API will change The first line in the code must start with the function name v1. You cannot put comments or empty lines before the v1 Your function must have brackets afterwards and it can have 0, 1 or two params, so you can use one of the following v1() { ... } v1(data) { ... } v1(data, context) { ...} The parameter names are anything you want, but the order of what you get is always data and then context. You can also write v1(d, c) { ... } The data and context Objects \uD83D\uDC49\uD83C\uDFFC See data \uD83D\uDC49\uD83C\uDFFC See context Return a Valid Value Each field type or property may expect a different data type. Make sure you provide that. Warning If you return nothing, undefined or the wrong data type, the result will be ignored and the value/setting will not be changed. Common Mistakes returning nothing with return; - this will be regarded as an error and be ignored. returning undefined. Returning a falsy instead of a real true or false for a boolean value History Introduced in 2sxc 12.01 Added data.parameters in v13.10 Added context.features, context.app, context.user, context.sxc etc. in v13.10"
  },
  "js-code/edit-form/formulas/v2-return.html": {
    "href": "js-code/edit-form/formulas/v2-return.html",
    "title": "Formulas JavaScript V2 Return Values \uD83C\uDD95 v16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas JavaScript V2 Return Values \uD83C\uDD95 v16 In v2, the return values of a formula are more flexible and powerful. This should help you understand the possible return values and how to use them. Return Values on v2 You can return the same data as you did in v1 but we now have more options: return the value which should be used, like return true; or return data.value; (same as v1) return a special FormulaResult-object (specs below) like return { value: true, stop: true }; return a promise which will resolve to one of the above return a special validation object (specs below) For the next part of the documentation, we'll refer to the value to be used as the Value and if a special object is returned, we'll call it the FormulaResult. Returning Simple Values The returned value is either a simple value returned directly using return '...'; or the value property of the FormulaResult object. Each field type or property may expect a different data type. Make sure you provide that. So if you are updating a boolean field, you should return a boolean value. Warning If you return nothing, undefined or the wrong data type, the result will be ignored and the value/setting will not be changed. Common Mistakes returning nothing with return; - this will be regarded as an error and be ignored. returning undefined. Returning a falsy instead of a real true or false for a boolean value returning a date with the wrong timezone - see returning dates Returning FormulaResult Object For advanced features, the formula must be able to return multiple values, which is why we have the FormulaResult object. It has the following properties - all of which are optional: value - the value to be used as the result of the formula stop - if true, the formula will stop and not execute any other formulas promise - a promise to run - eg. in scenarios where we returned a value for now, and a promise for later fields - an array of fields to be set, each with a name and value property Example return { value: 'new value', stop: true, fields: [ { name: 'Field1', value: 'new value 1' }, { name: 'Field2', value: 'new value 2' }, ] }; Returning a Promise This is a highlight in v2. Any formula can now return a promise, or a FormulaResult object with a promise property. The promise itself can then return a value or a FormulaResult object. Tip When a promise is returned, it behaves as if stop was set to true. So returned promises deactivate the formula to not run again. If your code is more sophisticated and needs to run again, then the promise should also return something like { value: 'new value', stop: false }. Returning Validation Information Field Validations are errors/warnings about the contents of the field. The purpose is to do very special validations, or to show a warning for values which could be ok, but are not recommended. A validation object return looks like this: { value: { severity: 'warning', message: 'please use lower case only', } } Since the this kind of return value is an object, in can easily be confused with a FormulaResult object. So to return this object, it must be wrapped in a FormulaResult object like this: return { value: { severity: 'warning', message: 'please use lower case only', } }; You can see an example of this in the tutorial. History Introduced in 2sxc 12.01 Massively improved in v2 in 2sxc 16.00"
  },
  "js-code/edit-form/formulas/v2.html": {
    "href": "js-code/edit-form/formulas/v2.html",
    "title": "Formulas JavaScript V2 Specs \uD83C\uDD95 v16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Formulas JavaScript V2 Specs \uD83C\uDD95 v16 V2 formulas are a major enhancement to v1 formulas. Improvements include: Intellisense while typing the formula using VS Code Promise support Ability to stop the formula from running Ability to set other fields from a formula Ability to add Comments before the formula Ability to get App Settings in your formula Ability to return Validation on a field V2 Function Specs // new formula syntax - see https://go.2sxc.org/formulas v2((data, context) => { return data.value; }); All functions must be called v2, it must be lower case This is important because when APIs change, we will use v3, etc. The first line in the code must start with the function name v2. You can put comments or empty lines before the v2, but they must always use // and not /* */ The v2(...) function takes 1 parameter, namely the function to execute. This is different from v1. The reason we need an inner function is so that VS Code can provide intellisense while you type. Your function must look like one of these v2(() => { ... }); v2((data) => { ... }); v2((data, context) => { ... }); The parameter names are anything you want, but the order of what you get is always data and then context. You can also write v2((d, c) => { ... }); V2 data and context Objects \uD83D\uDC49\uD83C\uDFFC See data \uD83D\uDC49\uD83C\uDFFC See context V2 Returned Values \uD83D\uDC49\uD83C\uDFFC See Return Values Tips and Tricks You can always add a console.log(data, context); or similar in your code to see in real time what's being processed. You can also add a line debugger; and the browser will stop at this line so you can inspect the variables and watch your code. For now, we strongly recommend to use Formulas as pure functions, but with experience the recommendation may change. History Introduced in 2sxc 12.01 Added data.parameters in v13.10 Added context.features, context.app, context.user, context.sxc etc. in v13.10 Massively improved in v2 in 2sxc 16.00"
  },
  "js-code/index.html": {
    "href": "js-code/index.html",
    "title": "2sxc JavaScript and TypeScript for Dnn/Oqtane | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc JavaScript and TypeScript for Dnn/Oqtane you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } You can create awesome solutions, customizing the edit-experience and working with 2sxc-data in your JavaScript and TypeScript. It's ideal both for simple scripts like galleries as well as for bundling and distributing complex Angular or React SPAs. Get Started You should probably import the npm package into your code The 2sxc JavaScript APIs Read up on getting started $2sxc Global is the global object for everything Sxc Instance with is the module-level object The Edit Experience Overview to Editing Content Customize the edit experience (buttons, toolbars...) with the manage controller Customize the quickE (quick edit) experience In-page edit toolbars for html or javascript with settings internals of a command (with full list), of buttons and creating custom buttons Using 2sxc with Popular JS Libraries Angular / dnn-sxc-angular"
  },
  "js-code/npm-types.html": {
    "href": "js-code/npm-types.html",
    "title": "npm Types Help Write Error-Free Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "npm Types Help Write Error-Free Code you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } The 2sxc core JavaScript is developed with TypeScript. To help you write type-safe code, we've published the types on @2sic.com/sxc-typings. So just get them from there and use them in your code."
  },
  "js-code/quick-e/index.html": {
    "href": "js-code/quick-e/index.html",
    "title": "Html & JS: quickE - Quick Edit 2.0 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Html & JS: quickE - Quick Edit 2.0 you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } quickE (pronounced quicky) is the quick-edit feature inside 2sxc to quickly add / move modules and inner content blocks. This page explains the In-Browser things you must know, incl. JSON configuration Concept and Background For this please read Concept-Quick-Edit, which also explains how to include it in a Skin etc. Assuming that the $quickE is already on the page and you're logged on, it's automatically there... ...if one of two things is true: The skin includes it automatically (like the 2shine skin) You've added any 2sxc module to the page Configuring quickE Quick-Edit in HTML Since quickE 2.0 (released in 2sxc 8.7) you can now also configure it a bit. Here are the most important features enable / disable the entire quickE enable / disable module quick-edit enable / disable inner-content-block quick edit enable / disable specific buttons across everything or just on modules or inner-content-blocks To do this, just add a quick-edit-config='{...}' attribute to any DOM node with the desired configuration. Here's what will happen if you add it to a skin-dom-node, you can set \"defaults\" like \"never enable at all\" if you add it to a view-template, you can change the behavior if that view is included Why include configuration it in a View? As explained above, quickE changes it's behavior by default if it finds inner-content. This is desired on details-views, but not on templates which just create more complex content on a normal page. So on these templates, you could add a config to continue enabling module-quick-edit. The Configuration Object Structure See QuickEditConfigRoot, QuickEditConfig and QuickEditConfigButtons A Quick Razor Example If you want to add this attribute only when the user is editing the page, the best way to do it is like this: <div @Edit.Attribute(\"quick-edit-config\", new { modules = new { enable = true }})> ... </div> or this <div @Edit.Attribute(\"quick-edit-config\", new { buttons = new { select = false}, modules = new { enable = true, buttons = new { addApp = false }}})> ... </div> Read also Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App Accordion (collapsible sections) 2sxc blog History Introduced in 2sxc v08.04 Enhanced / made configurable in 2sxc 08.06.01 Added ability to specify each button in 2sxc 11.11.03"
  },
  "js-code/quick-e/quicke.html": {
    "href": "js-code/quick-e/quicke.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Html & JS: quickE - Quick Edit 2.0"
  },
  "js-code/tips/index.html": {
    "href": "js-code/tips/index.html",
    "title": "JavaScript Tips | 2sxc 19 for Dnn and Oqtane",
    "keywords": "JavaScript Tips you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } Sometimes you just need a simple trick to get things working. We're collecting the most important ones here. Delay your Scripts till the Page is ready If your script runs too early, you will run into problems. Best use turnOn. Use Module ID to point your JS to your Module Often you need to your script to work with your module only, and not accidentally work on other HTML. The best solution is also to use turnOn. Alternatively you can dynamically write your JavaScript. Here's how you can do it using Razor (Example from the Blueimp Gallery): <div id=\"blueimp-gallery-items-@Dnn.Module.ModuleID\" style=\"display:none;\"> <!-- stuff --> </div> <script type=\"text/javascript\"> $(document).ready(function () { // initialize the carousel gallery blueimp.Gallery($('[data-gallery=\"#blueimp-gallery-@Dnn.Module.ModuleID\"]').get(), { container: '#blueimp-gallery-@Dnn.Module.ModuleID', carousel: true } ); }); </script> The example above will replace @Dnn.Modul.ModuleID on the server with the module instance id, so each use on the same page will result in another unique ID."
  },
  "js-code/toolbars/advanced.html": {
    "href": "js-code/toolbars/advanced.html",
    "title": "Pure JS Mode (OLD) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Pure JS Mode (OLD) you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When a user is logged on and has edit permissions, he should see buttons to edit his content or perform other actions. This is all done in HTML / JavaScript. How to use The most common use-case is actually to provide some HTML, which the JavaScript will pick up automatically and convert into a menu. You can read more about this in Html Toolbars and Buttons. You can also generate the html as needed - for example when working with a javascript template in AngularJS, React, Ember etc. Here's a small example: var btnHtml = $2sxc(740).manage.getButton({ action: \"new\", contentType: \"BlogPost\" }); var toolbarHtml = $2sxc(740).manage.getToolbar({ action: \"new,edit,add\", entityId: 203 }); So this is really it. There are only two commands you must know: ...getButton(...) ...getToolbar(...) The rest of the magic lies in the configuration objects which you pass into these buttons. So let's continue with that. A Deeper Look Inside the System The following terms help you understand what we're doing: 2sxc has many commands like new, edit etc. which you can run with parameters like: command = { action: 'new', contentType: 'BlogPost'}; a button will run such a command when clicked, but for it to work, the button must have the command ready, including the necessary parameters. In JavaScript a button is defined like: btn = { command: { action: \"...\", ...}, icon: \"...\", ... }; and will later be converted to HTML like <a onclick='$2sxc(this).manage.run({\"action\": \"new\", \"contentType\": \"Dummy\"})'>new</a> a button group is an array of buttons, plus some shared specs like group = { buttons: [ { command: ...}, { }, { }], defaults: {...}, ... }; this will later be converted to a list of <li> nodes containing buttons a toolbar contains an array of button groups and again some shared specs / defaults, like toolbar = { groups: [ ... ], defaults: ...}; which will also be converted to the list of <li> nodes, but shows only one group at a time until the user presses a more button The full object tree of a toolbar is fairly sophisticated, and in most cases you can use shorthands which will be expanded internally before use. So you'll write // this is what you would normally write var toolbar = { action: \"new,edit,sort\", contentType: \"BlogPost\", useModuleList: true, sortOrder: 2 }; // which internally expands to this: var toolbar = { groups: [{ buttons: [{ title: \"Toolbar.New\", command: { action: \"new\", contentType: \"BlogPost\" }, icon: \"icon-sxc-plus\", addCondition: true, // more stuff here },{ title: \"Toolbar.Edit\", command: { action: \"edit\", useModuleList: true, sortOrder: 2 }, icon: \"icon-sxc-pencil\", addCondition: true, // more stuff here }, { // etc. }] }] } In most cases you just care about the shorthand. But in advanced cases where you really want to affect the behavior, you may go want to go deeper. Buttons and Commands Buttons are explained in more details here Commands which run when a button is pressed are here Custom commands which run your JS are here Button group This is just a simple object containing an array of buttons and some more settings which are rarely used and not documented yet. var group = { name: \"...\", buttons: \"...\", defaults: { // ... } }; var group2 = { buttons: [ { action: \"new\" }, { action: \"edit\", icon: \"icon-sxc-bomb\" }, \"button3\", { title: \"hello there\", command: { action: \"new\", } } ], defaults: { // todo } } Toolbar and Toolbar Configuration The toolbar can be defined very precisely, but in most cases you will opt for a short format which is expanded internally. Let's look at it: // very compact version var tb1 = { action: \"new,edit,moveup\", contentType: \"BlogPost\", entityId: 17 }; // array version var tb2 = [{ button1 }, { button2 }] // very expanded edition var tb2 = { groups: [ { name: \"group 1\", buttons: \"new,edit,more\" }, { name: \"group 2\", buttons: \"moveup,movedown,more\" } ], defaults: { contentType: \"BlogPost\", //... } }; Toolbar settings You can customize hover behavior, show behavior and more. Read about it in the toolbar settings. Custom Buttons with Custom Commands You can easily create custom buttons with custom icons, parameters and even custom scripts. It's not well documented yet, but it's best to just look through the tutorial app below. It's also explained more in the Html Custom Code Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v01.00 Public API since 2sxc v08.06"
  },
  "js-code/toolbars/buttons.html": {
    "href": "js-code/toolbars/buttons.html",
    "title": "Toolbar Button Definitions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Button Definitions you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When you create custom buttons in a floating toolbar you can customize everything including the icon and more. This is explained here. Warning Old Complicated Stuff This is old complicated stuff which you shouldn't need any more. We left it in the docs because we're not sure if some people still use this. But we strongy urge you not to use it, and use the simple toolbar APIs instead. Buttons are of html, basically a <a click=\"...\">[some-icon]</a>. When the button is created, it must already know what it's for, which is why the command must be prepared when the button is created. How to use A short example of a slightly customized button definition: var btns = [{ command: { action: \"new\", contentType: \"Category\" }, title: \"create Category\" }, { command: { action: \"new\", contentType: \"Author\" }, title: \"create Author\" }]; This simple example shows two new buttons creating different kinds of things, and we customized the label so the mouse-over would tell the editor which button is which. Let's get a bit more sophisticated var btn = { command: { // some command here }, icon: \"icon-sxc-code\", title: \"this is my special button\", classes: \"redButton\", }; The above example shows all than can currently be configured one a button. And here's a much more complex example. This is the full object-structure which the button generator getButton(...) understands: // full version var btn = { title: \"some title - ideally from translation table\", icon: \"some icon like icon-sxc-bomb\", command: { action: \"some action name like new\", moreParamsAsNeeded: \"...\" }, showCondition: someValueOr function(itemSettings) { return true; }, classes: \"btn-xyz my-class\", dynamicClasses: function(itemSettings) { if( (new Date()).getDay() === 1 ) return \"color-monday\"; } }; // typically more compact edition (will be expanded at runtime) var btn2 = { title: \"my button!\", icon: \"icon-sxc-list\", action: \"layout\" }; // or the totally compact edition var btn3 = \"layout\"; Some functioning code You may wonder how to actually use this. Here's an JSON example: <p class=\"sc-element\"> mouse over this to see inline-json version <ul class=\"sc-menu\" data-toolbar='[{ \"command\": { \"action\": \"new\", \"contentType\": \"Category\" }, \"title\": \"create Category\" }, { \"command\": { \"action\": \"new\", \"contentType\": \"Author\" }, \"title\": \"create Author\" }]'></ul> </p> Here's a more sophisticated (but also more reusable) example: <p class=\"sc-element\"> mouse over this to see the js toolbar generated by the buttons-list <toolbars2Buttons></toolbars2Buttons> </p> <script> var toolbars2Buttons = [{ command: { action: \"new\", contentType: \"Category\" }, title: \"create Category\" }, { command: { action: \"new\", contentType: \"Author\" }, title: \"create Author\" }]; // note that we cannot create the toolbars before the page-onready. Because of this // our code which creates the toolbar must be delayed, like in a $(our-code); $(function(){ if(typeof $2sxc != \"undefined\") // continue if $2sxc exists; it may be missing in non-edit modes $(\"toolbars2Buttons\").each(function(index, element){ var controller = $2sxc(element); if(!controller.isEditMode()) // check if this specific module currently allows editing return; var toolbar = controller.manage.getToolbar(toolbars2Buttons); $(element).replaceWith(toolbar); }); }); </script> How it works Buttons are used in toolbars all the time, and before they are rendered, the must be fully configured/expanded, as shown in the larger example. Internally the button is built with whatever is given, and anything not defined yet is automatically filled with the defaults. The defaults are taken from the commands definitions. Here's how the get defaults works: if all that is knows about a button is the name like var btn = \"new\", then it gets all the configuration from the defaults if some properties are known, like var btn = { command: {action: \"new\"}, icon: \"myicon\" }, then only the missing properties are taken from the defaults. Note that retrieving defaults requires the button to know which command it's for, so the name of the command is essential. The Button Properties object command the internal command which will be called, should contain both the name and the parameters like { action: \"new\", contentType: \"BlogPost\"} see also commands string icon a css class giving the button the icon. It can be one of the icons 2sxc provides, or it can be your own - just be sure to include a CSS & font which resolves the icon string title a text which is shown on mouse-over. Note that 2sxc will try to run it through the translator, so you can also use placeholders like Toolbar.Metadata string classes comma separated list of class-names like makeRed,glowHover function dynamicClasses(settings) can be used to dynamically build classes depending on the situation bool/function showCondition (API still experimental) - used to dynamically choose if this button should be shown or not bool disabled (API still experimental) would disable the click on a button bool partOfPage (API still experimental, new in 2sxc 9.5) determines if resulting changes should effect the Evoq/Dnn Page Publishing - note that it only effects the page-lifecyle, if the resulting dialogs and APIs respect this setting Some more Notes Because the button is often passed around as plain text/html, it can't rely on hidden variables to keep track of anything. This is why the onclick is so verbose, like onclick=\"$2sxc(4030).manage.run({\"action\": \"edit\", \"entityId\": 42 }). This is to ensure it always survives the text-round-trip. Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc 08.06"
  },
  "js-code/toolbars/index.html": {
    "href": "js-code/toolbars/index.html",
    "title": "In-Page Edit Toolbars and Buttons | 2sxc 19 for Dnn and Oqtane",
    "keywords": "In-Page Edit Toolbars and Buttons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When a user is logged on and has edit permissions, he should see buttons to edit his content or perform other actions. This is all done in HTML / JavaScript. By default, the server will render this in places defined by the template using placeholders like @Edit.TagToolbar(Content) and similar. Note that usually this HTML is generated by a server-side template, and will usually be wrapped in a if-user-logged-in condition. So if you want to do things differently, here's how - just remember that this is an advanced use case so it's a bit harder than what you're used to with 2sxc :). New much simpler method in v10.27+ Tip Before you try anything you should really check out the newest, easiest way to customize toolbars. Demo App and further links Toolbar Tutorials JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Published API for use in templates in 2sxc v08.06 Enhanced / Standardized in 2sxc v09.40 Made much simple in v10.27"
  },
  "js-code/toolbars/metadata.html": {
    "href": "js-code/toolbars/metadata.html",
    "title": "Toolbars which Create Metadata | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbars which Create Metadata you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } If your toolbar should create Metadata when creating new data, it must supply the for parameter. When you do this, the edit-dialog should open just like always, but once the data is saved it should have the metadata target assignment. Schema for the Simple Toolbar ...&for=[stringKey] - will default to TargetType 10 (CMS Object) and key-type string ...&for=[targetType],[keyType],[key] Examples ...&for=file:74 ...&for=4,guid,5f09bc36-1ada-4f74-8992-a90587b09af5 Razor Example This example will create a new item which will provide metadata for the Entity (Target-Type 4) 5f09bc36-1ada-4f74-8992-a90587b09af5. This example would usually need an @if(...) around it, as you would normally only want to have a create-button if nothing exists yet. <div @Edit.TagToolbar(Content, toolbar: \"+new?contentType=Category&for=4,guid,5f09bc36-1ada-4f74-8992-a90587b09af5\")> ... </div> This example is used in the Fancybox3 Gallery and will either edit existing Metadata or create new Metadata for this file. <div class=\"ga-image\" @Edit.TagToolbar(toolbar: new [] { \"toolbar=empty\", \"metadata?entityId=\" + pic.Metadata.EntityId + \"&contentType=ImageMetadata&for=file:\" + pic.FileId })> ... </div> Schema for the Advanced Toolbar System The old toolbar system which was much harder to set up also as a model for this, but we won't document it, as we don't recommend using it any more. Read More Basically you have what it takes. To go further: Metadata - (advanced ⚠) How To Customize the Toolbars"
  },
  "js-code/toolbars/old.html": {
    "href": "js-code/toolbars/old.html",
    "title": "Old APIs for In-Page Edit Toolbars and Buttons | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Old APIs for In-Page Edit Toolbars and Buttons you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Warning These are old APIs and fairly complicated. We suggest you don't use them any more! How to Use v9.40 (old, not recommended) The most common use-case is actually to provide some HTML, which the JavaScript will pick up automatically and convert into a menu. The syntax was revised in 2sxc 9.40+, which is what we show here. The previous syntax is still supported, but not recommended any more: <!-- this is the default toolbar for first content item assigned to this module --> <div sxc-toolbar='{ \"toolbar\": {\"sortOrder\":0,\"useModuleList\":true} }'> </div> <!-- this is a toolbar for a content-item with the id 6875 --> <div sxc-toolbar='{ \"toolbar\": {\"entityId\":6875} }'> </div> <!-- this could be a custom toolbar for showing a new-button only --> <div sxc-toolbar='{ \"toolbar\": {\"contentType\":\"BlogPost\",\"action\":\"new\"} }'> </div> <!-- this would have two buttons, each configured in a way --> <div sxc-toolbar='{ \"toolbar\": [{ \"action\":\"edit\", \"useModuleList\":true, \"sortOrder\": 0, \"prefill\": { \"DocumentedOnPage\": \"page:@Dnn.Tab.TabID\", \"title\": \"@Dnn.Tab.Title\" } }, { \"action\" : \"new\", \"contentType\" : \"BlogPost\" }] }'> </div> What was Changed/Enhanced in 2sxc 9.40 There were some things which worked well, but bothered us as perfectionists :). It boils down to how much of the page html must be different just because editing is used. So this is what we wanted to change: the previous implementation always used a special class sc-element to mark the tag which detects mouse-over. This was necessary, because the tag itself was added in another place in the code. This is not necessary any more, since the sxc-toolbar attribute is now on the tag which does the hover-detect. the previous implementation created a <ul> tag in the source code. Though this was not a big issue, it just didn't feel right. the previous implementation spread the information for the toolbar on two attributes toolbar and settings - this just wasn't perfect. Now it's both in the sxc-toolbar attribute. How to Use before 2sxc 9.40 <!-- this is the default toolbar for content assigned to this module --> <ul class=\"sc-menu\" toolbar='{\"sortOrder\":0,\"useModuleList\":true,\"isPublished\":true}'></ul> <!-- this is a default toolbar for content-items not assigned to this module --> <ul class=\"sc-menu\" toolbar='{\"isPublished\":true,\"entityId\":6875}'></ul> <!-- this could be a custom toolbar for showing a new-button only --> <ul class=\"sc-menu\" toolbar='{\"contentType\":\"BlogPost\",\"action\":\"new\"}'></ul> <!-- this would have two buttons, each configured in a way --> <ul class='sc-menu' toolbar='[{ \"action\":\"edit\", \"useModuleList\":true, \"sortOrder\": 0, \"prefill\": { \"DocumentedOnPage\": \"page:@Dnn.Tab.TabID\", \"title\": \"@Dnn.Tab.Title\" } }, { \"action\" : \"new\", \"contentType\" : \"BlogPost\" }]'></ul> How it Works Internally, a lot will happen to actually turn that into a real, usually floating, toolbar. Basically what happens is a script picks up all cases of <* sxc-toolbar=...> and <ul class=\"sc-menu ...\"></ul> it will then pass it to a toolbar creator which will either create a standard-list of buttons, or a custom one the resulting buttons/links will be placed in <li> items and added to the <ul> tag But you could also do a whole lot more, including custom buttons and code (since 2sxc 08.06) <div sxc-toolbar='{ \"toolbar\": { \"groups\": [ { \"name\": \"my default list\", \"buttons\": \"edit,add,more\" }, { \"name\": \"list buttons\", \"buttons: \"sort,moveup,movedown,more\" }, { \"name\": \"really advanced stuff\", \"buttons\": [ \"app\", \"zone\", { \"command\":{ \"action\": \"custom\", \"customCode\": \"alert(&apos;hello&apos;)\" } \"icon\": \"icon-sxc-bomb\" }, \"more\" ] } ], \"defaults\": { \"entityId\": 740, \"contentType\": \"BlogPost\" } }}'> ... </div> All the configuration is in the sxc-toolbar attribute, which contains two main nodes: toolbar - see below settings - see Toolbar Settings In the old syntax (before 2sxc 9.40, using the <ul> tag, two attributes are handled toolbar or data-toolbar - see below settings or data-settings - see Toolbar Settings More Background The toolbar information is: an object with some properties (like entityId) and no action verbs --> then it will auto-generate all default buttons { entityId: 17, isPublished: true } an object with some properties and 1 or more action verbs --> generate only these buttons { actions: \"new,edit\", useModuleList: true, sortOrder: 1 } an array with commands (objects with 1 verb) --> generate these Buttons [{ action: ...}, { action: ...}] on object containing a buton-group like { buttons: [ { command: { action: ...}}, { command: ...}] } a group of button-groups [ { buttons: ... }, {buttons: ...}] a full toolbar configuration { groups: [...], defaults: {...}, params: {...} } For a full scope of what is possible, you should read the js toolbar documentation. Demo App and further links JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Published API for use in templates in 2sxc v08.06 Enhanced / Standardized in 2sxc v09.40"
  },
  "js-code/toolbars/settings.html": {
    "href": "js-code/toolbars/settings.html",
    "title": "Toolbar Settings | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Settings you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Each in page toolbar can have some settings which control how it works and how it's shown. \uD83D\uDC49 Best start with the Toolbar Tutorials These Settings control how the Toolbar works autoAddMore determines where the ellipsis \"more\" button is added when the toolbar has many button-groups hover determines where the toolbar appears when the mouse hovers over the area follow tells the toolbar to follow the mouse - ideal for large content blocks show determines if th toolbar is always visible, or only on hover classes let you add classes for custom styling How to Use in Razor This example uses the simple TagToolbar API: <div @Edit.TagToolbar(Content, toolbar: new[] { \"settings&hover=left&autoAddMore=start\" })> Stuff inside the div - hover over this would show the toolbar </div> Here's another example where it uses the explicit settings parameter: <div id='tagWithToolbar1' @Edit.TagToolbar( toolbar: new [] { \"toolbar=empty\", \"+new?contentType=UiEmptyHelloWorld\" }, settings: new { hover = \"left\", show = \"always\" } )> Float over this box to get a (+) button. </div> How to Use in JavaScript If you are writing code that doesn't have Razor (for example in a JS-SPA scenario) you would write the following (which is actually what the above sample creates): <div sxc-toolbar='[\"settings&hover=left&autoAddMore=start\"]'> Stuff inside the div - hover over this would show the toolbar </div> Settings and Values string autoAddMore: (null) | start | end will automatically add a \"...\" (more) button if multiple button groups are detected. Default is end string hover: \"right\" | \"left\" | \"none\" (\"center\" ist still beta) determines where the toolbar appears when the mouse hovers over the area (usually a DIV) with the class sc-element string follow new in 11.06 \"none\" | \"initial\" | \"scroll\" | \"always\" tells the toolbar to follow the mouse - ideal for large content blocks where you need the toolbar even if otherwise it would be off-screen. Note: this used to default to scroll on the TagToolbar but was changed to none in 2sxc 11.06 because it caused too many UX issues. string show: \"hover\" | \"always\" by default any toolbar inside an element with a sc-element class will appear on hover string classes: (null) | any kind of string Old use Cases not Recommended Here's a quick example of how it used to be done - not recommended any more: <div style=\"height: 100px\" class=\"sc-element\"> 100px tall area to show alignments floating left with more to the left <ul class=\"sc-menu\" data-toolbar='' settings='{ \"hover\": \"left\", \"align\": \"left\" }'></ul> </div> The above example will hover the toolbar when the mouse moves over this DIV but place it to the left hover: \"left\" and place the more button on the left side as well align: \"left\". Demo App and further links Toolbar Tutorials old! blog post on using toolbar settings History Introduced in 2sxc 8.06 follow introduced in 11.06"
  },
  "js-code/toolbars/simple.html": {
    "href": "js-code/toolbars/simple.html",
    "title": "How To Customize the Toolbars | 2sxc 19 for Dnn and Oqtane",
    "keywords": "How To Customize the Toolbars you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } A lot in 2sxc is fully automatic. But sometimes you want to customize how the content editor can work. Note 2sxc 10.27 introduces a much simpler system, which is what is shown here. Previously everything was possible, but quite complicated. So if you find examples out there which look very different - they work as well, but here's the simple system. Live Examples The Dnn Tutorials have a live demo of toolbar customization. Head over there while reading these docs to see all this in action. Overview - What You can Customize You can customize just about everything: hover-behavior - you may want hover, maybe not, and maybe to the right | left colors using color names, hex-codes or CSS classes of the entire toolbar or just of individual buttons you can just enhance/change the default toolbar or create a custom one with just your buttons you can change the button groups - add, remove etc. you can add/remove buttons as you need you can create buttons with custom icons you can even call custom code from your custom buttons Tip This overview will get you started, anything more advanced will need the specs button UI rules Important This will show you how to do things in Razor, but the same principles apply to plain HTML-Toolbars. We assume that 99% of all toolbars will be initiated from razor, so that's what we'll be showing here. Getting Started with Custom Toolbars Usually your code will look a bit like this: <div @Edit.TagToolbar(Content)> ... </div> This will create a standard hover-toolbar with some buttons and the more ellipsis button. Note that the exact combination of buttons is auto-detected. So you may just have an edit but you may also have an add etc. depending on the template and the data it receives. It looks approx. like this: Add our First Button Let's add an extra new button to create an item of the content-type Category. Note This code will make the button appear, but on click you may see an error, because you probably don't have a ContentType Category in your app. <div @Edit.TagToolbar(Content, toolbar: \"+new?contentType=Category\")> ... </div> You should now have an extra + button like this: Let's emphasize it, because for whatever reason it's a super important button. We'll also drop the leading + since it's optional and defaulted to: <div @Edit.TagToolbar(Content, toolbar: \"new&color=red?contentType=Category\")> ... </div> You should now have a red + button like this: Important The term new in this example means we want a button of type new which will open the dialog to create new entities. We could also write app&color=red which would add a button to manage the app. So new ≠ 'new button' but 'button to add a new entity'. The full list of button names can be found in the CMS Commands list. Adding more Buttons Now we want to add another button - maybe to add a Tag. The toolbar attribute on the Edit.TagToolbar can take various kinds of objects, but for the new simple API it only accepts string objects or string[] arrays. So to make multiple changes to the toolbar, we'll have to give it a string[] array like this (note that we can use line-breaks, to make the code easier to read): <div @Edit.TagToolbar(Content, toolbar: new [] { \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> You should now see this: Tip When creating new items you can also add prefill default values. This is great for News-Apps where you want to prefill the date or for list of something where you want to prefill the category. Check out the specs. Removing Buttons with - Now maybe you don't like to allow your editors to change the view - so let's do the same but remove the view-switch button as well using the remove - prefix: <div @Edit.TagToolbar(Content, toolbar: new [] { \"-layout\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> So you can add / remove any button you want. You can find a full list of button names (command names). Modifying Existing Buttons with % But what if we want to modify an existing button? Let's change the icon and both colors of the layout (view) button using the modify % prefix: <div @Edit.TagToolbar(Content, toolbar: new [] { \"%layout&icon=icon-sxc-replace&color=white,maroon\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> As you can see, we just used % to modify a button, set the icon and 2 colors. Show Only Our Buttons But maybe we would prefer to have a toolbar with only the two add buttons, and nothing else. By default, the toolbar uses a template called default which contains all these buttons. But you can always start with an empty template. You'll find the full list of templates here. <div @Edit.TagToolbar(Content, toolbar: new [] { \"toolbar=empty\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> Tip As you can see, the principle is to use a toolbar template and make modifications to it. Showing the Delete Button Warning A special case in modifying buttons is also to force-show the delete button which is hidden by default. The reason it's hidden is because in most content-editing scenarios the editor should be able to remove content, but not delete it - in case it's re-used elsewhere. But let's say you created a News App and want to allow the editor to also delete the news-items. Here's how: <div @Edit.TagToolbar(Content, toolbar: \"%delete&show=true\")> ... </div> The delete button is in the third group of buttons, so you'll have to hit the ellipsis a few times to see it. You'll then see: Adding Custom Groups Let's assume you understand the principle of adding, removing and changing buttons. Let's add a custom button group with only the buttons you want - followed by the normal ellipsis-button with the standard functionality: <div @Edit.TagToolbar(Content, toolbar: new [] { \"group=add-buttons\", \"new&color=red&group=add-buttons?contentType=Category\", \"new&color=teal&group=add-buttons?contentType=Tag\" })> ... </div> You'll get this result, and hitting the ellipsis will show you the default buttons as you can see in the second image: Note We had to give our new group a name - in this case add-buttons and told the new buttons that they should go inside that group. Tip A new group can also go after the default group of buttons. If you add a &pos=1 or another number the group will be placed later on in the sequence. You can also use &pos=-0 or &pos=-1 or similar to place it counting from the end of the list. Warning When using position like pos=# you may have unexpected results, because the button is added to the list before some buttons decide to hide themselves. So you may think you're adding it to pos=1 but if the edit button (which would be at position 0) shouldn't be shown, your button will still appear to be the first one. There is also a hidden group called edit-advanced - you can find the list of groups here. As of now, it only contains the delete button which is hidden by default. Attaching Custom JavaScript Code to a Button Now you may want to call your own code when you create a button. This is very advanced stuff, but here's how: <div class=\"demobox\" @Edit.TagToolbar(Content, toolbar: \"custom&title=Message?call=myMessage&id=17\") > This demonstrates a custom button with the call-name in the parameters. </div> <script> function myMessage(context, event) { console.log(context, event); alert('hello from my Message - got this id:' + context.button.command.params.id); } </script> You'll then see this toolbar, and on click this message: You'll notice that we have a ?call=functionName and also an id=17 just to show how additional information is passed around. Your function also gets an event from the browser, so you can check the event.target and other things to see what was actually clicked. Warning This is very advanced stuff, you may run into difficulties to get this to fly \uD83D\uDE09. Debugging Custom Toolbars In most cases if your problems will be caused by invalid syntax. It's easy to forget a closing quote \" or a comma , to separate values. So always check that first. If you really want to do deep debugging, you should use the $2sxc.insights() command in the console to see what whas processed and how. If you add ?debug=true to the url of the page, it will also log way more intermediate data for you to review. Read More Basically you have what it takes. To go further: review the specs. check out the list of commands/buttons"
  },
  "js-code/toolbars/workflows.html": {
    "href": "js-code/toolbars/workflows.html",
    "title": "Toolbar Workflows | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Workflows you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } 2sxc Toolbars do a lot of things automatically, but in some cases you want to... ... prevent certain actions/commands under certain conditions (like no edit if something on the page isn't as expected) ... do a custom page / data refresh instead of the default This can be done using Toolbar Workflows. It's especially useful in SPA applications (think React, Angular and custom SPAs) which don't want a page reload. Demo \uD83D\uDC49 Here's a live demo with source of the 2sxc Toolbar Workflow <div id='tagWithToolbar1' @Edit.TagToolbar( toolbar: new [] { \"toolbar=empty\", \"+new?contentType=UiEmptyHelloWorld\" }, settings: new { hover = \"left\", show = \"always\" } )> Float over this box to get a (+) button. When you click it and close the dialog again, the page will <em>not refresh</em>. <br> Instead, you'll see console messages that a custom JS took over the process. </div> // This workflow definition will run on every action, just to log what's happening const workflowToLog = { command: 'all', // Run on every command/action phase: 'all', // Run before and after code: (wfArgs) => { console.log(\"Toolbar asked to to something - here are the details.\", wfArgs); } } // This is the workflow definition we will register to stop page refresh const workflowToDisableRefresh = { command: 'refresh', // The command name it's for phase: 'before', // The workflow-step should run before the command is executed code: (wfArgs) => { // The code which should be run console.log('Asked to refresh, will return false to stop it. These are the arguments we got.', wfArgs); return false; // Return false to stop this command from happening } }; // Attach event-listener to the TagToolbar parent, so we can register the workflow when the toolbar is created var parent = document.getElementById('tagWithToolbar1'); parent.addEventListener('toolbar-init', (initEvent) => { console.log(\"Workflow Demo: Tag Toolbar was initialized - event kicked in - will now register\"); const workflow = initEvent.detail.workflow; workflow.add(workflowToLog); workflow.add(workflowToDisableRefresh); // Stop the event here, otherwise parent elements which have an event listener would get triggered as well initEvent.stopPropagation(); }); How Workflows Work \uD83D\uDC49 Learn more about Workflows How Toolbars Register the Workflows Each toolbar can have different workflows attached. The toolbars are generated on-the-fly and sometimes re-generated on partial reloading. So you must register your workflow-steps when the toolbar reports that it's ready. So this is the flow of logic: A toolbar is created - often on mouse-over It will fire a toolbar-init event contains a lot of internal information on the event.details and also a workflow object which is the Workflow Manager for this toolbar. Your code will pick up the event.details.workflow and then add(...) a workflow step - see Workflow Step Object probably call event.stopPropagation() or similar to prevent other event listeners from also adding stuff. This is especially important if you have entities within entities, in which case there may be listeners for each toolbar at various DOM levels. \uD83D\uDC49 Learn more about Workflows TagToolbar workflows created using @Edit.TagToolbar(...) should attach the init-listener to that tag Toolbar workflows created using @Edit.Toolbar(...) should attach the init-listener to a parent tag Angular Implementation In dnn-sxc-angular there is a directive for toolbars, which hides all this and just allows you to do a custom refresh as you need it. See Toolbars in Angular (dnn-sxc-angular) React Implementation As of now, there is no pre-built React implementation, but you can easily create your own based on the angular version. Demo App and further links You should find some code examples in this demo App Demo of the 2sxc Toolbar Workflow History Introduced in 2sxc v11.12 Enhanced so it also works on inline toolbars (Edit.Toolbar(...)) in 12.10"
  },
  "js-code/turn-on/index.html": {
    "href": "js-code/turn-on/index.html",
    "title": "turnOn JavaScript API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "turnOn JavaScript API The Problem turnOn Solves A core problem with all JavaScript is making sure that all scripts and dependencies are loaded, available and ready, and the data needed to init is available (usually in the Html itself). Even something as simple as this can fail... $(start); ...because even this example requires jQuery to already exist. turnOn solves this problem with a new architecture. Loading is now configuration based. No matter which parts load in what order, turnOn will work. Tip turnOn is also building an architecture which will reliably work even with very strict CSP enforced - which we believe will be essential in future. \uD83D\uDC49 Check out the turnOn Tutorials Activate turnOn To use turnOn you must must tell the page that you need it. Here's how: @Kit.Page.Activate(\"turnOn\"); \uD83D\uDC49 Read more about the IPageService The turnOn Solution When using turnOn, the page will request the turnOn.js in any way. It can also be deferred. Then this will be used to turn-on your code: <div turn-on='{ \"await\": [\"window.$\"], \"run\": \"window.appContent.maps.load()\", \"data\": \"some-google-maps-key\" }'> <!-- more html --> </div> This is what happens The html will just be loaded and have no effects, throw no errors and nothing Once the turnOn.js loads it will find this and process it - it doesn't matter if turnOn was already loaded or deferred turnOn will then wait for all this to exist: window window.$ window.appContent window.appContent.maps window.appContent.maps.load It will then call window.appContent.maps.load(data) with the data provided Here's another example, taken from the new Content-App in 2sxc: <!-- Instruct turnOn to init this specific Map once everything is loaded --> <turnOn turn-on='{ \"run\": \"window.appContent.maps.configureMap()\", \"data\": { \"domId\": \"GoogleMap-@DynamicModel.mapId\", \"marker\": \"@Text.First(DynamicModel.markerImage, \"\")\", \"lat\": @DynamicModel.mapInfo.GpsLat.ToString(\"R\"), \"lng\": @DynamicModel.mapInfo.GpsLong.ToString(\"R\"), \"zoom\": @Content.Presentation.Zoom, \"info\": \"@DynamicModel.company\", \"warn\": @(Settings.GoogleMapsShowWarning ? \"true\" : \"false\") }}'></turnOn> This example will init a map with the configuration of the map incl. pin-image, coordinates and more. Signature of Run call The run method - in the above example ...configureMap() is as follows: public void configureMap(data) { // data is the data provided in the turnOn } 2sxc v14.02 includes turnOn v0.1.2, where the run method also has another parameter: context. The most important property is context.tag which is the tag which contained the configuration. This allows you to use $2sxc(context.tag) to get the Sxc of the tag. Advantages of Using turnOn Works, no matter in what order the scripts were loaded Works even if the HTML was created before or after loading the scripts Works for lazy-loaded HTML which can introduce new turnOn configurations Responsibility of Your Code There are a few things turnOn doesn't do, which you should be aware of: It doesn't load JS or CSS files (yet). As of now, you must still do this in the HTML template. The init code must still do it's work properly. If multiple inits should not be called, then your code must ensure that it detects this and skips multiple initializations. Your init-code should not auto-run when loading the script, as this could again be missing dependencies. Examples of the Full Challenge Common things which may be needed before the code starts: The main JS code Additional JS parts Some JS Libraries CSS DOM nodes which the JS should work on Configuration data like ModuleId which should be known. Dynamic pages make this even harder - like when Oqtane/Blazor reloads just parts of the page multiple times. We must ensure that the JS isn't re-initialized again and again, as that can cause issues like: The same code running in parallel - causing all sorts of damage Memory leaks where the same library and complex object states are loaded many times Issues where some code initialized and was then replaced by new, uninitialized code Our goal is to simplify this, so that your solution can simply state what it needs, and then run once all that has been provided. a dom node with a specific id like #module-57 an object on the window like window.someLibrary a js file which should be loaded if it's not loaded yet like /js/jquery.min.js a css file like /css/mycss.js History Added v0.1.1 in 2sxc v12.04 Updated to v0.1.2 in 2sxc v14.02 providing the context as the second parameter Future features also await certain DOM events; ATM you can do this easily after turnOn has run it's magic, but it would be nice to specify it in the config load scripts and js"
  },
  "js-code/turn-on/specs.html": {
    "href": "js-code/turn-on/specs.html",
    "title": "turnOn JavaScript API Specs (WIP!) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "turnOn JavaScript API Specs (WIP!) The configuration is always a JSON. The simplest possible turnOn would be this: <em turn-on='{ \"run\": \"window.startSomething()\" }'></em> Longer name segments are automatically checked one by one, so this will also work reliably: <em turn-on='{ \"run\": \"window.appGallery.master.start()\" }'></em> Very often you'll then want to include data - either an identifier, a string or object: <em turn-on='{ \"run\": \"window.startMeaningOfLife()\", \"data\": \"42\" }'></em> <em turn-on='{ \"run\": \"window.startMeaningOfLife()\", \"data\": { \"answer\": \"42\", \"question\": null }'></em> In addition you can also specify one or more objects to wait for: <em turn-on='{ \"await\": [\"window.$\", \"window.fancybox\"], \"run\": \"window.appGallery.master.start()\" }'></em> You can also wait for a ready-check to exist and for it to return true: <em turn-on='{ \"await\": [\"window.appGallery.isReady()\"], \"run\": \"window.appGallery.master.start()\" }'></em> turnOn JSON Schema These are the properties you can set Property Type Comments await string[] Strings can be objects on window or functions to call for finding out if it's ready. run (req.) string The function to call once it exists data any data to give the run-command debug boolean will console-log what it's doing More on the await Property This is always a string array. As of v0.1 all values... must begin with window can end with just a name like window.something or with () like window.something() can have a much longer name like window.myTopic.mySubtopic.ready if it ends with () then it will be called repeatedly until it returns true experimental: if the node returns a promise object, will wait for that to complete (not fully tested) More on the run Property must begin with window can have a short name like window.ready() or a long name like window.myTopic.mySubtopic.ready() must end with () the run can be an isolated function or part of a larger object. It will preserve the this if it's part of a larger object Debug turnOn In some cases you may not get what you expect and need to debug what you're doing. There are two options: To debug a specific turnOn just add the \"debug\": true to the JSON To debug everything in turnOn, set window.debugTurnOn = true; anywhere on the page. this will flood your console Common Problems The most common cause of issues is an invalid JSON. You'll get errors in the console if you do this. This is especially common if you add dynamic data from the CMS to the object, as it could contain \" characters which break the json. Another common problem is converting boolean C# values to inject into the JSON. Here's why: <!-- this will fail --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": Settings.Show }}'></span> <!-- will produce this --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": True }}'></span> <!-- this will work --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": @(Settings.Show ? \"true\" : \"false\") }}'></span> <!-- will produce this --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": true }}'></span> Allowed HTML Tags Any valid HTML tag can be used, incl. existing div or span tags which just get a turn-on attribute added. So you can use <em>, <div>, <span> or even <turnOn> There are a few cases where problems could arise though: If you use a <script> tag, this may not work as expected, as additional processing layers may do something with these script tags. This is especially important in Oqtane, as there the script tags are filtered out and treated separately. If you use a tag which you will later modify in HTML (like using jQuery or Angular) this may fail, because turnOn will make status-updates to the tag and this could interfere with your code doing updates as well. History Introduced on 2sxc 12.02 Future features Get await-functions to preserve the this scope also await certain DOM events; ATM you can do this easily after turnOn has run it's magic, but it would be nice to specify it in the config load scripts and js"
  },
  "net-code/api-compare/_base-12-limitations-shared.html": {
    "href": "net-code/api-compare/_base-12-limitations-shared.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Since this base class is meant to work on both Dnn and Oqtane, it only supports features which both of these platforms support. The property Dnn doesn't exist on this base class, as it would lead to code which can't run cross-platform. ...more The CreateInstance(...) works only on C# files .cs but not with CSHTML files .cshtml as this probably won't work in .net 5 Koi works differently than before. Previously you just used a global object Connect.Koi.Koi to use Koi, but because .net 5 should really use dependency injection, you should now get Koi using GetService<Connect.Koi.ICss>(). The old mechanism will still work in Dnn but would not work in Oqtane."
  },
  "net-code/api-compare/_base-differences-12-14.html": {
    "href": "net-code/api-compare/_base-differences-12-14.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "the Kit property is new, providing access to the ServiceKit called ServiceKit14. It provides access to all the services you need, like Data, Security, Koi, Convert and more. the Convert property is removed, as it caused confusion with System.Convert Note: hybrid base classes don't have a Dnn property. ...more"
  },
  "net-code/api-compare/_base-typed.html": {
    "href": "net-code/api-compare/_base-typed.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "This is the newest base class and recommended to use. It provides you the full typed API such as the MyItem object and AsItem(...) methods. Differences to previous versions: Typed API The root Edit object was removed, as it's primary purpose was to provide toolbars, for which you should use the Kit.Toolbar service instead. If you still need the Edit object, you can find it on Kit.Edit. \uD83D\uDCD6 Read about the Typed API here TODO:"
  },
  "net-code/api-compare/app-data.html": {
    "href": "net-code/api-compare/app-data.html",
    "title": "App and App Data Differences in APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App and App Data Differences in APIs 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. App and App Data Objects Dynamic Code In Dynamic Code, the objects you'll use are usually: App - a IApp with all app data App.Data - a IAppData with all app data Typed Code In Typed Code, the objects you'll use are usually: App - a IAppTyped with all app data App.Data - a IAppDataTyped with all app data Strong Typed Code In Strong Typed Code - inheriting from AppCode.Razor.AppRazor, the objects you'll use are usually: App - a IAppTyped<TSet, TRes> with all app data App.Data - a IAppData with all app data Differences in the App object (IApp vs. IAppTyped) App.Query[...] is now App.GetQuery(...) - this will also allow for more advanced options in future App.Folder is now a IFolder object App.Path is replaced by App.Folder.Url App.PathShared is replaced by App.FolderAdvanced(location: \"shared\").Url App.PhysicalPath is replaced by App.Folder.PhysicalPath App.PhysicalPathShared is replaced by App.FolderAdvanced(location: \"shared\").PhysicalPath App.Thumbnail is now an IFile object App.Thumbnail is replaced by App.Thumbnail.Url MyView.Path still works, but you should use MyView.Folder.Url for clarity Access App Data Dynamic Typed Strong Typed App (IApp) App (IAppTyped) App (IAppTyped<TSet, TRes>) App.Data (IAppData) App.Data (IAppDataTyped) App.Data (IAppDataTyped) App.Data[\"Tags\"] App.Data[\"Tags\"] App.Data.GetStream(\"Tags\") (recommended) App.Data[\"Tags\"] App.Data.GetStream(\"Tags\") (recommended) App.Data.GetAll<T>() App.Data.GetOne<T>(id) App.Query(\"QName\") App.GetQuery(\"QName\") new method allows for more parameters App.GetQuery(\"QName\") new method allows for more parameters - App.GetQuery(\"QName\", parameters: new { Id = 7 } ) App.GetQuery(\"QName\", parameters: new { Id = 7 } ) Access App and View Folders / URLs Dynamic Typed Strong Typed - App.Folder (IFolder) new only App.Folder (IFolder) App.Folder (string) App.Folder.Name (string) App.Path App.Folder.Url App.PhysicalPath App.Folder.PhysicalPath Access App Settings \uD83D\uDC49\uD83C\uDFFD See Settings / Resources Differences in APIs"
  },
  "net-code/api-compare/csharp-base.html": {
    "href": "net-code/api-compare/csharp-base.html",
    "title": "C# Base Classes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "C# Base Classes Every C# helper file / custom service inherits from a base class. depending on the base class, the APIs and features in the template will change. Example for /AppCode/Services/FunnyService.cs - v17.03+: namespace AppCode.Services { public class FunnyService : Custom.Hybrid.CodeTyped { public string PageTitle => MyPage.Title; } } Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Typed / Strong-Typed for v16+ These are the recommended Typed C# base classes to inherit today: Custom.Hybrid.CodeTyped - new in v16 Tip Using these base classes ensures that you have the latest, Typed APIs. For older base classes and the differences, see below. Older Base Classes (Dynamic) These are the older - Dynamic base classes - not recommended for new development, but still supported for backwards compatibility. Custom.Hybrid.Code14 - new in v14 Custom.Hybrid.Code12 - new in v12 Custom.Dnn.Code12 - v12; same as Hybrid, but with Dnn property C# Classes Which Don't Inherit If you don't specify a base class, the class will behave as a standard, new class. Example: namespace AppCode.Services { public class FunnyService { // This can't work, because there is no MyPage object public string PageTitle => MyPage.Title; } } Compare Dynamic vs. Typed C# Code The new Typed base classes are much more robust and easier to debug than the classic Dynamic code. They provide great IntelliSense (when configured in VS Code). When used in combination with Data Models and Services in the AppCode folder, they also allow you to go Strong Typed. This is the recommended way to write code in 2sxc 16+. Custom.Hybrid.CodeTyped Note CodeTyped uses Typed API. See TODO: See Custom.Hybrid.CodeTyped [!include[\"base-typed\"](_base-typed_.md)] Base Classes in the AppCode Namespace These are base classes for which the code lies in the AppCode/* folder of your App. Some will be auto-generated, others will be made by you. \uD83D\uDCD6 Read about the Typed API here TODO: Custom.Hybrid.Code14 Note Code14 ist the last release for Dynamic API. It and all previous versions use Dynamic API. See TODO: See Custom.Hybrid.Code Code14 almost identical with the older Code12 (see below) with these differences: the Kit property is new, providing access to the ServiceKit called ServiceKit14. It provides access to all the services you need, like Data, Security, Koi, Convert and more. the Convert property is removed, as it caused confusion with System.Convert Note: hybrid base classes don't have a Dnn property. ...more Custom.Hybrid.Code12 & Custom.Dnn.Code12 Note Code12 uses the Dynamic API. See TODO: See Custom.Hybrid.Code12 and Custom.Dnn.Code12 This was introduced in 2sxc 12. It contains the features which will work cross-platform on both Dnn and Oqtane. You should use this base class to create solutions / Apps which work on Dnn and Oqtane. Custom.Dnn.Code12 is identical to Custom.Hybrid.Code12 but with the addition of the Dnn property. See also Dnn Object. Limitations of Code12 Since this base class is meant to work on both Dnn and Oqtane, it only supports features which both of these platforms support. The property Dnn doesn't exist on this base class, as it would lead to code which can't run cross-platform. ...more The CreateInstance(...) works only on C# files .cs but not with CSHTML files .cshtml as this probably won't work in .net 5 Koi works differently than before. Previously you just used a global object Connect.Koi.Koi to use Koi, but because .net 5 should really use dependency injection, you should now get Koi using GetService<Connect.Koi.ICss>(). The old mechanism will still work in Dnn but would not work in Oqtane."
  },
  "net-code/api-compare/csharp-helpers.html": {
    "href": "net-code/api-compare/csharp-helpers.html",
    "title": "Razor Sub-Components Differences in APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor Sub-Components Differences in APIs 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. This is about how a Razor can call other Razor files, and pass parameters to them. Calling Sub Components ... | var helper = CreateInstance(\"helper.cs\") | var helper = GetCode(\"helper.cs\") | Access Model Data from Child Razor When a razor is called using Html.Partial(..., new { ... }) it passes parameters to the child razor. These can be picked up in the child as follows: Dynamic Typed Comments / Differences DynamicModel (dynamic) MyModel (ITypedModel) Model of the child var name = DynamicModel.Name (dynamic) var name = MyModel.String(\"Name\") (string) var birthday = DynamicModel.Birthday (dynamic) var birthday = MyModel.DateTime(\"Name\") (DateTime) MyModel has many more methods to ensure you can pass type-safe data to the child. See MyModel"
  },
  "net-code/api-compare/data-object-api.html": {
    "href": "net-code/api-compare/data-object-api.html",
    "title": "Data Object API Differences | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data Object API Differences 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. Tip This is about Data Objects - the objects which contain the data you're working with. So DynamicEntities, TypedItems and Strong-Typed Custom Data Models. Tip \uD83C\uDF93 Best check out the tutorial QuickRef which shows all this! What are Data Objects? Internally 2sxc leverages a system called EAV (Entity-Attribute-Value) which is a very flexible way to store data. The underlying data type is called an IEntity, but it's difficult to work with. Because of this, 2sxc provides simpler objects to work with, specifically these: Dynamic Entities - a dynamic object which can contain any data - older Razor up until Razor14 Typed Items - a strong-typed object which contains data - RazorTyped and later (v16+) Strong-Typed Custom Data Models - a strong-typed object which contains data - RazorTyped and later (v17.03+) Tip To understand this better, imagine that the EAV system delivers IEntity objects to the Razor / C#. Each Razor provides simple methods such as AsDynamic(...) or AsItem(...) to convert/wrap them to the simpler objects. Show / Get Built-In Properties Standard properties are things like Id, Guid, Title, Created, Modified etc. Dynamic Typed Strong Typed dyn.EntityId itm.Id itm.Id dyn.EntityGuid itm.Guid itm.Guid dyn.EntityTitle itm.Title itm.Title TODO: IsDemoItem, IsPublished, Created, Modified etc. TODO: Type name etc. Show / Output Values from Items The following example assumes that you have an dyn or itm object containing various properties such as Name or Birthday. The objects themselves could be from the primary items (eg var dyn = Content; or var itm = MyItem;) but they could also come from loops, queries, etc. Dynamic Typed Strong Typed dyn.Xyz type unknown / dynamic itm.Get(\"Xyz\") type object itm.Xyz type known dyn.Name (dynamic) itm.String(\"Name\") itm.String(\"Name\") itm.Name dyn.IsGreen (dynamic) itm.Bool(\"IsGreen\") (bool) itm.IsGreen (bool) itm.Bool(\"IsGreen\") (bool) dyn.Birthday (dynamic) itm.DateTime(\"Birthday\") (DateTime) itm.Birthday (DateTime) itm.DateTime(\"Birthday\") (DateTime) (dyn.Birthday as DateTime).Year itm.DateTime(\"Birthday\").Year itm.Birthday.Year (int) itm.DateTime(\"Birthday\").Year (int) Number Values When working with numbers, the following is important: in Dynamic mode, all numbers are always returned as decimal since it's the most precise in Typed mode, you can specify the type you want, and it will be converted if possible in Strong Typed mode, the type is defined in the generated Data-Model, and you can't change it Dynamic Typed Strong Typed dyn.Weight itm.Int(\"Weight\") itm.Weight (see data model) itm.Int(\"Weight\") dyn.Weight itm.Double(\"Weight\") itm.Weight (see data model) itm.Double(\"Weight\") dyn.Weight itm.Float(\"Weight\") itm.Weight (see data model) itm.Float(\"Weight\") dyn.Weight itm.Decimal(\"Weight\") itm.Weight (see data model) itm.Decimal(\"Weight\") Important In Dynamic, property names are not case sensitive. In Typed .String(name) etc. property names are case sensitive. So dyn.weight and itm.Int(\"WEIGHT\") will work. In Strong Typed, the property names are defined in the data model, and are case sensitive. Tip When simply showing data in HTML, the exact type is not super important as the Razor engine will convert it to a string anyway. The differences become much more important when you want to do a bit more in your code. This is why it's really ok to just do @itm.Get(\"FirstName\"). But var name = itm.String(\"FirstName\") + \" \" + itm.String(\"LastName\"); is much better. HTML Values Creating HTML from data entered by the editor can be dangerous, as it could contain malicious code such as script or unexpected iframe tags. So just showing data will automatically encode it, so it's safe to show. To show HTML when you need it - eg. from a WYSIWYG editor, these are the APIs: Dynamic @dyn.Description - show HTML as text @Html.Raw(dyn.Description) - show HTML as HTML Typed @itm.String(\"Description\") - show HTML as text @Html.Raw(itm.String(\"Description\")) - show HTML as HTML @itm.Html(\"Description\") - show HTML as HTML, automatically adding a toolbar (more parameters can change the behavior) Strong Typed @itm.Description - show HTML as text @Html.Raw(itm.Description) - show HTML as HTML @itm.Html(\"Description\") - show HTML as HTML, automatically adding a toolbar (more parameters can change the behavior) Links Internally links can be stored as the real link (https://www.2sxc.org/) or as a file:123 reference to a file in the system. When showing links, you'll usually want to convert these to a real link, and this is how you do it: Dynamic @dyn.Link - link as URL, so file:72 will be converted to the real URL @dyn.Get(\"Link\", convertLinks: false) - link as string, without auto-conversion Typed @itm.Url(\"Link\") - link as URL, so file:72 will be converted to the real URL @itm.String(\"Link\") - link as string, without auto-conversion Strong Typed @itm.Link - link as URL, so file:72 will be converted to the real URL @itm.String(\"Link\") - link as string, without auto-conversion Images and Pictures Very often you will want to use a link to create an img or a picture tag. If you want to do it manually, you can always use the properties as described in the previous section. <img src='@itm.Url(\"Image\")' alt='@itm.String(\"ImageAlt\")' /> Usually you will prefer to use built in APIs/Services to do this. Dynamic @Kit.Image.Img(dyn, \"Pic\") - create an img; auto-resize and toolbar @Kit.Image.Picture(dyn, \"Pic\") - create a picture; auto-resize and toolbar Typed @itm.Img(\"Pic\") - create an img; auto-resize and toolbar @itm.Picture(\"Pic\") - create a picture; auto-resize and toolbar Strong Typed @itm.Img(\"Pic\") - create an img; auto-resize and toolbar @itm.Picture(\"Pic\") - create a picture; auto-resize and toolbar Note that the Img and Picture methods have more parameters to specify what you want. Files and Folders of an Item (ADAM) When using Hyperlink/File fields, you may want to get the file which is referenced (instead of the link.) In some situations it can even contain many files, or even sub folders. System is called ADAM - Automatic Digital Asset Management. Dynamic AsAdam(dyn as object, \"Pic\").Files.First() - get a file in the field Pic AsAdam(dyn as object, \"Pic\") - get a folder on the item Typed itm.File(\"Pic\") - get a file in the field Pic itm.Folder(\"Pic\") - get a folder on the item Strong Typed itm.PicFile - get a file in the field Pic itm.PicFolder - get a folder on the item Children and Parents Related data is either children (when the current item has a field with reference to other items) or parents (when other items reference the current item). Dynamic @dyn.Publisher.Name - show the name of the child Publisher @(dyn.Authors as IEnumerable<dynamic>).Count() - show the number of children Typed @itm.Children(\"Authors\").Count() - show the number of children @itm.Child(\"Publisher\").String(\"Name\") - show the name of the child Publisher Strong Typed @itm.Publisher.Name - show the name of the child Publisher @itm.Authors.Count() - show the number of children Note For the strong-typed version, the property names are defined in the data model. The exact type returned and if it's a list or single item depends on the field configuration."
  },
  "net-code/api-compare/data-objects.html": {
    "href": "net-code/api-compare/data-objects.html",
    "title": "Built-In Data Object Differences in APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Built-In Data Object Differences in APIs 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. Tip This is about Data Objects which are automatically available on each Razor / C# file. So Content (old), MyItem (new), Data (old), MyData (new) etc. It's also about converting between IEntity to the ITypedItem and dynamic objects. Tip \uD83C\uDF93 Best check out the tutorial QuickRef which shows all this! What are Built-In Data Objects? These objects/commands get data belonging to this block/instance. So when the Razor code loads, these objects are ready and filled with the data of the current block. Note It's important to understand how data-items can belong to the current block. Basically any data an editor adds to the current block belongs to it. This is different from queried data which doesn't belong to anything. Example: The images in a gallery-block belong to that gallery instance. But the list of all tags don't belong to the gallery instance. Overview of Data Objects Purpose Dynamic Typed Strong Typed Get-Current-Data Content MyItem MyItem Get-Current-List List MyItems MyItems Get-Current-Header Header MyHeader MyHeader Get-Current-Data Data MyData MyData App Object App App App App Query App.Query App.Query App.Query App Data App.Data App.Data App.Data App Resources App.Resources App.Resources App.Resources App Settings App.Settings App.Settings App.Settings All Settings Settings AllSettings AllSettings All Resources Resources AllResources AllResources Parameters DynamicModel MyModel MyModel / Model Basic Get-Current-Data Dynamic Typed Comments / Differences Content (dynamic) MyItem (ITypedItem) First/main item List (IEnumerable<dynamic>) MyItems (IEnumerable<ITypedItem>) List of all items Header (dynamic) MyHeader (ITypedItem) Header item Important The pairs such as Content/MyItem will often contain the same data - but not always. In the old dynamic APIs, Content contained the item belonging to the block, but only if the View was not using a Query. If the view used a query, Content would contain the first item returned by the query. MyItem is different - it always contains the first item belonging to the block. The same difference applies to List vs MyItems. Advanced Get-Current-Data The MyData (previously Data) object contains all data which was prepared for the current block. In very basic scenarios you don't need it, as it contain the same data as the MyItem (previously Content) object and others. As soon as the View is configured to use a Query, it will instead contain the data returned by the query. Dynamic Typed Comments / Differences Data (IContextData) MyData (IContextData) DataSource of query data Data[\"Tags\"] (IDataStream) MyData[\"Tags\"] (IDataStream) Tags Stream of query data Data[\"Tags\"] (IDataStream) MyData.GetStream(\"Tags\") (IDataStream) Recommended way to get stream DataSources and Streams return IEntity objects, and you will usually want to convert them to ITypedItem (or dynamic) objects. This is done with these APIs: Dynamic Typed Comments / Differences AsDynamic(Data) AsItems(MyData) Get list of items in Default stream AsDynamic(Data[\"Tags\"]) AsItems(MyData.GetStream(\"Tags\")) Get list of items in Tags stream AsDynamic(Data[\"Tags\"].List.First()) AsItem(MyData.GetStream(\"Tags\")) Get a single item"
  },
  "net-code/api-compare/dnn-object.html": {
    "href": "net-code/api-compare/dnn-object.html",
    "title": "The Dnn Object in Different APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "The Dnn Object in Different APIs The Dnn object is a special object which is available in Dnn, but not in Oqtane. Razor files inheriting from older base classes have a Dnn object, such as this example: @inherits Custom.Dnn.Razor12 @{ // Dnn.Tabs is a TabInfo // https://docs.dnncommunity.org/api/DotNetNuke.Entities.Tabs.TabInfo.html var pageTitle = Dnn.Tab.Title; } All the new base classes, such as Custom.Hybrid.RazorTyped don't have a Dnn object, as they are hybrid and work on Oqtane and Dnn. Alternative using MyContext / CmsContext Tip If you think you need the Dnn property (eg. for accessing the Page Title), best first check if the MyContext / CmsContext can't be used instead. It has most of the typical properties which you would look for in Dnn. Example in v16+ @inherits Custom.Hybrid.RazorTyped @{ var pageTitle = MyPage.Title; } Example in v12+ @inherits Custom.Hybrid.Razor12 @{ var pageTitle = CmsContext.Page.Title; } Get the Dnn Object in Modern Base Classes You can also still get the Dnn object using this: var dnn = GetService<ToSic.Sxc.Dnn.Run.IDnnContext>(); This is the same object as the Dnn object in the older base classes. Warning Using the Dnn object / service will make your code Dnn-specific and not work in Oqtane. History Dnn introduced ca. v7 New base classes without Dnn introduced in v12"
  },
  "net-code/api-compare/helpers-services.html": {
    "href": "net-code/api-compare/helpers-services.html",
    "title": "Built-In Helpers and Services Differences in APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Built-In Helpers and Services Differences in APIs 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. Tip This is about Helpers and Services which are automatically available on each Razor / C# file. So Kit, Edit (old), GetService() etc. Built-In Helpers and Services 2sxc provides a lot of built-in helpers and services which are automatically available in each Razor / C# file. With time, they changed, so inheriting from a different base class provides different objects to do things out-of-the-box. Helper Object Dynamic Typed / Strong Typed Service Kit - Kit Link Helper Link Link Toolbar Maker Edit.Toolbar Kit.Toolbar Edit Helper Edit Kit.Edit (avoid using) Context Info Context MyContext Page Info Context.Page MyPage Page Url Params Context.Page.Parameters MyPage.Parameters User Info Context.User MyUser View Info Context.View MyView Culture Info Context.Culture MyContext.Culture Module Info Context.Module MyContext.Module Platform Info Context.Platform MyContext.Platform Site Info Context.Site MyContext.Site Build-In Commands The following commands are often on the object itself, but sometimes it's also under a helper object. So the list has more than just commands. Helper Methods Dynamic Typed / Strong Typed Get Service GetService<TService>(\"2sxc\") GetService<TService>() Convert to Entity AsEntity(dyn) AsEntity(itm) Convert Entity AsDynamic(thing) AsItem(thing) Convert Entities AsDynamic(dynList) AsItems(itmList) Convert as Dynamic AsDynamic(thing) n/a Convert as ITypedItem n/a AsItem(thing) Convert as Enum<ITy...> n/a AsItems(itmList) Convert as ITyped n/a AsTyped(thing) Convert as Enum n/a AsTypedList(things) Merge Many AsDynamic(dyn1, dyn2, ...) AsStack(itm1, itm2, ...) TOOLBARS Dynamic Typed Comments / Differences Edit Kit.Edit global Edit object is gone Edit.TagToolbar(...) Kit.Toolbar.Default(...) Kit.Toolbar.Empty(...). global Edit object is gone Edit.Toolbar(...) Kit.Toolbar.Default(...)...AsTag() Kit.Toolbar.Empty(...)...AsTag() global Edit object is gone More TODO:"
  },
  "net-code/api-compare/index.html": {
    "href": "net-code/api-compare/index.html",
    "title": "Compare Various C# / Razor APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Compare Various C# / Razor APIs 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. Important This is comparing / picking the right API. It's not meant to document all the features, but to help compare and migrate from an old API to a new one. This page should give show you old/new APIs to make refactoring easier. Tip \uD83C\uDF93 Best check out the tutorial QuickRef which shows all this! Base Classes / @inherits Determine API For Razor, the @inherits statement is the most important part of a Razor file, as it defines which APIs are available. \uD83D\uDC49\uD83C\uDFFD See Razor @inherits If your custom C# file inherits from a base class, it will get more APIs - exactly which ones depends on the base class. \uD83D\uDC49\uD83C\uDFFD See C# Base Classes If your Custom WebApi Controller inherits from a base class, it will get more APIs - exactly which ones depends on the base class. \uD83D\uDC49\uD83C\uDFFD See WebApi Base Classes Built-In Objects and Services Depending on the API generation you have selected with the base class, the built-in objects and services will be different. \uD83D\uDC49\uD83C\uDFFD Built-In Data Objects \uD83D\uDC49\uD83C\uDFFD Data Object API Differences \uD83D\uDC49\uD83C\uDFFD Built-In Helpers and Services \uD83D\uDC49\uD83C\uDFFD App & App Data \uD83D\uDC49\uD83C\uDFFD Settings & Resources Sub Razor Components and Custom C# Helpers \uD83D\uDC49\uD83C\uDFFD Razor Sub Components \uD83D\uDC49\uD83C\uDFFD Custom C# Helpers / Services Special Dnn Helpers (☢️ Dnn only) \uD83D\uDC49\uD83C\uDFFD Dnn helper Object"
  },
  "net-code/api-compare/razor-inherits.html": {
    "href": "net-code/api-compare/razor-inherits.html",
    "title": "Razor Base Classes - @inherits | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor Base Classes - @inherits Every Razor template inherits from a base class. depending on the base class, the APIs and features in the template will change. Example: // Inherit from the newest base class in 2sxc 16/17 @inherits Custom.Hybrid.RazorTyped @{ // more code } <div>more html</div> Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Typed / Strong-Typed for v16+ These are the recommended Typed Razor base classes to inherit today: Custom.Hybrid.RazorTyped - new in v16 Custom.Hybrid.RazorTyped<TModel> - new in v17.03 Tip Using these base classes ensures that you have the latest, Typed APIs. When used in combination with AppCode (v17+) it also allows you to go Strong Typed. In v17.03 we introduced the capability to create your own base classes in the AppCode/Razor folder. These are the base classes you can inherit from as of v17 (we'll explain each in more detail below) AppCode.Razor.AppRazor - new in v17.03 AppCode.Razor.AppRazor<TModel> - new in v17.03 AppCode.Razor.Anything - new in v17.03 For older base classes and the differences, see below. Older Base Classes (Dynamic) These are the older - Dynamic base classes - not recommended for new development, but still supported for backwards compatibility. Custom.Hybrid.Razor14 - new in v14 Custom.Hybrid.Razor12 - new in v12 Custom.Dnn.Razor12 - v12; same as Hybrid, but with Dnn property ToSic.Sxc.Dnn.RazorComponent - v10 ToSic.SexyContent.Razor.SexyContentWebPage - very old since v2 - deprecated, but the default if nothing is set. Fallback when Missing @inherits If you don't specify an @inherits in your code, the system will automatically apply a default base class to your code. This is different in Dnn and Oqtane: Dnn: ToSic.SexyContent.Razor.SexyContentWebPage - specified in a web.config in the 2sxc folder of each site. This is the oldest base class and should not be used any more. In Oqtane the default base is Microsoft.AspNetCore.Mvc.Razor.RazorPage which is the default for .net 5+. Compare Dynamic vs. Typed Razor The new Typed base classes are much more robust and easier to debug than the classic Dynamic code. They provide great IntelliSense (when configured in VS Code). When used in combination with Data Models and Services in the AppCode folder, they also allow you to go Strong Typed. This is the recommended way to write code in 2sxc 16+. Custom.Hybrid.RazorTyped Note RazorTyped and RazorTyped<TModel> use Typed API. See TODO: See Custom.Hybrid.RazorTyped [!include[\"base-typed\"](_base-typed_.md)] Base Classes in the AppCode.Razor Namespace These are base classes for which the code lies in the AppCode/Razor folder of your App. Some will be auto-generated, others will be made by you. \uD83D\uDCD6 Read about the Typed API here TODO: Custom.Hybrid.Razor14 Note Razor14 ist the last release for Dynamic API. It and all previous versions use Dynamic API. See TODO: See Custom.Hybrid.Razor14 Razor14 almost identical with the older Razor12 (see below) with these differences: the Kit property is new, providing access to the ServiceKit called ServiceKit14. It provides access to all the services you need, like Data, Security, Koi, Convert and more. the Convert property is removed, as it caused confusion with System.Convert Note: hybrid base classes don't have a Dnn property. ...more Custom.Hybrid.Razor12 & Custom.Dnn.Razor12 Note Razor12 uses the Dynamic API. See TODO: See Custom.Hybrid.Razor12 and Custom.Dnn.Razor12 This was introduced in 2sxc 12. It contains the features which will work cross-platform on both Dnn and Oqtane. You should use this base class to create solutions / Apps which work on Dnn and Oqtane. Custom.Dnn.Razor12 is identical with Custom.Hybrid.Razor12 but with the addition of the Dnn property. See also Dnn Object. Limitations of Custom.Hybrid.Razor12 Since this base class is meant to work on both Dnn and Oqtane, it only supports features which both of these platforms support. The property Dnn doesn't exist on this base class, as it would lead to code which can't run cross-platform. ...more The CreateInstance(...) works only on C# files .cs but not with CSHTML files .cshtml as this probably won't work in .net 5 Koi works differently than before. Previously you just used a global object Connect.Koi.Koi to use Koi, but because .net 5 should really use dependency injection, you should now get Koi using GetService<Connect.Koi.ICss>(). The old mechanism will still work in Dnn but would not work in Oqtane. Properties / methods CustomizeData(...), CustomizeSearch(...) and Purpose do not work, because Oqtane doesn't have a search indexer. This is replaced with the new search-integration mechanism The code-behind Code object doesn't work, as we probably cannot implement this in .net 5 ToSic.Sxc.Dnn.RazorComponent Note RazorComponent uses the Dynamic API. See TODO: See RazorComponent This is legacy ad is not documented any more, but you may still find older Apps which have this base class. ToSic.SexyContent.Razor.SexyContentWebPage Warning SexyContentWebPage uses the Dynamic API. It is very old, and regarded as deprecated. But you may still find it in older Apps. Old Base Class If You Don't use @inherits If you don't specify @inherits, it will automatically use a very OLD API, which is not recommended. This is because it has always been the default, and we cannot change it. The great thing is that it's easy to spot if someone chose a different API, because it will be the first line in the file. Platform Differences Internally Custom.Hybrid.Razor12 is built on the Razor base classes of the .net frameworks. In Dnn it builds on System.Web.WebPages.WebPageBase while in Oqtane it builds on .net 5+. Because of this, certain features will work in Dnn which don't work in Oqtane and vice versa. If you only want to create Oqtane stuff only, you can just go ahead and use all the new features of the Razor in .net 5 If you plan on creating real hybrid stuff, you will have to do some testing to ensure you didn't use features that don't exist on the other side If you need to code something which is different in each platform, use the #if preprocessor statements Some core feature differences Feature Dnn Oqtane Comments @inherits ✅ ✅ Add this to every Razor @helper ✅ ⛔ Doesn't exist in .net 5 @model ⛔ ✅ Doesn't exist in old .net and can't be combined with @inherits Internal Docs: Api Controller Inheritance Note This is internal documentation for the 2sxc core developers. You don't need this part. Basis for everything: System.Web.WebPages.WebPageBase \uD83E\uDD77\uD83C\uDFFD ToSic.Sxc.Web.RazorComponentBase internal base for all Razor Pages in DNN \uD83D\uDD39 adds dynamic code context, Html helper, etc. \uD83D\uDD39 adds simple Log object \uD83D\uDD39 Adds logging to insights \uD83D\uDD39 Base class for everything Based on that these public base classes were made: ⭐\uD83D\uDC80 ToSic.SexyContent.Razor.SexyContentWebPage public, very old/deprecated oldest base class, should not be used any more \uD83D\uDD39 TODO: MUST CHECK IF THIS IS STILL THE DEFAULT in web.config \uD83D\uDD39 had some exotic propecties such as List which contained Content/Presentation pairs \uD83E\uDD77\uD83C\uDFFD ToSic.SexyContent.Razor.SexyContentWebPage<T> internal, only for technical reasons ⭐\uD83D\uDC80 ToSic.Sxc.Dnn.RazorComponent public, old/deprecated was the replacement for the previous, without the exotic List \uD83D\uDD39 Had old APIs such as CustomizeData and CustomizeCode which isn't needed any more ⭐\uD83D\uDC80 ToSic.Sxc.Dnn.RazorComponentCode public, old/deprecated used for deprecated feature: code-behind ⭐\uD83D\uDC80 Custom.Hybrid.Razor12 public, recommended to move to 14 works fine, but is missing some newer features \uD83D\uDD39 Removed CustomizeData and CustomizeCode \uD83D\uDD39 Had a public object Convert which interfered with the System.Convert \uD83E\uDD77\uD83C\uDFFD Custom.Hybrid.Advanced.Razor14<TModel, TServiceKit> internal \uD83D\uDD39 adds the Kit property with all kinds of ready-to-use Services \uD83D\uDD39 also removes the .Convert object, which is now on Kit.Convert ⭐ Custom.Hybrid.Razor14 public ⭐\uD83C\uDF1F Custom.Hybrid.RazorTyped recommended \uD83D\uDD39 changes entire API to typed \uD83D\uDD39 adds the MyItem object and AsItem(...) methods ⭐\uD83C\uDF1F Custom.Hybrid.RazorTyped<TModel> recommended \uD83D\uDD39 adds the Model object ⭐\uD83C\uDF1F AppCode.Razor.AppRazor public, custom - only exists if the App creates it ⭐ AppCode.Razor.AppRazor<TModel> public History 2sxc 10.20 - changed to Purpose from InstancePurpose - old code still works"
  },
  "net-code/api-compare/razor-sub-components.html": {
    "href": "net-code/api-compare/razor-sub-components.html",
    "title": "Razor Sub-Components Differences in APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor Sub-Components Differences in APIs 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. This is about how a Razor can call other Razor files, and pass parameters to them. They may be called Razor Components, Partial Views, Sub-Components, Child Components or Child Razor. In this document we'll just call them Components. Calling Components For clean code, you'll often want to call sub-components from your main razor file. Here's a simple example: @* without parameters *@ @Html.Partial(\"file.cshtml\") @* with parameters *@ @Html.Partial(\"file.cshtml\", new { Sort = \"asc\" }) The exact mechanisms and commands can change based on the version of 2sxc you're using. Without Parameters - all APIs This is identical for all versions of 2sxc: Calling Razor - eg. Default.cshtml: <h1>some title</h1> @Html.Partial(\"Part Footer.cshtml\") Called Razor - eg. Part Footer.cshtml: <footer> <p>some footer</p> </footer> With Parameters - Dynamic This applies to Razor12, Razor14. It uses the DynamicModel to pass parameters. All parameters are typed as dynamic when received, so you can pass anything. Calling Razor - eg. Default.cshtml: @inherits Custom.Hybrid.Razor12 @{ // create a list of dynamic entities var products = AsDynamic(App.Data[\"Products\"]); } <h1>Products</h1> @foreach (var product in products) { @Html.Partial(\"Part Product.cshtml\", new { Title = \"hello\", Product = product }) } Called Razor - eg. Part Product.cshtml: @inherits Custom.Hybrid.Razor12 @{ var title = DynamicModel.Title; var product = DynamicModel.Product; } <h2>@title</h2> <div class=\"product\"> <strong>@product.Name</strong> <p>@product.Description</p> </div> With Parameters - Typed This applies to RazorTyped (v16+) and AppRazor (v17.03+). It uses the MyModel to pass parameters. All parameters are typed as ITypedModel when received, so you can pass anything. Calling Razor - eg. Default.cshtml: @inherits Custom.Hybrid.RazorTyped @{ // Create items list of Products var products = AsItems(App.Data.GetStream(\"Products\")); } <h1>Products</h1> @foreach (var product in products) { @Html.Partial(\"Part Product.cshtml\", new { Title = \"hello\", Product = product }) } Called Razor - eg. Part Product.cshtml: @inherits Custom.Hybrid.RazorTyped @{ var title = MyModel.String(\"Title\"); var product = MyModel.Item(\"Product\"); } <h2>@title</h2> <div class=\"product\"> <strong>@product.String(\"Name\")</strong> <p>@product.Html(\"Description\")</p> </div> With Parameters - Strong Typed This applies to v17.03+ with RazorTyped<TModel> and AppRazor<TModel>. It uses the Model to pass parameters. All parameters are typed as specified in TModel. Helper Class - eg. AppCode/Razor/ProductViewModel.cs: public class ProductViewModel { public string Title { get; set; } public Product Product { get; set; } } @inherits Custom.Hybrid.RazorTyped @using AppCode.Razor @{ // Create items list of Products var products = App.Data.GetAll<AppCode.Data.Product>(); } <h1>Products</h1> @foreach (var product in products) { @Html.Partial(\"Part Product.cshtml\", new ProductViewModel { Title = \"hello\", Product = product }) } Called Razor - eg. Part Product.cshtml: @inherits Custom.Hybrid.RazorTyped<ProductViewModel> @using AppCode.Razor <h2>@Model.Title</h2> <div class=\"product\"> <strong>@MyModel.Product.String(\"Name\")</strong> <p>@MyModel.Product.Html(\"Description\")</p> </div> Calling Components - Side-By-Side Comparison This is how you call sub-razor files or get helper C# classes: Dynamic Typed Strong Typed @Html.Partial(\"file.cshtml) @Html.Partial(\"file.cshtml) @Html.Partial(\"file.cshtml) @Html.Partial(\"file.cshtml, new { Sort = \"asc\" }) @Html.Partial(\"file.cshtml, new { Sort = \"asc\" }) @Html.Partial(\"file.cshtml, new { Sort = \"asc\" }) @Html.Partial(\"file.cshtml, new SomeModel { Sort = \"asc\" }) Receive Model Data from Child Razor - Side-By-Side Comparison When a razor is called using Html.Partial(..., new { ... }) it passes parameters to the child razor. These can be picked up in the child as follows: Dynamic Typed Strong Typed DynamicModel (dynamic) MyModel (ITypedModel) MyModel (ITypedModel) Model (custom type) var name = DynamicModel.Name (dynamic) var name = MyModel.String(\"Name\") (string) var name = MyModel.String(\"Name\") (string) var name = Model.Name (string) var birthday = DynamicModel.Birthday (dynamic) var birthday = MyModel.DateTime(\"Birthday\") (DateTime) var birthday = MyModel.DateTime(\"Birthday\") (DateTime) var birthday = Model.Birthday (DateTime) MyModel has many more methods to ensure you can pass type-safe data to the child. See MyModel Model is always typed the way it's specified in the inherits, eg. @inherits Custom.Hybrid.RazorTyped will not have a Model property @inherits Custom.Hybrid.RazorTyped<ProductViewModel> will have Model as ProductViewModel @inherits Custom.Hybrid.RazorTyped<string> will have Model as string"
  },
  "net-code/api-compare/settings-resources.html": {
    "href": "net-code/api-compare/settings-resources.html",
    "title": "Settings / Resources Differences in APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Settings / Resources Differences in APIs 2sxc has changed a lot over time. So you'll find old code snippets and new ones, and it helps to see which one is being used. Sometimes you'll also want to convert old code to new code, and this page should help you with that. Settings and Resources Objects Typed Code In Typed Code, the objects you'll use are usually: AllSettings - a ITypedStack with all settings AllResources - a ITypedStack with all resources App.Settings - a ITypedItem with app settings App.Resources - a ITypedItem with app resources To get a value in typed code, you will use typed methods such as .String(...). These can also have longer keys inside them, such as: var width = AllSettings.String(\"Images.Content.Width\"); Tip The typed code is much more robust, as it will not throw an error if a setting doesn't exist. So getting Images.MyConfig.Width will not throw an error if MyConfig doesn't exist. Strong Typed Code In Strong Typed Code - inheriting from AppCode.Razor.AppRazor, the objects you'll use are usually: AllSettings - a ITypedStack with all settings AllResources - a ITypedStack with all resources App.Settings - a AppCode.Data.AppSettings based on ITypedItem with app settings App.Resources - a AppCode.Data.AppResources based on ITypedItem with app resources Tip The strong-typed code is much more robust - and typed. So using App.Resources will provide intellisense (if VS Code is configured correctly). You can also use the ?. operator to avoid null-errors, such as App.Resources?.Title since we're using the new Roslyn compiler for strong-typed code. Dynamic Code In Dynamic Code, the objects you'll use are usually: Settings - a dynamic object with all settings Resources - a dynamic object with all resources App.Settings - a dynamic object with app settings App.Resources - a dynamic object with app resources To get a value in dynamic code, you will use the dynamic object directly, such as: var width = Settings.Images.Content.Width; Warning The dynamic code is much more error-prone, as it will throw an error if a setting doesn't exist. So getting Images.MyConfig.Width will throw a null-error if MyConfig doesn't exist. Unfortunately you also can't use the ?. operator to avoid this, because the old Dnn compiler doesn't support it. Get Settings and Resources Dynamic Typed Strong Typed Comments / Differences Settings (dynamic) AllSettings (ITypedStack) AllSettings (ITypedStack) All settings Settings.Color (dynamic) AllSettings.String(\"Color\") (string) AllSettings.String(\"Color\") (string) Get a color setting Resources (dynamic) AllResources (ITypedStack) AllResources (ITypedStack) All resources Resources.Title (dynamic) AllResources.String(\"Title\") (string) AllResources.String(\"Title\") (string) Get a resource App.Settings (dynamic) App.Settings (ITypedItem) App.Settings (AppCode.Data.AppSettings) App settings App.Settings.Color (dynamic) App.Settings.String(\"Color\") (string) App.Settings.String(\"Color\") (string) or App.Settings.Color (string) App settings App.Resources (dynamic) App.Resources (ITypedItem) App.Resources (AppCode.Data.AppResources) App resources App.Resources.Title (dynamic) App.Resources.String(\"Title\") (string) App.Resources.String(\"Title\") (string) or App.Resources.Title (string) App resources Tip The new AllSettings and AllResources can use paths to deeper values, such as AllSettings.Int(\"Images.Content.Width). This is much safer that the old API, which threw an error if an intermediate setting didn't exist."
  },
  "net-code/api-compare/webapi-base.html": {
    "href": "net-code/api-compare/webapi-base.html",
    "title": "C# WebApi Base Controller Classes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "C# WebApi Base Controller Classes Every Custom C# WebApi Controller inherits from a base class. depending on the base class, the APIs and features in the template will change. Tip This is basically identical with the C# base classes , just with slightly different names. Because of this, we're not repeating the entire text here, but just listing the class names. Typed / Strong-Typed for v16+ These are the recommended Typed C# base classes to inherit today: Custom.Hybrid.ApiTyped - new in v16 Older Base Classes (Dynamic) These are the older - Dynamic base classes - not recommended for new development, but still supported for backwards compatibility. Custom.Hybrid.Api14 - new in v14 Custom.Hybrid.Api12 - new in v12 Custom.Dnn.Api12 - v12; same as Hybrid, but with Dnn property C# WebApi Controllers Classes Which Don't Inherit If you don't specify a base class, the class will behave as a standard, new class. This will probably just not work."
  },
  "net-code/api-dynamic/index.html": {
    "href": "net-code/api-dynamic/index.html",
    "title": "\uD83C\uDF55 Dynamic API in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "\uD83C\uDF55 Dynamic API in 2sxc Dynamic Code is the oldest way to write C# and Razor code. It's been around since 2012 and is still very popular because it's so easy to start with. As of 2024, almost all samples are still written in dynamic code, because typed replacements have only been introduced in 2023. Tip Dynamic API is battle tested, looks simple and just works. The challenge is that complex Apps tend to get difficult to debug, because the compiler can't help you find issues. Also, VS Code can't provide IntelliSense, since it can't know what's inside all the variables. So we strongly recommend to look into Typed Code and Strong Typed Code What does Dynamic API Look Like? @inherits Custom.Hybrid.Razor12 <h1>@Content.Title</h1> <img src='@Link.Image(url: Content.Picture, width: 200, height: 200, resizeMode: \"crop\")' class=\"float-right\"> <ul> <li>Teaser: @Content.Teaser</li> <li>Launched: @Content.Launched.Year</li> <li>Authors: @Content.Authors.Count()</li> <li>Maker: @Content.Maker.Name</li> </ul> @Html.Raw(Content.Description) Challenges with Dynamic API Tip The Dynamic API is very easy to use and looks very simple. It also has the most extensive documentation and examples, because it's been around for 12 years. But the Dynamic API has a long history, which also results in some conventions which are not ideal. For example, the Content object is often the main object containing data, but the name Content has confused many users. There is also a lot of magic in the main conversion AsDynamic() which makes it hard to really understand what's happening. In addition, the dynamic nature of the API makes it harder to write code - since the code always looks ok and only breaks at runtime. This can result in rarely used code block (which may not run in your test, because there's an if which never hits during testing) to only break in production. Tip That said, the dynamic API is still very popular and works great for many scenarios. It's proven useful for 12 years so don't worry if you find such code. But for new code, we recommend Typed Code and Strong Typed Code History Introduced in 2sxc 2.0 in 2012 Constantly improved till 2sxc 15 2023"
  },
  "net-code/api-strongly-typed/app-data-typed.html": {
    "href": "net-code/api-strongly-typed/app-data-typed.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Strong Typed App Data in 2sxc 17+"
  },
  "net-code/api-strongly-typed/content-types.html": {
    "href": "net-code/api-strongly-typed/content-types.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Custom Data Models in the Strong Typed APIs in 2sxc 17+"
  },
  "net-code/api-strongly-typed/custom-data-equality.html": {
    "href": "net-code/api-strongly-typed/custom-data-equality.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Data Equality on Custom Data Models in 2sxc 17+"
  },
  "net-code/api-strongly-typed/custom-helpers.html": {
    "href": "net-code/api-strongly-typed/custom-helpers.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Custom C# Helpers in AppCode in 2sxc 17+"
  },
  "net-code/api-strongly-typed/custom-services.html": {
    "href": "net-code/api-strongly-typed/custom-services.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Custom C# Services in AppCode in 2sxc 17+"
  },
  "net-code/api-strongly-typed/data-serialization.html": {
    "href": "net-code/api-strongly-typed/data-serialization.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Custom Data Serialization in 2sxc 17+"
  },
  "net-code/api-strongly-typed/editions.html": {
    "href": "net-code/api-strongly-typed/editions.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Editions, Polymorphism and Open-Heart Surgery in 2sxc 17+"
  },
  "net-code/api-strongly-typed/get-started/01-appcode-helper.html": {
    "href": "net-code/api-strongly-typed/get-started/01-appcode-helper.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to #1 Your First Helper"
  },
  "net-code/api-strongly-typed/get-started/02-vscode.html": {
    "href": "net-code/api-strongly-typed/get-started/02-vscode.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to #2 Setup VS Code for IntelliSense"
  },
  "net-code/api-strongly-typed/get-started/index.html": {
    "href": "net-code/api-strongly-typed/get-started/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Get Started with Strong Typed Code"
  },
  "net-code/api-strongly-typed/index.html": {
    "href": "net-code/api-strongly-typed/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Strong Typed Code in 2sxc 17+"
  },
  "net-code/api-strongly-typed/razor-base-classes.html": {
    "href": "net-code/api-strongly-typed/razor-base-classes.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Custom Razor Base Classes in 2sxc 17+ WIP"
  },
  "net-code/api-strongly-typed/razor-typed-models.html": {
    "href": "net-code/api-strongly-typed/razor-typed-models.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Razor with Typed Models in 2sxc 17+"
  },
  "net-code/api-strongly-typed/use-in-razor.html": {
    "href": "net-code/api-strongly-typed/use-in-razor.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Use Custom Data in Razor (2sxc 17+ WIP)"
  },
  "net-code/api-typed-strong/app-data-typed.html": {
    "href": "net-code/api-typed-strong/app-data-typed.html",
    "title": "Strong Typed App Data in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Strong Typed App Data in 2sxc 17+ The App.Data object provides a DataSource to all the data inside the App. In some scenarios, your code will want to work with this data as if it were a database, but in a strong-typed way. There are a few ways to do this. New using GetAll and GetOne The most common operations will be to get all or get a specific item. This is now much easier: // Get all and convert to Person var people = App.Data.GetAll<Person>(); // Get one and convert using int-id - will be null if not found var person72 = App.Data.GetOne<Person>(72); // Get one and convert using Guid - will be null if not found var personFromGuid = App.Data.GetOne<Person>(Guid.Parse(\"...\")); Basic using As and AsList // Get all and convert to Person var people = AsList<Person>(App.Data.GetStream(\"Person\")); // Get all and convert the first to person - will be null if there is no data var onePerson = As<Person>(App.Data.GetStream(\"Person\")); // Get all, convert, then find the one with the ID - null if no match var person45 = AsList<Person>(App.Data.GetStream(\"Person\")).FirstOrDefault(p => p.Id == 45); // Get one and convert to Person - null if no match; faster var person72 = As<Person>(App.Data.GetStream(\"Person\").List.FirstOrDefault(e => e.EntityId == 72)); This all works, but it's a bit verbose and you will sometimes do too much work, which is not ideal for performance. Good to Know To make the magic work, GetAll(...) and GetOne(...) will use the class name to determine the stream it should retrieve. If the stream does not exist, it means that the Content-Type doesn't exist, and it will throw an error If the stream exists, but the data is empty, it will return an empty list or null, depending on the method used History Introduced in v17.03"
  },
  "net-code/api-typed-strong/content-types.html": {
    "href": "net-code/api-typed-strong/content-types.html",
    "title": "Custom Data Models in the Strong Typed APIs in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Data Models in the Strong Typed APIs in 2sxc 17+ The Copilot Data Model Generator will generate classes for each Content-Type in the AppCode.Data namespace. The details are documented there. This guide focuses on how to use these classes in your Razor and C# code, and how to extend them to best fit your needs. Setup for this Guide This guide assumes you have the following Content-Types in your app: Product with fields like Title, Teaser, Packshot (image), OnSale (bool), Categories (of type Category), Company (type Company) and Description (HTML) Company with fields like Name, Logo (image), Description and Website (URL) Category with fields like Name, Description and Parent (type Category) We have used Copilot to generate the files, so our folder structure looks like this: /AppCode/Data/Product.Generated.cs /AppCode/Data/Company.Generated.cs /AppCode/Data/Category.Generated.cs Tip The auto-generated files should never be modified, as you will want to re-generate and overwrite them again. What's in the Auto-Generated Classes? The auto-generated files contain two classes: one is the auto-generated class, and the other is the base class. There is some extensive reasoning to this, best check out the Copilot documentation for details. For example, the Product.Generated.cs contains the following classes: AppCode.Data.AutoGenerated.ZagProduct - this one is specially named, so you won't accidentally use it in IntelliSense and so the property names never conflict with the class name. AppCode.Data.Product - this one is partial so you can extend it in a separate file later on. Internally, the ZagProduct has a lot of code which looks like this: /// <summary> /// Title as string. <br/> /// For advanced manipulation like scrubHtml, use .String(\"Title\", scrubHtml: true) etc. /// </summary> public bool OnSale => _item.Bool(\"OnSale\"); /// <summary> /// Packshot as link (url). <br/> /// To get the underlying value like 'file:72' use String(\"Packshot\") /// </summary> public string Packshot => _item.Url(\"Packshot\"); /// <summary> /// Get the file object for Packshot - or null if it's empty or not referencing a file. /// </summary> public IFile PackshotFile => _item.File(\"Packshot\"); /// <summary> /// Get the folder object for Packshot. /// </summary> public IFolder PackshotFolder => _item.Folder(\"Packshot\"); /// <summary> /// Title as string. <br/> /// For advanced manipulation like scrubHtml, use .String(\"Title\", scrubHtml: true) etc. /// </summary> public new string Title => _item.String(\"Title\", fallback: \"\"); /// <summary> /// Fields as list of Category. /// </summary> /// <remarks> /// Generated to return child-list child because field settings had Multi-Value=true. The type Category was specified in the field settings. /// </remarks> /// <returns> /// An IEnumerable of specified type, but can be empty. /// </returns> public IEnumerable<Category> Categories => _categories ??= _item.Children<Category>(\"Categories\"); private IEnumerable<Category> _categories; Using the Strong Typed Classes in Razor or C# Files TODO: Modify the Strong Typed Classes As mentioned before, you don't want to touch the generated files. Instead, you should create a new file with the same name, but without the .Generated part. Here's an example of a /AppCode/Data/Product.cs file which extends the auto-generated class Product with some custom properties and methods: namespace AppCode.Data { public partial class Product { // Add your own properties and methods here } } The compiler will then combine the auto-generated Product with yours. Example: Add a Main Category Property Now let's say that the first category is used a lot, so you want a MainCategory property which is just a shortcut to the first category. This is how you would do it: namespace AppCode.Data { public partial class Product { public Category MainCategory => Categories.FirstOrDefault(); } } That's it! You could of course optimize it, so that it only does this once, and add some comments, like this: namespace AppCode.Data { public partial class Product { /// <summary> /// The main / primary category /// </summary> public Category MainCategory => _mainCategory ??= Categories.FirstOrDefault(); private Category _mainCategory; } } Doing this is a bit better for performance, and gives you intellisense when you hover over MainCategory in your Razor files. Example: Add a CssClasses property Now let's say you want to add a CssClasses property which should be the same in many Razor views, but change based on the OnSale status. This is how you would do it: namespace AppCode.Data { public partial class Product { public string CssClasses => OnSale ? \"on-sale\" : \"\"; } } Example: Override the Title Property Imagine you want the title to always have a \uD83C\uDF1F emoji at the end, when it's on sale: namespace AppCode.Data { public partial class Product { public new string Title => base.Title + (OnSale ? \" \uD83C\uDF1F\" : \"\"); } } Note the word new - this is because the Title property is already defined in the auto-generated class, and we're just extending it. It's not necessary, but it's a good practice to make it clear that you're replacing the Title. Example: Add a Typed Presentation property Every Typed-Item has a Presentation property which is an ITypedItem - and it can also be null. But let's imagine that you always use Product together with ProductPresentation so you want to make it typed as well. This is how you would do it: namespace AppCode.Data { public partial class Product { public new ProductPresentation Presentation => _presentation ??= As<ProductPresentation>(base.Presentation); private ProductPresentation _presentation; } } Note the new - as were replacing the Presentation property, and base.Presentation - without the base prefix, you would create an infinite loop. Super-Extending the Strong Typed Classes The previous examples all worked because every new property we created used existing data to determine the new value. In some cases, you would like to add a property which is not based on existing data, but on other data. For example, you may want to add a IsRecommended based on the current User. This is a bit more tricky, because your classes are based on CustomItem and does not know about the current user. Our recommended way is to do the following: Add a property for the external information - eg. User - to be passed in from the Razor file Use this property to calculate the new property Here's an example: namespace AppCode.Data { public partial class Product { public ICmsUser User { get; set; } public bool IsRecommended => User.IsSystemAdmin; } } When converting the data to a strong-typed object, you would then pass in the user like this: @{ var product = AsList<Product>(MyItems) .Select(i => { i.User = MyUser; // Set this property, so it can be used in calculated properties of Link return i; }) .ToList(); } APIs you should Know About All your custom data objects will be based on CustomItem which has a lot of methods to get data. These are some you will need to know about: _item is the underlying object which is being wrapped. You can always access it's methods such as _item.String(\"Teaser\") or _item.Children(\"Categories\") As<T>(object) will convert an item to a strong-typed object AsList<T>(object) will convert a list of items to a list of strong-typed objects Child<T>(name) will get a child item and convert it to a strong-typed object Children<T>(name) will get a list of child items and convert them to a list of strong-typed objects Parent<T>(type: name, field: name) will get the parent item (or the first parent in all the matching parents) and convert it to a strong-typed object Parents<T>(type: name, field: name) will get the list of parent items and convert them to a list of strong-typed objects History HotBuild introduced in v17.00 but was enhanced a lot in each additional version Copilot was introduced in 17.03 and is still getting improved AppCode was introduced as ThisApp but renamed to AppCode in 17.02"
  },
  "net-code/api-typed-strong/custom-data-equality.html": {
    "href": "net-code/api-typed-strong/custom-data-equality.html",
    "title": "Data Equality on Custom Data Models in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data Equality on Custom Data Models in 2sxc 17+ Custom data models such as AppCode.Data.Product or AppCode.Data.BlogPost are technically a wrapper around other objects usually coming from IEntitys. As such, there is always the question how to check equality. Tip The key take away: use the == operator and use the .Equals() method and use .GroupBy() as you would expect. We have done special modifications to the wrappers, so the == operator and item.Equals(item2) will work as expected. Let's explain: var item1 = As<Product>(MyItem); var item2 = As<Product>(MyItem); var isEqual = item1 == item2; // should this be true or false? Technically the wrappers are different objects, as they were created independently. So in terms of what really happens, they are different, but for practical purposes they should behave as if they are the same. Here's why: // Get a list of all blog posts, then group by category var blogPosts = AsList<BlogPost>(MyItems); var grouped = blogPosts.GroupBy(p => p.Category); Internally every item was wrapped as a BlogPost. Each one will also get the Category which was also wrapped independently. But for grouping by something, the should be considered equal. Equality Implementation we have overloaded the == and != operators to compare the underlying IEntity objects. we have implemented the .Equals() method to compare the underlying IEntity objects. This means that you can use the == operator and the .Equals() method as you would expect. It also means that LINQ operations such as GroupBy will work as expected. Difference to ITypedItem Important This is a different than the implementation on ITypedItem. There we could only override .Equals(), so that and GroupBy would work as expected, but the == operator would not work as expected in ITypedItem. Edge Cases If rare cases where you extend the Data Model eg. BlogPost with additional properties, such as this namespace AppCode.Data { public partial class BlogPost { public string CustomProperty { get; set; } } } ...you may have two different objects, because you set that property on one and not the other. In this case, you may still want to check for equality and expect it to be false, but the underlying check would compare the inner data and return true. We believe this is a very, very rare scenario. If you want to do this, and expect two wrappers around the same data to be un-equal, you'll need to use ReferenceEquals. History .Equals implemented in v17.03 == and != operators implemented in v17.04"
  },
  "net-code/api-typed-strong/custom-helpers.html": {
    "href": "net-code/api-typed-strong/custom-helpers.html",
    "title": "Custom C# Helpers in AppCode in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Helpers in AppCode in 2sxc 17+ To be SOLID and DRY, you will often want to create custom C# helpers in the /AppCode folder to share code you with your Razor files. Tip This is similar to shared C# files before, which were created using CreateInstance(\"path-to-c#file\") but the major difference is that this new solution is strong-typed and provides IntelliSense. Tip This is different from Custom Services, which are more complex and have context information such as the Kit and MyContext objects. Simple Example with Static Methods Here is an example of such a file in /AppCode/MyHelpers.cs: namespace AppCode { public class MyHelpers { public static string MyHelperMethod(string input) => \"Hello \" + input; } } You can then use this in your Razor files like this: @inherits Custom.Hybrid.RazorTyped @using AppCode @MyHelpers.MyHelperMethod(\"World\") Advanced Example with Class Instances Methods Here is an example of such a file in /AppCode/MyHelpers.cs: namespace AppCode { public class MyHelpers { public string Name { get; set; } public string Greeting => \"Hello \" + Name; } } You can then use this in your Razor files like this: @inherits Custom.Hybrid.RazorTyped @using AppCode @{ var helper = new MyHelpers { Name = \"World\" }; var result = helper.Greeting; } History Introduced in v17.03"
  },
  "net-code/api-typed-strong/custom-services.html": {
    "href": "net-code/api-typed-strong/custom-services.html",
    "title": "Custom C# Services in AppCode in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Services in AppCode in 2sxc 17+ To be SOLID and DRY, you will often want to create custom C# services in the /AppCode folder to share code you with your Razor files. Tip This is similar to shared C# files before, which were created using CreateInstance(\"path-to-c#file\") but the major difference is that this new solution is strong-typed and provides IntelliSense. Tip This is different from Custom Helpers, which are much simpler. Simple Example Here is an example of such a file in /AppCode/MyHelpers.cs: using System.Collections.Generic; using System.Linq; namespace AppCode { // Must inherit from CodeTyped to have the full context public class LinkService: Custom.Hybrid.CodeTyped { // The Kit.Link is magically made available so the code can use it public string LinkToCurrentPage => Kit.Link.To(); // The App is magically made available so the code can use it public List<Person> GetPeople() => AsList<Person>(App.Data[\"People\"]).ToList(); } } You can then use this in your Razor files like this: @inherits Custom.Hybrid.RazorTyped @using AppCode @{ var linkService = GetService<LinkService>(); var pageLink = linkService.LinkToCurrentPage; var people = linkService.GetPeople(); } Difference to Helpers The main difference to Helpers is that a service can have context information such as the Kit object, and can also be used to provide more complex services like a LinkService which provides the LinkToCurrentPage method. So such a service has access to objects and properties such as: Kit MyContext App MyPage UniqueKey ... It also has all the typical APIs such as AsItem(...) AsItems(...) As<T>(...) AsList<T>(...) History Introduced in v17.03"
  },
  "net-code/api-typed-strong/data-serialization.html": {
    "href": "net-code/api-typed-strong/data-serialization.html",
    "title": "Custom Data Serialization in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Data Serialization in 2sxc 17+ Serialization is usually converting data to JSON in WebAPI scenarios. This guide should explain how it works, and what you can do to modify the behavior. Basics By default, all classes are serialized using the default JSON serializer. This means that properties etc. are simply serialized as expected, typically with camelCase. Example for a Product Class class Product { public int Id { get; set; } public Guid Guid { get; set; } public string Name { get; set; } public decimal Price { get; set; } public Category Category { get; set; } public IEnumerable<Tag> Tags { get; set; } } class Category { public int Id { get; set; } public Guid Guid { get; set; } public string Name { get; set; } public string Description { get; set; } } class Tag { public int Id { get; set; } public Guid Guid { get; set; } public string Name { get; set; } } would be serialized as { \"id\": 123, \"guid\": \"12345678-1234-1234-1234-1234567890ab\", \"name\": \"My Product\", \"price\": 12.34, \"category\": { \"id\": 456, \"guid\": \"12345678-1234-1234-1234-1234567890ab\", \"name\": \"My Category\", \"description\": \"My Description\" }, \"tags\": [ { \"id\": 789, \"guid\": \"12345678-1234-1234-1234-1234567890ab\", \"name\": \"Tag 1\" }, { \"id\": 101112, \"guid\": \"12345678-1234-1234-1234-1234567890ab\", \"name\": \"Tag 2\" } ] } This is the standard behavior, and there are various reasons why you may want to change this. Total Control Strategy: Custom Conversion DTO Classes This strategy basically creates DTO (Data Transfer Objects) which are then serialized. This is the most flexible, but also the most work. This example assumes you don't want to include the details of the Tag/Category, but mainly just the reference - because you would want to put the details in a separate call. class ProductDto { public ProductDto(Product product) { Id = product.Id; // Guid = product.Guid; Name = product.Name; Price = product.Price; Category = new CategoryDto(product.Category); Tags = product.Tags.Select(t => new TagDto(t)); } public int Id { get; set; } // public Guid Guid { get; set; } public string Name { get; set; } public decimal Price { get; set; } public CategoryDto Category { get; set; } public IEnumerable<TagDto> Tags { get; set; } } class CategoryDto { public CategoryDto(Category category) { Id = category.Id; // Guid = category.Guid; Name = category.Name; // Description = category.Description; } public int Id { get; set; } // public Guid Guid { get; set; } public string Name { get; set; } // public string Description { get; set; } } class TagDto { public TagDto(Tag tag) { Id = tag.Id; // Guid = tag.Guid; Name = tag.Name; } public int Id { get; set; } // public Guid Guid { get; set; } public string Name { get; set; } } This would then serialize to JSON as { \"id\": 123, \"name\": \"My Product\", \"price\": 12.34, \"category\": { \"id\": 456, \"name\": \"My Category\" }, \"tags\": [ { \"id\": 789, \"name\": \"Tag 1\" }, { \"id\": 101112, \"name\": \"Tag 2\" } ] } Simpler JsonIgnore Strategy If you just want to ignore some properties, you can use the [JsonIgnore] attribute. This takes two steps, because you can't use it on the original class, but you can use it on a derived class. Assume the following /AppCode/Data/Product.Generated.cs Copilot Auto-Generated file, which you shouldn't touch: namespace AppCode.Data { public partial class Product : ZagProduct { } } namespace AppCode.Data.AutoGenerated { public class ZagProduct: Custom.Data.CustomItem { public int Id { get; set; } public Guid Guid { get; set; } public string Name { get; set; } public decimal Price { get; set; } public Category Category { get; set; } public IEnumerable<Tag> Tags { get; set; } } } And this would be the manually created /AppCode/Data/Product.cs file: using System.Text.Json.Serialization; namespace AppCode.Data { // This would be the class we can modify public partial class Product : ZagProduct { // ignore the guid for JSON [JsonIgnore] public new Guid Guid => base.Guid; // ignore the category for JSON - but only if null [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public new Category Category => base.Category; // ignore the tags for JSON [JsonIgnore] public new IEnumerable<Tag> Tags => base.Tags; // custom tag info, but just the reference info // this would be serialized as an array of { id: 123, name: \"Tag 1\" } public object TagReferences => base.Tags.Select(t => new { t.Id, t.Name }); } } This would serialize to JSON like this: { \"id\": 123, \"name\": \"My Product\", \"price\": 12.34, \"category\": { \"id\": 456, \"guid\": \"12345678-1234-1234-1234-1234567890ab\", \"name\": \"My Category\", \"description\": \"My Description\" }, \"tagReferences\": [ { \"id\": 789, \"name\": \"Tag 1\" }, { \"id\": 101112, \"name\": \"Tag 2\" } ] } History Introduced in v17.03"
  },
  "net-code/api-typed-strong/editions.html": {
    "href": "net-code/api-typed-strong/editions.html",
    "title": "Editions, Polymorphism and Open-Heart Surgery in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Editions, Polymorphism and Open-Heart Surgery in 2sxc 17+ 2sxc supports the concept of Polymorphism in which an App can exist in multiple editions. This is used for many things, including: Different output based on the CSS-Framework used staging code which is run for developers, while live code is run for normal users ➡️ read more about Polymorphism Editions and AppCode The AppCode folder can be in multiple places /AppCode - the default, which is used for the root edition /[any-folder]/AppCode - used for any edition Examples /staging/AppCode - used for the staging edition /live/AppCode - used for the live edition /bs3/AppCode - used for the Bootstrap 3 edition /bs5/AppCode - used for the Bootstrap 4 edition Important Every edition is standalone, so the AppCode will be compiled into an own DLL and provided to the Razor files in that edition only. This also means that once an edition has it's own code, it cannot share code with other editions. So you will typically have only a primary /AppCode folder, OR many in various editions. Typical Setup for Output Polymorphism If you are just creating different HTML for different CSS Frameworks, then this will be your typical setup: /AppCode - the default / shared AppCode /bs3/AppCode - do not create AppCode folders inside the editions! /bs3/*.cshtml - Razor files only, will use the default AppCode /bs4/*.cshtml - Razor files only, will use the default AppCode /bs5/*.cshtml - Razor files only, will use the default AppCode Typical Setup for Open-Heart Surgery Polymorphism Since you want to develop different code in the staging edition, you will typically have this setup: /AppCode - do not create a root AppCode, as it won't be used /staging/AppCode - the staging edition /staging/*.cshtml - Razor files will use the staging AppCode /live/AppCode - the live edition /live/*.cshtml - Razor files will use the live AppCode Generating Data Models with Editions The Copilot Data Generator will generate C# classes for all the content types. It can do this for multiple editions, so that each edition has it's own set of classes. This is mainly important for staging/live scenarios. To set this up, add the editions section to the app.json file. We also highly recommend setting one of them to \"isDefault\": true so this will be the recommended target. { \"editions\": { \"staging\": { \"isDefault\": true, \"description\": \"This is the staging edition of the app\", }, \"live\": { \"description\": \"This is the live edition of the app\", } } } ➡️ read more about the app.json file History Introduced in v17.03"
  },
  "net-code/api-typed-strong/get-started/01-appcode-helper.html": {
    "href": "net-code/api-typed-strong/get-started/01-appcode-helper.html",
    "title": "#1 Your First Helper | 2sxc 19 for Dnn and Oqtane",
    "keywords": "#1 Your First Helper Get Started with Strong Typed Code A Strong Typed Helper This will guide you through making the first strong-typed Apps. In the end you'll have a simple helper which you can use in your Razor files. 1. Create a new AppCode Helper First we'll create a helper with a static Hello(...) method. Create a new file in the /AppCode folder, like /AppCode/MyHelpers.cs and add this code: namespace AppCode { /// <summary> /// A simple helper class /// </summary> public class MyHelpers { /// <summary> /// A simple method to say hello /// </summary> public static string Hello(string input) => \"Hello \" + input; } } 2. Use it in a Razor File Now create a Razor file in the root of your app UseHelper.cshtml like this: @inherits Custom.Hybrid.RazorTyped @using AppCode @MyHelpers.Hello(\"World\") 3. Test Go to the App Admin and configure the view to use your newly created Razor file. Then add it to a page in Dnn or Oqtane, and see the result. Explanations This is a very simple example, but it shows the basic concepts. Heres's what's happening: All files in the /AppCode folder are automatically compiled and available to your Razor files. The @inherits statement tells the Razor file which APIs are available. This is important, since the new AppCode feature only works with strong-typed Razor files - eg. inheriting from Custom.Hybrid.RazorTyped. The @using AppCode has 2 functions. It will activate the Roslyn compiler (instead of the old asp.net compiler) and will also make sure that compiled AppCode is used in the compile process. The @MyHelpers.Hello(\"World\") is a simple call to the static method in the MyHelpers class."
  },
  "net-code/api-typed-strong/get-started/02-vscode.html": {
    "href": "net-code/api-typed-strong/get-started/02-vscode.html",
    "title": "#2 Setup VS Code for IntelliSense | 2sxc 19 for Dnn and Oqtane",
    "keywords": "#2 Setup VS Code for IntelliSense Get Started with Strong Typed Code Setup your Dev Environment for Intellisense This will guide you to configure VS Code so you can have Intellisense. This will make it much easier and make you more productive. 1. Setup VS Code \uD83D\uDC49 Check out the VS Code Setup Docs 2. Verify it Works Make sure you restart VS Code after you've made the changes Open the file UseHelper.cshtml we just created and hover over the MyHelper as well as the Hello method. You should see the IntelliSense pop up."
  },
  "net-code/api-typed-strong/get-started/index.html": {
    "href": "net-code/api-typed-strong/get-started/index.html",
    "title": "Get Started with Strong Typed Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Get Started with Strong Typed Code This is a brief guide how to get started with the latest APIs. It will guide you through making the first strong-typed Apps. Lessons Your First Helper Setup VS Code for IntelliSense Pending Lessons Generate Data Models from Your Content-Types and use in Razor Files Create Custom Services Create Custom Razor Base Classes Use Polymorphism"
  },
  "net-code/api-typed-strong/index.html": {
    "href": "net-code/api-typed-strong/index.html",
    "title": "Strong Typed Code in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Strong Typed Code in 2sxc 17+ Strong Typed Code is the newest way to write C# and Razor code in 2sxc 17+. It extends the Typed Code. As such, it's fully compatible, but ever more type-safe and easier to code and debug. What does Strong Typed Code Look Like? @inherits AppCode.Razor.ProductRazor <h1>@MyProduct.Title</h1> @MyProduct.Picture(\"Screenshot\", imgClass: \"float-right\") <ul> <li>Teaser: @MyProduct.Teaser</li> <li>Launched: @MyProduct.Launched.Year</li> <li>Authors: @MyProduct.Authors.Count()</li> <li>Maker: @MyProduct.Maker.Name</li> </ul> @MyItem.Html(\"Description\") This combines the best of all worlds: Simple syntax, easy to read - just like the dynamic code Fully typed, so you get IntelliSense and the compiler will catch many more issues - even better than the typed code Great dev experience in VS Code - you will see if a field like Authors exists or not Great performance, as it's all compiled at runtime Various APIs help you bridge the gap, such as the As<Product>() method The auto-generated Content-Types are really smart - eg. Authors is a List<Author> and Maker is a single Company The Parts that Make it Work The new Copilot generates classes for each Content-Type in the AppCode.Data namespace (you can easily extend them) The As<T> and AsList<T> methods help you convert data into strong-typed objects HotBuild automatically compiles the code on-the-fly, so you can just save and refresh the page to see changes Everything in the /AppCode folder - or in editions such as /staging/AppCode will be compiled and provided to your razor New base classes such as RazorTyped<TModel> make data-handover to sub-components easy New Customize APIs help you create new Razor base classes and hide much of the complexity from your Razor templates TODO: Sample Apps As of now (2024-03) we have not published any Apps with this convention yet, as we're still fine-tuning the details. But we will, ASAP! Activate Strong Typed Mode Old Dynamic, new Typed and brand-new Strong-Typed code can coexist in the same app. Each Razor / C# file can decide which mode it wants to use. To be in typed mode, your Razor/C# must inherit from a typed base class like this: You must use at least 2sxc 17.03 or later Razor files should begin with any one of these: @inherits Custom.Hybrid.RazorTyped @inherits Custom.Hybrid.RazorTyped<TModel> @inherits AppCode.Razor.AppRazor - assuming you have made a custom base class @inherits AppCode.Razor.AppRazor<TModel> - assuming you have made a custom base class C# files should have something like public class YourClassName : Custom.Hybrid.CodeTyped public class YourClassName : AppCode.Services.ServiceBase WebApi files should be like public class YourControllerName : Custom.Hybrid.ApiTyped You should generate your data classes using the Copilot in the Admin UI Tip Changing the base class will completely change the APIs you have available if you're coming from dynamic code. If you already used typed code, then this is already done. Configure Visual Studio Code for IntelliSense Now that everything is typed, we highly recommend you setup VSCode to provide IntelliSense. \uD83D\uDC49 Check out the VS Code Setup Docs Shortlink: https://r.2sxc.org/strong-typed"
  },
  "net-code/api-typed-strong/razor-base-classes.html": {
    "href": "net-code/api-typed-strong/razor-base-classes.html",
    "title": "Custom Razor Base Classes in 2sxc 17+ WIP | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Razor Base Classes in 2sxc 17+ WIP In 2sxc 17+ you can create custom base classes for your Razor files. There are some good reasons to do this, for example: Make sure that App.Settings and App.Resources are strong-typed (not just an ITypedItem) Provide additional helpers which are complex and make the Razor file look complex Pre-Convert data to strong-typed objects, so the Razor file is simpler Here is an example of such a file in /AppCode/Razor/AppRazor.Generated.cs: using AppCode.Data; using ToSic.Sxc.Apps; /// <summary> /// WIP Autogenerating not yet implemented /// </summary> namespace AppCode.Razor { public abstract partial class AppRazor: AppRazor<object> { } /// <summary> /// todo /// </summary> public abstract partial class AppRazor<TModel>: Custom.Hybrid.RazorTyped<TModel> { /// <summary> /// Typed App with typed Settings & Resources /// </summary> public new IAppTyped<AppSettings, AppResources> App => _app ??= Customize.App<AppSettings, AppResources>(); private IAppTyped<AppSettings, AppResources> _app; } } Note The above code may look auto-generated, but there is no generator as of now. We will create one though, and it will do things similar to this. The Magic Explained The code above (which is not yet final as of 2sxc 17.03) does the following: It creates a new base class AppRazor which does not have a typed model It creates a new base class AppRazor<TModel> which does have a typed model (for advanced scenarios, explained later) Both of them are abstract - this is a requirement for Razor base classes Both of them are partial - this allows you to add more helpers and code in a separate file The App property which is usually a IAppTyped is now a IAppTyped<AppSettings, AppResources>. This helps that when you write App.Settings it will be strong-typed - so you will get IntelliSense suggesting all the possible settings. The same applies to App.Resources How to Use the Custom Base Class Imagine you start with a Razor file which looks like this: @inherits Custom.Hybrid.RazorTyped <h1 class=\"@App.Settings.String(\"MainColor\")\">Some Title</h1> You could now change it to use your custom base class like this: @inherits AppCode.Razor.AppRazor <h1 class=\"@App.Settings.MainColor\">Some Title</h1> This is a very simple example, but it shows how you can now use App.Settings.MainColor instead of App.Settings.String(\"MainColor\") - which is much more readable and less error-prone. Extending the Main Base Class In most scenarios you will want to have a main base class - like the AppRazor and put things there that you'll need everywhere. Here's an example which would add a simple helper to easily activate Fancybox in your Razor files. This extension is placed in another file - let's say /AppCode/Razor/AppRazor.cs: using AppCode.Data; using ToSic.Sxc.Apps; namespace AppCode.Razor { public abstract partial class AppRazor<TModel> { protected string ActivateFancyBox() { // see https://r.2sxc.org/turnon Kit.Page.Activate(\"fancybox4\"); return null; } } } This now extends the `AppRazor` and adds a new method `ActivateFancyBox` which you can use in your Razor files like this: ```razor @inherits AppCode.Razor.AppRazor @ActivateFancyBox() Note that the method returns null - this is because the method is just a helper to activate Fancybox, and it doesn't return any content. But it needs to return something, so we can just call it using @ActivateFancybox() without creating @{ ActivateFancybox(); } code blocks. Inheriting and Extending Razor Base Classes The previous example was just the beginning. We recommend creating your own Razor base classes which inherit from AppRazor and then add your own helpers and properties to it. For example, you could prepare data for the Razor view, so that the Razor file is simpler and easier to read. Here's an example of a Razor base class which prepares data for a blog post: using System.Collections.Generic; using System.Linq; using AppCode.Data; using Custom.Data; using ToSic.Sxc.Context; namespace AppCode.Razor { public abstract class ImagesRazor: AppRazor { /// <summary> /// Replace the MyView with a typed version /// </summary> protected new ICmsView<ImageViewSettings, CustomItem> MyView => Customize.MyView<ImageViewSettings, CustomItem>(); protected List<Image> MyImages => _myImages ??= AsList<Image>(MyItems).ToList(); private List<Image> _myImages; /// <summary> /// Replace the MyHeader with a typed version /// </summary> protected new TextMediaListHeader MyHeader => _myHeader ??= Customize.MyHeader<TextMediaListHeader>(); private TextMediaListHeader _myHeader; } } Customize your Razor (BETA) The Customize object is a helper which will create the typed objects for you. It has helpers such as Customize.App<AppSettings, AppResources>() which will create a strong-typed IAppTyped<AppSettings, AppResources> for you. There are more, but they are not documented yet \uD83D\uDE09. History Still WIP v17.03+"
  },
  "net-code/api-typed-strong/razor-typed-models.html": {
    "href": "net-code/api-typed-strong/razor-typed-models.html",
    "title": "Razor with Typed Models in 2sxc 17+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor with Typed Models in 2sxc 17+ In 2sxc 17+ you can use strong-typed models in your Razor files. Background You will often split your code into multiple Razor files and pass parameters to child components: flowchart LR CS[Entry Razor\\nList.cshtml] -->|\uD83D\uDCE4Flexible Parameters| XD XD[\"Child Razor\\nList-Item.cshtml\"] The caller List.cshtml usually does this: @Html.Partial(\"List-Item.cshtml\", new { Title = \"Something\", Product = product }) The child component List-Item.cshtml would then pick this up with differing syntaxes - here's a RazorTyped example: @inherits Custom.Hybrid.RazorTyped @{ var title = MyModel.String(\"Title\"); var product = MyModel.Item(\"Product\"); } This is great, and ideal for flexible scenarios. New: Typed Models But we wanted to introduce more type safety, so we created the RazorTyped<TModel> base class. Simple String Example flowchart LR CS[Entry Razor\\nList.cshtml] -->|\uD83D\uDCE4String Parameter| XD XD[\"Child Razor\\nList-Item.cshtml\"] The caller List.cshtml would now do this: @Html.Partial(\"List-Item.cshtml\", \"Something\") The child component List-Item.cshtml would then pick this up with differing syntaxes - here's a RazorTyped example: @inherits Custom.Hybrid.RazorTyped<string> @{ var title = Model; } Note that MyModel still exists, but isn't made to handle single values. But the Model variable is what is typed with the RazorTyped<string>. Simple Item Example flowchart LR CS[Entry Razor\\nList.cshtml] -->|\uD83D\uDCE4Product| XD XD[\"Child Razor\\nList-Item.cshtml\"] The caller List.cshtml would now do this: @Html.Partial(\"List-Item.cshtml\", product) The child component List-Item.cshtml would then pick this up with differing syntaxes - here's a RazorTyped example: @inherits Custom.Hybrid.RazorTyped<Product> @{ var product = Model; } Complex Example flowchart LR CS[Entry Razor\\nList.cshtml] -->|\uD83D\uDCE4Product View Model| XD XD[\"Child Razor\\nList-Item.cshtml\"] You would now have another class /AppCode/Razor/ProductViewModel which would be a strong-typed model. namespace AppCode.Razor { public class ProductViewModel { public string Title { get; set; } public Product Product { get; set; } } } The caller List.cshtml would now do this: @Html.Partial(\"List-Item.cshtml\", new ProductViewModel { Title = \"Something\", Product = product }) The child component List-Item.cshtml would then pick this up with differing syntaxes - here's a RazorTyped example: @inherits Custom.Hybrid.RazorTyped<ProductViewModel> @using AppCode.Razor @{ var title = Model.Title; var product = Model.Product; } Pick your Poison This new feature is great, but it's not for everyone. It takes a bit more work, but introduces type safety and IntelliSense to your Razor files. It also plays well with the new Razor Base Classes. History Introduced in v17.03"
  },
  "net-code/api-typed-strong/use-in-razor.html": {
    "href": "net-code/api-typed-strong/use-in-razor.html",
    "title": "Use Custom Data in Razor (2sxc 17+ WIP) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use Custom Data in Razor (2sxc 17+ WIP) Once you have the initial setup going (mainly code generated with Copilot), you will want to use these types. The RazorTyped base class was extended with the following methods, to make it easy: As<T>() - to convert the current item to a strong-typed object AsList<T>() - to convert a list of items to a list of strong-typed objects In addition, the ITypedItem has been extended with a few more methods, to make it easier to get strong-typed data: Child<T>() - to get a child item and convert it to a strong-typed object Children<T>() - to get a list of child items and convert them to a list of strong-typed objects Easy as 1-2-3 From then on forth, it's really easy - eg. like this: @inherits Custom.Hybrid.RazorTyped @using AppCode.Data <ol> @foreach(var product in AsList<Product>(MyItems)) { <li> <img src=\"@product.Packshot\"> <a href='@Link.To(parameters: \"productid=\" + product.Id)'> @product.Title @(product.OnSale ? \"\uD83C\uDF1F\" : \"\") </a> Tags: @string.Join(\", \", product.Tags.Select(c => c.Name)) </li> } </ol> You will notice that it looks a lot like dynamic code, except that it's 100% type safe you get IntelliSense the compiler will catch many more issues LINQ works as expected (which is not the case with dynamic objects) it's faster Important for the Setup in Dnn Warning There is a bit of magic in the background, please read the following carefully. Internally all the C# files in the /AppCode folder are compiled into a single assembly, and then provided to the Razor files. This is very challenging to achieve, and uses the Roslyn compiler to do this. Since we are still experimenting with the best possible implementation, Roslyn (and the AppCode features) are not always active - old code will still be compiled using the old BuildManager of asp.net. So to make sure that your Razor will compile using Roslyn, you should do the following: You must have either an @using AppCode or similar statement (eg. @using AppCode.Data) early in your Razor file Or you must inherit from a custom Razor Base Class In both scenarios, Roslyn will be activated and your Razor will be compiled using the new system. More Advanced Example This is more advanced as it uses a custom Razor base class. The base class does some work which is not shown here, like prepare the MyLinks property or provide the ActivateFancyBox() method. In addition, the Link type has been extended with calculated fields such as WindowAuto. @inherits AppCode.Razor.LinksRazor @using AppCode.Data <div class=\"row\"> @foreach (var link in MyLinks) { <div class=\"col-md-6 col-lg-4 mb-4 mb-md-5 co-linkblock\" @Kit.Toolbar.Default(link)> <i class='mb-3 text-primary fas @link.IconAuto' aria-hidden=\"true\" style=\"font-size: 40px;\"></i> <h4>@link.Title</h4> @link.DescriptionHtml(true) @if (link.IsNotEmpty(\"Link\")) { <a href='@link.Link' target='@link.WindowAuto' title=\"@link.Title\" class=\"stretched-link\">@link.Get(\"LinkText\") <i class=\"fas fa-chevron-right\" aria-hidden=\"true\"></i></a> } </div> } </div> @ActivateFancyBox() Standard Typed-Item APIs still work Just fyi, you can still use the standard typed-item APIs, like this: @inherits AppCode.Razor.ProductRazor <h1>@MyProduct.Title</h1> @MyProduct.Picture(\"Screenshot\", imgClass: \"float-right\") @* Show responsive HTML - the function has many more parameters *@ @MyProduct.Html(\"MainBody\") @* Get the HTML but scrub the HTML *@ @MyProduct.String(\"MainBody\", scrubHtml: true) @* Get the link, but as the raw value \"file:72\" and not as the url *@ @MyProduct.String(\"Link\") Edge Case: Custom Properties can Hide Methods Imagine if you had a property called Html. This would hide the Html method, so you would not be able to use it. In this special case, you have a few options, but the simplest is to cast the item to ITypedItem and then use the method like this: @((ITypedItem)MyProduct).Html(\"MainBody\") History Still WIP v17.03+"
  },
  "net-code/api-typed/data/index.html": {
    "href": "net-code/api-typed/data/index.html",
    "title": "Typed Data aka ITypedItem | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .prepare-all { visibility: visible; } Typed Data aka ITypedItem In 2sxc 16 we introduced a new way to work with data, which is much more strong-typed. The objects you will then work with are either ITypedItem which is a wrapper around an IEntity ITyped which is a wrapper around other objects which need to be accessed dynamically IFile IFolder etc. Note These docs are still being written. Please be patient. Things which need documentation Use of the now API Differences to the old API / gotchas Working with strict / required properties/fields Working with files etc. Special actions such as Attribute(), Html(), Picture(), etc. MySettings / MyResources / App.Settings, App.Resources MyContext, MyPage, etc. Use Kit.Data... to get DataSources etc. Improve the \"Where data comes from\" maybe: configuration data? History Introduced in 2sxc v16"
  },
  "net-code/api-typed/data/mocking.html": {
    "href": "net-code/api-typed/data/mocking.html",
    "title": "Mocking Typed Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .prepare-all { visibility: visible; } Mocking Typed Data In some scenarios you have code which expects to work with existing data, but in certain cases the data may not be available. Example Scenario Imagine you have a Razor which shows details about a building, but in some cases the build data is not available. In this case you want to show a fallback, like a default building. For this, the pseudo-code would look like this: @{ var building = expectedBuilding; } <h1>@building.Title</h1> <table> <!-- show specs --> <table> How to Show Mock Data instead Option 1: Lots of if-statements You could use a bunch of if-statements everywhere, but this is not elegant. That would look a bit like this: @{ var building = expectedBuilding; var mockTitle = \"Default Building\"; } <h1> @if (expectedBuilding != null) { @expectedBuilding.Title } else { @mockTitle } </h1> Option 2: Use a special Dummy-Entity (record) You could have a special entity containing the demo data, and use that. This is the approach which is provided by default in views which should show dummy-data until the editor adds custom information. In the default-views-setup this just magically works, because the view-configuration knows what item to provide when there is no user-data yet. But for more advanced scenarios, you would need to do this manually. It would look a bit like this: @{ var building = expectedBuilding ?? AsItems(App.Data[\"Buildings\"]).FirstOrDefault(b => b.SpecialId == \"Dummy\"); } <h1>@expectedBuilding.Title</h1> This is a reasonable approach and should be used where it makes sense. But there are issues with this: It requires a clear way to find the dummy-item in the list of all items, and this marker should never change The list of all data always contains some dummy data, which must be filtered out in other scenarios Option 3: Use Mock Data A very popular way to handle this is using mock data. Here's an example: @{ var building = expectedBuilding ?? AsItem(new { Title = \"Default Building\", Description = \"This is a default building\", Image = \"file:72\", }, mock: true); } <h1>@expectedBuilding.Title</h1> Note the mock: true in the AsItem(new {...}, mock: true). Without this parameter, 2sxc would throw an error. The reason is that 2sxc wants to make sure that you are aware that you are using mock data. So without the mock: true, 2sxc will only accept Entity-like objects in AsItem(). With the mock: true it will also accept any other object, and will then create a mock-entity from it. Basic Mock Data The mock data API is quite powerful, so let's see some advanced examples: var m = AsItem(new { Id = 99999, // The Id will be available on m.Id Guid = Guid.NewGuid(), // The Guid will be available on m.Guid Title = \"Dummy Item\", // The Title will be available on m.Title SomeNumber = 42, // eg. for m.Int(\"SomeNumber\") or m.Float(\"SomeNumber\") SomeString = \"Hello\", // eg. for m.String(\"SomeString\") }, mock: true); Mock Data with Sub-Objects Items can have sub-objects such as Children or the special Presentation object. Here are some examples: var m = AsItem(new { Presentation = new { // m.Presentation Highlight = true, // m.Presentation.Bool(\"Highlight\") GalleryMode = \"tiles\", // m.Presentation.String(\"GalleryMode\") }, Architect = new { // m.Child(\"Architect\") Title = \"John Doe\", // m.Child(\"Architect\").Title Website = \"https://www.2sxc.org\", // m.Child(\"Architect\").String(\"Website\") }, tags = new object[] { // foreach(var t in m.Children(\"tags\") new { Title = \"Tag 1\", }, new { Title = \"Tag 2\", }, } }, mock: true); Mock Parents Any normal TypedItem has a Method .Parents(...) to find other entities which are related. This is the opposite of .Children(...) which finds children. If your code expects parents, you can mock it like this: var m = AsItem(new { Parents = new object[] { // foreach(var p in m.Parents(\"tags\") new { Title = \"How to get your dream-home\", Type = \"Blog\", }, new { Title = \"Evaluating Architects\", Type = \"Blog\", }, new { Title = \"Modern Architecture\", Type = \"CaseStudy\", Field = \"Primary\", }, new { Title = \"Modern Architecture\", Type = \"CaseStudy\", Field = \"Example\", }, new { Title = \"Modern Architecture\", Type = \"CaseStudy\", Field = \"Example\", }, } }, mock: true); At first, this seems similar to the Children example, but there is more too it. The reason is that the .Parents(...) has optional parameters: type is used to only find parents, which have a specific type, such as only Blog parents field allows us to restrict the list even further, eg. only type CaseStudy which reference this in the Primary field var blogParents = m.Parents(type: \"Blog\"); var caseStudyParents = m.Parents(type: \"CaseStudy\"); var caseStudyPrimaryParents = m.Parents(type: \"CaseStudy\", field: \"Primary\"); Mock Links / References Links can be values such as https://... or internal references such as page:123 or file:50203. Note that the IDs in the examples below must of course exist on your system. var m = AsItem(new { // m.Url(\"Website\") and m.String(\"Website\") both return the same Website = \"https://www.2sxc.org\", // m.String(\"ListPage\") will contain `page:123` // m.Url(\"ListPage\") will contain the full url to the page ListPage = \"page:123\", // m.String(\"Logo\") will contain `file:50203` // m.Url(\"Logo\") will contain the full url to the file Logo = \"file:50203\", }, mock: true); Mock Files Typed Items can reference one or many files, using these APIs: thing.File(\"fieldName\") to get a single IFile thing.Folder(\"fieldName\") to get an IFolder containing zero or more files and folders var m = AsItem(new { // m.String(\"Logo\") will contain `file:50203` // m.Url(\"Logo\") will contain the full url to the file // m.File(\"Logo\") will contain the IFile object to this file Logo = \"file:50203\", }, mock: true); Tip As of now, mocking files is possible, but mocking folders is not supported. History Introduced in 2sxc v16.03"
  },
  "net-code/api-typed/data/models.html": {
    "href": "net-code/api-typed/data/models.html",
    "title": "Strictly Typed Data Models Guide (new v17.02) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .prepare-all { visibility: visible; } Strictly Typed Data Models Guide (new v17.02) In 2sxc 17 we introduced a new way to work with data, using compiled, strictly typed data models. This guide should you understand how this works, how to use it, and how to handle various situations. To Document How to extend the class How to use Services (todo - separate page) Example Using a Typed Model @inherits Custom.Hybrid.RazorTyped @using AppCode.Data @{ // Wrap the data into a strong-typed AppCode.Data.Link object var links = AsList<Link>(MyItem); } @foreach (var link in links) { <a href=\"@link.Url\">@link.Title</a> } How This Works The above example uses a strong-typed model called Link which is defined in the AppCode.Data namespace. This model is a simple class which inherits from Custom.Data.Item16. It implement ITypedItem, so it supports all the commands such as .IsEmpty(...) or .String(...). Usually the class is auto-generated by the 2sxc Copilot. But you can also create it manually, OR extend the class to do more than what is auto-generated. What's important is that when auto-generated, it will have a property for each data-field in the content-type. This is why you can also write @link.Url and @link.Title in the example above. What's great is that the generated code also has intellisense support, so the developer in VS Code will be guided and see tips / instructions on every property. Basic How To Use and Access Properties The properties in the strong-typed model are usually simple properties, so you can use them like this: using AppCode.Data; // Convert MyItem into a single strong-typed Product object var product = As<Product>(MyItem); var title = product.Title; // title as string var price = product.Price; // price as decimal // Links to URLs, Pages and Files / Images var page = product.Page; // url as string, terms like `page:72` will be resolved var page2 = product.String(\"Page\"); // url as string, terms like `page:72` will not be resolved var imageUrl = product.Image; // image as string-url, terms like `file:123` will be resolved var image2 = product.String(\"Image\"); // image as string, terms like `file:123` will not be resolved var imageFile = product.ImageFile; // image as IFile, terms like `file:123` will be resolved var imageFolder = product.ImageFolder; // image as IFolder, may contain 0 or more files and folders // Related Items var cat1 = product.Category; // App.Data.Category (if the content-type was configured correctly) var cat2 = product.Category; // ITypedItem (if the content-type was NOT configured correctly) var cats1 = product.Categories; // IEnumerable<Category> (if the content-type was configured correctly) var cats2 = product.Categories; // IEnumerable<ITypedItem> (if the content-type was NOT configured correctly) Since the properties are real class properties, you can also use them in LINQ queries, like this: // Sort the products by the Color A-Z var productsSorted = products.OrderBy(p => p.Color).ToList(); // Get the first product var firstProduct = products.FirstOrDefault(); Conversions, Lists and Mocking This assumes that you have generated the data models using the Copilot. We'll try to cover all common use cases using code samples. These code samples assume you're working in Razor which inherit from Custom.Hybrid.RazorTyped. It's similar for C# files inheriting from Custom.Hybrid.CodeTyped. // Use the Namespace using AppCode; using AppCode.Data; // Convert any item into a single strong-typed object // Will return null if the item is null // Or throw an error if the item is not of the correct type var product = As<Product>(MyItem); // Convert any item into a single strong-typed object // Will use the alternative if the item is null var product = As<Product>(maybeNull) ?? alternative; // Convert any item into a single strong-typed object // Will return an empty Product object if the item is null var product = As<Product>(maybeNull, mock: true); // Convert any item into a single strong-typed object // Will wrap the item to simulate a strong-typed object var product = As<Product>(new { Title = \"hello\", Color = \"green\" }, mock: true); // Convert any item into a list of strong-typed objects // Use a mock object as fallback var products = AsList<Product>(maybeNull) ?? As<Product>(new { Title = \"hello\", Color = \"green\" }, mock: true); // convert a list of items into a list of strong-typed objects var products = AsList<Product>(MyItems); // Get all products from App Data - short and long example (internally identical) var allProducts = AsList<Product>(App); var allProducts = App.Data.GetAll<Product>(); // WIP - probably better to understand var allProducts = AsList<Product>(App.Data.GetStream(\"Products\")); // Get all the products from a query (default stream) var greenProducts = AsList<Product>(App.GetQuery(\"GreenProducts\")); // Get all the products from a query (specific stream) var prodsInCategory = AsList<Product>(App.GetQuery(\"CategoryDetails\").GetStream(\"Products\")); Advanced Initialization when Converting Data Models can't have a constructor, since the object will be created internally. But in case your data model needs some special initialization, you can do it like this: namespace AppCode.Data { partial class Product { // Set this on Init public bool UserIsAdmin { get; set; } public string SpecialColor => UserIsAdmin \"gold\" : Color; } } And in the Razor/C# file which needs this // single item var product = As<Product>(MyItem); product.UserIsAdmin = MyUser.IsSiteAdmin; // list of items var products = AsList<Product>(MyItems) .Select(p => { p.UserIsAdmin = MyUser.IsSiteAdmin; return p; }) .ToList(); Handing Over to Razor Files The caller would do @Html.Partial(\"Details.cshtml\", new { product, category, suggestion = otherProduct }) The Details.cshtml would then look like this: @{ var product = MyModel.Get<Product>(\"Product\"); var category = MyModel.Get<Category>(\"Category\"); var suggestion = MyModel.Get<Product>(\"Suggestion\"); } Extending the Class todo The properties are strong-typed History Introduced in 2sxc v17.02"
  },
  "net-code/api-typed/data/typed-data-equality.html": {
    "href": "net-code/api-typed/data/typed-data-equality.html",
    "title": "ITypedItem Equality in 2sxc 16+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "ITypedItem Equality in 2sxc 16+ Items of type ITypedItem are wrappers around IEntity objects, and as such, there is always the question how to check equality. Tip The key take away: use the .Equals() method and use .GroupBy() as you would expect. Do not use the == operator, it will not work as expected. We have done special modifications to the wrappers, so the item.Equals(item2) (and GroupBy) will work as expected. But it is technically not possible to make the == operator work as expected. Let's explain: var someEntity = App.Data.GetStream(\"BlogPosts\").First(); var item1 = AsItem(someEntity); var item2 = AsItem(someEntity); var isEqual = item1 == item2; // should this be true or false? Technically the wrappers are different objects, as they were created independently. So in terms of what really happens, they are different, but for practical purposes they should behave as if they are the same. Here's why: // Get a list of all blog posts, then group by category var blogPosts = AsItems(App.Data.GetStream(\"BlogPosts\")); var grouped = blogPosts.GroupBy(p => p.Child(\"Category\")); Internally every item was wrapped as a ITypedItem. Each one will also get the Category which was also wrapped independently. But for grouping by something, the should be considered equal. Equality Implementation we have implemented the .Equals() method to compare the underlying IEntity objects. we did not overloaded the == and != operators, as this is technically not possible. This means that you can use .Equals() method as you would expect. It also means that LINQ operations such as GroupBy will work as expected. The == and != operators will not work as expected. Difference to Custom Strong Typed Items (v17.03+) Important This is a different than the implementation on Custom.Data.CustomItem. There the == and != also work. See CustomItem Equality History .Equals() implemented in ca. v16.07"
  },
  "net-code/api-typed/dynamic-vs-typed.html": {
    "href": "net-code/api-typed/dynamic-vs-typed.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Compare Various C# / Razor APIs"
  },
  "net-code/api-typed/index.html": {
    "href": "net-code/api-typed/index.html",
    "title": "Typed APIs in 2sxc 16+ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Typed APIs in 2sxc 16+ Typed Mode is a new way to write C# and Razor code in 2sxc 16+. It is much more robust and easier to debug than the classic dynamic code. What does Typed Mode Look Like? @inherits Custom.Hybrid.RazorTyped <h1>@MyItem.String(\"Title\")</h1> @MyItem.Picture(\"Screenshot\", imgClass: \"float-right\") <ul> <li>Teaser: @MyItem.String(\"Teaser\")</li> <li>Launched: @MyItem.DateTime(\"Launched\").Year</li> <li>Authors: @MyItem.Children(\"Authors\").Count()</li> <li>Maker: @MyItem.Child(\"Maker\").String(\"Name\")</li> </ul> @MyItem.Html(\"Description\") What's great about this is that every value is strong-typed, so VS-Code can give you IntelliSense, and the compiler will catch many more issues. Important Older code is dynamic. The API is quite different, so if you copy old snippets you'll probably need to refactor it. Major Differences The compiler can detect many more issues in typed mode If your code isn't correct, you will get much better errors in typed mode Accessing invalid properties will throw an error in typed mode (eg. MyItem.String(\"InvalidProperty\") will throw, but Content.InvalidProperty will not) Typed code works much better with LINQ, so MyItem.Children(\"Authors\").Count() will just work (in dynamic mode you'd need to cast it to IEnumerable<dynamic> first) Activate Typed Mode Dynamic and Typed code can coexist in the same app. Each Razor / C# file can decide which mode it wants to use. To be in typed mode, your Razor/C# must inherit from a typed base class like this: Razor files should begin with: @inherits Custom.Hybrid.RazorTyped C# files should have something like: public class YourClassName : Custom.Hybrid.CodeTyped WebApi files should be like: public class YourControllerName : Custom.Hybrid.ApiTyped Tip Changing the base class will completely change the APIs you have available. Configure Visual Studio Code for IntelliSense Now that everything is typed, we highly recommend you setup VSCode to provide IntelliSense. \uD83D\uDC49 Check out the VS Code Setup Docs"
  },
  "net-code/api-typed/migrate.html": {
    "href": "net-code/api-typed/migrate.html",
    "title": "Migration TODO | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Migration TODO Typed Razor Components (v16) - DRAFT / WIP Guide to Moving to Pro Code - important Changes Use Kit.Toolbar for Toolbars Use MyContext instead of CmsContext Avoid the Edit Object or use Kit.Edit Use object.Folder(\"name\") instead of AsAdam Instead of Settings, use App.Settings or Alternatives ... explain differences Recommend App.Settings Instead of Resources, use App.Resources or Alternatives Instead of AsDynamic(jsonString) use Kit.Json.ToTyped(jsonString)"
  },
  "net-code/api-typed/naming.html": {
    "href": "net-code/api-typed/naming.html",
    "title": "Typed API Naming Conventions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Typed API Naming Conventions With the transition to a typed API, we also changed the naming conventions. These are the conventions for the new API. Clear, new Naming Conventions Anything beginning with My... belongs to the current code and the current context MyItem / MyItems / MyHeader MyData MyModel MyContext / MyPage / MyUser / MyView Objects or methods which are singular are/return a single item MyItem / MyHeader MyModel.Item(...) / MyModel.Typed(...) AsItem(...) / AsTyped(...) Objects or methods which are plural are/return a list of items Items MyModel.Items(...) / MyModel.TypedList(...) AsItems(...) / AsTypedList(...) Anything beginning with As... is a helper to convert something to something else AsEntity(...) AsItem(...) / AsItems(...) AsTyped(...) / AsTypedList(...) AsStack(..., ..., ...) Settings and Resources are now better named to ensure clarity AllSettings (previously Settings) AllResources (previously Resources) App.Settings App.Resources Naming API of Item-objects Object of ITypedItem have properties such as .Id, .Guid, .Title methods such as .Get(fieldName) .String(fieldName), .Bool(fieldName) etc. extended methods such as .Html(fieldName), .Picture(fieldName) etc. most methods have additional parameters, such as .Get(fieldName, required: false) MyItem and MyHeader are ITypedItems which wraps a content-object (IEntity) MyItems is a list of TypedItems (IEnumerable<ITypedItem>) AsItem(...) will take a IEntity, a DynamicEntity or a List of these and return one ITypedItem AsItems(...) ... MyModel.Item(...) MyModel.Items(...) someItem.Children(fieldName) + overloads someItem.Child(fieldName) + overloads someItem.Parents(type: typeName, field: fieldName) + overloads"
  },
  "net-code/conventions/functional-api/index.html": {
    "href": "net-code/conventions/functional-api/index.html",
    "title": "Convention: Functional API (Immutable) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: Functional API (Immutable) There are many programming paradigms. One that's become very important to us is functional programming. This means that code (usually functions) will have inputs and outputs, but no side effects. This also means that an object which must be modified will be copied into a new object, with the modifications applied. The original object is never modified. In most cases it will be discarded. This is strongly related to immutability Important This was not always our approach, so some of the code is still not functional. But you must assume that anything you find which is not functional, will be so in the future. Example This assumes code inside a Razor page, as it uses Kit.Toolbar // Create a toolbar with a single edit button var toolbar = Kit.Toolbar.Empty().Edit(); // Add a button to the toolbar var toolbarWithLayout = toolbar.Layout(); // Note that as of now, the original toolbar still only has the Edit button. This goes even further. In v15.07 the toolbar API was extended with features to make UI settings more robust: // Give an inner tweak function to set more properties var toolbar = Kit.Toolbar.Edit(tweak: b => b.Color(\"red\").Tooltip(\"Edit here\")); Why Functional? Functional programming has many advantages, but the most important one is that it's easier to test and debug. It's also easier to understand, because you can see the inputs and outputs of a function, without having to look at the code. In the end, the quality and robustness of our application is much better. Coverage - Parts of 2sxc which are Functional The Toolbar API on Kit.Toolbar is 100% functional (new v14) The Razor HTML Tags API on Kit.HtmlTags is 100% functional (new ca. v13) Page Parameters CmsContext.Page.Parameters are 100% functional (new ca. v12) Linking data sources using the Link property is 100% functional (new in v15) History Introduced gradually starting with 2sxc 12 RazorBlade started doing this in v3 also in 2sxc 13 Shortlink: https://go.2sxc.org/functional"
  },
  "net-code/conventions/immutable/index.html": {
    "href": "net-code/conventions/immutable/index.html",
    "title": "Convention: Everything is Immutable | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: Everything is Immutable There are many programming paradigms. One that's become very important to us is immutable programming. This is strongly related to functional APIs This means than objects inside 2sxc are never modified. Instead, they are copied and modified, and the original object is discarded. Example var original = new { Name = \"John\", Age = 42 }; var modified = SomeService.ChangeAge(original, 43); var areEqual = original.Age == modified.Age; // false Use in DataSources A common place where this affects Razor and WebApis is when using DataSources. Old data sources could do this: var entityFilter = CreateSource<EntityIdFilter>(); entityFilter.EntityIds = \"123,456\"; var data = entityFilter.List; This behavior still works on old data sources to ensure compatibility. But newer DataSources such as AppFiles will not allow this, and will throw an exception if you try to modify the properties. They are immutable. Instead, you must do this: var appFiles = CreateSource<AppFiles>(options: new { OnlyFolders = true }); // The following would throw an error: // appFiles.OnlyFolders = true; var data = appFiles.List; This new way is the only recommended way of doing this from now on. Coverage As of March 2023, ca. 80% of all objects in 2sxc are immutable, we hope to reach 95% by end of 2023. We cannot reach 100% any time soon, because we must ensure compatibility with existing code. IEntity is internally 98% immutable - some details left to optimize DataSources can be immutable. Newer DataSources are immutable, and data sources created using Kit.Data are immutable by default. History First introductions in 2sxc 13 Spread out more in 2sxc 15, eg. IEntity is now immutable Shortlink: https://go.2sxc.org/immutable"
  },
  "net-code/conventions/index.html": {
    "href": "net-code/conventions/index.html",
    "title": "Code Conventions | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Code Conventions Here we will collect important coding conventions to help you understand the APIs better."
  },
  "net-code/conventions/my-services/index.html": {
    "href": "net-code/conventions/my-services/index.html",
    "title": "Convention: MyServices | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: MyServices 2sxc and EAV prefer to use Composition over Inheritance. But in some cases this is not possible, and we need to use inheritance. The problem that then arises is that the base class needs services, and the list of services can change with time. This would make it very hard to keep inherited objects working, as upgrades would break the constructor. So we invented a special convention. Here's how it works: Basic Setup This is what a typical base class would look like public abstract class ExampleBase { // Public ExampleBase.MyServices which actually gets all the dependencies public class MyServices { public MyServices(/* dependencies */) { // ... } } // The normal constructor of ExampleBase, asking for these services protected ExampleBase(MyServices services) { // ... } } This class is then registered with normal DI and just works. Inheritance When you inherit such a class, this is what you do: public class YourClass : ExampleBase { public YourClass(MyServices services, ISomeOtherService xyz) : base(services) { // ... } } When you do this (assuming you registered your YourClass) in DI, it will automatically use the MyServices from the base class. This way the base class can change the list of it's dependencies as it needs, while preserving a constructor that never changes. Good to Know Internally the system does quite a bit more, but this is all you need to know to get it to work \uD83D\uDE09. Note You may be tempted to use something which is available on MyServices. But you shouldn't as this is a private API and may change at any time. Use in DataSources The most common place for you to see this is when creating custom DataSources. You will usually inherit from CustomDataSource. It too has a MyServices class. Coverage As of March 2023, all DataSources use this convention. Many other objects use this as well, but we don't expect that you'll be needing that. History Introduced in 2sxc 15 Shortlink: https://go.2sxc.org/myservices"
  },
  "net-code/conventions/named-parameters.html": {
    "href": "net-code/conventions/named-parameters.html",
    "title": "Convention: Named Parameters | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: Named Parameters When working with the C# / Razor API, advanced/optional parameters must be named. Tip A named parameter is determined by it's name (eg settings:), like SomeMethod(settings: someValue) vs. a positional parameter which is specified by the position in the list of arguments, like SomeMethod(someValue). Example @inherits Custom.Hybrid.RazorTyped @* this is a command without named parameters - all works *@ @MyItem.Picture(\"Packshot\") @* this is a command with named parameters for more advanced settings *@ @MyItem.Picture(\"Packshot\", settings: \"Lightbox\") @* this is a command with named parameters for exact width control *@ @MyItem.Picture(\"Packshot\", width: 500) @* An example using both parameters in any order *@ @MyItem.Picture(\"Packshot\", settings: \"Lightbox\", width: 500) @MyItem.Picture(\"Packshot\", width: 500, settings: \"Lightbox\") The previous example shows A Razor inheriting from Custom.Hybrid.RazorTyped to enable the new MyItem.Picture(...) API A add-picture with only the basic parameter. This doesn't need the name as the position (first parameter) makes it clear that Packshot is the field containing the picture A more advanced use case where the picture uses settings: \"Lightbox\" (this must be named with settings: ...) Another use case where the picture uses width: 500 (named with width: ...) Two more examples specifying multiple parameters - showing that the order is not important since we have the names As you can see in the settings: and width: example, both of these parameters are on the second position. If they were not named, the API wouldn't know if 500 or Lightbox was a width, setting or anything else. Example using Toolbars This means that a command like this is valid <!-- valid --> <div @Edit.TagToolbar(actions: \"new\", contentType: \"BlogPost\")> ... </div> <!-- not valid --> <div @Edit.TagToolbar(\"new\", \"BlogPost\")> ... </div> Reason Behind Named Parameters We often have APIs which start simple - like @Edit.TagToolbar() and continue to receive new features. At first, the parameter order will make sense - for that simple use case. But as the API grows, the parameter-order will become strange, simply because we would have to order them in the sequence they were added (to keep compatibility) and not in the order that makes sense. By using named parameters, we're making sure that the parameter order never matters and the API stays stable/compatible for the future. Not all Parameters Require Names Because of historic reasons and because some APIs simply have a very obvious first or second parameter, it may be that the first 1-2 parameters are not named. An example is @Edit.TagToolbar(Content) which assumes that the first parameter without name is the item (entity) for which this toolbar is meant. How It's Implemented Internally the real signature of the command uses a parameter which has a fairly random value. The call then checks if the value of that parameter is this random value, and if not, shows an error. This is to protect you from accidentally using the command without naming the parameters. Note: you could of course work around this, by providing that random value and trick the call to accept unnamed parameters. Don't do this - as we will no guarantee that the API signature (parameter order) will stay the same. History Introduced ca. in 2sxc 6 Shortlink: https://go.2sxc.org/named-params"
  },
  "net-code/conventions/property-required/index.html": {
    "href": "net-code/conventions/property-required/index.html",
    "title": "Convention: Property Required Name Checks | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: Property Required Name Checks On newer APIs we implement a policy that properties are required by default (but you can override this). This applies to newer base classes such as RazorTyped ApiTyped CodeTyped This means that by default, retrieving any property such as something.String(\"FirstName\") will only work, if the underlying Entity has the property FirstName. Otherwise it will throw an error. Why? This should help you find errors earlier, and make your code more stable. Previously when using dynamic objects, it was easy to make a typo and not notice it, or to be using the wrong object (such as having and underlying BlogPost object instead of a Category object). How to Override You can override this at object/wrapper creation, or when retrieving the value. When creating the object, you can override the default behavior by setting the required parameter on value getters, or propsRequired on item-conversions. Example: var lax = AsItem(someEntity, propsRequired: false); var willBeNull = lax.String(\"DoesNotExist\"); When accessing a property, you can override it by using the required parameter. Example: var willBeNull = MyItem.String(\"DoesNotExist\", required: false); Tip The required parameter is a nullable boolean. This is to ensure that it's clear if you set it or not, in which case the default will be used. Behavior when providing a fallback value Most methods which have a required also have a fallback parameter. This is a value which will be returned if the property is empty or is not populated. So there is a slightly different behavior. When using it on data-object such as ITypedItem the fallback does not change the behavior of required. So if you don't change required, and the field doesn't exist, it will throw an error. When using the MyModel the fallback will also affect the required. So if you specify a fallback which can be distinguished from the default (eg. not a null on a string, not a false on a bool) then required will be ignored and the fallback will be returned. History First introductions in 2sxc 16.03 Shortlink: https://go.2sxc.org/immutable"
  },
  "net-code/conventions/proxy-controllers/index.html": {
    "href": "net-code/conventions/proxy-controllers/index.html",
    "title": "Convention: Proxy and Real Controllers | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: Proxy and Real Controllers Tip This convention is not relevant for App developers. So if your focus is App Razor or App WebAPIs, you don't need this. It's meant for people who integrate 2sxc/EAV into another system. EAV and 2sxc have about 30 WebAPI Controllers which must work on every platform (Dnn/Oqtane) and custom integrations. To keep code maintenance low, we have a setup with Real controllers and Proxy Controllers which just serve as the entry-point in each platform. Here's how it works: The code which actually does work is called the Real controller and it's code is in ToSic.Sxc.WebApi or ToSic.Eav.WebApi The platform has the surface Proxy controller which just ensures that the endpoint is available on that platform Note This concept is still being developed in v13 so it's not final. As of 2022-02 it's only been implemented for ca. 4 controllers, the others are still not fully migrated into this model. The Real Controller The real controller is responsible for doing all the work, getting all the dependencies etc. It must be programmed in a way that the Proxies have as little code as possible. As of 2022-02, they are all named ...ControllerReal to better identify them. Once all controllers are built this way, they will probably be renamed just to ...Controller The Proxy Controller Each platform and integration will just have the minimal Proxy Controller which has the following functions: Make the endpoint available on this platform, on the correct address Ensure basic endpoint security as the platform does it (like ensure authentication, etc.) Forward all calls to the Real controller In rare cases, convert data which is treated differently on that platform to the format the Real Controller expects. History Introduced in v13 Shortlink: https://go.2sxc.org/proxy-controllers"
  },
  "net-code/conventions/spawn-new/index.html": {
    "href": "net-code/conventions/spawn-new/index.html",
    "title": "Convention: Spawn New | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: Spawn New In certain cases a service can or should be configured before use. Some examples: The ToSic.Eav.Services.IDataFactory can be configured to specify what data type it should produce The ToSic.Sxc.Services.IDataService can be configured with an AppIdentity so that created sources will be tied to that App Since we use Dependency Injection we can't just add a parameter to the constructor. Since we want our APIs to be immutable, we can't just run an Init or Setup method. So the solution is to give each of these services the ability to spawn a new service with the new configuration. This is usually done using a New(...) method which specifies the configuration which the new service should have. History Introduced in v15 Shortlink: https://go.2sxc.org/spawn-new"
  },
  "net-code/conventions/unknown-implementations/index.html": {
    "href": "net-code/conventions/unknown-implementations/index.html",
    "title": "Convention: Unknown Implementations | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Convention: Unknown Implementations Tip This convention is not relevant for App developers. So if your focus is App Razor or App WebAPIs, you don't need this. It's meant for people who integrate 2sxc/EAV into another system. EAV and 2sxc have about 30 objects which can be implemented specifically to a platform. Examples: ISite gives information about the current site IUser gives information about the current user IEnvironmentPermission determines if certain user permissions are given (like Edit rights) To make integration easier, these objects have an ...Unknown implementation which is registered if you didn't specifically provide a custom implementation first. Examples: SiteUnknown will be auto-registered, always reporting Id: -2742 and ZoneId: 2 IUserUnknown will always say that it's not a Admin Because they are auto-registered as a fallback, they will be used if you didn't provide your own implementation. This ensures that even minimal integrations can work, but will be missing some functionality. Warnings when Unknown Objects are Used All the unknown objects will add a warning to the Insights-log, so you can see that these objects were used. You will see an entry for warnings-not-implemented Which Objects to Replace As you integrate 2sxc/EAV on your platform, you will probably not implement all these services, as you won't need them all. But it's a good idea to keep an eye on the logs, to determine if a specific object should be implemented. History Introduced when integrating Oqtane in 2sxc 12 final docs in v13.03 Coverage: ca. 100% of relevant objects implement this Shortlink: https://go.2sxc.org/unknown-implementations"
  },
  "net-code/copilot/data-model-generator.html": {
    "href": "net-code/copilot/data-model-generator.html",
    "title": "Copilot Generate Types for HotBuild (BETA v17.02) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Copilot Generate Types for HotBuild (BETA v17.02) These are the conventions we're striving for in the new HotBuild system. Goals To provide a simple, type-safe object for everything in an app, eg BlogPost.Tags which would return an IEnumerable<Tag>. Standards based an simple very transparent Extensible / customizable, without having to create a very complex code generator. Setup The Copilot will generate classes into an /AppCode/Data folder, so that the classes are in the AppCode.Data namespace. If you don't configure anything, then this folder will be in the root of your app. But you can also configure multiple editions, so that you could build into /staging/AppCode/Data and /live/AppCode/Data etc. This is done in the app.json file. See instructions here. How it Works Let's assume we have the content-type BlogPost The plan is to generate a auto-generated file /AppCode/Data/BlogPostAutoGenerated.cs which would look like this: // DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED // See also: https://go.2sxc.org/hotbuild-autogen // To extend it, create a \"BlogPost.cs\" with this contents: /* namespace AppCode.Data { public partial class BlogPost { // Add your own properties and methods here } } */ // Generator: DataModelGenerator v17.01.08 // User: 2sichost // Edition: /staging // When: 2024-01-31 17:59:00 namespace AppCode.Data { // This is a generated class for BlogPost // If you wish to modify it, create a partial class for \"BlogPost\" in a separate \"BlogPost.cs\" file. /// <summary> /// BlogPost Data. /// Default properties such as `.Title` or `.Id` are provided in the base class. /// Most properties have a simple access, such as `.TermsAndGdprCombined`. /// For other properties or uses, the common method such as /// `IsNotEmpty(\"FieldName\")`, `String(\"FieldName\")`, `Children(...)`, `Picture(...)`, `.Html(...)` and more can be used. /// </summary> public partial class BlogPost: AppCode.Data.AutoGen.ZagBlogPostAutoGenerated { } } namespace AppCode.Data.AutoGen { /// <summary> /// Auto-Generated base class for BlogPost. /// </summary> public abstract class ZagBlogPostAutoGenerated : Custom.Data.Item16 { public bool TermsAndGdprCombined => Bool(\"TermsAndGdprCombined\"); public bool TermsEnabled => Bool(\"TermsEnabled\"); public bool GdprEnabled => Bool(\"GdprEnabled\"); public string Description => String(\"Description\", fallback: \"\"); public string Link => Url(\"Link\"); public ToSic.Sxc.Adam.IFile LinkFile => File(\"File\"); public ToSic.Sxc.Adam.IFolder LinkFolder => Folder(\"Folder\"); } } Thoughts about this structure: AutoGenerated Class The auto-generated class is the base class for the real class It is in a sub namespace - atm AutoGen to avoid it being access by mistake It has a special prefix like Zag... (Z to be at the end of a list, and ag for auto-generated) to make it very clear that it's auto-generated and should not be used directly. This should help ensure that it's not usually recommended in intellisense (it would, if it just had a suffix). We need to have a complicated-named class like BlogPostAutoGenerated to avoid name clashes with properties in the content type. Otherwise a class called BlogPost couldn't have a property BlogPost, but this way it works. The auto generated needs a weird name - we recommend Zag...AutoGenerated to make it very clear and almost impossible to clash with property names. The AutoGenerated should also be abstract so that it can't be instantiated directly. For now it must inherit from Custom.Data.CustomItem - a class which is provided by 2sxc Real Class We then need the real class with the name matching the ContentType (where possible, see below) In same cases this is not possible - eg we have a App-Resources type which is a legacy problem, which should be called AppResources We need to have a partial class so that the user can extend it with their own properties and methods, without touching the auto-generated file. Comments We need special comments on top of the file, the real class and the autogenerated to guide the user The exact text will be worked out later on Specs for the Docs File Intro This file is auto-generated by \"2sichost\" for \"/staging\" at 2024-01-31 17:59:00 Replace with the actual user, path and date If you need to extend it, create a partial class for \"BlogPost\" in a separate file. Replace with the actual content type name See also: https://go.2sxc.org/hotbuild-autogen Class Intro This is a generated class for BlogPost Replace with the actual content type name If you wish to modify it, create a partial class for \"BlogPost\" in a separate \"BlogPost.cs\" file. Replace with the actual content type name Class Description BlogPost Data. Replace with the actual content type name Default properties such as .Title or .Id are provided in the base class. leave as is Most properties have a simple access, such as .TermsAndGdprCombined. Replace with the first found property - if any, otherwise skip this line For other properties or uses, the common method such as String(\"FieldName\"), Children(...), Picture(...), .Html(...) and more can be used available. leave as is How Properties are auto-generated Boolean is clear, the normal fallback is false, so that's typical if the developer needs a bool? he will have to use the Get<bool?>() method String is clear defaults to \"\" and not null DateTime is treated as System.DateTime Empty is ignored Hyperlink fields should probably default to the Url(...) method. string using the Url(...) method is the default IFile is also generated on the [original-name]File property using the File(...) method IFolder is also generated on the [original-name]Folder property using the Folder(...) method Note: Since it generates additional names, it may clash with existing fields. In this case, the main field has precedence. Entity properties return ITypedItem If it's configured to have only one item IEnumerable<ITypedItem> if it's configured to have multiple items [App-Content-Type] if it's configured to only allow one specific content-type which is also generated IEnumerable<[App-Content-Type]> if it's configured to have multiple specific content-types which are also generated Number could be int, float, double, decimal int is the default, and the type used if 0 decimals are configured decimal is used, if it's configured to have 1 or more decimal Custom if custom-gps then ideally it would create a Gps class with Latitude and Longitude properties others should probably be ignored for now Note that the property will always call the base.Something(...) to auto-generate. This is to ensure that new names don't break the code - eg. if there is a property called Child, then base.Child(...) will still work. Another note: You could think that we could also make the Presentation object typed, but this is not possible. Reason is that different views could use the same Content-Type (eg. a Location type) with different presentation settings, so the type Location would need to have a Presentation of MapSettings in one place, and AddressSettings in another. Shortlink: https://go.2sxc.org/copilot-data"
  },
  "net-code/copilot/index.html": {
    "href": "net-code/copilot/index.html",
    "title": "Copilot (new v17.02) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Copilot (new v17.02) Copilot is a set of tools to improve developer productivity. In the current version it's main feature is to generate C# classes from Content-Types."
  },
  "net-code/data-sources/custom/api.html": {
    "href": "net-code/data-sources/custom/api.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to DataSources Big Picture"
  },
  "net-code/data-sources/custom/base-classes.html": {
    "href": "net-code/data-sources/custom/base-classes.html",
    "title": "Base Classes for Custom DataSources \uD83C\uDD95 v16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Base Classes for Custom DataSources \uD83C\uDD95 v16 you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } This is an overview as to the base classes you can inherit from when creating a custom DataSource. DataSource16 Dynamic DataSources always inherit from Custom.DataSource.DataSource16. This is the easiest base class to use and the easiest to learn. You can see it live on Dynamic DataSources Tutorials. It does a few things automatically for you, such as: It automatically registers the DataSource in the VisualQuery with some very good defaults It provides special ProvideOut methods which allow you to give it various kinds of data, such as a single anonymous object or a list thereof a single RawEntity or a list thereof a single IEntity or a list thereof In most cases it also automatically parses configurations the way you expect it to. Internally the DataSource16 uses the CustomDataSource. CustomDataSource The CustomDataSource is the base class for most custom Compiled DataSources. It has the same benefits as the DataSource16 except for the automatic registration in the VisualQuery. CustomDataSourceAdvanced The CustomDataSourceAdvanced is a more bare-bones base class to use in advanced use cases. It's used a lot internally, but we don't recommend using it. DataSourceBase The DataSourceBase is the base class for all DataSources. It's documented because you should know about the API, but we don't recommend that you inherit from it. History Introduced a long time ago Completely reorganized and renamed in 2sxc 15/16"
  },
  "net-code/data-sources/custom/compiled.html": {
    "href": "net-code/data-sources/custom/compiled.html",
    "title": "Custom Compiled DataSources (classic) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Compiled DataSources (classic) you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } Compiled DataSources are custom DataSources which are compiled to a DLL. This is the classic way of doing things. It's more complicated than the new Dynamic DataSources but has a few advantages. Note that for most projects today, we recommend you use the Dynamic DataSources instead. It's important to note that Compiled DataSources have a much tighter integration with 2sxc/EAV. This often means that on major upgrades, you may need to update / adjust your code a bit. Here is a very simple example of a compiled DataSource: using System; using ToSic.Eav.Data.Build; using ToSic.Eav.DataSource; using ToSic.Eav.DataSource.VisualQuery; namespace ToSic.Tutorial.DataSources { // This `[VisualQuery]` Attribute provides info so the visual query can provide the correct buttons and infos // There are ca. 20 possible settings [VisualQuery( // The nice title to show in Visual Query NiceName = \"TodayInfos (Tutorial)\", // The name of the icon - from the google fonts Icon = \"today\", // A very unique ID - make sure you get a fresh one for each data source // for example from https://guidgenerator.com/ NameId = \"7aee541c-7188-429f-a4bb-2663a576b19e\" )] public class TodayInfos: CustomDataSource { /// <summary> /// Constructor to tell the system what out-streams we have. /// /// Note that the base class needs certain Dependencies, which are all wrapped in the Dependencies type. /// This allows for a stable API even if future base classes require more dependencies. /// </summary> /// <param name=\"services\">The dependencies required by the base class</param> public TodayInfos(MyServices services): base(services, \"My.Basic\") { // \"Default\" out; when accessed, will deliver GetListWithToday ProvideOut(GetListWithToday, options: () => new DataFactoryOptions(titleField: \"Date\")); } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading so this code will only execute when used /// </summary> private object GetListWithToday() { // These are the values which the Entity will have // It uses a very simple anonymous object return new { Date = DateTime.Now.ToShortDateString(), Weekday = DateTime.Now.DayOfWeek, DayOfWeek = (int)DateTime.Now.DayOfWeek }; } } } Differences to Dynamic DataSources The main difference is that the Dynamic DataSource is compiled into a DLL. As such it is available on all Apps on that installation and can/must be distributed separately. It's also harder to create and maintain. \uD83D\uDCA1 Complied DataSources should inherit from CustomDataSource Advantages Develop in Visual Studio Can be used in any App on that installation Compiles to DLL and therefor you will detect code issues faster Can be unit tested it's ideal for large, sophisticated code Disadvantages More difficult to maintain It's more likely to need adjustments on major 2sxc changes Every change/test requires a restart of the website Comparable both can be used in VisualQuery both can be used in Razor and WebApi Get Started First you should start with Dynamic DataSources and the live samples in our Dynamic DataSources Tutorials Then you should try to create your own \uD83D\uDE09 Ideally check out the sample Tutorial Basic Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. History Introduced in 2sxc ca. 4 but with a difficult API API strongly enhanced and simplifield in 2sxc 09.13 Another API rework ca. 2sxc 10.25 Major (breaking) changes in 2sxc 15/16"
  },
  "net-code/data-sources/custom/configmask.html": {
    "href": "net-code/data-sources/custom/configmask.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to DataSource Configuration: ConfigMask(...)"
  },
  "net-code/data-sources/custom/configurable-datasource.html": {
    "href": "net-code/data-sources/custom/configurable-datasource.html",
    "title": "Configurable DataSource | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Configurable DataSource you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } Most Custom DataSources will want to provide a configuration UI to the editor. Here we'll explain how you must code your DataSource that it can be configurable. 1. Create Typed Properties For each piece of configuration your DataSource expects you should expose a normal property which will have that value. Internally it should get the data from the Configuration object which is an IDataSourceConfiguration. Here's an example from the ValueFilter: /// <summary> /// The attribute whose value will be scanned / filtered. /// </summary> [Configuration] public string Attribute => Configuration.GetThis(); /// <summary> /// The comparison operator, == by default, many possibilities exist /// depending on the original types we're comparing /// </summary> [Configuration(Fallback = \"==\")] public string Operator => Configuration.GetThis(); Remember that if the type is not string, you'll have to add some type-checking and fallbacks, since the Configuration object only works with strings to handle Tokens. Fortunately the new v16 API does this automatically for you. Here's an example from the AppFiles.cs [Configuration(Fallback = false)] public bool OnlyFolders => Configuration.GetThis(false); 2. Use the Value With this setup, everything is automatic. So if your code now does this: var x = Operator; ...it will get the parsed token with either the value provided by the config, or the fallback. Important In the constructor the Configuration object is not yet populated, so you can't use the properties there. So make sure it's accessed later, typically inside the function or lambda which is called by ProvideOut. History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00 2sxc 10 and 11 changed the Configuration API to better separate the Configuration Manager 2sxc 15/16 changed this completely using the new [Configuration] attribute and Configuration.GetThis()"
  },
  "net-code/data-sources/custom/configuration-attribute.html": {
    "href": "net-code/data-sources/custom/configuration-attribute.html",
    "title": "DataSource API: Configuration Attribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: Configuration Attribute you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } The [Configuration] attribute marks properties on a DataSource as configuration properties. This allows you to then provide configuration values when getting a DataSource using the Kit.Data or to make it configurable in VisualQuery. Example: /// <summary> /// Should the Modified date be included in serialization /// </summary> [Configuration] public string IncludeModified => Configuration.GetThis(); /// <summary> /// Should the Relationships be included as CSV like \"42,27,999\". /// Default is `false` in which case they are sub-objects. /// </summary> [Configuration(Fallback = false)] public string IncludeRelationshipsAsCsv => Configuration.GetThis(); /// <summary> /// Will filter duplicate hits from the result. /// </summary> [Configuration(Fallback = true)] public bool FilterDuplicates => Configuration.GetThis(true); By applying it to a property, the following will happen: Upon creating the DataSource, all these configurations will be initialized - ideally with the fallback value provided The value is now available to be set from outside code or Query If the code (or query) using the data source doesn't change the value, the fallback will be used If the DataSource is configurable using a ContentType in VisualQuery, the value set there will automatically be used in this property How to Use Configuration Apply the [Configuration] attribute to every property that is configurable Where possible or reasonable, provide a fallback value Use the Configuration.GetThis() method to get the value Read More Look at the Dynamic DataSources Tutorials for some easy examples Check out the API ConfigurationAttribute to see what else you can configure Also read about the IDataSourceConfiguration - especially the GetThis() and GetThis<T>() methods History Introduced in 2sxc 16, replacing a more complex configuration system before that"
  },
  "net-code/data-sources/custom/configuration-data.html": {
    "href": "net-code/data-sources/custom/configuration-data.html",
    "title": "DataSource Configuration Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource Configuration Data you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } Most Custom DataSources will want to provide a configuration UI to the editor. To enable this we create a Content-Type for each DataSource which will contain the fields to configure it. Example Let's say we need a Weather DataSource which must be configured. We would create a DataSource with these fields: CountryCode - text field with a dropdown of country codes ZipCode - text field to enter the ZIP code ApiKey - a key which will let our backend use the WeatherService Once this Content-Type is defined, we automatically have an editing-UI (thanks to the CMS features) but it's not yet connected to the DataSource. Easiest Way: Dynamic DataSources \uD83C\uDD95 v16 When using Dynamic DataSources (new in v16) it is fully automatic. Just create a ContentType with the same name as the DataSource + Configuration. So if your DataSource is called MySource, call the ContentType MySourceConfiguration. If for any reason you need to give it a different name, you can do this by using the VisualQuery Attribute. Basic Integration: Single-App Use If you don't plan on distributing your DataSource and only need it in one or two Apps, then you can just create the Content-Type there and export/import it to other apps. You'll need to register the internal name in the VisualQuery Attribute of your DataSource so that the UI will show the configuration where it's needed. Once you've done this, the VisualQuery Designer will know about it and offer your content-type when configuring that part of a Query. Tip The data entered will be made available to your DataSource Configuration as the MyConfiguration. Advanced Integration: Multi-App Use If you plan on using this configuration in many Apps on a server, then export/import of this Content-Type is not practical. In this case you'll want to export the Content-Type as a JSON and place it in the App_Data/system-custom/contenttypes folder for Global Content-Types. If you now restart your Dnn, then this new Content-Type is picked up and available in all Apps on this Dnn. Redistribution Scenario The above example works well if you're fine with installing the JSON Content-Type manually on servers which will use the DataSource. For more advanced redistribution, you'll want to include the JSON file in your Dnn Installation package. But in that case it's not in App_Data/system-custom so 2sxc/EAV can't pick it up. To make sure that it's still available to all Apps on a server, you'll need to create a special class to register it on Start of Dnn. All you have to do is create a public class which inherits ToSic.Eav.Repositories.FolderBasedRepository. On boot all these classes will be found and asked for other folders which have such data. Here's an example: using System.Collections.Generic; using System.Web; using ToSic.Eav.Repositories; namespace ToSic.Tutorial.DataSource.Basic { /// <summary> /// This class will be picked up by 2sxc/EAV at boot. /// It will tell it where there are additional Content-Types to load. /// See also https://docs.2sxc.org/basics/data/content-types/range-global.html /// </summary> public class RegisterGlobalContentTypes : FolderBasedRepository { public override List<string> RootPaths => new List<string> { HttpContext.Current.Server.MapPath(\"~/DesktopModules/ToSic.Eav.DataSources.SharePoint/App_Data\") }; } } Tip Remember that the folder (in this case App_Data) is not where the shared Content-Types are stored. They must be placed in a contenttypes subfolder. History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "net-code/data-sources/custom/configuration-parse.html": {
    "href": "net-code/data-sources/custom/configuration-parse.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to DataSource Configuration: Configuration.Parse()"
  },
  "net-code/data-sources/custom/configuration.html": {
    "href": "net-code/data-sources/custom/configuration.html",
    "title": "DataSource Configuration | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource Configuration you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } DataSources are consumed in code and in VisualQuery. In both cases they may need some configuration. When used in code, the code will look a bit like this: var withConfig = Kit.Data.GetSource(name: \"WithConfig\", parameters: new { AmountOfItems = 3, FavoriteColor = \"dark blue\" }); When used in VisualQuery, the developer will specify the configuration in the UI, and the Query system will automatically transfer all the values to the DataSource. How It Works For all of this to work, there is a robust Configuration System. Here's how it works in summary: All properties of a DataSource which are part of the configuration are decorated using the Configuration Attribute When the object is created, the class is scanned for these attributes and a internal dictionary of all configuration values is created These configurations use Tokens - so internally it will be something like AmountOfItems = [MyConfiguration:AmountOfItems||3] If code set a new value, the token is flushed and the new value is set If a query is used, then the token part [MyConfiguration:AmountOfItems] returns what was in the data If no value is set, the fallback value is used, since [MyConfiguration:AmountOfItems] doesn't return anything The foundation of this is built using: The Configuration Attribute and an internal loader The Configuration manager on the DataSource which helps you get the configuration The LookUp Engine which resolves any Tokens in the configuration For it to work in VisualQuery, it also needs: A Content-Type with fields matching the property names The VisualQuery Attribute on your DataSource which references that Content-Type The internal Query Engine which provides the data on the lookup called MyConfiguration Examples of Configurations Needed a Paging needs to know what page size it should use and what page it's on A CSV Data Source needs to know what file it should load a CmsBlock needs to know the module ID an Owner-Filter DataSource needs to know who the current user is, to find his items Some of this information depends on the current context (ModuleId, UserId), others on configured settings (page size) and some on Url-parameters (Page number). In addition, we sometimes want to say \"use the page-size configured in the App-Settings\" or even more complex \"use from url, but if not specified, try app-settings, and if that isn't defined, use 10\". How to Build a Configurable DataSource \uD83D\uDC49 Best check the Dynamic DataSources Tutorials for some easy examples Configuration Basics Each configuration value of a DataSource must be a value (string, int etc.). But to allow greater flexibility in configuration, it usually starts as a string Token like [MyConfiguration:PageNumber]. This token is parsed before any data is queried using Configuration.GetThis() to convert the Token to the expected value type. Best read more about Tokens and how fallbacks, defaults and recursion work. The Tokens allow quite some fancy features: Your DataSource will use [MyConfiguration:...] tokens and will automatically get the settings as they were added in the UI Since tokens also allow for default/fallback values, your code will often have [MyConfiguration:Id||0] As tokens are recursive, the admin can specify things like [QueryString:Id||752] in the UI and your code (asking for [MyConfiguration:Id]) will get the ID from the URL or the default 752 as the Admin specified it. Thanks to Token Stacking a lot more is possible \uD83D\uDE09 When a DataSource is configured, it has many parameter LookUp Sources like Module, QueryString, App etc. These are shared and are identical for all objects. Read more about the LookUp Sources. In your code you will usually not use these sources, but only use the MyConfiguration source. This source only exists in C# and contains all the values the Admin/Editor entered in the Configuration-UI. So the token [MyConfiguration:PageNumber] will deliver the number or text in the input-field pagenumber. How Tokens are Defined, Settings Edited and Resolved When you're using the VisualQuery designer, the configuration created is saved as an Entity (aka Content-Item) which must be injected into the DataSource configuration automatically. But when you use the object is your code, your code must be able to provide other values. But how does this work? Each DataSource object has a property called Configuration which is a dictionary containing all configuration properties the data source will care about. For example, the EntityIdFilter has a Configuration with only one property which is called EntityIds. The each property is first initialized with a Token-Template. This happens through the [Configuration] attribute. For example, the Csv DataSource has a [Configuration(Fallback = \"\\t\")] This says that the delimiter should come from the Settings-Entity field Delimiter and if not provided, fall back to \\t (which is a tab character) For the programmer who wants to set a number or whatever, this would be fairly unreliable to access from outside, so the DataSource should also have a real property which internally also modifies the dictionary. For example, the Csv DataSource has a string-property Delimiter which internally will get/set the in the Configuration dictionary. When the DataSource is first sucked from, which happens when something tries to access the Out-Property, it will automatically run a token-engine to resolve the values, then run whatever action the data-source wants. So how does each scenario work out? If the programmer overwrote the Delimiter property, then internally the Configuration[\"Delimiter\"] is now not a token any more, but instead just a character like ,. So the token-engine won't change anything. If the programmer didn't do anything but the VisualQuery engine gave a settings-entity to the system, then the token is resolved and whatever the user entered is used. if the neither the programmer nor the user provided settings, then the token-engine will resolve to the fallback and use the \\t as was defined. Also Read Guide DataSources - Big Picture LookUp System LookUp Tokens Explained DataSource Configuration: Configuration.Parse() IDataStream History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00 Completely reworked in v15/16"
  },
  "net-code/data-sources/custom/create.html": {
    "href": "net-code/data-sources/custom/create.html",
    "title": "Create Custom DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Create Custom DataSources you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If you want to create your own DataSource and use it in C# or the VisualQuery designer, this is for you. You have two options: Dynamic Custom DataSources (recommended) new in v16 Compiled Custom DataSources (classic, much more difficult) Once you've figured out the basics, you'll want to dive deeper into subjects like: \uD83D\uDCA1 You should read through the Big Picture of DataSources Dynamic Custom DataSources (⭐ new in v16) These data sources are simple .cs files in the DataSources folder of the App. They are compiled on the fly and can be edited in the browser or VS Code. Tip This is new in v16 and is the recommended way to create custom DataSources. This is also the recommended way to get started and learn about DataSources. An important feature/limitation of this is that the DataSource can only be used in that single App. This is often preferred, as it can be distributed together with the App and won't affect any other Apps. Here is a very simple example of a dynamic DataSource: using System.Linq; public class ListBasic : Custom.DataSource.DataSource16 { public ListBasic(MyServices services) : base(services) { ProvideOut(() => Enumerable.Range(1, 5).Select(i => new { Id = i, Guid = System.Guid.NewGuid(), Title = \"Hello from ListBasic\", FavoriteNumber = 2742, })); } } \uD83D\uDC49\uD83C\uDFFD Get started Custom Dynamic DataSources \uD83C\uDD95 v16 Compiled Custom DataSources (classic) This is the classic way of creating DataSources. Basically you create a Visual Studio project and compile the DataSource into a DLL. This is much more advanced and difficult. The advantage is that you can use the same DataSource in multiple Apps, and that you can distribute the DLL independently of the App. It also allows you to write unit tests to create more robust code. \uD83D\uDC49\uD83C\uDFFD Get started Custom Compiled DataSources (classic) History Introduced in 2sxc ca. 4 but with a difficult API API strongly enhanced and simplifield in 2sxc 09.13 Another API rework ca. 2sxc 10.25 (but we're not exactly sure) Major breaking API changes and improvements in 2sxc 15 Dynamic DataSources introduced in 2sxc 16"
  },
  "net-code/data-sources/custom/data-builder.html": {
    "href": "net-code/data-sources/custom/data-builder.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to DataSource API: DataBuilder.Entity(...)"
  },
  "net-code/data-sources/custom/dynamic.html": {
    "href": "net-code/data-sources/custom/dynamic.html",
    "title": "Custom Dynamic DataSources \uD83C\uDD95 v16 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom Dynamic DataSources \uD83C\uDD95 v16 you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } Dynamic DataSources are a new, simpler way to create DataSources. This is a new feature in 2sxc 16. These data sources are simple .cs files in the DataSources folder of the App. They are compiled on the fly and can be edited in the browser or VS Code. Tip This is new in v16 and is the recommended way to create custom DataSources. This is also the recommended way to get started and learn about DataSources. An important feature/limitation of this is that the DataSource can only be used in that single App. This is often preferred, as it can be distributed together with the App and won't affect any other Apps. Here is a very simple example of a dynamic DataSource: using System.Linq; public class ListBasic : Custom.DataSource.DataSource16 { public ListBasic(MyServices services) : base(services) { ProvideOut(() => Enumerable.Range(1, 5).Select(i => new { Id = i, Guid = System.Guid.NewGuid(), Title = \"Hello from ListBasic\", FavoriteNumber = 2742, })); } } Differences to Compiled DataSources The main difference is that the Dynamic DataSource is compiled on the fly, and that it's only available in that App. The main advantage is that it's much simpler to create and maintain. \uD83D\uDCA1 Dynamic DataSources always inherit from Custom.DataSource.DataSource16 Advantages Very easy to start with Very easy to maintain Changes can be made on the fly without restarting the server in the browser or using VS Code It has various helpers which make it much easier to code Disadvantages it's only available in that App it's not pre-compiled, so if your code is buggy, you need to see the errors in Insights which can be a bit more difficult it can't be unit tested it's not ideal for large, sophisticated code Comparable both can be used in VisualQuery both can be used in Razor and WebApi Get Started First you should review the live samples in our Dynamic DataSources Tutorials Then you should try to create your own \uD83D\uDE09 Tips / Common Issues Dynamic DataSources must always be in the DataSources folder of the App The name of the code file (eg. MyDs.cs) must match the class name (eg. class MyDs) The ProvideOut(...) expects a function name or lambda expression, so you must use () => ... and not just ... If your code wants to use Configuration make sure you access that within the ProvideOut function, not in the constructor itself Handling Compile Issues with Insights You will make mistakes, and you will run into compile errors. But the DataSources are invisible, so you won't see the error on your Razor page. To see the compile errors, you must go to the 2sxc Insights and look at the log, eg.: History Introduced in 2sxc 16"
  },
  "net-code/data-sources/custom/errors.html": {
    "href": "net-code/data-sources/custom/errors.html",
    "title": "DataSource API: Error Handling | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: Error Handling you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } Custom DataSources sometimes need to throw an error, for example if a SQL isn't found, a remote WebAPI fails or the configuration is faulty. Since 2sxc 11.13 we changed the behavior so that DataSource Errors will not break code execution but just make the stream contain just one Error entity. This helps a lot in debugging. You Don't Have to Do Anything If your code just raises a .net Exception, the execution engine will catch this and wrap it in an error. The Exception will also be logged to Insights for the admin/developer to see. ...but You can do Better Instead of raising the normal exception, your DataSource can also return an ErrorStream which contains more specific information about the problem. This greatly helps the developer (and that could be you \uD83D\uDE09) figure out what to fix. There are three tools at your disposal: The Error property (DataSourceErrorHelper) to create error streams The TryGetIn() helper to get an In stream which must be available - or null so you can return an error Read the API docs above or check out examples in the 2sxc EAV code base for more guidance. Example using TryGetIn TryGetIn ensures that we get a stream we really need, or null if something went wrong. private IEnumerable<IEntity> GetEntities() { // This will resolve the tokens before starting Configuration.Parse(); var source = TryGetIn(); if (source is null) return Error.TryGetInFailed(this); var results = ...; return results; } Create Custom Error Messages If you need an error which is not a predefined type, you can create your own using Error.Create: Read also DataSources Big Picture Ensuring configuration is parsed Demo App and further links todo History Introduced in EAV / 2sxc 11.13 Error API completely rewritten in 2sxc 15 (breaking change)"
  },
  "net-code/data-sources/custom/external-data.html": {
    "href": "net-code/data-sources/custom/external-data.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to DataSource API: Inherit from ExternalData"
  },
  "net-code/data-sources/custom/guide/big-picture.html": {
    "href": "net-code/data-sources/custom/guide/big-picture.html",
    "title": "Guide DataSources - Big Picture | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Guide DataSources - Big Picture you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } This should give you the big picture as to how DataSources work and interconnect. Data and Streams in DataSources Every data-item is an IEntity containing data about a person, product, file-information etc. A list of these items is a IEnumerable<IEntity> which contains zero, one or many items A Stream is an object which has list of items and a name A correctly built Stream will Provide this list, but only run the code if it's requested Each DataSource has one or more named Out streams (the default is Default, others can have any name you want) Very advanced DataSources can have a dynamic list of Out Streams - like the App, which has a stream for each ContentType in the App Each DataSource can have one or more named In streams coming from other DataSources (usually the first one is called Default) Building Data / Entities DataSources use ProvideOut to determine what Streams are provided The parameter of ProvideOut is a function which returns a list of items so it's either ProvideOut(FunctionName) or ProvideOut(() => { ... }) The code of each ProvideOut is only run if the Stream is requested Different Base Classes have different ProvideOut signatures accepting different kinds of data The most basic base class only accepts functions returning IEnumerable<IEntity> Easier base classes accept any of IEnumerable<IEntity>, IEnumerable<RawEntity>, IEnumerable<AnonymousType> or even a single item (not an IEnumerable) Internally the data will always be converted to an IEnumerable<IEntity> so that it can be used by other DataSources When using the easier base classes, the conversion is done automatically You can also configure how the conversion works using options: new DataFactoryOptions(...) (see DataFactoryOptions) In very advanced cases you can also convert it to IEntity yourself, but this is not documented Generated IEntities can also have Relationships - like folders to files and visa versa This is not yet documented, but if you need this, check out the AppFiles DataSource Receiving Data from In for further processing If your DataSource performs filtering or similar actions on existing data, then this data comes in on the In streams. In such scenarios, you would simply iterate over the In[streamname].List and provide the result in your out-stream again. You can find many examples in the EAV DataSources code. TODO: Connections / Links When DataSources are attached to each other, they are connected by one or more Links Only the downstream DataSource (the one with the In) knows about the connection, the upstream DataSource (the one with the Out) doesn't know about it Data from connections are only accessed when necessary The links are also important for caching, since often caching depends on Upstream refreshes Links use an immutable Fluid API, but this is not yet documented TODO: Configuration of a DataSource DataSource classes can have many properties like int AmountToGet, bool IncludeDeleted etc. which change their behavior There is a Configuration System which automates how such configurations are passed to the DataSource To connect the Properties with the Configuration System you need the ConfigurationAttribute and Configuration.GetThis() - see Configurable DataSource Each DataSource has an own ConfigurationProvider, which gives the DataSource information about the environment (like Portal or Tab information), App-Settings and more The reason why each one has an own ConfigurationProvider is because each DataSource can have own configurations Each DataSource can have custom Configuration provided by code or entered by the user in VisualQuery Configurations are always string based since they use Tokens. Keep this in mind when you need int or bool, because conversions can fail, which is why Configuration.GetThis(fallback) has a fallback parameter - see ConfigurationProvider Tokens always use LookUp Sources so you should read about them Configuration in VisualQuery When you use a DataSource in VisualQuery, you can configure it by clicking the cogwheel This is only available if the DataSource has a VisualQuery Attribute mentioning the ConfigurationType or if it's a Dynamic DataSource which automatically can find the configuration ContentType If the user edited data, internally it's stored as an IEntity object, which is then passed to the DataSource as a configuration Usually the fields in the UI are all string based, even for numbers and bool, because the user may want to use Tokens Caching DataSources also have cache-identity mechanism, to inform any up-stream cache what parameters actually caused this result, so that the data could be cached if needed Configurations are taken into account when caching, so that the cache for AmountToGet=5 is different from AmountToGet=10 History This document mentions too many different aspects of the system, so no detailed history is given here."
  },
  "net-code/data-sources/custom/guide/index.html": {
    "href": "net-code/data-sources/custom/guide/index.html",
    "title": "Guide Create Custom DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Guide Create Custom DataSources you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } There is a lot of information about DataSources, but some of it is outdated, and some of it is hard to understand. This guide will help you get started and find the right information. Start with an Overview Before you even start it's best to have an overview. The 2sxc 16 Dynamic DataSources Release Video is a good place to start. Step 1: Experience Live Code Before you read anything else in these docs, you must look at the live tutorials. This will help you understand what's actually going on. The remaining documentation assumes you have seen these tutorials. \uD83D\uDE80 first you must review the live samples in our Dynamic DataSources Tutorials Step 2: Review your Understanding Once you have seen the live code, you should have a basic idea of: What a Custom DataSource is What Data Streams are, and how they are provided using ProvideOut How DataSources are made configurable using [Configuration] and how they read the configuration using Configuration.GetThis() and Configuration.GetThis<T>() Use in Razor/WebApi C# Code How code will create such a DataSource using Kit.Data.GetSource How code can connect DataSources using attach How code can pass in configuration using parameters: Use in Visual Query How DataSources appear in VisualQuery How they can be configured using the ContentType Tip The above list of things you should understand is important. Make sure you can say yes to each point mentioned above, otherwise go back and review the live tutorials. Step 3: Learn the Big Picture \uD83D\uDCA1 You should read through the Big Picture of DataSources Step 4: Create your first Dynamic DataSources Now that you have seen the live tutorials, you should create a few Dynamic DataSources. You should not start with Compiled DataSources. They are much more difficult, and each failed try requires a rebuild, redeploy and restart of the website - with takes a long time. Step 4: Deepen your Understanding If you got this far and would like to go even deeper, this is what you probably need: how to provide data in different streams and different data types how to build entities with different property types and relationships as well as RawEntity objects advanced configuration possibilities use data from In streams, both the Default as well as other streams error handling Step 5: Create Compiled DataSources (optional) Only do this if you really need to, because it's much more complex and requires a lot of knowledge about the internals of the EAV. The guide stops here, but you can continue on Compiled DataSources. Demo App and further links Basic DataSources for EAV and 2sxc Blog about this feature Blog post about custom DataSources History Introduced in 2sxc ca. 4 but with a difficult API API strongly enhanced and simplifield in 2sxc 09.13 Another API rework ca. 2sxc 10.25 (but we're not exactly sure) Major breaking API changes and improvements in 2sxc 15 Dynamic DataSources introduced in 2sxc 16"
  },
  "net-code/data-sources/custom/immutable.html": {
    "href": "net-code/data-sources/custom/immutable.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to DataSource API: About Immutable Data"
  },
  "net-code/data-sources/custom/index.html": {
    "href": "net-code/data-sources/custom/index.html",
    "title": "Custom DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom DataSources you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If you want to create your own DataSource and use it in C# or the VisualQuery designer, this is for you. Get Started \uD83C\uDF93 Start with our Custom DataSource Guide \uD83D\uDDFA️ Continue with the Big Picture \uD83D\uDE80 Then start to Create DataSources For everything else, continue with the buttons in the menu to the left... Use in VisualQuery Designer This is what the DataSource would appear like in VisualQuery ...and this is what the test-run would look like Read More Blog about this feature Blog post about custom DataSources History Introduced in 2sxc ca. 4 but with a difficult API API strongly enhanced and simplifield in 2sxc 09.13 Another API rework ca. 2sxc 10.25 (but we're not exactly sure) Major breaking API changes and improvements in 2sxc 15 Dynamic DataSources introduced in 2sxc 16 Shortlink: https://go.2sxc.org/DsCustom"
  },
  "net-code/data-sources/custom/pre-v15/_obsolete-docs.html": {
    "href": "net-code/data-sources/custom/pre-v15/_obsolete-docs.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them."
  },
  "net-code/data-sources/custom/pre-v15/configmask.html": {
    "href": "net-code/data-sources/custom/pre-v15/configmask.html",
    "title": "DataSource Configuration: ConfigMask(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. DataSource Configuration: ConfigMask(...) you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } DataSources often need settings which come from the App or from a settings dialog. The ConfigMask is part of the Configuration System and initializes a configuration value. This value will later be used for Parsing Tokens to find the correct parameter to use Use as part of the Cache-Key for high-performance caching. This ensures that DataSources which have different data based on dynamic configuration (like using a URL parameter) will have separate caches for each value used. How to use ConfigMask Here's a example of the constructor of our SharePoint 2019 DataSource, which expects lots of settings: public SharePoint2019() { // Specify what out-streams this data-source provides. Usually just one: \"Default\" Provide(GetList); // Register the configurations as tokens; values will be injected later on ConfigMask(ListNameConfigKey, $\"[Settings:ListName]\"); ConfigMask(SiteUrlConfigKey, $\"[Settings:SiteUrl]\"); ConfigMask(UserNameConfigKey, $\"[Settings:UserName]\"); ConfigMask(PasswordConfigKey, $\"[Settings:Password]\", false); ConfigMask(FieldsConfigKey, $\"[Settings:Fields]\"); ConfigMask(TitleFieldConfigKey, $\"[Settings:TitleField||Title]\"); ConfigMask(ViewConfigKey, $\"[Settings:View]\"); ConfigMask(MaxItemsConfigKey, $\"[Settings:MaxItems]\"); } This example adds 8 configuration masks - let's find out what exactly happens. Most of them just add a simple [Settings:SOMEKEY] so they will just take the value which the developer will configure in the UI The password has a special parameter false to ensure that it won't be used in the cache key (which would show it in certain debug scenarios) The title field has a fallback - so if it's not supplied, it will use Title by default Read also Configuration using Tokens DataSource Configuration Ensuring configuration is parsed Demo App and further links #todoc History Introduced in 2sxc 9.13 to aid custom data sources"
  },
  "net-code/data-sources/custom/pre-v15/configuration-parse.html": {
    "href": "net-code/data-sources/custom/pre-v15/configuration-parse.html",
    "title": "DataSource Configuration: Configuration.Parse() | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. DataSource Configuration: Configuration.Parse() you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } If a DataSource is configurable, then the code must parse any configuration tokens before accessing the values. This is done with Configuration.Parse(). It will cycle through all settings previously added by ConfigMask and resolve the tokens. How to use Configuration.Parse() Here's a simple example of the PublishingFilter DataSources: public PublishingFilter() { Provide(PublishingFilterList); ConfigMask(QueryConstants.ParamsShowDraftKey, \"[MyConfiguration:ShowDrafts||false]\"); } const string ParamsShowDraftKey = \"ShowDrafts\"; public bool ShowDrafts { get => bool.Parse(Configuration[ParamsShowDraftKey]); set => Configuration[ParamsShowDraftKey] = value.ToString(); } private IImmutableList<IEntity> PublishingFilterList() { var before = ShowDrafts; // here it's \"[MyConfiguration:ShowDrafts||false]\" which would fail Configuration.Parse(); var after = ShowDrafts; // here it's `false` (or `true` if user is editor) var outStreamName = ShowDrafts ? Constants.DraftsStreamName : Constants.PublishedStreamName; return In[outStreamName].Immutable; } If we would read the ShowDrafts property before running Configuration.Parse() then the tokens would not be resolved yet. After calling Configuration.Parse() all tokens/values have been resolved and it works as expected. Breaking Change This command used to be called EnsureConfigurationIsLoaded() but was changed in 2sxc 10 or 11. We didn't notice until the new API was already widespread in use that older systems still used the previous mechanism. Read also DataSources Big Picture Demo Code and further links Tutorial DataSource History Introduced in EAV 4.x, 2sxc 07.00 Modified from EnsureConfigurationIsLoaded to Configuration.Parse (breaking change, sorry) ca. 2sxc 11"
  },
  "net-code/data-sources/custom/pre-v15/data-builder.html": {
    "href": "net-code/data-sources/custom/pre-v15/data-builder.html",
    "title": "DataSource API: DataBuilder.Entity(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. Important Before v15, the DataBuilder was used in custom DataSources to create entities. In v15+ you should use the IDataFactory instead. The following docs are out of date and will be upgraded soon. DataSource API: DataBuilder.Entity(...) Many data sources generate new content items - either because they deliver some kind of information, or because they convert data from another source into standardized entities. This is where DataBuilder.Entity(...) helps. Just fyi: Here are the API docs. There is also an Entities for multiple Entities. How the DataBuilder is added The DataBuilder is a IDataBuilder which is automatically given as a property DataBuilder. The DataSource-Factory creates it. How to use DataBuilder.Entity(...) Here's a simple example of the tutorial DateTime DataSource: const string DateFieldName = \"Date\"; var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataBuilder.Entity(values, titleField: DateFieldName); return new [] {entity}.ToImmutableArray(); This example shows how an entity-object is build using DataBuilder.Entity(values) on the ToSic.Eav.Data namespace. Concept Behind DataBuilder.Entity(...) Internally it will generate a simplified IEntity object. It's also missing some advanced features like multi-language and repository identity (which would be important in edit-scenarios). The simplest way is to just use DataBuilder.Entity(someDictionary), more advanced uses also tell the system which field is the title, some numeric or Guid IDs and more. Building Lists of Entities You can loop through your data and call DataBuilder.Entity(someDictionary) many times. You can also use the overload DataBuilder.Entities(IEnumerable<someDictionary>). Best read the API docs. More Parameters on DataBuilder.Entity(...) All paramaters are optional, except the first one containing the values. Here's what each one does: string titleField is the title field name, so the entity then also knows which one is the title and can support .EntityTitle property string typeName is a nice name for the type, allowing for type-filtering later in other data sources int id gives a number identity, so .EntityId is useful and filtering by EntityId (like when having details-pages needing this id) works Guid guidId is a UUID identity, so .EntityGuid is useful DateTime modified would allow to filter / sort by the .Modified property int appId could be used to pretend it's part of another app. This only affects the AppId property, and ATM there is no important reason to do this. Read also DataSources Big Picture DataSource API: Provide(...) Demo Code and further links Tutorial DataSource History Introduced in EAV 4.x, 2sxc 09.13"
  },
  "net-code/data-sources/custom/pre-v15/external-data.html": {
    "href": "net-code/data-sources/custom/pre-v15/external-data.html",
    "title": "DataSource API: Inherit from ExternalData | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. DataSource API: Inherit from ExternalData you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource gets data from elsewhere, please always inherit from ToSic.Eav.DataSources.ExternalData (doesn't exist anymore in v15). It doesn't do much, but in case future optimizations happen, this will help us detect that you have a source getting external data. Demo App and further links Custom DataSources - Basic Tutorial History Introduced ca. EAV / 2sxc v9"
  },
  "net-code/data-sources/custom/pre-v15/immutable.html": {
    "href": "net-code/data-sources/custom/pre-v15/immutable.html",
    "title": "DataSource API: About Immutable Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. DataSource API: About Immutable Data you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } All Streams are internally immutable, and we recommend that you also use Provide with an immutable List. This is not required but best-practice. If you want to do this, make sure you use a similar version of the Immutable NuGet package as used in EAV. Internally the version is marked as 1.2.1, but the NuGet is actually 1.3.0. History Introduced ca. EAV / 2sxc v11"
  },
  "net-code/data-sources/custom/pre-v15/index.html": {
    "href": "net-code/data-sources/custom/pre-v15/index.html",
    "title": "Create Custom DataSources - Docs Pre Version 15 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. Create Custom DataSources - Docs Pre Version 15 you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } These are older documentations for versions before 15.x. They often don't apply to the latest version, but are kept for reference. Demo App and further links DataSource API: VisualQuery Attribute DataSource API: Provide(...) DataSource API: DataBuilder.Entity(...) Basic DataSources for EAV and 2sxc Blog about this feature Blog post about custom DataSources History Introduced in 2sxc ca. 4 but with a difficult API API strongly enhanced and simplified in 2sxc 09.13 Another API rework ca. 2sxc 10.25 (but we're not exactly sure)"
  },
  "net-code/data-sources/custom/pre-v15/provide.html": {
    "href": "net-code/data-sources/custom/pre-v15/provide.html",
    "title": "DataSource API: Provide(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. DataSource API: Provide(...) you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } DataSources always provide data on an Out Stream. The Provide method makes it very easy to do. How to use Provide In general, you need a method like GetList() which returns an IEnumerable<IEntity> attach that stream to the Out - usually on a stream called Default Here's a simple example of the constructor of the Tutorial Basic DataSource, which provides the default stream: /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasic() { Provide(GetList); // \"Default\" out; when accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading so this code will only execute when used /// </summary> private ImmutableArray<IEntity> GetList() { var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataBuilder.Entity(values, titleField: DateFieldName); return new [] {entity}.ToImmutableArray(); } This example ensures that the .Out[\"Default\"] as well as the .List (which is a shorthand for .Out[Constants.DefaultStreamName].List) are mounted, ready to deliver. Overloads Provide(listfunction) - default version, which provides the \"Default\" stream Provide(name, listfunction) - alternative for named streams when your DataSource has more streams. Providing multiple streams In case you want to offer multiple streams (like one containing products, the other categories), the common pattern is: public SomeConstructor() { Provide(GetProducts); Provide(\"Categories\", GetCategories); // ... } Performance Notes It's important to know that Provide simply prepares the Out for use, but will not call the inner function unless this stream is requested. This makes DataSources very performant, as no code is run which isn't needed. Read also DataSources Big Picture Ensuring configuration is parsed Demo App and further links todo History Introduced in EAV 4.x, 2sxc 09.13"
  },
  "net-code/data-sources/custom/pre-v15/visual-query-attribute.html": {
    "href": "net-code/data-sources/custom/pre-v15/visual-query-attribute.html",
    "title": "DataSource API: VisualQuery Attribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. DataSource API: VisualQuery Attribute you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } DataSources themselves are useful in the 2sxc/EAV data processing - but they really become great when used in the VisualQuery Designer. To help the VisualQuery Designer give queues to the developer what can / can't be done, there is a VisualQuery decorator attribute which gives the class some more information. Example This example is taken from our internally used SharePoint DataSource: [VisualQuery( GlobalName = \"fd5288d2-5a13-4f58-90a0-e9d207f00121\", NiceName = \"SharePoint 2016\", PreviousNames = new[] { \"1b7cc60d-9fac-4473-a89a-c19017995307\" }, Type = DataSourceType.Source, ExpectsDataOfType = \"e5ee51da-1859-4e2b-9f4c-0ead39bbf4a6\", HelpLink = \"\")] Use It To best apply it, you should Check out the VisualQueryAttribute API docs Look at each property and make sure you understand it Look at some DataSources and see what they have defined Properties Streams Information DynamicIn Determines if this DataSource expects to have a lot of In-Streams, like the StreamMerge DataSource. Default is false. If true the UI will indicate this with a yellow In-marker. DynamicOut Determines if this DataSource can have a lot of Out-Streams like the App DataSource. Default is false. If true the UI will indicate this with a yellot Out-marker. In Array of In-Streams which the UI will show as prepared landing markers to connect streams to. Name and Identity GlobalName - the Unique Identity The global name should be super-unique because it will be stored as the ID in Queries. We recommend you get a new random Guid here. NiceName This will be shown in the VisualQuery UI. Make sure it's reasonable. PreviousNames This is a for historical reasons. In rare cases we had to rename a DataSource and the old GlobalName values are listed here. Avoid using this. UI Enhancements Icon An icon name from the Material Icons. Type A value which tells the VisualQuery in what group to place this source for the Query developer. Must be a valid value from DataSourceType. HelpLink A url to a website containing help to this DataSource. UiHint Additional text to be shown in the UI. Configuration ExpectsDataOfType This is the GUID (aka StaticName) of the Content-Type which should be used for configuring the DataSource. The UI will open a edit dialog for this Content-Type when the Query creator hits Settings on this DataSource. History Introduced ca. in 2sxc 6 Moved from ToSic.Eav.DataSources.Queries.VisualQueryAttribute to ToSic.Eav.DataSource.VisualQuery.VisualQueryAttribute in v15"
  },
  "net-code/data-sources/custom/provide.html": {
    "href": "net-code/data-sources/custom/provide.html",
    "title": "DataSource API: ProvideOut(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: ProvideOut(...) you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } DataSources always provide data on an Out Stream. The ProvideOut() method makes it very easy to do. How to use ProvideOut In general, you need a method like GetList() which returns an IEnumerable<IEntity> attach that stream to the Out - usually on a stream called Default Here's a simple example of the constructor of the Tutorial Basic DataSource, which provides the default stream: /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasic() { ProvideOut(GetList); // \"Default\" out; when accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading so this code will only execute when used /// </summary> private IEnumerable<IEntity> GetList() { var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataFactory.Create(values); return new [] {entity}; } This example ensures that the .Out[\"Default\"] as well as the .List (which is a shorthand for .Out[\"Default\"].List) are mounted, ready to deliver. Overloads ProvideOut(listfunction) - default version, which provides the \"Default\" stream ProvideOut(listfunction, name) - alternative for named streams when your DataSource has more streams. ProvideOut(listfunction, name: name, options: optionsfunction) - optimized for conversions when using CustomDataSource. Providing multiple streams In case you want to offer multiple streams (like one containing products, the other categories), the common pattern is: public SomeConstructor() { ProvideOut(GetProducts); ProvideOut(GetCategories, \"Categories\"); // ... } Providing Data with Relationships In some cases you want the created Entities to have relationships to each other. Examples could be: Blog posts with relationships to their tags Tree structures such as folders etc. For this you should first understand how relationships are created. Every created entity is immutable. This means that it can't be modified once created. Now this poses a special challenge, because some of the referenced entities may not exist when the referencing entity (aka the parent) is created. So internally there is a lookup concept, which basically works like this: A Relationship Manager knows about all the entities and how they can be referenced An entity which needs other entities will get this manager injected A field which references other entities keeps a list of references - either the IDs or special strings like file-of:/some/path When the field is accessed, internally it will ask the ReferenceManager to find the entities For creating relationships you must do two things: Ensure that each new entity provides the keys it should be found on. If you are only using IDs, you don't have to do anything, but if you need magic strings, you must provide them. Tell the relationship fields (eg: MyChildren or Parent) what IDs / keys to use. Here's a simple example from the tutorial: using System.Collections.Generic; public class TreeBasic : Custom.DataSource.DataSource16 { public TreeBasic(MyServices services) : base(services, \"My.Magic\") { ProvideOut(() => { return new List<object> { // Root has ID 1 and points to 2 children CreateNode(1, \"Root Node\", new [] { 101, 102 }), // This is a subnode, with 2 more children CreateNode(101, \"Sub Item 101\", new [] { 1011, 1012 }), CreateNode(102, \"Sub Item 102\"), CreateNode(1011, \"Sub Item 1011\"), CreateNode(1012, \"Sub Item 1012\"), }; }); } private object CreateNode(int id, string title, int[] relationships = null) { return new { Id = id, Title = title, // To reference another item in the same list, // create an anonymous object with \"Relationships\" as an Enumerable, Array or List SubItems = new { Relationships = relationships } }; } } This example skips step one, because it only uses IDs. As you can see, the property SubItems creates a special object which contains the references to the children of a parent. \uD83D\uDCA1 For more examples, check out the Relationships Tutorial Performance Notes It's important to know that ProvideOut simply prepares the Out for use, but will not call the inner function unless this stream is requested. This makes DataSources very performant, as no code is run which isn't needed. Read also DataSources Big Picture Ensuring configuration is parsed Dynamic DataSources Tutorials History Introduced in EAV 4.x, 2sxc 09.13 Changed from Provide to ProvideOut in v15 (breaking change)"
  },
  "net-code/data-sources/custom/streams-in.html": {
    "href": "net-code/data-sources/custom/streams-in.html",
    "title": "DataSource API: In Streams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: In Streams you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } All DataSources can have In Streams, even Root DataSources. This is because an In is often used to provide the DataSource with configuration information. In addition to that, many DataSources expect Data which will be processed. For example, the Shuffle needs one In-Stream containing data to shuffle, while the ValueFilter expects two streams: a Default to filter on and an optional Fallback stream to return in case the filter didn't return anything. Important Here we only explain aspects which are relevant to your code. Make sure you are familiar with the general concept of In-Streams. To help the UI explicitly show these predefined In-Streams, we must list them in the VisualQuery decorator attribute in the In property. Example from the ValueFilter DataSource [VisualQuery(NameId = \"...\", Type = DataSourceType.Filter, In = new[] { Constants.DefaultStreamName, Constants.FallbackStreamName }, DynamicIn = false, DynamicOut = false, ConfigurationType = \"...\", HelpLink = \"...\")] Nice to Know If the In is not specified in the VisualQuery Attribute, then the UI will show no special In-markers ...except in Dynamic DataSources where the default is to always have In-Streams. By convention, the default In-stream is called Default To mark an In-Stream as required, add a * at the end, like Default* In-Streams have data which can be used, but they are not accessed until you really need them If your code really needs an In (like you require the Default stream) best use the best-practice for error-handling The property DynamicIn would mark DataSources which can work with a variable amount of In-Streams, like StreamMerge History Introduced ca. in 2sxc 6 Best practices for getting in-streams in Code were changed in v15 (breaking change)"
  },
  "net-code/data-sources/custom/streams-out.html": {
    "href": "net-code/data-sources/custom/streams-out.html",
    "title": "DataSource API: Out Streams | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: Out Streams you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } All DataSources must have Out Streams. By convention, the primary Out is called Default and the VisualQuery Designer assumes that it exists by default. But there are two important things you can change You can determine one or more predefined Out streams You can tell the UI that your Stream can have many, dynamically named Out-Streams just like the App DataSource Important Here we only explain aspects which are relevant to your code. Make sure you are familiar with the general concept of Out-Streams. Pre-Named Out-Streams For an example, we'll use the Paging DataSource. It's job is to take a list of items and only forward a chunk on the Default, like \"Page 3 containing items 61-90\". In addition it should also provide information as to what page we're on and how many pages exist. This is defined in the constructor, where the DataSource determines what it Provides #todoc. public Paging() { ProvideOut(GetList); ProvideOut(GetPaging, \"Paging\"); } The two lines of ProvideOut are the important bits: ProvideOut(GetList) will provide data on the Default Out-Stream ProvideOut(GetPaging, \"Paging\") will provide data on the Paging Out-Stream Dynamic Out Streams Some DataSources like the App DataSource can have many Out-streams which are not known till Runtime. To allow the UI to provide these, we must specify this in the VisualQuery attribute. Here's an example of the App DataSource: [VisualQuery( NameId = \"...\", Type = DataSourceType.Source, Icon = \"app\", DynamicOut = true, NiceName = \"App\", UiHint = \"...\", ConfigurationType = \"...\", HelpLink = \"...\")] The important part here is the DynamicOut = true. Strategies for Providing Dynamic Out Providing dynamic-out in your code can be tricky, and there are 2 strategies you can use: Create all Out-Streams on first Use of Out This would create the Out-Accessors when Out is first accessed. You can see examples of this on the App DataSource Re-Implement the Out of the type IDictionary<string, IDataStream> to do some kind of Lazy-Loading There is no example to do this, but it could be done. Note that this is fairly sophisticated so do spend some time to familiarize yourself with the EAV code before you attempt this. History Introduced ca. in 2sxc 6 Extended with Dynamic Out ca. 2sxc 8 Provide API completely changed in v15+ and uses the new ProvideOut method"
  },
  "net-code/data-sources/custom/tutorial-basic/_obsolete-docs.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/_obsolete-docs.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. Tip The code samples shown here are obsolete. But the code was updated to the latest version. So best get the real code from the DataSource Tutorial Repo"
  },
  "net-code/data-sources/custom/tutorial-basic/basic-list.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/basic-list.html",
    "title": "Tutorial Custom DataSources - BasicList | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. Tip The code samples shown here are obsolete. But the code was updated to the latest version. So best get the real code from the DataSource Tutorial Repo Tutorial Custom DataSources - BasicList This explains the BasicList DataSource in the DataSource Tutorial. Add to VisualQuery This is what it looks like in VisualQuery: And this is what you see when you run it: Source of the BasicList DataSource This is the code for the simplest DataSource: using System; using System.Collections.Generic; using System.Collections.Immutable; using ToSic.Eav.Data; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.Queries; namespace ToSic.Tutorial.DataSource.Basic { // additional info so the VisualQuery can provide the correct buttons and infos [VisualQuery( NiceName = \"Demo DateTime List\", Icon = \"date_range\", NameId = \"10ebb0af-4b4e-44cb-81e3-68c3b0bb388d\" // random & unique Guid )] public class DateTimeDataSourceBasicList: ExternalData { public const string DateFieldName = \"Date\"; public const string IdField = \"Id\"; public const int ItemsToGenerate = 27; /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasicList() { Provide(GetList); // default out, if accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading, /// ...so this code will not execute unless it's really used /// </summary> /// <returns></returns> private ImmutableArray<IEntity> GetList() { var randomNumbers = new List<IEntity>(); for (var i = 0; i < ItemsToGenerate; i++) { var values = new Dictionary<string, object> { {IdField, i}, {DateFieldName, RandomDay()} }; var ent = DataBuilder.Entity(values, id: i, titleField: DateFieldName); randomNumbers.Add(ent); } return randomNumbers.ToImmutableArray(); } // helper to randomly generate dates private readonly Random _randomizer = new Random(); private readonly DateTime _start = new DateTime(1995, 1, 1); private DateTime RandomDay() { var range = (DateTime.Today - _start).Days; return _start.AddDays(_randomizer.Next(range)); } } } This is very similar to the Basic case, just that we're now creating a list of Entities and returning them. What this does is... Inform VisualQuery that there is a DataSource and registers it with a unique GUID The constructor says it provides one Default stream which can be built by GetList() GetList() will simply create a simple entity and return it as a list Read More Discover the Basic DataSourceTutorial with more examples History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "net-code/data-sources/custom/tutorial-basic/basic.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/basic.html",
    "title": "Tutorial Custom DataSources - Basic | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. Tip The code samples shown here are obsolete. But the code was updated to the latest version. So best get the real code from the DataSource Tutorial Repo Tutorial Custom DataSources - Basic This explains the Basic DataSource in the DataSource Tutorial. Add to VisualQuery This is what it looks like in VisualQuery: And this is what you see when you run it: Source of the Basic DataSource This is the code for the simplest DataSource: using System; using System.Collections.Generic; using System.Collections.Immutable; using ToSic.Eav.Data; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.Queries; namespace ToSic.Tutorial.DataSource.Basic { // Additional info so the VisualQuery can provide the correct buttons and infos [VisualQuery( NiceName = \"Demo DateTime Basic\", Icon = \"today\", NameId = \"7aee541c-7188-429f-a4bb-2663a576b19e\" // random & unique Guid )] public class DateTimeDataSourceBasic: ExternalData { public const string DateFieldName = \"Date\"; /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasic() { Provide(GetList); // \"Default\" out; when accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading so this code will only execute when used /// </summary> private ImmutableArray<IEntity> GetList() { var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataBuilder.Entity(values, titleField: DateFieldName); return new [] {entity}.ToImmutableArray(); } } } What this does is... Inform VisualQuery that there is a DataSource and registers it with a unique GUID The constructor says it provides one Default stream which can be built by GetList() GetList() will simply create a simple entity and return it as a list Read More Discover the Basic DataSourceTutorial with more examples History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "net-code/data-sources/custom/tutorial-basic/configurable.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/configurable.html",
    "title": "Tutorial Custom DataSources - Configurable | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. Tip The code samples shown here are obsolete. But the code was updated to the latest version. So best get the real code from the DataSource Tutorial Repo Tutorial Custom DataSources - Configurable This explains the ConfigurableDateTime DataSource in the DataSource Tutorial. This has a lot more features, like Properties on the DataSource object to configure it A Content-Type to let the admin configure it in the UI Code to load the configured settings Error handling code to provide good information if something is wrong Add to VisualQuery This is what it looks like in VisualQuery: And this is what you see when you run it without configuration: Running with Configuration from Params Since this DataSource has configuration enabled, the UI knows that it can offer a Settings button: You could just write a number like 14 but here we're showing how to use Query Parameters. The Result would then look like this: Running with Invalid Configuration Here's an example with an invalid configuration where the Hour would be 24 (hours can only go from 0 to 23): And here the resulting message which is optimized because the DataSource expected this mis-configuration: Source of the ConfigurableDateTime DataSource This is the code for the simplest DataSource: using System; using System.Collections.Generic; using System.Collections.Immutable; using ToSic.Eav.Data; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.Queries; // Demo / Training Code to help you create our own DataSource // You can find the newest version here: https://github.com/2sic/datasource-tutorial-basic // there is also an App showing you how it would be used // and how such a data-source is configured. namespace ToSic.Tutorial.DataSource.Basic { // Note that this attribute is necessary for the DataSource to show up in the [VisualQuery( NameId = \"81dd49a7-fa70-4e98-b73d-8299bb3231f0\", Icon = \"event\", Type = DataSourceType.Source, NiceName = \"DateTime Configurable\", // Guid of the Content-Type which must be exported with this DataSource // It's located in .data/contenttypes // The class RegisterGlobalContentTypes ensures that 2sxc/EAV will find it ConfigurationType = \"677210a2-cf08-46e5-a6b2-86e56e27be99\", HelpLink = \"https://go.2sxc.org/DsCustom\")] public class ConfigurableDateTime : ExternalData { #region Configuration-properties private const string DesiredDateKey = \"DesiredDate\"; private const string HoursKey = \"Hours\"; /// <summary> /// A piece of demo-configuration. It must always be stored/accessed from the Configuration dictionary /// because everything in the config-dictionary will be token-resolved /// </summary> public string DesiredDate { get => Configuration[DesiredDateKey]; set => Configuration[DesiredDateKey] = value; } /// <summary> /// A number-demo config. Note that we do error-checking and store it with SetError /// </summary> public int Hours { get { if (decimal.TryParse(Configuration[HoursKey], out var hour)) { // check that it's a valid hour-range if (hour >= 0 && hour <= 23) return (int)hour; // If not, set the error, so that the code can later pick up the error-stream SetError(\"Hour value out of range\", $\"The hour was '{hour}' which is not valid\"); return 0; } // Apparently not a decimal, so set the error, so that the code can later pick up the error-stream SetError(\"Hour value invalid\", $\"Tried to parse the hour, but couldn't. Value was '{Configuration[HoursKey]}'\"); return 0; } set => Configuration[HoursKey] = value.ToString(); } #endregion /// <summary> /// Constructs a new EntityIdFilter /// </summary> public ConfigurableDateTime() { // The out-list contains all out-streams. // For performance reasons we want to make sure that they are NOT created unless accessed // Because of this, we create a data-stream with a deferred call to GetEntities - like this: Provide(GetEntities); // Example of pre-configuring a text // This will place the token to be resolved into the variable // The tokens will be resolved before use // The following token means: // - Try to use the configured value from the setting on this data-source in the VisualQuery // - if there is none, just use the value \"Today\" ConfigMask(DesiredDateKey, \"[Settings:DesiredDate||Today]\"); // Example of pre-configuring a number value // We can't just say AnotherDemoConfig = \"text\" because that would not compile since it expects a number // So we just add the token to be resolved directly to the configuration list ConfigMask(HoursKey, \"[Settings:Hours||17]\"); } /// <summary> /// This is the deferred call to retrieve entities /// If you created the source correctly it won't be called unless accessed /// This is recommended for performance reasons /// We also recommend placing the result in the cache... /// </summary> /// <returns></returns> private IImmutableList<IEntity> GetEntities() { // This will resolve the tokens before starting Configuration.Parse(); // Here's your real code. // Typically you will either perform some work with the In-streams // or retrieve data from another source like XML, RSS, SQL, File-storage etc. // Usually you would also need configuration from the UI - but sometimes not, especially if it's just for a very specific purpose #region Your Custom Business Logic try { // Check if we're trying to inform about today if (DesiredDate != \"Today\") return SetError(\"Demo Config not Today\", \"The Demo Configuration should be 'Today' or empty.\"); // Get the hours - and if something is wrong, the ErrorStream will be pre-filled var hours = Hours; if (!ErrorStream.IsDefaultOrEmpty) return ErrorStream; // For this demo we'll treat the current time as UTC var todayDate = DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Utc); // In this demo we'll just create 1 entity containing some values related to today var today = new Dictionary<string, object> { {\"Title\", \"Date Today\"}, {\"Date\", todayDate.AddHours(hours)}, {\"DayOfWeek\", DateTime.Today.DayOfWeek.ToString()}, {\"DayOfWeekNumber\", DateTime.Today.DayOfWeek} }; // ...now convert to an entity with the data prepared before var ent = DataBuilder.Entity(today, titleField: \"Title\"); return new List<IEntity> { ent }.ToImmutableArray(); } catch (Exception ex) { // if something happens, let's return this information as a result return SetError(\"Unexpected Error\", \"The Configurable DateTime DataSource ran into an exception.\", ex); } #endregion } } } This does a LOT more. Here the important bits The VisualQuery Attribute has a lot more information It has various properties like Hour which will be populated by settings in the Constructor... ...and they have features to detect errors and report them nicely The GetEntities() safely checks if the Required In stream really exists - otherwise returns a clean error stream The configuration is then used in the data returned Read More Discover the Basic DataSourceTutorial with more examples History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "net-code/data-sources/custom/tutorial-basic/index.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/index.html",
    "title": "Custom DataSources - Basic Tutorial | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Warning These documentations are for versions before 15.x. They don't apply to v15+ but are kept for reference. We highly recommend that you don't use them. Tip The code samples shown here are obsolete. But the code was updated to the latest version. So best get the real code from the DataSource Tutorial Repo Custom DataSources - Basic Tutorial you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } We've re-created our Tutorial for the Custom DataSources to match features of 2sxc 11.13. It has 3 DataSources: Basic which just provides information about todays Date BasicList which generates similar information for a list of 7 dates ConfigurableDateTime which shows just about everything you will ever need Here's what you should look into: The VisualStudio project located here: DataSources Github Project The companion Demo App (Git | Downloads | App-Catalog) containing some Demo Queries and the Content-Type Installing Just install the ZIP as a Dnn package from the Git Releases. This will add the DLLs containing the DataSources and the Configuration Content-Type to Dnn as a Library. Now you can use this DataSource in any 2sxc App. You can also install the Demo App which already has some Queries #Todo demonstrating them. Discover the Code Download the Git-Repo and look at the Code. Next we'll explain the highlights: Level 1: The most Basic DataSource \uD83D\uDC49 Tutorial Custom DataSources - Basic Level 2: A BasicList DataSource \uD83D\uDC49 Tutorial Custom DataSources - BasicList Level 3: A Configurable, Error-Aware Data-Source ConfigurableDateTime \uD83D\uDC49 Tutorial Custom DataSources - Configurable History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "net-code/data-sources/custom/type-filter.html": {
    "href": "net-code/data-sources/custom/type-filter.html",
    "title": "DataSource API: Filter DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: Filter DataSources you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource takes an In stream and limits what is forwarded it's called a Filter DataSource. You can find some simple examples in our DataSources like the EntityId or ValueFilter. Recommendations Inherit from the CustomDataSource base class Use ProvideOut and give it a lambda or method which returns the data after applying filters Mark your sources in the VisualQuery Attribute as DataSourceType.Filter It's important to note that filtering must use the standard IEntity APIs, so there is a learning curve to this. Best check out the examples listed above. Read Also Check out the Dynamic DataSources Tutorials for some easy examples History Introduced ca. EAV / 2sxc v6"
  },
  "net-code/data-sources/custom/type-modify.html": {
    "href": "net-code/data-sources/custom/type-modify.html",
    "title": "DataSource API: Modify Data DataSources | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: Modify Data DataSources you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource takes an In stream and changes the properties of the items forwarded it's called a Modify DataSource. You can find some simple examples in our DataSources like the AttributeRename or AttributeFilter. Warning Modify DataSources are the most complex and require much more understanding of the internals of the EAV. As such, they are not a good starting point for learning how to create DataSources. You will also need to use some internal APIs which are currently not documented. Recommendations Inherit from the CustomDataSource base class Use ProvideOut and give it a lambda or method which returns the modified data - usually as RawEntity objects If applicable, also use the options on ProvideOut(..., options: ...) to customize how the data is converted to IEntities. Mark your sources in the VisualQuery Attribute as DataSourceType.Modify. Read Also no additional information as of now History Introduced ca. EAV / 2sxc v6"
  },
  "net-code/data-sources/custom/type-source.html": {
    "href": "net-code/data-sources/custom/type-source.html",
    "title": "DataSource API: Root DataSources which Introduce Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: Root DataSources which Introduce Data you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource creates new items - like from memory or elsewhere - it's called a Root DataSource. Examples would be DataSources which... ...get data from a WebApi ...list files in a Folder ...reads image file properties Recommendations Inherit from the CustomDataSource base class Use ProvideOut and give it a lambda or method which returns the data either as... Anonymous objects RawEntity objects If applicable, also use the options on ProvideOut(..., options: ...) to customize how the data is converted to IEntities. Mark your sources in the VisualQuery Attribute as DataSourceType.Source Read Also Check out the Dynamic DataSources Tutorials for some easy examples Check out some DataSources in 2sxc which do this, such as the Sites DataSource History Introduced ca. EAV / 2sxc v6"
  },
  "net-code/data-sources/custom/visual-query-attribute.html": {
    "href": "net-code/data-sources/custom/visual-query-attribute.html",
    "title": "DataSource API: VisualQuery Attribute | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSource API: VisualQuery Attribute you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } DataSources themselves are useful in the 2sxc/EAV data processing - but they really become great when used in the VisualQuery Designer. To help the VisualQuery Designer give queues to the developer what can / can't be done, there is a VisualQuery decorator attribute which gives the class some more information. Example This example is taken from our internally used SharePoint DataSource: [VisualQuery( NiceName = \"SharePoint 2016\", NameId = \"fd5288d2-5a13-4f58-90a0-e9d207f00121\", NameIds = new[] { \"1b7cc60d-9fac-4473-a89a-c19017995307\" }, Type = DataSourceType.Source, ConfigurationType = \"e5ee51da-1859-4e2b-9f4c-0ead39bbf4a6\", HelpLink = \"\")] Use It To best apply it, you should Check out the VisualQueryAttribute API docs Look at each property and make sure you understand it Look at some DataSources and see what they have defined Properties Streams Information DynamicIn Determines if this DataSource expects to have a lot of In-Streams, like the StreamMerge DataSource. Default is false. If true the UI will indicate this with a yellow In-marker. DynamicOut Determines if this DataSource can have a lot of Out-Streams like the App DataSource. Default is false. If true the UI will indicate this with a yellot Out-marker. In Array of In-Streams which the UI will show as prepared landing markers to connect streams to. Name and Identity NameId - the Unique Identity The global name should be super-unique because it will be stored as the ID in Queries. We recommend you get a new random Guid here. NiceName This will be shown in the VisualQuery UI. Make sure it's reasonable. NameIds This is a for historical reasons. In rare cases we had to rename a DataSource and the old GlobalName values are listed here. Avoid using this. UI Enhancements Icon An icon name from the Material Icons. Type A value which tells the VisualQuery in what group to place this source for the Query developer. Must be a valid value from DataSourceType. HelpLink A url to a website containing help to this DataSource. UiHint Additional text to be shown in the UI. Configuration ConfigurationType This is the GUID (aka StaticName) of the Content-Type which should be used for configuring the DataSource. The UI will open a edit dialog for this Content-Type when the Query creator hits Settings on this DataSource. If this is not provided, the system will check if there is a ContentType with a name matching this DataSource + Configuration. So if your DataSource is called MyXyz and a ContentType MyXyzConfiguration exists, this will be used automatically. (new in v16) History Introduced ca. in 2sxc 6 Large changes in v15 / v16 Moved from ToSic.Eav.DataSources.Queries.VisualQueryAttribute to ToSic.Eav.DataSource.VisualQuery.VisualQueryAttribute Renamed GlobalName to NameId Renamed PreviousNames to NameIds Renamed ExpectsDataOfType to ConfigurationType"
  },
  "net-code/data-sources/datasource.html": {
    "href": "net-code/data-sources/datasource.html",
    "title": "Data Sources (IDataSource) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data Sources (IDataSource) you are here (click to zoom) - discover the stack .context-box-summary .datasource, .context-box-summary .query-datasource { visibility: visible; } Root DataSources are IDataSource objects which deliver one or many DataStreams, which contain a bunch of content-items. Two Core Types 1. Root DataSources This kind of DataSource generates or retrieves data from somewhere external like SQL, CSV, REST or the EAV-cache. This is a Root IDataSource. An example is the Csv DataSource. Note that even this DataSource can have use Data on the In-Stream. But in this case the In provides configuration data, not raw data to process. 2. Processing DataSources Processing DataSources receive data from another DataSource, then process/filter this and provide the result for further use, in which case it's both an IDataSource as well as an IDataTarget An example of this is the Shuffle DataSource. It receives items on the In[\"Default\"], randomly reorganizes them and provides them on the Out[\"Default]. DataSource Out can be another DataSources In Datasources can be chained so that processing steps happen in a sequence. Here's a very simple example: The root DataSource would be the App.Data which has all the data in the App It can then be connected to a EntityTypeFilter DataSource which will limit the data to all BlogPost items We can then connect it to a Shuffle DataSource to keep 3 random posts This can be done both in code as well as in a prepared VisualQuery. Queries: Reusable DataSource Wirings As described above, DataSources can be joined together and the configuration can be saved as a Query. Here's another example: a Root Csv DataSource can read a CSV-file and provide the data as a stream on Entities on csvDs[\"Default\"]... ...and pipe the result it to a CacheAllStreams which caches the data for 60 minutes this would ensure that the slow reading process only happens every hour ...then pipe it to a ValueFilter, which only shows the items where the Country matches the Url-parameters country ...then pipe it to a ValueSort, ordering it by LastName and then FirstName ...then pipe it to another CacheAllStreams so that this common filter/sort combination will be kept for 5 minutes The result can be used in a Template or streamed as JSON to a JavaScript SPA using the Headless API. Understanding Data-Flow between DataSource Objects Each DataSource has a list of out-streams available on the .Out[\"StreamName\"] property, but usually access directly just with the DataSourceName[\"StreamName\"]. This is what also happens when you use the Data object and write foreach(var item in Data[\"Default\"]). Aside from consuming data in your your template, most data-sources will simply offer the Out-Stream to other DataSources for further processing. Technically it's mapped like this: Cache.Out[\"Default\"] > ContentTypeFilter.In[\"Default\"] ... then some magic happens inside the ContentTypeFilter ... then the ContentTypeFilter.Out[\"Default\"] has the resulting items, which can again be used as an In on another DataSource, or simply used in your template Most DataSources will only have one In-stream and one Out-stream, but this is very variable depending on your need. How to use \uD83D\uDC49 Guide for Using DataSources in your C# Code Create your own Custom DataSource \uD83D\uDC49 Custom DataSources Configuration of Each DataSource The configuration uses a sophisticated token system to provide all necessary information. It is explained here. Read also about Data Streams Dynamic Code CreateSource(...) .net API Demo-App showing some coding of DataSources Blog about creating your own data-source History Introduced in 2sxc 04.00"
  },
  "net-code/data-sources/datastream.html": {
    "href": "net-code/data-sources/datastream.html",
    "title": "Data Streams (IDataStream) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data Streams (IDataStream) you are here (click to zoom) - discover the stack .context-box-summary .datasource { visibility: visible; } DataStreams are objects which behave like a table or a list. They deliver a bunch of content-items/Entities. Common examples in Razor-templates are: Data[\"Default\"] This is a data-stream containing all content-items prepared for the template. App.Data[\"Tag\"] This would be a data-stream containing all tag-items in the entire app, if the App has Tag items. Tip All DataSources have at least one Out-stream called Default. But they can have more streams as well. Most DataSources also have one or more In streams providing data or configuration to that DataSource which will then give a modified list to the Out. How to use The most commen uses will loop through all items in such a stream and show them. Here's an example: <ol> @foreach(var person in Data[\"Default\"]){ <li>@AsDynamic(person).FullName</li> } </ol> The @foreach will go through all the items. Each item is of the type IEntity. To make it easier to template, we convert it to a Dynamic Entity using AsDynamic and then we can just show the name with .FullName. In most cases we will need the loop-item a lot, and would preferr to not write AsDynamic every time. Because of this, we usually write the AsList in the Loop, like this: <ol> @foreach(var person in AsList(Data[\"Default\"])) { <li>@person.FullName - born @person.Birthday and married to @person.SpouseName</li> } </ol> Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Advanced Use Cases There are some advanced use-cases where you need to know more about the IDataStream object, mostly when using LINQ. This is fairly rare, and if you really need to know more, it's best to consult the EAV DataSource code. Just a few more details you might care about: The stream has a property Source which points to the owning DataSource. a stream might be attached to many targets for further processing or for templating, but the stream doesn't know about this you can always looup through items on the stream itself using LINQ, like var blues = Data[\"Default\"].Where(x => AsDynamic(x).Category == \"Blue\")) see also Use LINQ with Dynamic Data in Dynamic Code of course there's always quite a bit more to it, like auto-caching, but you usually don't need to understand all that. Read also DataSources History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00"
  },
  "net-code/data-sources/index.html": {
    "href": "net-code/data-sources/index.html",
    "title": "DataSources and Query API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DataSources and Query API you are here (click to zoom) - discover the stack .context-box-summary .datasource { visibility: visible; } The EAV system has a sophisticated mechanism to provide data from various sources, and filter/sort them as needed. This is what the DataSource and Query things are for. This is a slightly advanced topic. So if you're just starting with 2sxc / EAV, this may not be for you yet."
  },
  "net-code/data-sources/query/index.html": {
    "href": "net-code/data-sources/query/index.html",
    "title": "Using Queries in your Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Using Queries in your Code In a Razor or WebApi file, you can always write something like this var query = App.Query[\"AllBlogPosts\"]; var posts = query[\"Default\"]; // you could now work with the data, or you could cast all results into dynamic objects, like... var categories = AsList(query[\"Categories\"]); // if all you need is the \"Default\" stream as dynamic, you can write var posts = AsList(query); Now you can loop through the data as you would otherwise, for example: <ol> @foreach(var person in AsList(query[\"Persons\"])) { <li>@person.FullName</li> } </ol> Technical Implementation The data which defines a query is stored as IEntity data. So there is a header IEntity which is read through an . It contains the name, and a bunch of metadata IEntity items which are read as QueryPartDefinitions It also contains a list of Connections which define how the DataSources pass data from one source to another. There are also test-parameters on such a query, which are only used for testing in the VisualQuery Designer Read also Parameters for the DataSources and the Query Blog Posts about VisualQuery Designer Data Sources (IDataSource) History Introduced in 2sxc 07.00"
  },
  "net-code/data-sources/use/data-source-parameters.html": {
    "href": "net-code/data-sources/use/data-source-parameters.html",
    "title": "Set Parameters for DataSource Objects in C#/Razor Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Set Parameters for DataSource Objects in C#/Razor Code you are here (click to zoom) - discover the stack .context-box-summary .datasource, .context-box-summary .process-razor-app, .context-box-summary .process-web-api-app { visibility: visible; } Many DataSource Objects will do something that you can parameterize / configure. There are two ways to do this Set Configuration values on the DataSource objects Put Tokens in the Configuration Values of the objects Tip DataSource Objects are Single-Use, so any configuration you set must happen before data is accessed. Once Data has been retrieved (by accessing the List of a DataSource) the inner engine will cache the result and not re-run the code, so changing parameters afterwards will have no effect. Tip These samples require 2sxc 16. For older versions, check the code at the end of this page. Set Property Values Each DataSource object has unique properties you can set. Example: using ToSic.Eav.DataSources; // A source which can filter by Content-Type (EntityType) var allAuthors = Kit.Data.GetSource<EntityTypeFilter>( attach: App.Data, // Use the apps data as input parameters: new { TypeName = \"Author\" } // tell it to filter by \"Author\" ); // access the data and automatically apply the filter/config var authors = allAuthors.List; This demonstrates the EntityTypeFilter DataSource. We attach it to the App.Data so that will be the input, before the filter is applied. It has a single configuration TypeName. Since we set the TypeName property to Author, only items of type Author will be returned. The Csv DataSource on the other hand has 5 Properties you can set like the file name to use, the delimiter etc. Tip Setting properties is the most common way to configure DataSources in C#. Set Property Tokens Tokens are usually used in VisualQuery but mentioned here for completeness. This is what you could do: using ToSic.Eav.DataSources; // A source which can filter by Content-Type (EntityType) var allAuthors = Kit.Data.GetSource<EntityTypeFilter>( attach: App.Data, parameters: new { TypeName = \"[QueryString:TypeName]\" } ); CreateSource<EntityTypeFilter>(); // access the data and automatically apply the filter/config var authors = allAuthors.List; In this case we specified a Token which will be processed by the system and replaced before the DataSource does it's internal work. Tokens use a LookUp System to identify a source (in this case QueryString) and then ask that source for the value (in this case the url parameter TypeName). Tokens have additional features like fallbacks (so [QueryString:Typename||BlogPost] would use BlogPost if the URL didn't have a parameter). Since you will usually prefer to do this kind of value-resolution in your C# code, tokens are rarely used here. Deprecated Samples The following code is old/deprecated and shouldn't be used any more. But since many older samples used this (pre v15) we're still including it in the docs. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; History Introduced in 2sxc 04.00 Massively enhanced in 2sxc 16 using Kit.Data which supports attach: and parameters: parameters"
  },
  "net-code/data-sources/use/guide.html": {
    "href": "net-code/data-sources/use/guide.html",
    "title": "Guide for Using DataSources in your C# Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Guide for Using DataSources in your C# Code you are here (click to zoom) - discover the stack .context-box-summary .datasource, .context-box-summary .process-razor-app, .context-box-summary .process-web-api-app { visibility: visible; } All data comes from DataSources. Either because something prepared the DataSources for your code, or because your code explicitly requested a DataSource from the API. Some DataSources are prepared and always available in Razor and WebApi, like Data, App.Data or App.Query[\"QueryName\"] And you can also get other DataSources in C# code, like Kit.Data.GetSource<EntityTypeFilter>() Step 1: Use a DataSource This is a basic example of an Employees Razor Template. It uses the Data DataSource which is always available in Razor and WebApi. For some magical reasons we'll explain later, the Data is a DataSource which in this case provides all the Employees which should be shown. @foreach(var person in AsList(Data)) { <li>@person.FullName (@person.Function)</li> } This demonstrates Some magic in the background prepared Data to contain what should be shown A simple foreach can be used to loop through the data The Data returns IEntity objects but we need dynamic objects so we can do things like @person.FullName, so we use AsList which wraps the items inside Data Now we can just output the values as needed, like @person.FullName Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Step 2: Understanding Prepared Data You will usually use DataSource objects in these common cases in both Razor and Custom WebApi: The Data object is a DataSource. It always has a Default stream (Data[\"Default\"]). Sotemites it has other streams like Data[\"ListContent\"] or Data[\"Categories\"] etc. The App.Data is a DataSource providing a stream for each content-type in this app, like App.Data[\"BlogPost\"] or App.Data[\"Tag\"] Every App.Query[...] is a DataSource. In the query you define which DataStreams it has. Eg. App.Query[\"SortedTags\"] would be a DataSource and typically the Default stream would contain all these tags. A query is actually a set DataSources doing one operation and passing it on to the next DataSource Step 3: Use The Data As Prepared In your code you'll usually work with these three sources which have been prepared for you: Data App.Data App.Query[...] If all you want is to loop through various lists already available, you'll usually work with AsList like this: @foreach(var item in AsList(Data)) { <li>@item.Title</li> } Note that AsList(Data) is a Shorthand for AsList(Data.List) or AsList(Data[\"Default\"].List): @foreach(var item in AsList(Data[\"Default\"].List)) { <li>@item.Title</li> } If your data-source Data, App.Data or App.Query[\"QueryName\"] has more than one stream, you would do this: @foreach(var item in AsList(App.Data[\"Categories\"])) { <li>@item.CategoryName</li> } Step 4: Create DataSource Objects in C#/Razor Code Sometimes you want to have full control over what a DataSource does or what parameters it's using. This is easy: // A source which can filter by Content-Type (EntityType) var allAuthors = Kit.Data.GetSource<ToSic.Eav.DataSources.EntityTypeFilter>( attach: App.Data, // Use the apps data as input parameters: new { TypeName = \"Author\" } // tell it to filter by \"Author\" ); // access the data and automatically apply the filter/config var authors = allAuthors.List; \uD83D\uDC49 Also read Set Parameters for DataSource Objects in C#/Razor Code Tip 2sxc 16 uses a new Kit.Data.GetSource(...) to get DataSources. Older code used CreateSource(...) which is still available, but deprecated. The new method is more powerful and we'll slowly migrate to that API only Step 5: Create a Query in Code by Attaching Data sources What the VisualQuery designer does is configure how DataSources are attached, mapping their in/out streams and adding parameters. You can also do this in code, but it's fairly advanced. You would usually want to do this, if you want to use a filter or something, but need to provide parameters which aren't available in the VisualQuery Designer. Here's a simple example: using ToSic.Eav.DataSources; // A source which can filter by Content-Type (EntityType) var allAuthors = Kit.Data.GetSource<EntityTypeFilter>( attach: App.Data, // Use the apps data as input parameters: new { TypeName = \"Author\" } // tell it to filter by \"Author\" ); // Sort by FullName var sortedAuthors = Kit.Data.GetSource<ValueSort>(attach: allAuthors, parameters: { Attributes = \"FullName\" }); // Sort by FullName descending var sortedAuthorsDesc = Kit.Data.GetSource<ValueSort>(attach: allAuthors, parameters: { Attributes = \"FullName\", Directions = \"desc\" }); // Sort by 2 fields var sortedAuthorsMult = Kit.Data.GetSource<ValueSort>(attach: allAuthors, parameters: { Attributes = \"Website,FullName\", Directions = \"asc, desc\" }); // sort by internal EntityId var sortedAuthorsById = Kit.Data.GetSource<ValueSort>(attach: allAuthors, parameters: { Attributes = \"EntityId\" }); The most important thing to notice is that each additional data-source uses the first allAuthors DataSource as the default upstream DataSource. So when these sort/filter or do something, they will only receive the data already filtered by the allAuthors. Read also Data Sources Data Streams Dynamic Code CreateSource<T>(...) .net API Demo-App showing some coding of DataSources Blog about creating your own data-source History Introduced in 2sxc 04.00 Changed API in 2sxc 16 to use Kit.Data.GetSource(...) instead of CreateSource(...) Changed API ni 2sxc 16 to use parameters: at construction time instead of setting variables on the object"
  },
  "net-code/data-sources/use/index.html": {
    "href": "net-code/data-sources/use/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Guide for Using DataSources in your C# Code"
  },
  "net-code/data-sources/use/linking.html": {
    "href": "net-code/data-sources/use/linking.html",
    "title": "Attaching / Linking DataSource Objects in C#/Razor Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Attaching / Linking DataSource Objects in C#/Razor Code you are here (click to zoom) - discover the stack .context-box-summary .datasource, .context-box-summary .process-razor-app, .context-box-summary .process-web-api-app { visibility: visible; } In many cases a DataSource expects data to be passed in. This is usually done by attaching it to another DataSource. Here is a simple example: using ToSic.Eav.DataSources; // A source which can filter by Content-Type (EntityType) var allAuthors = Kit.Data.GetSource<EntityTypeFilter>( attach: App.Data, // Use the apps data as input parameters: new { TypeName = \"Author\" } // tell it to filter by \"Author\" ); Note the attach: App.Data. This says \"attach App.Data as the input to this DataSource on the stream Default\". Tip This is the most common way to attach a DataSource to another DataSource. How Attaching Works Internally links are created using the IDataSourceLink. The code above simply works, because every DataSource and every DataStream is also a IDataSourceLinkable. This means it has a .Link property which contains the DataSourceLink. When using the simple linking as specified above, the thing (in this case App.Data) will simply provide it's Default Out-stream as the Default In-stream to the target. Attaching to/from Another Name Sometimes you may want to attach to a different stream. There are two Scenarios Link data from a different Out-Stream (not Default) Link the data to a different In-Stream (not Default) Linking to a different Out-Stream This is done by linking from the desired out-stream. So instead of doing attach: App.Data you would do attach: App.Data[\"MyStream\"]. Linking to a different In-Stream This is done by renaming the target stream on the link, like this: attach: App.Data.Link.Rename(inName: \"Fallback\") The example above would attach the data not to the Default but to the stream Fallback. The Link property has all the commands needed for renaming etc., which is why you need to add .Link before calling Rename(...). Tip The IDataSourceLink API is fluent, functional and immutable. As such anything you write will only affect this use, and not really rename anything. Attaching Multiple DataSources Since any .Link provide a link, you can chain multiple links together like this: // First get the root data source - the App with all data var appDs2 = Kit.Data.GetAppSource(); // Now create a Type-Filter and tell it to only keep Books / Authors var books2 = Kit.Data.GetSource<EntityTypeFilter>(attach: appDs2, parameters: new { TypeName = \"Books\" }); var authors2 = Kit.Data.GetSource<EntityTypeFilter>(attach: appDs2, parameters: new { TypeName = \"Persons\" }); // The following lines are just spread for easier documentation // Usually you would write in inline var dataSourceLinks2 = books2.Link // Get the link to the books .Add(authors2.Link // Add the author2 link .Rename(inName: \"Stream2\" // but rename the link so it's attached as \"Stream2\" ) ); var merged2 = Kit.Data.GetSource<StreamMerge>(attach: dataSourceLinks2); History Introduced in 2sxc 16.00"
  },
  "net-code/data-sources/use/query-parameters.html": {
    "href": "net-code/data-sources/use/query-parameters.html",
    "title": "Set Parameters for Queries in C# | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Set Parameters for Queries in C# you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } If a Query has been configured to use Parameters then your C# code can set these parameters before running the query. This uses the Params LookUp #todoc - explain how it's configured to use parameters In a Razor or WebApi file, you would write something like this: var allPosts = App.Query[\"AllBlogPosts\"]; allPosts.Params(\"Category\", \"Web\"); var posts = allPosts[\"Default\"]; var dynPosts = AsList(posts); Warning Query objects are single use - which is an internal optimization for reliable, rapid access. So if you retrieve various streams, the query still only executes once. But if you set a parameter after running the query, you will get an error, unless you call Reset() first. See the next example: var query = App.Query[\"AllBlogPosts\"]; query.Params(\"Category\", \"Web\"); var webPosts = AsList(query); // this would result in an error // allPosts.Params(\"Category\", \"IT\"); // this works query.Reset(); query.Params(\"Category\", \"IT\"); var itPosts = AsList(query); History Params was introduced in 2sxc 10.22"
  },
  "net-code/data/index.html": {
    "href": "net-code/data/index.html",
    "title": "Data in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data in 2sxc 2sxc has a lot of powerful features to help you do amazing stuff, but it all starts with data. This section/guide should help you get familiar with the basics of data in 2sxc. you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } .context-box-summary .data-all, .context-box-summary .prepare-all { visibility: visible; } There is a lot of magic happening in the background to: Ensure that a template (usually Razor) gets the correct data by default Give your code access to all kinds of Settings and Resources Provide APIs to let you retrieve any necessary data Best Start with Tutorials Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Kinds of Data Typically the system will have these kinds of data: Data based on Entities (items from the current App) Configuration / Global data such as Settings and Resources Context Data such as the current User, the current Page, etc. External data retrieved from SQL, CSV, SharePoint, etc. Where Data Comes From Data for your Code can come from various sources. Read about Where Data Comes From. Data Objects: DynamicEntity, TypedItems and Entity It helps to understand the difference between Dynamic Entities and Entities. APIs and Conversion Commands Read about it in Dynamic Code API TODO: MORE"
  },
  "net-code/data/linq-datasource.html": {
    "href": "net-code/data/linq-datasource.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to: Querying Data and Data Sources with code and LINQ"
  },
  "net-code/data/linq-guide.html": {
    "href": "net-code/data/linq-guide.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to: Guide to Working with LINQ and 2sxc/EAV Data"
  },
  "net-code/data/linq/index.html": {
    "href": "net-code/data/linq/index.html",
    "title": "Use LINQ with Dynamic Data in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use LINQ with Dynamic Data in Dynamic Code LINQ (Language Integrated Query) from Microsoft is a highly efficient API to quickly sort, filter and reorganize list of data. It's built into .net. You probably want to check out one of the following: Tutorials Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. LINQ Tutorials on 2sxc.org 2sxc LINQ Docs Guide to Working with LINQ and 2sxc/EAV Data Querying Data and Data Sources with code and LINQ Microsoft Docs LINQ in the Microsoft Docs"
  },
  "net-code/data/linq/linq-dynamic.html": {
    "href": "net-code/data/linq/linq-dynamic.html",
    "title": "Querying Data and Data Sources with code and LINQ | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Querying Data and Data Sources with code and LINQ To get started, we recommend you read the LINQ Guide and play around with the Razor Tutorial App These common (extension) methods can be used on lists from 2sxc data streams (they all inherit from types implementing IEnumerable): .Where() - filter a list (IEnumerable) based on a specific criteria .Any() - returns true if any of the elements matches a criteria .OrderBy() / .OrderByDescending() - order a list (IEnumerable) by a specific field .First() / .Last() - get first or last element in the list .Select() - transform list into a new list, selecting specific field(s) .Take() / .Skip() - paging functions .Count() - count number of elements .IndexOf() - find index of a specific element in the list For a full list of all System.Linq methods, check out the methods of IEnumerable Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Using Statements As explained in the guide we recommend the following using statements in Razor: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; Where Filter a list (IEnumerable) based on a criteria. Example: Basic filter of a list by string var items = AsList(Data[\"Default\"]); items = items.Where(p => p.Name == \"Chuck Norris\"); // items now contains only items which have \"Chuck Norris\" as name property Any Returns true if any of the elements matches a criteria. var items = AsList(Data[\"Default\"]); var containsChuckNorris = items.Any(p => p.Name == \"Chuck Norris\"); // if containsChuckNorris is true, at least one element has name \"Chuck Norris\" Here's another Any - to see if a relationship contains something. It's a bit more complex, because Razor needs to know what it's working with: // filter - keep only those that have this Category // note that the compare must run on the EntityId because of object wrapping/unwrapping postsToShow = postsToShow .Where(p => (p.Categories as List<dynamic>) .Any(c => c.EntityId == ListContent.Category[0].EntityId)) OrderBy / OrderByDescending Order a list (IEnumerable) by a specific field. var items = AsList(Data[\"Default\"]); items = items.OrderBy(p => p.Name); // items are now ordered by property \"Name\" First / Last Get first or last element of the list. var items = AsList(Data[\"Default\"]); var first = items.First(); // contains the first element var last = items.Last(); // contains the last element Select Transform list into a new list, selecting only specified field(s). var items = AsList(Data[\"Default\"]); var names = items.Select(p => p.Name); // names is a list of all names Take / Skip Paging functions: Take only n elements, skip m elements var items = AsList(Data[\"Default\"]); items = items.Skip(10).Take(10); // Skips the first 10 elements and select only 10 Count Count number of elements in a list. var items = AsList(Data[\"Default\"]); var count = items.Count(); // contains the number of elements in the list IndexOf Find index of a specific element in the list. @{ var items = AsList(Data[\"Default\"]); } @foreach(var item in items) { <h1>Item number @items.IndexOf(item)</h1> }"
  },
  "net-code/data/linq/linq-guide.html": {
    "href": "net-code/data/linq/linq-guide.html",
    "title": "Guide to Working with LINQ and 2sxc/EAV Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Guide to Working with LINQ and 2sxc/EAV Data In many cases you will want to sort, filter or group some data, or quickly check if any data was found. When using Razor or working in WebApi, this is best done with LINQ. This guide will assist you to get everything working. For a more API-oriented documentation, see DotNet Query LINQ. We also recommend to play around with the Razor Tutorial App Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. LINQ Basics The way LINQ works is that the namespace System.Linq contains a bunch of extension methods like .Count(), .Where(...) and more. So to use LINQ you need to add a @using statement to razor or just using in a WebApi class. Here's a simple razor example: @using System.Linq; @{ var newestPosts = AsList(App.Data[\"BlogPost\"]) .OrderByDescending(b => b.PublicationDate) .Take(3); } This demonstrates: adding the using statement getting all the BlogPost items using App.Data[\"BlogPost\"] converting it to a list of dynamic objects which will allow the nice syntax using AsList(...) sorting these with newest on top using .OrderByDescending(...) on the property PublicationDate keeping only the first 3 using .Take(3) it also shows how placing the parts on separate lines makes the code easier to read Important: Working with LINQ and dynamic objects LINQ needs IEnumerable<...> Before we continue, it's important that you really understand that LINQ commands are stored as extension methods of IEnumerable<T>. So this works: @using System.Linq; @{ var list = new List<string> { \"word\", \"word\" }; var x = list.First(); } ...whereas this does not: @using System.Linq; @{ var y = 27.First(); } This sounds obvious, but there's an important catch: if the compiler doesn't know that something is an IEnumerable, it will not even try to use the LINQ extension methods, because it doesn't know that it can. So let's look at that... LINQs Problems with dynamic objects #1 Here's an example that would fail: @using System.Linq; @{ dynamic list = new List<string> { \"word\", \"word\" }; var x = list.First(); } The only difference to before is that list ist now dynamic. It contains the same object, but the compiler doesn't treat it that way. In Razor, we use dynamic objects all the time, where we run into this problem. Here's an example which fails: @using System.Linq; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !b.Authors.Any()); } Internally the b.Authors returns a list of authors, but the compiler doesn't know this, since it's treated as a dynamic object. You would get an error. To solve this, we must tell the compiler that b.Authors is an IEnumerable, like this: @using System.Linq; @using System.Collections.Generic; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !(b.Authors as IEnumerable<dynamic>).Any()); } But let's be honest - it's ugly, long and prone to typos. Especially in a complex query where you could have many of these. So we recommend to define a shorthand for it, like this: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !(b.Authors as Dynlist).Any()); } LINQs problem with dynamic objects #2 LINQ methods often have multiple signatures. This means the same command can be written in different ways and with different parameters. To detect the right method, the compiler needs to know the data-types used in the parameters. This causes problem with dynamic objects because the compiler doesn't know what it is until runtime. Check this out: @using System.Linq; @{ var dogString = \"dog\" dynamic dogDyn = \"dog\"; var list = new List<string> { \"dog\", \"cat\", \"hound\" }; var x = list.Contains(dogString); // this works var x = list.Contains(dogDyn); // this fails } To fix this, we must tell the compiler it's an object: @using System.Linq; @{ dynamic dynDog = \"dog\"; var list = new List<string> { \"dog\", \"cat\", \"hound\" }; var x = list.Contains(dynDog as object); } The above example is a bit trivial but here's a real life example, taken from the 2sxc razor tutorial: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ var persons = AsList(App.Data[\"Persons\"]); var books = AsList(App.Data[\"Books\"]); var booksWithAwardedAuthors = books .Where(b => (b.Authors as Dynlist) .SelectMany(a => a.Awards as Dynlist) .Any() ); var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(b as object) ); } LINQs problem with dynamic object #3 The last bit has to do with how dynamic objects are built, since they are usually wrapper-objects to help write nicer template code. As wrappers, they are different objects every time. This shows the problem: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ // this is just the data object, \"@bookData.Author\" wouldn't work var bookData1 = App.Data[\"Books\"].First(); var bookData2 = App.Data[\"Books\"].First(); // this is now a dynamic object, allowing @bookDyn1.Author\" var bookDyn1 = AsList(bookData1); var bookDyn2 = AsList(bookData2); var dataIsSame = bookData1 == bookData2; // true var dynIsSame = bookDyn1 == bookDyn2; // false before 2sxc 9.42 } This doesn't sound like a big deal, but it is. Look at this code from the example above: var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(b as object) ); The .Contains(...) clause receives a variable b which is actually the dynamic wrapper, and will not be the same as the dynamic wrapper of dynamic wrappers given in booksWithAwardedAuthors. So contains would always say \"nope, didn't find it\". Solving the comparison / equality problem requires the underlying wrapper object to tell the .net framework, that ==, != and a few internal methods must work differently. 2sxc 9.42 does this, so the above code would actually work in 2sxc 9.42, but not in previous versions. If another system gives you dynamic objects, you will probably have to write it like this: // this example is for non-2sxc objects or 2sxc before 9.42 var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(bookWithAward => bookWithAward != null && bookWithAward.SomeProperty == b.SomeProperty) ); LINQs problem with boolean null-objects In many cases, dynamic objects could have a property like Show which could be a boolean, but it could also be null. So this could cause an error: var show = links.Where(x => x.Show); To fix this, the easiest way is to really compare it with true or false as you want, each way will result in treating the null as the opposite (so you decide if null should be yes or no): @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; Dynlist list; list = links.Where(x => x.Show == true); // take true, skip false & null list = links.Where(x => x.Show != true); // take false & null, skip true list = links.Where(x => x.Show == false); // take false, skip true & null list = links.Where(x => x.Show != false); // take true & null, skip false list = links.Where(x => x.Show == null); // take null, skip true & false Read also, Demo App and further links LINQ API Docs Razor Tutorial App showing all kinds of Queries History Guide created 2019-03"
  },
  "net-code/data/object-entity.html": {
    "href": "net-code/data/object-entity.html",
    "title": "Entity Objects | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Entity Objects All content-items in the EAV database of 2sxc are internally handled as Entity objects with the interface IEntity. When using content-items in Razor-Templates and WebAPIs you usually don't care about this, as you will use it as a IDynamicEntity. But there are some advanced cases where you need to look deeper into the object - maybe to check if a translation exists in another language, or if the value is blank because it's null, or an empty string. In this case you'll need to look at the internals, the IEntity. To learn more about the differences, check out DynamicEntity vs Entity Using the IEntity Interface Just a short piece of code to show how it would work (but not usually recommended). // This example shows how to get the link as stored in the data // without converting page:74 to the real link var languagePreference = [\"de\", \"en\"]; var autoResolveLinks = false; var rawLink = AsEntity(Content).GetBestValue(\"Link\", languagePreference, autoResolveLinks); // Hard-core accessing the internal data structure IEntity entity = AsEntity(Content); Dictionary<string, IAttribute> attribs = entity.Attributes; IAttribute titleMultiLanguage = attribs[\"Title\"]; string attType = titleMultiLanguage.Type; IEnumerable<IValue> titleVals = titleMultiLanguage.Values; IValue firstTitle = titleVals.First(); string firstString = firstTitle.ToString(); IEnumerable<ILanguage> langAssignments = firstTitle.Languages; //etc. When would You need to work with Entity objects For Razor and WebAPI these are edge cases, but they are real: The DynamicEntity will automatically resolve links like page:72 and give you http://.... In rare cases you may need to actually get page:72 and for this you need to convert back to Entity. If you want to explicitly figure out what languages have been translated on a value To find out more about the underlying Content-Type (like to list the fields) If the entity is Metadata and you want to know what it's assigned to If the entity has Metadata and you want to get that Read also Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. In case you feel like you really need to know more about the real Entity objects, check out these things: IEntity API AsEntity(...) Data Object Types History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00 Added Value and Value<T> as well as Parents() and Children(...) in 09.42. Note that Value does not do the same thing as GetBestValue."
  },
  "net-code/data/object-types.html": {
    "href": "net-code/data/object-types.html",
    "title": "Data Object Types | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data Object Types When coding with 2sxc data, there are three common data object types: DynamicEntity Entity TypedItem (new/WIP v16.01) There are also some typical data objects for working with file/assets (not documented here): IAsset - see IAsset IFile - see IFile IFolder - see IFolder Dynamic Entities are simple, dynamic objects that allow you to write template with any property you believe the data should have, like @person.FirstName etc. They will automatically pick the right language and do a lot of magic \uD83E\uDDD9‍♂️ in the background. Entities are strong-typed objects for complex work, but getting values is much more difficult. You usually don't need this, but it's important that you know this exists. TypedItem is a new type of object which is still in development. It's a strong-typed object which is very similar to the DynamicEntity, but has a few advantages. It's still in development. This piece of code shows why you usually don't want to use the IEntity and will prefer the IDynamicEntity instead. // The easy way, using the content-item as a DynamicEntity var titleFromDynamic = Content.Title; // The hard way, what actually happens internally var languagePreference = [\"de\", \"en\"]; var autoResolveLinks = true; var contentEntity = AsEntity(Content); var titleFromEntity = contentEntity.GetBestValue(\"Title\", languagePreference, autoResolveLinks); As you can see, the internals provide a lot of information about the underlying data - things you usually don't care about, but in rare cases may be important. Conversion Each type can be converted to the other type using helpers like AsDynamic(...), AsList(...) and AsEntity(...). The APIs are explained here Dynamic Code API. Tip In most cases you'll always use Dynamic Entities and if you're not sure whan an object is, just run it through AsDynamic(...). Conversion Examples This is just a bit of code so you can see how to convert back and forth. You usually won't care too much about this and not do this. Note that this is a very advanced topic, and you'll need Visual Studio Intellisense to get this done reasonably. Since you'll figure it out fairly quickly, we won't document it in detail here. // assume that you have a DynamicEntity like Content var entity = AsEntity(Content); // assume that you have a DataStream with Entities... @foreach(var postEntity in Data[\"Default\"]) { var postDyn = AsDynamic(postEntity); // postEntity is a IEntity // postDyn is a DynamicEntity } // but this is easier - convert the whole list @foreach(var post in AsList(Data[\"Default\"])) { var postEnt = AsEntity(post); // do something with the @post here, it's a DynamicEntity // ...or with postEnt, it's an IEntity } Read also Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Dynamic Entity Objects Entity Objects History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00 Added Value and Value<T> as well as Parents() and Children(...) in 09.42. Note that Value does not do the same thing as GetBestValue."
  },
  "net-code/data/origins.html": {
    "href": "net-code/data/origins.html",
    "title": "Where Data Comes From | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .prepare-all { visibility: visible; } Where Data Comes From From a developer perspective you have three kinds of Data: App Data Instance Data Code Retrieved Data In addition you have Settings and Resources: Configuration & Settings Resources And you have Context information: MyContext / CmsContext MyPage MyUser MyView etc. App Data The complete App Data is always available in these objects: App The current App with Settings, Resources, Path information and more. App.Data All the data of the current app for immediate use, fully cached in memory of the web server. App.Query Queries which were created using VisualQuery and can be run to access prepared data. Instance Data Note Instance specific data belongs to the module-instance on the page, either because it was added manually as Content or because the View of the module-instance uses a Query. Best read about App vs. Instance Data and Where Data Comes From If the View is configured for manual content-editing or uses a Query then Instance Data is automatically prepared in these objects: Content The primary and often the only content-items for this template. Content.Presentation Can contain additional presentation settings for this content, like how to format it. Data One or more Streams (lists) of zero-or-more content items Header The header data if the template expects to be a list and also needs a title or intro. Header.Presentation Can contain additional presentation settings for the header, like how to format it. Code Retrieved Data Your code can also retrieve data using normal C# code to do things like Get lists of files from ADAM or the file system Read data from SQL Manually parse CSV files or access external Web Services Use DataSources to get SQL, CSV or other data Configuration and Settings Configuration is usually found on specific objects which are configured. There are three types: View Configuration App Configuration Feature activations Settings usually affect templates / Razor or C# WebAPIs. They are usually configured at various levels like on the View, App, Site or Global. C# code will usually get these settings from the Settings object which consolidates all the settings. \uD83D\uDC49 See Settings Resources Resources are meant to provide translated labels, logos etc. You can configure them at View, App, Site or Global level. \uD83D\uDC49 See Resources History Introduced in 2sxc v1 App.Data added ca. 2sxc 6 App.Query added ca. 2sxc 7 Settings and Resources added in 2sxc 12"
  },
  "net-code/data/typed/index.html": {
    "href": "net-code/data/typed/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Typed Data aka ITypedItem"
  },
  "net-code/data/typed/mocking.html": {
    "href": "net-code/data/typed/mocking.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Mocking Typed Data"
  },
  "net-code/data/typed/models.html": {
    "href": "net-code/data/typed/models.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Strictly Typed Data Models Guide (new v17.02)"
  },
  "net-code/debug/index.html": {
    "href": "net-code/debug/index.html",
    "title": "2sxc Insights for Debugging Server-Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Insights for Debugging Server-Code This should give you some minimal guidance into debugging 2sxc. You have the following tools at your disposal: 2sxc Insights is a real-time log of what's happening on each request. You can access it through the admin-toolbar (rotate the more-button till you see a speedometer and click on it). This is the most powerful and in-depth system which also gives you insights when no errors are thrown, but you expect different results. Dnn Event Log are a standard part of Dnn and give you error details when things break. Note that our documentation is not complete, but you should read the Blog Post about 2sxc Insights \uD83D\uDC49 Here's more about 2sxc Insights on the Server This may Also be Helpfull Debug what's happening in the Network F12 is one of your most important friends when debugging what's happening. Watch the chrome-console for network trafic and JS errors. Debug Client Side Code 2sxc Insights has a client-side implementation as well. Open the F12 console and you'll see some messages that you can use $2sxc.insights() to see what's happening in the browser. Just follow the instructions shown as you call those functions in the console. History Introduced 2sxc Insights (server-side) v9.31 Major enhancements in v10.22 Shortlink: https://go.2sxc.org/insights"
  },
  "net-code/debug/insights.html": {
    "href": "net-code/debug/insights.html",
    "title": "2sxc Insights on the Server | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Insights on the Server The Server Insights gives you a lot of internal information such as Logs of the latest modules being rendered or WebAPI calls Global Content-Types which are loaded Cache states Internal memory with all the data ...and way more. Open Server Insights The quick way to open them, which goes directly to the Logs is with the dashboard icon on the toolbar (only available for super users): From here you can also click on this to get to the insights home. The other way to open it is using the Apps Administration and opening the Insights from there. 2sxc Insights Logs The logs show you what happens on each request. You typically need it to figure out things like How long did the entire work take How long did a specific step in the code need What values were passed around - especially when running into errors Errors and exceptions which we don't show to the user but want to see as a debugger It looks like this: From here you can see all kinds of logs what is happening on the server. Here's a list showing the some Module-Render logs: ...and here a view of the Details, showing that it took 3ms to render this block: Read also 2sxc Insights for Debugging Server-Code History Introduced 2sxc Insights (server-side) v9.31 Major enhancements in v10.22"
  },
  "net-code/dependency-injection/dnn.html": {
    "href": "net-code/dependency-injection/dnn.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Dependency Injection in Dnn Skins and Modules"
  },
  "net-code/dependency-injection/index.html": {
    "href": "net-code/dependency-injection/index.html",
    "title": "Depedency Injection in 2sxc and EAV | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Depedency Injection in 2sxc and EAV Dependency Injection is a way to structure applications and to get Services or Helpers in your code. \uD83D\uDC49 We suggest you read the introduction to Dependency Injection How Can I Use Dependency Injection in Razor? Previously this was reserved for internal use. Starting in 2sxc v11.11 all Razor classes have a command called GetService. This is how your code would get a service: @inherits Custom.Hybrid.Razor14 @Kit.Page.AddOpenGraph(\"video\", \"https://2sxc.org/videos/intro.mp4\"); \uD83D\uDC49 Read more about GetService in the docs or in the GetService API. How Can I Use Dependency Injection in WebAPIs? Just like with with Razor, 2sxc 11.11 added the same GetService to all WebAPIs. How Can I Use Dependency Injection in Dnn Modules and Skins \uD83D\uDC49 Dependency Injection in Dnn Skins and Modules How Can I Use Dependency Injection in Oqtane \uD83D\uDC49 Dependency Injection in Oqtane Services My Code May Need You can get just about anything from 2sxc. The most common services you'll request as of 2sxc 12 are in the ToSic.Sxc.Services namespace. History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/dependency-injection/introduction.html": {
    "href": "net-code/dependency-injection/introduction.html",
    "title": "What is Dependency Injection? | 2sxc 19 for Dnn and Oqtane",
    "keywords": "What is Dependency Injection? Dependency Injection is a way to structure applications and to get Services or Helpers in your code. Tip When an application becomes advanced it becomes more difficult to get Services and Helpers because these may also rely on other Services and Helpers to function. Dependency Injection makes sure that you don't need to know about the sub-dependencies, and just work with what you need. Most advanced solutions today use Dependency Injection or Inversion of Control (IoC) to handle this problem. The concept builds on two core parts: There is a shared Service Provider which can give me any Service I need Every piece of code uses this Service Provider to fetch everything it needs In .net Core and .net MVC this is a standard thing everybody learns early on (even though they probably don't understand it \uD83D\uDE09). But in the .net Classic it was not so common, so older developers tend to not use it, so here some more details to round off the picture how this works in .net: .net provides an IServiceProvider which is this shared ServiceProvider. At application start-up all parts & services are registered and there are specifications if they should be shared (singleton), shared-per-http-request (scoped) or recreated for each use (transient). All parts & services in turn must also get their dependencies from this ServiceProvider. This happens in 2 ways Either they have a constructor which lists all their dependencies, like public MyClass(ICmsContext context) - in this case the ServiceProvider will automatically fetch the ICmsContext when the MyClass is created. Or they depend on the service provider to generate new objects later on, using public MyClass(IServiceProvider sp) and later running things like var context = sp.GetService<ICmsContext>(). This is common in scenarios where you may need multiple separate objects (like to generate a list of objects which again need dependencies). Or they request Lazy dependencies - which are heavier objects that are maybe not used, using public MyClass(Lazy<ICmsContext> contextLazy). These are not automatically created, but will be created if they are used. Or there is a Factory master-object which creates objects and adds their dependencies later on. This is how Razor in .net Core works. Using this setup anything can easily be requested when needed, and even if it needs dependencies which again have sub-dependencies, all this is automatically taken care of without the final code having to know about the structure. This also has 2 more important benefits: Internals can easily change, but the code using a service doesn't need to be updated It's easy to replace parts of the system without affecting the code itself. For example, 2sxc has different Url-Resolvers in Dnn and Oqtane, but your code doesn't need to know about this History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/dependency-injection/oqtane.html": {
    "href": "net-code/dependency-injection/oqtane.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Dependency Injection in Oqtane"
  },
  "net-code/dynamic-code/as-adam.html": {
    "href": "net-code/dynamic-code/as-adam.html",
    "title": "AsAdam(...) Command | 2sxc 19 for Dnn and Oqtane",
    "keywords": "AsAdam(...) Command Note ADAM is the Automatic Digital Asset Manager. It manages files (Assets) for content in 2sxc. The files are managed so that they really belong to the item they are used in. Read more about ADAM When a content-item has a Library field (see Field Input-Type hyperlink-library) your code needs to get a list of all the files and folders of that field. For example to show galleries. This is where AsAdam(...) comes in. It gives you the ADAM parts of this field. ⚡ The official API docs. Basically all you need for AsAdam(...) is The Content Item (Entity or DynamicEntity) The field name of which you want the Adam objects As a result you'll get an IFolder object with which you can get all files in the folder or subfolders. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Example This example is taken from the Fancybox Gallery App @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; <div class=\"ga-wrapper\"> <div class=\"ga-albums row\"> @foreach (var album in AsList(Data)) { var images = AsAdam(album, \"Images\").Files as Dynlist; var albumThumbUrl = Text.Has(album.AlbumThumbnail) ? album.AlbumThumbnail : images.First().Url; <div class=\"ga-album col-12 col-sm-6 col-md-6 col-lg-4\" @Edit.TagToolbar(album)> <a href='@Tags.SafeUrl(Link.To(parameters: \"mid/\" + Dnn.Module.ModuleID + \"&album=\" + album.Path))'> <div class=\"ga-img\"> <div class=\"overlay\"> <div class=\"ga-album-title\"><h5 class=\"ga-title\">@album.Title</h5></div> <div class=\"ga-files-count\"><span class=\"badge badge-pill badge-dark float-end\">@images.Count()</span></div> </div> <img class=\"img-fluid\" src='@Tags.SafeUrl(albumThumbUrl + \"?w=720&h=500&mode=crop&scale=both&quality=80\")' alt=\"@album.Title\" /> </div> </a> </div> } </div> </div> We suggest you check out some apps which use ADAM to see how they work. Also Read ADAM - Automatic Digital Asset Management ToSic.Sxc.Adam check out AsAdam(...) in the RazorComponent and ApiController History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "net-code/dynamic-code/as-dynamic-string.html": {
    "href": "net-code/dynamic-code/as-dynamic-string.html",
    "title": "AsDynamic({ \"Some\": \"Json-String\"}) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "AsDynamic({ \"Some\": \"Json-String\"}) 2sxc v10.20 introduced another cool helper. It takes any JSON string and gives you a dynamic object to use in your code. The most common use is in GPS fields, where the data is stored as {\"Lat\": 0.0, \"Long\": 0.0}. But you can use it for so much more. ⚡ The official API docs. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Example // assume Address is a Dynamic Entity with a Gps property var coords = AsDynamic(Address.Gps); var lat = coords.Lat; var long = coord.Long; Read more: Check out the API Docs of e.g. Razor12 History Introduced in 2sxc 10.20"
  },
  "net-code/dynamic-code/as-dynamic.html": {
    "href": "net-code/dynamic-code/as-dynamic.html",
    "title": "AsDynamic(...) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "AsDynamic(...) To make a complex system like the EAV work, the real objects like the IEntity must very very smart and complicated. This would not be fun to use in razor, where you would prefer a simple @Something.Property syntax. This is where AsDynamic(...) comes in. ⚡ The official API docs. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to Use If you have an IEntity or you're not sure if it's either an IEntity or a IDynamicEntity, just pass it through AsDynamic(...) and the result will be a IDynamicEntity. You can then access the properties with the simple thing.Property syntax. @inherits Custom.Hybrid.Razor12 @{ var unknown = App.Data[\"Default\"].List.First(); // this will be an IEntity var myThing = AsDynamic(unknown); } <div>@myThing.FirstName</div> Note Results of AsDynamic are dynamically typed, so you can write .Anything behind it. But the data coming out of it is strong-typed, so Content.Birthday is a real date object. Tip IDynamicEntity objects also have some additional properties like EntityId or Parents(...). Check out the API docs. How it works AsDynamic has many signatures accepting a variety of input values. It then returns an dynamic object which is either a IDynamicEntity. These are the things AsDynamic can process: a IEntity - this will return a single IDynamicEntity IDynamicEntity - will return the same IDynamicEntity this option exists just so you don't have to pre-check what you pass in, making it easier to code for you a string containing JSON - will return a dynamic object added in 2sxc 10.20.06 Tip To use the latest features of 2sxc 12+, make sure your razor file begins with the line @inherits Custom.Hybrid.Razor12 Otherwise your Razor templates is based on the default, older component code. Reversing AsDynamic with AsEntity Check out these docs: AsEntity(...) - Get the Underlying Data Obsolete use of AsDynamic() for Lists Warning In previous versions of 2sxc you'll find AsDynamic(...) also used to convert lists (IEnumerable or DataStreams) into lists. This caused a lot of issues with dynamic code compilation, so in 2sxc 10.20 we introduced AsList(...) for that use case. So if you find that kind of code, it works because... without @inherits Custom.Hybrid.Razor12 in the header, the old calls still work with @inherits Custom.Hybrid.Razor12 in the header, you must use AsList(...) History Introduced ca. in 2sxc 1 Modified/added signatures in 2sxc 7 Added the string and DataSource signature in 2sxc 10.20 Introduced AsList to make code more readable for lists 10.20"
  },
  "net-code/dynamic-code/as-entity.html": {
    "href": "net-code/dynamic-code/as-entity.html",
    "title": "AsEntity(...) - Get the Underlying Data | 2sxc 19 for Dnn and Oqtane",
    "keywords": "AsEntity(...) - Get the Underlying Data In most Razor and WebAPIs you will prefer to use Dynamic Entities allowing you to easily write code like @Content.FirstName. But in rare cases where you have a IDynamicEntity and want to access the real underlying IEntity in it's full complexity. This is where AsEntity(...) is used. ⚡ The official API docs. Tip AsEntity(...) reverses what AsDynamic(...) does. If you have an object or you're not sure if it's either an IEntity or a IDynamicEntity, just pass it to AsEntity(...) and it will detect either one. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Example: Type Information The Dynamic Entity has a property EntityType but this will only return a name like Person. If you need the full Content-Type definition, this is what you would do: // assume that person is a Dynamic Entity var personTypeName = person.EntityType; // string var personType = AsEntity(person).Type; // Will return the IContentType Example: Language Information If you want to really check in the code, what languages have been translated. This is very sophisticated, but this is kind of how you would do it: var personEntity = AsEntity(person); var attrName = personEntity[\"Name\"]; // this will return an IAttribute<string> object History Introduced ca. in 2sxc 1 Modified/added signatures in 2sxc 7"
  },
  "net-code/dynamic-code/as-list.html": {
    "href": "net-code/dynamic-code/as-list.html",
    "title": "AsList(...) - Magic Lists | 2sxc 19 for Dnn and Oqtane",
    "keywords": "AsList(...) - Magic Lists In razor you prefer a simple @Something.Property syntax. If you only have one item, you'll use AsDynamic(...). When you need a list to go through, you use AsList(...). ⚡ The official API docs. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How it works AsList has various signatures accepting a variety of input values. It then returns an IEnumerable<dynamic> object which is a List of IDynamicEntity objects. These are the things AsList can process: a List<IEntity> or IEnumerable<IEntity> - will return a List/IEnumerable of IDynamicEntity a List<DynamicEntity> or IEnumerable<IDynamicEntity> - will return the same thing again this option exists just so you don't have to pre-check what you pass in, making it easier to code for you a IDataStream - will return a List/IEnumerable of IDynamicEntity a IDataSource - will return a List/IEnumerable of IDynamicEntity of the \"Default\" stream a Tip To use the latest features of 2sxc 12+, make sure your razor file begins with the line @inherits Custom.Hybrid.Razor12 Otherwise your Razor templates is based on the default, older component code. History Introduced in 2sxc 10.20"
  },
  "net-code/dynamic-code/content.html": {
    "href": "net-code/dynamic-code/content.html",
    "title": "Content / Object | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Content / @Content Object The Content is a Dynamic Entity in all Dynamic Code (Razor and WebAPI). It contains the content-item assigned to this template. If the View is a list, then Content contains the first item in the list. Note that if the View is configured to be a list, then it may also have a Header. ⚡ The official API docs. Since it's a Dynamic Entity it carries all values as properties, like Content.Link etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Example Razor Code <div> @Content.Name </div> Content.Presentation Depending on the view configuration the Content can carry additional presentation information, for example how to format the title etc. This is available on Content.Presentation. The Presentation object is also a Dynamic Entity. <div class=\"@Content.Presentation.Highlight\"> @Content.Name </div> Demo Data Note that the View can be configured to contain demo data for both the Content as well as the Content.Presentation. In this case your template will receive data to show even if the editor has not added anything. History Introduced in 2sxc 1.0 Presentation added in this documented form ca. 2sxc 8"
  },
  "net-code/dynamic-code/create-instance.html": {
    "href": "net-code/dynamic-code/create-instance.html",
    "title": "CreateInstance(...) Command | 2sxc 19 for Dnn and Oqtane",
    "keywords": "CreateInstance(...) Command If you have external code you want to import you can use CreateInstance. ⚡ The official API docs eg. on Razor14. Important In RazorPro, ApiPro and CodePro we use GetCode(...) instead of CreateInstance(...). Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Example @inherits Custom.Hybrid.Razor12 @{ var helper = CreateInstance(\"_helpers.cshtml\"); var businessLogic = CreateInstance(\"BusinessLogic.cs\"); } @helper.ShowIntroduction <div> @businessLogic.CalculateSecretHash() </div> The code you will import is either another Razor page (_*.cshtml) or a C# code file (*.cs). Also Read Tutorial: Reuse Shared Code Apps Catalog - we suggest you check out some apps - almost all use this. History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "net-code/dynamic-code/create-source.html": {
    "href": "net-code/dynamic-code/create-source.html",
    "title": "CreateSource<T>() Command | 2sxc 19 for Dnn and Oqtane",
    "keywords": "CreateSource<T>() Command If you need to use a DataSource object in your code use CreateSource<T>() ⚡ The official API docs. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Simple Example @inherits Custom.Hybrid.Razor12 @{ // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; } Example Chaining DataSources @inherits Custom.Hybrid.Razor12 @{ // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // Sort by Fullname descending var sortedAuthorsDesc = CreateSource<ValueSort>(allAuthors); sortedAuthorsDesc.Attributes = \"FullName\"; sortedAuthorsDesc.Directions = \"desc\"; // access the data and automatically apply the filter/config var authors = sortedAuthorsDesc[\"Default\"]; } Read more about this in Data Sources (IDataSource) Note The type T mentioned above must be an IDataSource. The built in ones are usually in these namespaces: ToSic.Eav.DataSources ToSic.Sxc.DataSources ToSic.Sxc.Dnn.DataSources You can also create and compile your own DataSources, and then deploy the DLL to use in your code. Tip In most cases you will prefer to use VisualQuery to work with data, but sometimes this approach is neecssary. We suggest you check out some apps - almost all use this. Also Read Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "net-code/dynamic-code/get-service.html": {
    "href": "net-code/dynamic-code/get-service.html",
    "title": "GetService<T>() Command new in v11.11 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "GetService<T>() Command new in v11.11 If you want to do advanced stuff, you will want to ask for other global Services to help your code. 2sxc uses Depedency Injection to do this. \uD83D\uDC49 Read about Dependency Injection in 2sxc Use GetService<T>() to get this service. ⚡ The official API docs. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Two important services that require you to use GetService are IPageService Koi ICSS Also Read TODO: These docs are incomplete, as the feature is still new. History Introduced in 2sxc 11.11"
  },
  "net-code/dynamic-code/header.html": {
    "href": "net-code/dynamic-code/header.html",
    "title": "Header / Object | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Header / @Header Object The Header is a Dynamic Entity in all Dynamic Code (Razor and WebAPI). It's used on Views which are configured to have lists - and allows you to add information for the header or similar. So basicall List-Views have 0 or 1 Header and 0 or many Content items. If the View is not a list, the Header will not be available. ⚡ The official API docs. Since it's a Dynamic Entity it carries all values as properties, like Header.Link etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Example Razor Code <h2> @Header.Title </h2> Header.Presentation Depending on the view configuration the Header can carry additional presentation information, for example how to format the title etc. This is available on Header.Presentation. The Presentation object is also a Dynamic Entity. <h2 class=\"@Header.Presentation.Highlight\"> @Header.Title </h2> Demo Data Note that the View can be configured to contain demo data for both the Header as well as the Header.Presentation. In this case your template will receive data to show even if the editor has not added anything. History Introduced in 2sxc 1.0 under the name List which was confusing Changed to Header in ca. V10 (but List still works for compatibility) Presentation added in this documented form ca. 2sxc 8"
  },
  "net-code/dynamic-code/index.html": {
    "href": "net-code/dynamic-code/index.html",
    "title": "Dynamic Code API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dynamic Code API Every C# file in 2sxc is Dynamic Code as it's compiled on-the-fly and has a lot of helpers to work with Dynamic Data. you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } The following APIs are available on all 2sxc Dynamic Code. You can use this in: Razor WebAPI Controllers Helper Code files Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Instance Data in Dynamic Code Note Instance specific data belongs to the module-instance on the page, either because it was added manually as Content or because the View of the module-instance uses a Query. Best read about App vs. Instance Data and Where Data Comes From Content The primary and often the only content-items for this template. Content.Presentation Can contain additional presentation settings for this content, like how to format it. Data One or more Streams (lists) of zero-or-more content items Header The header data if the template expects to be a list and also needs a title or intro. Header.Presentation Can contain additional presentation settings for the header, like how to format it. App and App-Data Objects App The current App with Settings, Resources, Path information and more. App.Data All the data of the current app for immediate use, fully cached in memory of the web server. App.Query Queries which were created using VisualQuery and can be run to access prepared data. General Objects CmsContext Information about the system, page, module etc. Dnn The common Dnn object providing page, module, user information Edit Helper providing you with various edit-functionality like Toolbar(...) Link Helper to generate links, according to the Dnn-environment configuration Conversion Commands AsAdam(...) Gives you the ADAM parts (files, images, folders) of a field. AsDynamic(entity) - takes just about anything (an iEntity, a list of iEntities, a dynamic, ...) and casts it to a DynamicEntity AsDynamic(jsonString) AsList(listOfEntities) AsEntity(...) - takes just about anything (iEntity, DynamicEntity, list of that) and casts it to an iEntity Helper Commands provided by 2sxc CreateInstance(...) To create an object of a parsed CSHTML file, for example to then access methods of that code CreateSource<T>() Get a DataSource object of type T (like filters, sorting, etc.) GetService<T>() Get a Service to help you (using Dependency Injection) Important Notes Important Your code must inherit the correct base class to get this API. You'll find the correct base classes in the documentations for Razor and Web API."
  },
  "net-code/dynamic-code/object-cms-context.html": {
    "href": "net-code/dynamic-code/object-cms-context.html",
    "title": "This page has moved | 2sxc 19 for Dnn and Oqtane",
    "keywords": "This page has moved Moved to CmsContext in Dynamic Code ✨ new!"
  },
  "net-code/dynamic-code/object-data.html": {
    "href": "net-code/dynamic-code/object-data.html",
    "title": "Data / in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data / @Data in Dynamic Code What is Data A 2sxc instance is a running 2sxc-engine which is about to execute some code (Razor, Token or a web service) together with some content-items which should be used in this case. These content-items are provided to the code in an object called Data. 2sxc will decide what items to deliver, based on the situation. In most cases, a Dnn-Module will show a 2sxc-template, and the content-editor will manually add items to it using the normal web-UI. In this case, these items will be tied to this use-case and 2sxc will deliver them in the Data object. In other cases, the template (or view) will be configured to get data from a query configered elsewhere. In this case, all data retrieved in the query will be provided in the same Data object. There are also cases, where a template needs both queried data (like all categories) as well as content-items added manually. There are multiple easy ways of doing this todo - document later Note: if you want all data of a type, like \"Get me all Tag-items in the system\" you need to use App-Data. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Most common way to use the Data object In all Razor-templates and also the web-api files, the Data object is already created and ready to access. Here's a code example: <div class=\"app-blog\"> @foreach(var post in AsList(Data)) { // do something with the @post here } </div> the foreach will loop through all items of the data in the Stream Default - read more about streams below the var post is the inner variable containing the current item the AsDynamic will ensure that the items we're working with are easy to code with, because they are Dynamic Entities The Streams in a Data Object The data object can have multiple Streams, each containing a list of items. In most cases you'll just have the Default stream, which you can access using Data[\"Default\"]. Read more about streams in the Stream docs But you may also have additional streams, depending on what has been configured in the data-preparation stuff (usually a VisualQuery). For example, if you are working on a view showing one product and a menu with all possible categories, then your query may have these streams: Book (the current book, this stream has 1 item with the ID matching the ID in the URL) Categories (all categories in the system, sorted A-Z) The code would then look a bit like this: var book = Data[\"Book\"].FirstOrDefault(); // returns an IEntity Object var cats = Data[\"Categories\"]; // returns an IEnumerable of iEntity objects Or in most cases, because of the simpler syntax later on: var book = AsDynamic(Data[\"Book\"].FirstOrDefault()); // returns one dynamic entity var cats = AsList(Data[\"Categories\"]); // returns an IEnumerable of dynamic entities Changing what is provided by Data The main configuration of the template will determine, what data is initially provided to the template. Afterwards, other mechanisms can override / change this. Initial Sources Default type/list configuration - this can determine that 0, 1 or many items (of a certain type) are delivered if one or many are delivered, then the selection will be based on what the editor added to the module instance. VisualQuery - if the template has a query attached, this query will deliver the data Modifications to the source for the template The event CustomizeData can optionally completely reconfigure what Data contains in your code. Data Object API The Data object itself is actually a normal EAV IDataSource. So if you need to know more about the internals, read it up there. All other properties of the Data object are very special use only, so you probably shouldn't bother about them - which is why they are not documented here."
  },
  "net-code/dynamic-code/object-dnn.html": {
    "href": "net-code/dynamic-code/object-dnn.html",
    "title": "Dnn / Object in Dynamic Code ☢️ (Dnn only) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dnn / @Dnn Object in Dynamic Code ☢️ (Dnn only) The Dnn is a helper object which contains properties to access information about the current tab, portal, user, module etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use Here's a quick example of using the Dnn object in a Razor template: <!-- show the current users nice name --> @Dnn.User.DisplayName How it works There's not much to explain here, we're just providing the standard Dnn objects to the template. The Main Properties of the @Dnn Object These are the main properties: Module Portal Tab User The @Dnn.Module Properties The @Dnn.Module is of the type ModuleInfo. It has the following properties: Dnn.Module.AllModules Dnn.Module.AllTabs Dnn.Module.Border Dnn.Module.Cacheability Dnn.Module.CacheMethod Dnn.Module.CacheTime Dnn.Module.ContainerPath Dnn.Module.ContainerSrc Dnn.Module.DefaultCacheTime Dnn.Module.DesktopModule Dnn.Module.DesktopModuleId Dnn.Module.DisplayTitle Dnn.Module.EndDate - for show/hide Dnn.Module.Footer Dnn.Module.Header Dnn.Module.ModuleControl Dnn.Module.ModuleControlId Dnn.Module.ModuleDefID - note: large D Dnn.Module.ModuleDefinition Dnn.Module.ModuleID - probably the most used value, note the large ID Dnn.Module.ModuleName Dnn.Module.ModuleOrder Dnn.Module.ModulePermissions Dnn.Module.ModuleSettings Dnn.Module.ModuleTitle Dnn.Module.PaneModuleCount Dnn.Module.PaneModuleIndex Dnn.Module.PaneName Dnn.Module.ParentTab - a TabInfo, same as Dnn.Tab Dnn.Module.PortalID - note large D Dnn.Module.StartDate - for show/hide rules Dnn.Module.TabID - note large D Dnn.Module.TabModuleID - note large D Dnn.Module.TabModuleSettings Dnn.Module.UniqueId Dnn.Module.Visibility The @Dnn.Portal Properties The @Dnn.Portal is of the type PortalSettings. It has the following properties: Dnn.Portal.ActiveTab Dnn.Portal.AdministratorId Dnn.Portal.AdministratorRoleId Dnn.Portal.AdministratoRoleName Dnn.Portal.AdminTabId Dnn.Portal.CultureCode Dnn.Portal.Currency Dnn.Portal.Current - static method returning the current portal portal-settings Dnn.Portal.Default... (AdminContainer, AdminSkin, ControlPanelMode, etc.) Dnn.Portal.DefaultLanguage Dnn.Portal.DefaultModuleId Dnn.Portal.DefaultPortalContainer Dnn.Portal.DefaultTabId Dnn.Portal.Description Dnn.Portal.Email Dnn.Portal.EnableBrowserLanguage Dnn.Portal.EnableUrlLanguage Dnn.Portal.ExpiryDate Dnn.Portal.FooterText Dnn.Portal.GetProperty(string, string, cultureInfo, UserInfo, scope, boolean) - ? Dnn.Portal.GUID - notice all large letters Dnn.Portal.HomeDirectory Dnn.Portal.HomeDirectoryMapPath Dnn.Portal.HomeTabId - the root page Dnn.Portal.KeyWords Dnn.Portal.LoginTabId - where the normal login usually goes to Dnn.Portal.LogoFile Dnn.Portal.Pages Dnn.Portal.PortalAlias Dnn.Portal.PortalId - very important - notice the small d Dnn.Portal.PortalName Dnn.Portal.PortalSkin Dnn.Portal.RegisteredRoleId Dnn.Portal.RegisteredRoleName Dnn.Portal.RegisterTabId Dnn.Portal.Search... (various values like IncludeCommon, IncludeTagInfoFilter etc.) Dnn.Portal.SearchTabId Dnn.Portal.SiteLogHistory Dnn.Portal.SplashTabId Dnn.Portal.SSLEnabled Dnn.Portal.SSLEnforced Dnn.Portal.SSLURL - all caps Dnn.Portal.STDURL - all caps Dnn.Portal.SuperTabId Dnn.Portal.TimeZoneOffset Dnn.Portal.UserId Dnn.Portal.UserInfo Dnn.Portal.UserMode Dnn.Portal.UserQuota Dnn.Portal.UserRegistration Dnn.Portal.Users Dnn.Portal.UserTabId The @Dnn.Tab Properties The @Dnn.Tab is of the type TabInfo. It has the following properties: Dnn.Tab.ChildModules Dnn.Tab.ContainerPath Dnn.Tab.ContainerSrc Dnn.Tab.CultureCode Dnn.Tab.DefaultLanguageGuid Dnn.Tab.DefaultLanguageTab Dnn.Tab.Description Dnn.Tab.EndDate - for show/hide of this tab Dnn.Tab.FullUrl Dnn.Tab.HasChildren Dnn.Tab.IsDefaultLanguage Dnn.Tab.IsDeleted Dnn.Tab.IsNeutralCulture Dnn.Tab.IsSecure Dnn.Tab.IsTranslated Dnn.Tab.IsVisible Dnn.Tab.KeyWords Dnn.Tab.Level Dnn.Tab.LocalizedTabName Dnn.Tab.LocalizedTabs Dnn.Tab.Modules Dnn.Tab.PageHeadtext Dnn.Tab.Panes Dnn.Tab.ParentId Dnn.Tab.PermanentRedirect Dnn.Tab.PortalID - notice the large D Dnn.Tab.RefreshInterval Dnn.Tab.SiteMapPriority Dnn.Tab.SkinDoctype Dnn.Tab.SkinPath Dnn.Tab.SkinSrc Dnn.Tab.StartDate - for show/hide Dnn.Tab.TabID - the current Tab-number - notice the large D Dnn.Tab.TabName Dnn.Tab.TabOrder Dnn.Tab.TabPath Dnn.Tab.TabPermissions Dnn.Tab.TabSettings Dnn.Tab.TabType Dnn.Tab.Title Dnn.Tab.UniqueId - small \"d\" Dnn.Tab.Url The @Dnn.User Properties The @Dnn.User is of the type UserInfo. It has the following properties: Dnn.User.DisplayName Dnn.User.Email Dnn.User.FirstName Dnn.User.FullName Dnn.User.IsDeleted Dnn.User.IsInRole(string RoleName) Dnn.User.IsSuperUser Dnn.User.LastName Dnn.User.Membership - these are asp.net memberships, you probably don't need them Dnn.User.PortalId Dnn.User.Roles - these are Dnn roles Dnn.User.UserID - note the large D Dnn.User.Username History Introduced in 2sxc 1.0"
  },
  "net-code/dynamic-code/object-dynamic-model.html": {
    "href": "net-code/dynamic-code/object-dynamic-model.html",
    "title": "DynamicModel Object \uD83E\uDE92 (Razor only, new in v12) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "DynamicModel Object \uD83E\uDE92 (Razor only, new in v12) The DynamicModel object is used on sub-pages (which were rendered to the page using Html.Partial) to get the data which was passed as parameters. Tip This is an abstraction for PageData in Dnn and Model in Oqtane. Using DynamicModel lets you write Razor pages which will work on both Dnn and Oqtane. DynamicModel.anything Will get you a parameter passed to the page. It's a dynamic object, so Razor doesn't know what type it is. Sometimes you may want to explicitly type it. Here some examples of an inner-page which was called using parameters @{ var person = DynamicModel.Person; var name = DynamicModel.Name as string; var nameOrDefault = DynamicModel.Name ?? \"unknown\"; } \uD83D\uDC49 more examples in Html.Partial. History Added in 2sxc 12 to ensure identical syntax with Oqtane"
  },
  "net-code/dynamic-code/object-edit.html": {
    "href": "net-code/dynamic-code/object-edit.html",
    "title": "Edit / in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Edit / @Edit in Dynamic Code The Edit object tells you if the user is an editor and has a lot of features which are only useful in Razor. Because of this, it's documented here: Edit / Object in Razor / .net"
  },
  "net-code/dynamic-code/object-html.html": {
    "href": "net-code/dynamic-code/object-html.html",
    "title": "Object \uD83E\uDE92 (Razor only) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "@Html Object \uD83E\uDE92 (Razor only) The Html object is a .net helper from the framework. It's only available in Razor \uD83E\uDE92 and not in WebApis. Important Dnn and Oqtane have a different version of .net, so they Html object has more or less features depending on what framework you're using. Here we'll just document the important parts which will work on both Dnn and Oqtane @Html.Raw(string) This will put the string into the page and not escape the html. Example @{ var demo = \"<strong>hello!</strong>\"; } <div> @demo </div> <div> @Html.Raw(demo) </div> Will create this: <div> &lt;strong&gt;hello!&lt;/strong&gt; </div> <div> <strong>hello!</strong> </div> @Html.Partial(path) - v12 only This will render another razor file in the current location. Important @Html.Partial(...) is actually a newer command which would only work in Oqtane, but we back-ported it to the Dnn Razor implementation to make portable Razor possible. In Dnn it will actually call the old .net function @RenderPage(...). Example - this would be the main file: <h1>Some Title</h1> @Html.Partial(\"_intro.cshtml\") @Html.Partial(\"_intro.cshtml\") This would be the sub-file _intro.cshtml: <div>Greetings!</div> Result: <h1>Some Title</h1> <div>Greetings!</div> <div>Greetings!</div> @Html.Partial(path, data) - v12 only This is the same as Html.Partial(path) but allows you to add more data. Main file: <h1>Some Title</h1> @{ var preparedData = new { Name = \"iJungleboy\" }; } @Html.Partial(\"_intro.cshtml\", preparedData) @Html.Partial(\"_intro.cshtml\", new { Name = \"Daniel\" }) This would be the sub-file _intro.cshtml: <div>Greetings @DynamicModel.Name!</div> Result: <h1>Some Title</h1> <div>Greetings iJungleboy!</div> <div>Greetings Markus!</div> History Html.Raw existed since 2sxc 1.0 Html.Partial was added in 2sxc 12 to ensure identical syntax with Oqtane"
  },
  "net-code/dynamic-code/object-link.html": {
    "href": "net-code/dynamic-code/object-link.html",
    "title": "Page Moved | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Page Moved Moved to Link / Object in Dynamic Code"
  },
  "net-code/dynamic-code/objects/app/app-data.html": {
    "href": "net-code/dynamic-code/objects/app/app-data.html",
    "title": "App.Data / Object in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App.Data / @App.Data Object in Dynamic Code The App.Data object gives you immediate acccess to all data in the app, through the Data property. Basically you can use it as follows: Get All Data Items of a Content Type App.Data[\"ContentTypeName\"] will give you a stream of all entities of that type. In most cases you'll use an AsList(...) to use it efficiently in loops etc. because most of the razor templating will prefer a DynamicEntity to a pure IEntity-object. Here's an example: @foreach(var post in AsList(App.Data[\"BlogPost\"])) { @Html.Partial(\"_list-item.cshtml\", new { Post = post }) } note: this will give you all items, but you'll have to sort it using LINQ or other mechanisms. If you're not familiar with that, you're better of using App.Query[...] (see below). Edit App Data Content-Items In addition to giving access to all entities in this app, you can also create, edit and delete items using the App.Data object. The commands provided are: App.Data.Create(contentTypeName, values, userName) App.Data.Update(entityId, values, userName) App.Data.Delete(entityId, userName) You can read more about this in the App Data API Feature Create Metadata #todoc Read Metadata #todoc Demo App and further links #todoc History Introduced in 2sxc 05.05 Stable since 2sxc 06.00 Data-API was introduced in 2sxc 06.05"
  },
  "net-code/dynamic-code/objects/app/app-query.html": {
    "href": "net-code/dynamic-code/objects/app/app-query.html",
    "title": "App.Query / Object in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App.Query / @App.Query Object in Dynamic Code The queries you create in the app-configuration dialogs can do many things like filter certain items, order them and more. You will often just connect them to a template and visualize the result, by you can also use it in your code. Here's how: @foreach(var tag in AsList(App.Query[\"SortedTags\"])) { <li class='@(\"app-blog-tag\" + tag.ManualWeight)'> <a href='@Link.To(\"tag= \" tag.Tag)' title=\"@tag.Name\"> @tag.Name </a> </li> } Technically the App.Query is a IDictionary<string, IDataSource>, meaning that it's a dictionary using string identifiers (names), returning an IDataSource object. It's important to realize that a DataSource can deliver multiple streams of data - a bit like delivering multiple tables. Each stream has a name, and you must specify which stream you want to work with. In the above example, we're using the Default stream as defined with App.Query[\"SortedTags\"][\"Default\"]. Read also #todoc Demo App and further links #todoc History Introduced in 2sxc 05.05 Stable since 2sxc 06.00 Data-API was introduced in 2sxc 06.05"
  },
  "net-code/dynamic-code/objects/app/index.html": {
    "href": "net-code/dynamic-code/objects/app/index.html",
    "title": "App / object Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "App / @App object Dynamic Code The App object gives you full access to everything you need to know about the current App, including Path-info, access to all Data this App has, access to Settings and language Resources and more. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use Here's are two simple examples taken from the Blog App: <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" @Kit.Page.AssetAttributes()/> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" @Kit.Page.AssetAttributes()></script> @foreach(var tag in AsList(App.Data[\"Tag\"])) { <li class='@(\"app-blog-tag\" + tag.ManualWeight)'> <a href=\"@App.Settings.DetailsPage/tag/@tag.Tag\" title=\"@tag.Name\">@tag.Name</a> </li> } The <link... and <script... use the app-path to ensure that the file is correctly loaded, no matter what portal or app-name is currently valid. Here you can discover more about the optimizations. The loop iterates through all tags with the @foreach(var tag in AsList(App.Data[\"Tag\"])), creates <li> items and links these to a page defined in the App.Settings. How it works Whenever a 2sxc-instance is created to render a page or to deliver JSON data, the App object is created and prepared to deliver everything you need. It's very performant, because it doesn't actually get any data or run any queries unless these are accessed. App Properties The app-object uses the IApp interface (see code) has the following simple properties: AppId number, current App id AppGuid guid, internal use global id Configuration DynamicEntity, contains the configuration content-item Data IAppData, to access all App-data (see below) Folder string, storage folder name in portal/#/2sxc/... Hidden bool, info if the app cannot be selected in the UIs Name string, the app name Path string, the path as used in URLs in html PhysicalPath string, the path as used on the server C:... Query[\"QueryName\"] dictionary of queries (see below) Resources DynamicEntity, all the multi-language labels etc. (see below) Settings DynamicEntity, all the app-settings (see below) ZoneId number, current Zone ID (similar to PortalId) Using App Data (App.Data) Read App.Data / Object in Dynamic Code Using App Queries (App.Query) Read App.Query / Object in Dynamic Code Note about Unpublished / Draft Content-Items In case you're not aware of the draft/unpublished features in 2sxc, we want to note that each item can be live/draft, and each item could have a corresponding counterpart. So a draft-item could have a live-item (but doesn't have to), and a live-item could have a draft item. This is important, because the admin/editor will see all the draft items, while the end-user will only see the live ones. So the exact items shown and the item-count can differ if you are logged in. App Settings and Resources In the App dialogs you can manage Settings and Resources. Basically both are a content-item with the fields you specify, the only difference is the purpose they have. You should put button-labels, standard-texts, decorative images etc. into Resources and these will often change from language to language. You should put settings like \"what page is xxx on\" or \"the primary color is #53aaff\" into Settings You would normally use it like this: <h1 class='@App.Settings.HeadingsDecorators'> @Content.Title </h1> <div> @Content.Body </div> <a href=\"@App.Settings.DisclaimerPage\"> @App.Resources.Disclaimer </a> As you can see, the HeadingsDecorators or DisclaimerPage are best placed in the Settings, while the label of the Disclaimer link are best handled as a multi-language Resource. Read also If you need to get an App object for other apps, read External App Use If you want to use the App object from non 2sxc-code, like other MVC pages, check out External App Use Demo App and further links You should find some code examples in this demo App Blog App showing many such features More links: App Data Create/Update/Delete History Introduced in 2sxc 05.05 Stable since 2sxc 06.00 Data-API was introduced in 2sxc 06.05"
  },
  "net-code/dynamic-code/objects/cmscontext/index.html": {
    "href": "net-code/dynamic-code/objects/cmscontext/index.html",
    "title": "CmsContext in Dynamic Code ✨ new! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "CmsContext in Dynamic Code ✨ new! To enable Hybrid Razor which works on Dnn and Oqtane, we need standards so that our Dynamic Code can access information about the page, module etc. Up until now our code always used the Dnn object which obviously doesn't on Oqtane and other platforms. So we're creating this new standardized object to ask for these things. ⚡ The official API docs of the Object on the Dynamic Code ⚡ The official API docs of the ICmsContext object Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. CmsContext.Platform Information about the platform the system is running on. Usually Dnn or Oqtane. Name Type Value Example Description Type PlatformType PlatformType.Dnn Name string Dnn \uD83D\uDC49 ICmsPlatform CmsContext.Culture Culture information for the current request. Name Type Value Example Description DefaultCode string en-us The default language code of the site CurrentCode string de-ch Primary language code for the site \uD83D\uDC49 ICmsCulture CmsContext.Site Name Type Value Example Description Id int 2 Site ID Url string 2sxc.org Primary site url without protocol \uD83D\uDC49 ICmsSite CmsContext.Page Name Type Value Example Description Id int 36 Page ID Parameters IDictionary<string, string> Use as cross-platform Query params \uD83D\uDC49 ICmsPage CmsContext.Module Name Type Value Example Description Id int 5030 Module ID \uD83D\uDC49 ICmsModule CmsContext.User Name Type Value Example Description Id int 2 User ID IsSiteAdmin bool true People who can can admin users/content IsSystemAdmin bool true Super Users IsSiteDeveloper bool true Usually just Super-Users \uD83D\uDC49 ICmsSite CmsContext.View new in 12.02 Name Type Value Example Description Id int 2 View ID Edition string bs4 Polymorphism edition if used, otherwise empty Name string 4 Tiles Name of the view Identity string BLUE Custom identity like name, but language invariant \uD83D\uDC49 ICmsView Demo App and further links You should find some code examples in this demo App No demo apps exist yet History Introduced in 2sxc 11.11 CmsContext.Page.Parameters added in 2sxc 12.0 CmsContext.View added in 2sxc 12.02 with all the new features"
  },
  "net-code/dynamic-code/objects/link.base.html": {
    "href": "net-code/dynamic-code/objects/link.base.html",
    "title": "Link.Base() / Method in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Link.Base() / @Link.Base() Method in Dynamic Code If you have a SPA on your page you will often need to set the proper base tag. To get it, use Link.Base(). Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Use @Link.Base() for JavaScript SPA modules Link.Base() ensures that the url can be used for SPAs, as some pages will otherwise provide a wrong link (like home) which then breaks the SPA. <base href=\"@Link.Base()\"> Demo App and further links You should find some code examples in this demo App Blog App History Link was Enhanced in 2sxc 9.5.1 with Base()"
  },
  "net-code/dynamic-code/objects/link.html": {
    "href": "net-code/dynamic-code/objects/link.html",
    "title": "Link / Object in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Link / @Link Object in Dynamic Code Basically you can always link around to other pages, websites or views using normal <a href=\"...\">text</a> html. And often you just want to add some parameters to the current Url like ?id=27 - but the behavior of this can be very different depending on the Dnn settings. The Link object helps you handle this. Note: Dnn often has a problem with links, because depending on what page you are on, the bbehavior is a bit different. This is especially important on the home page. Use @Link.To(...) to make sure everything works no matter what. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How it works The Link-object is always available in all Razor-templates. Internally it uses the Dnn API to get the correct url. Use @Link.To() for Linking Pages, Parameters and APIs \uD83D\uDC49 See Link.To(...) / ...) Method in Dynamic Code Use @Link.Image(...) for Images with Resizing and more \uD83C\uDD95 \uD83D\uDC49 See Link.Image(...) / Method in Dynamic Code Use @Link.Base() for JavaScript SPA modules If you have a SPA on your page you will often need to set the proper base tag. To get it, use Link.Base(). \uD83D\uDC49 See Link.Base() / Method in Dynamic Code Debugging Link Internal operations In rare cases you may get a link you don't expect. To help you figure out what happens, you can do this: Link.SetDebug(true); var x = Link.Image(\"my.jpg\", Settings.Images.Content, factor: 0.5); Link.SetDebug(false); This will add a lot more debug information in the Insights, so you should be able to figure out what happened. Notes and Clarifications The Link-Object is of type ILinkService. Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Enhanced in 2sxc 9.5.1 with Base() and with parameter pageId on Link.To Link.To was enhanced with api in v12.02 Link.Image was created in v12.04"
  },
  "net-code/dynamic-code/objects/link.image.html": {
    "href": "net-code/dynamic-code/objects/link.image.html",
    "title": "Link.Image(...) / Method in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Link.Image(...) / @Link.Image Method in Dynamic Code Linking images - especially images which should be automatically resized - can be tricky. This is where Link.Image(...) helps. Tip 2sxc 13.10 adds a new ImageService which helps generate the best possible HTML for images. Only use the Link.Image(...) where really necessary, because the IImageService is usually the better choice. Simple Examples <!-- simple example --> <img src='@Link.Image(Content.MainPicture)'> <!-- simple example with resize --> <img src='@Link.Image(url: \"test.jpg\", width: 250, height: 700)'> <!-- simple example with resize and custom quality --> <img src='@Link.Image(url: \"test.jpg\", width: 250, height: 700, quality: 75.2)'> Using Preconfigured Image Sizes The Image method can also use predefined image configuration. This uses the new Settings System. <!-- Resize an image to the default of content --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Content)'> <!-- Resize an image to the default of lightboxes --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Lightbox)'> <!-- Resize an image to the default of screen / backgrounds --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Screen)'> <!-- Resize an image to HALF the size of a default content --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Content, factor: 0.5)'> Tip This is very powerful and is the recommended way to resize images, because this way all images follow the same sizes / proportions in all your apps. Parameters To promote long term API stability, we require most parameters to be named when used. This allows us to add further parameters later on, and the calls will still work. The first three parameters don't need naming, as they will be the most used. They are these in this order: url - the only required parameter settings - optional, would be an image-settings configuration factor - optional multiplier - eg. 0.5 to be half the size of the preset configuration All other parameters need to be named: width width in pixels height height in pixels quality a quality factor between 1 and 100; eg. jpgs usually have 50 - 80 resizeMode which can be max, crop, pad etc. scaleMode which can be up, down (default) or both format which can be jpg, png, gif aspectRatio So this will work: @Link.Image(\"test.jpg\", Settings.Images.Content, 0.5) @Link.Image(url: \"test.jpg\", settings: Settings.Images.Content, factor: 0.5) @Link.Image(\"test.jpg\", width: 200) ...and this won't: @Link.Image(\"test.jpg\", 200) Demo App and further links \uD83C\uDF93 Image Resizer Parameters with Link.Image \uD83D\uDCD4 Images Guide (Best Practices & Code) History Introduced in 2sxc 12.04 For many cases you should now use the ImageService in 2sxc 13.10+"
  },
  "net-code/dynamic-code/objects/link.to.html": {
    "href": "net-code/dynamic-code/objects/link.to.html",
    "title": "Link.To(...) / ...) Method in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Link.To(...) / @Link.To(...) Method in Dynamic Code Basically you can always link around to other pages, websites or views using normal <a href=\"...\">text</a> html. And often you just want to add some parameters to the current Url like ?id=27 - but the behavior of this can be very different depending on the Dnn settings. The Link.To method on the Link object helps you handle this. Note: Dnn often has a problem with links, because depending on what page you are on, the bbehavior is a bit different. This is especially important on the home page. Use @Link.To(...) to make sure everything works no matter what. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Purpose of Link.To(...) The Link.To can be used for the following scenarios Linking to another page in the system, of which you know only the page-id Linking to the current page but adding various parameters Linking to an API endpoint, for example an XML RSS feed How to use Here's a quick example of using the Link object in a Razor template: <a href=\"@Link.To(parameters: \"id=\" + item.EntityId)\"> @item.Title </a> This example creates a link to the current page, adding either ?id=27 or /id/27, depending on the Dnn configuration. How it works The Link-object is always available in all Razor-templates. Internally it uses the Dnn and Oqtane APIs to get the correct url. Using @Link.To() for Pages / Parameters Example: @Link.To(parameters: \"id=17\") @Link.To(parameters: \"id=403&category=all\") Linking to a target element with an assigned id For reference, see HTML Link Bookmarks Example: Let's assume you've build a target like this <div id=\"@(\"person-\" + person.EntityId)\"> ... </div> Then to link straight there in the same page <a href=\"@Link.To(parameters: \"#person-\" + person.EntityId)\"> Or on another page <a href=\"@Link.To(pageId: 40, parameters: \"#person-\" + person.EntityId)\"> Linking to APIs ✨ new! This was introduced in 2sxc 12.02, since APIs are becoming more important. Here's an example from the Blog 5: <a href='@Link.To(api: \"api/Blog/Rss\", parameters: filteredCategory == null ? \"\" : \"category=\" + filteredCategory.Key)' target=\"_blank\"> <i class=\"fas fa-rss align-self-center text-white\"></i> </a> Notes and Clarifications The Link-Object is of type ILinkService. Enforced Parameter Naming To promote long term API stability, we require all parameters to be named when used. This allows us to add further parameters later on, and the calls will still work. <!-- this will work --> @Link.To(parameters: \"id=17\") @Link.To(parameters: \"id=403&category=all\") <!-- new in 2sxc 9.5.1 --> @Link.To(pageId: 40, parameters: \"id=403&category=all\") <!-- this won't work --> @Link.To(\"id=17\") Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Enhanced in 2sxc 9.5.1 with parameter pageId Added api parameter in v12.02 to allow linking to APIs"
  },
  "net-code/dynamic-code/objects/resources.html": {
    "href": "net-code/dynamic-code/objects/resources.html",
    "title": "Resources in Dynamic Code ✨ new! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Resources in Dynamic Code ✨ new! The Resources object consolidates resources for the current scenario. It merges resources configured in the View and App and gives View-Resources the preference. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Example Let's assume you have these View-Resources in EN & DE Source Property Value EN Value DE View ColHeadId Id (not defined) View ColHeadName Name (not defined) View ColHeadDesc Description Beschreibung View HelpLink /help /hilfe App OrderLabel Order Now Jetzt Bestellen App OrderHint Click to Order Klick um zu Bestellen App HelpLink www.2sxc.org (not defined) Then you could get these values from the Resources object Object Value if on an EN page Value if on a DE page @Resources.ColHeadId Id Id (auto-fallback) @Resources.ColHeadName Name Name (auto-fallback) @Resources.ColHeadDesc Description Beschreibung @Resources.HelpLink /help /hilfe @Resources.OrderLabel Order Now Jetzt Bestellen @Resources.OrderHint Click to Order Klick um zu Bestellen Tip Remember that Settings are meant for configuration and Resources should be used for multi-language output. You could do it differently, but that would be bad practice. How it Works The Resources is a dynamic object. Internally the Settings use the new IDynamicStack object to stack entities like sources on each other, and take the first best match. The sources are: ViewCustom with View-level resources AppCustom/AppSystem with App-level resources SiteCustom/SiteSystem with Site-level resources GlobalCustom/GlobalSystem with System-level resources PresetSystem with pre-defined resources from the installation Tip Read more about this stack and what's in it here Resources Stack in 2sxc ✨ new!. This also includes the full list of sources and their exact names. The order of the sources is important, as the first match will be returned. The View has priority over the App. This setup allows Views to override App-Defaults. Accessing Resources from One Source In rare cases you may want to access settings from a specific source - maybe to detect if it has been changed or because your template explicitly wants the App settings. For this you can use the GetSource(name) method like this: @Resources.HelpLink would return /help @Resources.GetSource(\"ViewCustom\").HelpLink would return /help @Resources.GetSource(\"AppCustom\").HelpLink would return www.2sxc.org History You could use App.Resources since ca. 2sxc 6 Resources object Introduced in 2sxc 12.02 to consolidate View and App Resources Resources object was expanded in 12.04 to also cover global, portal and site level resources - see settings docs"
  },
  "net-code/dynamic-code/objects/settings.html": {
    "href": "net-code/dynamic-code/objects/settings.html",
    "title": "Settings in Dynamic Code ✨ new! | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Settings in Dynamic Code ✨ new! The Settings object consolidates settings for the current scenario. It merges settings configured in the View, App, Site, System and Presets. The top-most setting has preference. So if a view overrides a site-setting, the view-setting will be used. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Tip Learn more about settings and what predefined settings exist in these docs. There you'll learn about predefined image sizes, google maps keys and more. Example Let's assume you have these View-Settings PrimaryColor would be #FF0000 Columns would be 4 SomeApiKey would be 6n23cnhi502ceh An these App-Settings PrimaryColor = #CCCCCC SecondaryColor = #00AA00 Then you could get these values from the Settings object @Settings.PrimaryColor would be #FF0000 - found it View @Settings.SecondaryColor would be #00AA00 - only exists in App @Settings.Columns would be 4 - only exists in View @Settings.SomeApiKey would be 6n23cnhi502ceh - from App @Settings.DoesntExist would be null as that data doesn't exist @Settings.Images.Content.Width would be 1400 as it is a preset Tip Remember that Settings are meant for configuration and Resources should be used for multi-language output. You could do it differently, but that would be bad practice. How it Works The Settings is a dynamic object. Internally the Settings use the new IDynamicStack object to stack entities like sources on each other, and take the first best match. The sources are: ViewCustom with View-level settings AppCustom/AppSystem with App-level settings SiteCustom/SiteSystem with Site-level settings GlobalCustom/GlobalSystem with System-level settings PresetSystem with pre-defined settings from the installation Tip Read more about this stack and what's in it here Settings Stack in 2sxc ✨ new!. This also includes the full list of sources and their exact names. The order of the sources is important, as the first match will be returned. The View has priority over the App. This setup allows Views to override App-Defaults. Accessing Settings from One Source In rare cases you may want to access settings from a specific source - maybe to detect if it has been changed or because your template explicitly wants the App settings. For this you can use the GetSource(name) method like this: @Settings.PrimaryColor would return #FF0000 @Settings.GetSource(\"ViewCustom\").PrimaryColor would return #FF0000 @Settings.GetSource(\"AppCustom\").PrimaryColor would return #CCCCCC History You could use App.Settings since ca. 2sxc 6 Settings object Introduced in 2sxc 12.02 to consolidate View and App Settings Settings object was expanded in 12.04 to also cover global, portal and site level settings - see settings docs"
  },
  "net-code/dynamic-data/data-object-types.html": {
    "href": "net-code/dynamic-data/data-object-types.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Data Object Types"
  },
  "net-code/dynamic-data/data-origins.html": {
    "href": "net-code/dynamic-data/data-origins.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to: Where Data Comes From"
  },
  "net-code/dynamic-data/dynamic-entity-html.html": {
    "href": "net-code/dynamic-data/dynamic-entity-html.html",
    "title": "DynamicEntity / TypedItem .Html(...) Method new v16.01 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } DynamicEntity / TypedItem .Html(...) Method new v16.01 The Html method is a new feature in 2sxc 16.01 which allows you to render a property/field as HTML. The main purpose is to allow you to render a rich-text field as HTML, but it can also be used to render other fields. Simple example assuming a blog-post with a Body field: @post.Html(\"Body\") Behavior / Features of the Html Method Return an IHtmlTag object which can be rendered as HTML directly Wrap the value in a <div> tag by default (but you can change this) Sometimes automatically add an edit-toolbar for this specific field Automatically do some optimizations on certain field types, such as string-wysiwyg Default Behavior By default it will just do this Wrap in a <div> tag Output the value So by default it will not add a toolbar, and it will not do any special processing. Behavior on Rich, string-wysiwyg fields If the field is a string-wysiwyg field which has been configured to be of the new Rich type, it will automatically do the following: Wrap in a <div> tag Add some helper classes to the <div> tag to ensure proper styling Add a toolbar to edit the field Change all the images in the wysiwyg to be responsive, lazy-loaded and multiple resolutions Automatically process InnerContent just like the IRenderService Tip In future, other field types will also receive special treatment, so for now, you should only use this on fields where you expect the special treatment. Container By default, it will always add a div tag around the value. This is to ensure that the contents is properly styled and to allow adding a toolbar. To change this, you can specify the container parameter to be one of the following: null - default, the default div container will be added \"\" - empty string, no container will be added \"tagname\" - any tag name like p, span, h1 etc. will be added IHtmlTag - any IHtmlTag object will be added, usually created using Kit.HtmlTags.TagName() Examples: @* default, will wrap in a div *@ @post.Html(\"Body\") @post.Html(\"Body\", container: null) @* don't wrap in any container *@ @post.Html(\"Body\", container: \"\") @* will warp in a <p> or <h1> tag *@ @post.Html(\"Body\", container: \"p\") @post.Html(\"Body\", container: \"h1\") @* will warp in a <div class='my-class'> tag *@ @post.Html(\"Body\", container: Kit.HtmlTags.Div().Class(\"my-class\")) Toolbar By default, it will not add a toolbar, unless it's a string-wysiwyg field. To change this, you can specify the toolbar parameter to be one of the following: null - default, the default behavior will apply false - enforce no toolbar true - enforce a toolbar to edit just this field For any other custom behavior, use toolbar: false and add your own toolbar to the container. Examples: @* default, normal fields will not have a toolbar *@ @post.Html(\"Title\") @post.Html(\"Title\", toolbar: false) @* normal fields can enable the field-toolbar *@ @post.Html(\"Title\", toolbar: true) @* string-wysiwyg fields will have a toolbar *@ @post.Html(\"Body\") @post.Html(\"Body\", toolbar: true) @* string-wysiwyg fields can disable the toolbar *@ @post.Html(\"Body\", toolbar: false) Image Resize Settings If the field is a string-wysiwyg field which has been configured to be of the new Rich type, it will automatically replace all images with a responsive, lazy-loaded version. To do this, it uses the resize configuration called Wysiwyg. This is different from Content as it doesn't enforce a specific height. To change this, you can do various things: Reconfigure the Wysiwyg image settings on the App, Site or entire System Specify another word such as Content in the imageSettings parameter Specify another configuration object in the imageSettings parameter Debug Especially in the case of string-wysiwyg fields, it can be very helpful to see what's going on. To make this possible, there is a parameter debug which can be set to true. \uD83D\uDC49\uD83C\uDFFD Read more in the Rich WYSIWYG docs History Introduced in 2sxc 16.01 for the new Rich-Text field type"
  },
  "net-code/dynamic-data/dynamic-entity-properties.html": {
    "href": "net-code/dynamic-data/dynamic-entity-properties.html",
    "title": "Dynamic Entity Properties | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Dynamic Entity Properties Whenever you create a content-type - like Person - and want to work with the data in your C# Razor templates, you'll be working with a Dynamic Entity. You can get any value using one of the following: the dot-notation like Content.FirstName the Get() method like Content.Get(\"FirstName\") the Get() method with a fallback value like Content.Get(\"FirstName\", fallback: \"John\") the typed Get<T>() method like Content.Get<string>(\"FirstName\") \uD83D\uDC49 also read about AsDynamic(...) Code example using a Dynamic Entity We'll assume we have a Content Type called Book with the following properties: Title (text, 1-line) Teaser (text, multi-line) Description (text, html) ReleaseDate (date) Author (entity - another content item) Here's a code example in a C# Razor template: <!-- The default variable for the current item is Content, we'll just use another name for this sample note that .Title is automatically provided, because the content-type has the property title. --> <h1>@Content.Title</h1> <div>@Content.Description</div> <div>Author: @Content.Author.FullName</div> So basically all properties of this book can be shown using [Object].[PropertyName] - for example Content.ReleaseDate. What Dynamic Entity really does - and how Technically the dynamic entity object is like a read-helper for the more complex IEntity. So actually the dynamic entity object will keep a reference to the underlying read-only IEntity item on a property Entity, and whenever your code accesses a property, the dynamic entity will query it from the underlying Entity. The main things that the dynamic entity does for you, are Give you a nice, short syntax to access a property - so Content.FirstName instead of Object.Attributes[\"FirstName\"][\"en\"] which would be necessary using the more advanced IEntity object Ensure that the language used in retrieving a value is the current user language Give conveniant access to related information like the Presentation object Automatically handle some data-not-found errors Automatically do conversions, like convert related entities (like .Children) into dynamic objects to make your code more consistant How the Property Lookup Works Internally there are a few things that can returned if you do something like Content.SomeProperty If the SomeProperty is one of the internal properties like EntityId etc. (see below) this will be returned Next is a simple property of the underlying Entity, like FirstName which would be a string or a relationship property like Tags which will return a special DynamicEntity that behaves as a list (see below) Last but not least - if nothing matches, it's null Properties of a Dynamic Entity Read the API docs in the IDynamicEntity. Additional properties that work (they are dynamic, so don't appear in the code) EntityId int EntityGuid Guid EntityType string - the type name like Person IsPublished bool - true/false if this item is currently published AnyProperty dynamic, but actually bool | string | decimal | datetime | List any normal property of the content-item can be accessd directly. It's correctly .net typed (string, etc.) Tip In 2sxc 10.27 any property that returns a List<DynamicEntity> now returns a IDynamicEntity containing a list. This means that if you expect the list to just return one item, you can directly access its properties like this: Content.Author.FirstName. To otherwise enumerate the items, we recommend AsList(object) so AsList(Content.Tags) Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Appendix The following properties/methods exist, but shouldn't be used. They are documented here so that you know that they are not meant for public use: Created - the created date Modified - the modified date Owner - the current owner of the item, usually the author Metadadata - currently use AsEntity(theObject).Metadata Permissions - permissions of the current item (if any are defined) History Introduced in 2sxc 01.00 Changed to use interface IDynamicEntity in 6.x Draft/Published introduced in 2sxc 7.x Presentation introduced in 2sxc 7.x Modified introduced in 2sxc 8.x Implemented .net equality comparer in 2sxc 9.42 Parents added in 2sxc 9.42 Get added in 2sxc 9.42 and added to interface IDynamicEntity in 10.07 Parents introduced in 2sxc 9.42, and added to interface IDynamicEntity in 10.07 IsDemoItem property added in 2sxc 10.06 Changed dynamic access to a property to return a DynamicEntity which is enumerable in 10.27"
  },
  "net-code/dynamic-data/dynamic-entity.html": {
    "href": "net-code/dynamic-data/dynamic-entity.html",
    "title": "Dynamic Entity Objects | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Dynamic Entity Objects Whenever you create a content-type - like Person - and want to work with the data in your C# Razor templates, you'll be working with a Dynamic Entity. \uD83D\uDC49 also read about AsDynamic(...) Code example using a Dynamic Entity We'll assume we have a Content Type called Book with the following properties: Title (text, 1-line) Teaser (text, multi-line) Description (text, html) ReleaseDate (date) Author (entity - another content item) Here's a code example in a C# Razor template: <!-- The default variable for the current item is Content, we'll just use another name for this sample note that .Title is automatically provided, because the content-type has the property title. --> <h1>@Content.Title</h1> <div>@Content.Description</div> <div>Author: @Content.Author.FullName</div> So basically all properties of this book can be shown using [Object].[PropertyName] - for example Content.ReleaseDate. \uD83D\uDC49 more about this on Dynamic Entity Properties Working with unpublished/draft items TODO: write something about how-to-check if published/unpublished, navigating it, etc. - or link to such a page Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. History Introduced in 2sxc 01.00 Changed to use interface IDynamicEntity in 6.x Draft/Published introduced in 2sxc 7.x Presentation introduced in 2sxc 7.x Modified introduced in 2sxc 8.x Implemented .net equality comparer in 2sxc 9.42 Parents added in 2sxc 9.42 Get added in 2sxc 9.42 and added to interface IDynamicEntity in 10.07 Parents introduced in 2sxc 9.42, and added to interface IDynamicEntity in 10.07 IsDemoItem property added in 2sxc 10.06 Changed dynamic access to a property to return a DynamicEntity which is enumerable in 10.27"
  },
  "net-code/dynamic-data/dynamic-list.html": {
    "href": "net-code/dynamic-data/dynamic-list.html",
    "title": "Dynamic Entity Lists | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Dynamic Entity Lists It's very common to work with a list of items, like a list of blog posts, tags etc. 2sxc has a lot of magic under the hood to just make it work. Here's an example: <ul> @foreach(var tag in blogPost.Tags) { <li>@tag.Name</li> } </ul> To get really good at coding lists, there are a few things you want to learn: Use list from different sources Entities which are a property of something (like blogPost.Tags) Entities which belong to the Module Entities which come from a Query Entities of a specific Content-Type from App.Data Difference between Entity-lists and DynamicEntity-Lists Looping Using LINQ to sort, filter and more Basics First - What Are Lists of Dynamic Entities In the lingo of C# they are IEnumerable<IDynamicEntity> objects. But basically lists are objects that can be stepped through (iterated). You will usually use them to show the list of items (like a list of News items). And if the list has too much data or is in a weird sorting order, you'll usually want to filter and sort before doing this. How to Get a List of Dynamic Entities In many cases the list is aleady there for you to use. For example, if your BlogPost object has a property Tags which is an Entity-Picker in the Edit-UI, then this will automatically work: <ul> @foreach(var tag in blogPost.Tags) { <li>@tag.Name</li> } </ul> In other scenarios you may get objects which are still IEntity objects. For example, App.Data[\"BlogPost\"] will get you a list of IEntity objects. But these don't allow you to just access a property, so you'll have to use AsList(...). @* this won't work *@ Find some information Whenever you create a content-type - like Person - and want to work with the data in your C# Razor templates, you'll be working with a Dynamic Entity. \uD83D\uDC49 also read about AsDynamic(...) Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. History Introduced in 2sxc 01.00 Changed to use interface IDynamicEntity in 6.x"
  },
  "net-code/dynamic-data/dynamic-stack.html": {
    "href": "net-code/dynamic-data/dynamic-stack.html",
    "title": "Dynamic Stack Objects | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Dynamic Stack Objects Important: this is new in 2sxc 12.02 and may still have minor issues In some scenarios you want to ask multiple Entities if they have an Value. For example you may need i18n Resources (like the label of a button). This could be in the View Resources or in the App Resources. It would be cumbersome to write code to check all this, which is there the DynamicStack comes in. The DynamicStack will hold a stack of Entities or DynamicEntities. It will ask them in sequence if they have the value you need, and return the first match. The order of the stack is important, as the first entity to provide an answer will be used. Dynamic Stacks behave as if they were Dynamic Entities. Examples of Dynamic Stacks In Razor and WebApi you will find these objects are Dynamic Stacks: Settings Resources Why Use Dynamic Stacks? Our core goal is the consolidation of spread out Settings and Resources. We're not yet sure if developers will find other uses for this, but we're pretty sure there are some cool reasons to do this. Some Ideas we have are: Make your code simpler by merging 2-3 objects which describe the same thing, like a Person and Profile Merge Presentation settings with Defaults from another Entity How to Create a Dynamic Stack In 2sxc 12.02 there is an experimental overload of AsDynamic(...) to create your own stacks. Here's how it works: // the personEntity and profileEntity are Entity objects var person = AsDynamic(personEntity); var name = person.Name; var profile = AsDynamic(profileEntity); var favoriteColor = profile.FavoriteColor; var stack = AsDynamic(personEntity, profileEntity); var nameFromStack = stack.Name; var colorFromStack = stack.FavoriteColor; Possible Gotchas with Dynamic Stacks Proritized by Source, not Language As of now, the stack always checks each entity one by one to see if it can supply an answer. This means that if one source has an answer from the fallback language it will supply it, even if a later source might have the perfect answer in the primary language. We're not sure how relevant this is, but it's something you will want to keep in mind. Empty Values are Treated as No Value To detect if a value should be used the code checks for emptyness. This means an empty string or an empty list of relationships will be treated as no-hit and the search will continue through the stack. This also means that it may be difficult to \"nullify\" a value in a higher-level source, as that will be ignored. Read Also \uD83D\uDC49 API docs for IDynamicStack History Introduced in 2sxc 12.02"
  },
  "net-code/dynamic-data/entity-vs-dynamic-entity.html": {
    "href": "net-code/dynamic-data/entity-vs-dynamic-entity.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Data Object Types"
  },
  "net-code/dynamic-data/entity.html": {
    "href": "net-code/dynamic-data/entity.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "moved to Entity Objects"
  },
  "net-code/dynamic-data/index.html": {
    "href": "net-code/dynamic-data/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "This has been moved to Data in 2sxc"
  },
  "net-code/errors/cannot-perform-runtime-binding-on-a-null-reference.html": {
    "href": "net-code/errors/cannot-perform-runtime-binding-on-a-null-reference.html",
    "title": "Error Cannot perform runtime binding on a null reference | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Error Cannot perform runtime binding on a null reference If you see an error like this: Error: Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: Cannot perform runtime binding on a null reference at ToSic.Sxc.Engines.RazorEngine.Render(TextWriter writer, Object data) in C:\\Projects\\2sxc\\2sxc\\Src\\Dnn\\ToSic.Sxc.Dnn.Razor\\Engines\\Razor\\RazorEngine.cs:line 108 at ToSic.Sxc.Engines.RazorEngine.RenderTemplate(Object data) in C:\\Projects\\2sxc\\2sxc\\Src\\Dnn\\ToSic.Sxc.Dnn.Razor\\Engines\\Razor\\RazorEngine.cs:line 118 at ToSic.Sxc.Engines.EngineBase.Render(Object data) in C:\\Projects\\2sxc\\2sxc\\Src\\Sxc\\ToSic.Sxc\\Engines\\EngineBase.cs:line 171 at ToSic.Sxc.Blocks.BlockBuilder.RenderInternal(Object data) in C:\\Projects\\2sxc\\2sxc\\Src\\Sxc\\ToSic.Sxc\\Blocks\\BlockBuilder_Render.cs:line 123 It usually means that you tried to access a method which doesn't exist and it tried it on a dynamic object. Background: dynamic Objects In Razor, especially before 2sxc 16 which introduced the strictly typed mode, most object are dynamic. This means that the compiler doesn't know what's in them, and can't check if a method exists. Example using a Razor14 class or earlier: // Settings is a dynamic object in Razor14 or similar // This works, because the method \"Get(...)\" exists Settings.Get(\"SomeSetting\"); // This kind of call will fail at RUNTIME // Because the compiler can't check earlier if the method exists var willBreak = Settings.IsOk(); Note that this problem can also occur in more complex code, such as: // a is treated as dynamic // since part of the logic uses a dynamic object var a = SomeKindOfHelper.CheckIfNull(Settings) ? \"ok\" : \"not ok\"; // This will fail at runtime with the above message a.DoSomethingImpossible(); Possible Causes the object is null the object is not what you thought it is (eg. you expected a List<...> but got an IEntity) the method doesn't exist the method exists, but the signature is very different from what you tried to call Solution: Fix your Code In many cases the runtime will tell you what line the error was on, in which case you can see what method was trying to be called. In other cases you don't know the exact line of code. Our recommendation is: First Make sure you know what line breaks If the compiler told you, you're lucky. If not, you'll have to work it out. The easiest way to do this is to comment out most of the code until you don't have an error, and put the code back in piece by piece. Then Figure out the Cause The following example assumes that your object is called myThing and you're trying to call myThing.DoSomething(). 1. Check if the object is null <div> @* this will show true or false *@ Debug: @(myThing == null) </div> 2. Check what type the object is <div> @* this will show the type name *@ Debug: @myThing.GetType().Name </div> 3. Check if the method and signature exists You could do some reflection here, but once you know the type, I recommend you just check the docs. Shortlink: https://go.2sxc.org/err-binding-on-null-reference"
  },
  "net-code/errors/dynamicentity-not-be-found.html": {
    "href": "net-code/errors/dynamicentity-not-be-found.html",
    "title": "Error: The type or namespace name 'DynamicEntity' could not be found | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Error: The type or namespace name 'DynamicEntity' could not be found If you see an error like this: Error: System.Web.HttpCompileException (0x80004005): ...: error CS0246: The type or namespace name 'DynamicEntity' could not be found (are you missing a using directive or an assembly reference?) It usually means that you have code using DynamicEntity which had to be moved to another namespace for consistency. We're sorry about the breaking change. From what we see it mainly affects the very old FAQ app which had some very old coding style in it for LINQ. In this case it was not possible to clean 2sxc and still ensure that this works, because of type-casting restrictions in C# related to covariance and contravariance. Background: DynamicEntity was moved To create the public documentation we had to make sure our API was consistent, and IEntity was one of the exceptions. Before 2sxc 10.20 it was in the namespace ToSic.SexyContent. We standardized it now to ToSic.Sxc.Data so the full name is ToSic.Sxc.Data.DynamicEntity. Quick Fix: Change the namespace Your code probably has a @using ToSic.SexyContent. You should change this to @using ToSic.Sxc.Data; And everything should work. But please also check the good fix below: Good Fix: Change to <dynamic> Razor code shouldn't actually need to know the type of this dynamic entity. So it's better to replace occurances of DynamicEntity with the appropriate dynamic. For example, replace List<DynamicEntity> with IEnumerable<dynamic> (note that List<dynamic> won't work because of covariance restrictions). In the example of the FAQ app, it's recommended you change line 23 <li class=\"sc-element faq-set\" data-tags=\"@String.Join(\",\", ((List<DynamicEntity>)q.Categories).Select(a => AsDynamic(a).EntityId))\"> to <li class=\"sc-element faq-set\" data-tags=\"@String.Join(\",\", (q.Categories as IEnumerable<dynamic>) .Select(a => AsDynamic(a).EntityId))\"> To better understand this, best consult the LINQ Tutorials Full Error Example A full error can look like this: Error: System.Web.HttpCompileException (0x80004005): ...\\Portals\\...\\2sxc\\FAQ with Categories\\_All questions (sorted) of a selected category.cshtml(23): error CS0246: The type or namespace name 'DynamicEntity' could not be found (are you missing a using directive or an assembly reference?) at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound) at System.Web.Compilation.BuildManager.GetCompiledType(VirtualPath virtualPath) at ToSic.Sxc.Engines.RazorEngine.CreateWebPageInstance() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 107 at ToSic.Sxc.Engines.RazorEngine.InitWebpage() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 128 at ToSic.Sxc.Engines.RazorEngine.Init() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 43 at ToSic.Sxc.Engines.EngineBase.Init(ICmsBlock cmsBlock, Purpose purpose, ILog parentLog) in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Engines\\EngineBase.cs:line 76 at ToSic.Sxc.Blocks.CmsBlock.GetRenderingEngine(Purpose renderingPurpose) in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Blocks\\CmsBlock_Render.cs:line 122 at ToSic.Sxc.Blocks.CmsBlock.Render() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Blocks\\CmsBlock_Render.cs:line 56 Here's a print-screen: Shortlink: https://go.2sxc.org/ErrDynamicEntity"
  },
  "net-code/errors/ientity-not-found.html": {
    "href": "net-code/errors/ientity-not-found.html",
    "title": "Error IEntity does not exist in the Namespace | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Error IEntity does not exist in the Namespace If you see an error like this: error CS0234: The type or namespace name 'IEntity' does not exist in the namespace 'ToSic.Eav It usually means that you have code using IEntity which had to be moved to another namespace for consistency. We're sorry about the breaking change. Background: IEntity was moved To create the public documentation we had to make sure our API was consistent, and IEntity was one of the exceptions. Before 2sxc 10.20 it was in the namespace ToSic.Eav and later in ToSic.Eav.Interfaces. We standardized it now to ToSic.Eav.Data so the full name is ToSic.Eav.Data.IEntity. Solution: Change the namespace Your code probably has a @using ToSic.Eav or @using ToSic.Eav.Interfaces. You should change this to @using ToSic.Eav.Data; And everything should work. Shortlink: https://go.2sxc.org/ErrIEntity"
  },
  "net-code/errors/index.html": {
    "href": "net-code/errors/index.html",
    "title": "Solving typical Errors in Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Solving typical Errors in Dynamic Code Here we strive to provide you with quick help to solve common problems in your dynamic code."
  },
  "net-code/errors/linq-cannot-use-lambda.html": {
    "href": "net-code/errors/linq-cannot-use-lambda.html",
    "title": "Error Cannot use a lambda expression | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Error Cannot use a lambda expression If you see an error like this: Cannot use a lambda expression as an argument to a dynamically dispatched operation without first casting it to a delegate or expression tree type at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound) at System.Web.Compilation.BuildManager.GetCompiledType(VirtualPath virtualPath) at ToSic.Sxc.Engines.RazorEngine.CreateWebPageInstance() in It usually means that you tried to write LINQ code like a .First(...) or .Select(...) on an object, and the compiler can't be sure that you tried to write LINQ. Background: Dynamic Code and Extension Methods Razor is dynamically compiled code, and many objects like Content are typed as dynamic. Because of this, the compiler can't be sure what's in a dynamic object, and also not what is in a Content.Tags - since this too is regarded as dynamic. This is why you can't just write Content.Tags.First(), because .First() is an extension method which the compiler must find first - but it can't do that, since it doesn't know that Content.Tags are of the type IEnumerable<...>. Solution #1 - use AsList(...) 2sxc 10.20 introduces AsList(...) which the compiler knows is an IEnumerable. Unfortunately if the the compiler isn't sure about Content.Tags, then it's also not sure about AsList(Content.Tags). This is a minor inconvenience, since AsList(...) would figure things out, but Razor wants to be sure. So to use AsList() for solving this problem, you'll need to write AsList(Content.Tags as object). That solves it. Solution #2 - cast as IEnumerable<dynamic> If you already know it's a list, you can also cast it as an IEnumerable<dynamic>. Since IEnumerable<T> is in the namespace System.Collections.Generic you have 3 options: Cast with full Namespace This is what the compiler actually understands - but it's a bit long and hard to read: var authors = (book.Authors as System.Collections.Generic.IEnumerable<dynamic>) .Select(a => a.FirstName + \" \" + a.LastName); Cast with @using and IEnumerable<dynamic> This is the same thing, just nicer to read: @using System.Collections.Generic; var authors = (book.Authors as IEnumerable<dynamic>) .Select(a => a.FirstName + \" \" + a.LastName); Cast with @using Dynlist = ... This is the same thing, but the nicest, easiest to read method: @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; var authors = (book.Authors as Dynlist) .Select(a => a.FirstName + \" \" + a.LastName); Shortlink: https://go.2sxc.org/ErrLambda"
  },
  "net-code/external/dotnet-external-use.html": {
    "href": "net-code/external/dotnet-external-use.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Dnn Platform API Guide"
  },
  "net-code/features/index.html": {
    "href": "net-code/features/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Features Service"
  },
  "net-code/hotbuild/index.html": {
    "href": "net-code/hotbuild/index.html",
    "title": "HotBuild (new v17) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "HotBuild (new v17) HotBuild compiles c# files into a DLL on the fly and provides it to Razor. This allows for a new style of confident, type-safe, strict programming with the dev speed of dynamic code - as the system doesn't need to restart. TODO: page is a stub and not linked yet. ATM USE THE Guides.HotBuild.Index"
  },
  "net-code/images/index.html": {
    "href": "net-code/images/index.html",
    "title": "Responsive Images API in .net | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Responsive Images API in .net Creating perfect responsive images can be really hard. Aspects which are covered Creating img tags with perfect srcsets Creating picture tags with perfect source tags for each appropriate format and size Automatically using [Settings] to create the predefined sizes... ...or manually specify other sizes Example @Kit.Image.Picture(blogPost.Image) TODO: LINK TO EXAMPLES How This Works Internally this is what will happen: The format of the file is checked, to detect if other formats could be converted to (like jpg cound also be webp) If no settings are provided, the default settings for content-images are used (see below) If no srcSet is provided, the default from the settings are used (see below) It will then generate a ResponsivePicture object which you can just show, or do more things with (see below) Guide Basic 1. Prepare Always start by getting the IImageService - you will usually just get this once per Razor template: If needed, prepare resize settings using the ResizeSettings(...). This is probably only needed in ca. 10% of all cases, because the defaults are usually what you want to use. If you want to do this, see further explanations further down. 2. Get the Responsive Object Get the responsive Image or Picture using the Img(...) or Picture(...). // Example for a file in the App folder var appIconImg = Kit.Image.Img(App.Path + \"/app-icon.png\"); var appIconPicture = Kit.Image.Picture(App.Path + \"/app-icon.png\"); // Example for an image on a dynamic-data object var blogPicImg = Kit.Image.Img(blogPost.Image); 3. Output When creating the HTML you have many options. The most basic is just to show the result: @appIconImg @appIconPicture Guide Advanced Resize Settings If no settings are provided, the Settings.Images.Content see settings will be used automatically. The most common scenario is that you have a razor template which shows images that are typically half or a third the size of the normal content. In such a case you would also supply a factor in various possible formats. Here some examples: var blogPicImgHalf = Kit.Image.Img(blogPost.Image, factor: 0.5); var blogPicImgThird = Kit.Image.Img(blogPost.Image, factor: \"1/3\"); var blogPicImg2Thirds = Kit.Image.Img(blogPost.Image, factor: \"2:3\"); You can also use other settings, like Settings.Images.Screen for larger settings. This can also be combined with factor - here's an example: var background = Kit.Image.Img(blogPost.Image, settings: Settings.Images.Screen); var backgroundSmaller = Kit.Image.Img(blogPost.Image, settings: Settings.Images.Screen, factor: 0.9); You can also use custom settings like this: var resizeSettings = Kit.Image.ResizeSettings(width: 1000, quality: 75, aspectRatio: \"16/9\"); var img = Kit.Image.Img(blogPost.Image, settings: resizeSettings); And you can merge standard settings with your custom settings like this: var resizeSettings = Kit.Image.ResizeSettings(settings: Settings.Images.Custom, width: 1000, quality: 75, aspectRatio: \"16/9\"); var img = Kit.Image.Img(blogPost.Image, settings: resizeSettings); Image alt Description or class Attribute These are the most common things you may want to specify, so the Img(...) and Picture(...) tag support this in the initial call: var img = Kit.Image.Img(blogPost.Image, imgAlt: blogPost.Title, imgClass: \"some-class-names\"); Other attributes can be set as well, but it's more complicated. See custom Output below. Custom Output In most cases you'll just want to show the image or picture, like this: @{ var img = Kit.Image.Img(blogPost.Image); var picture = Kit.Image.Picture(blogPost.Image); } @* Now just show them *@ @img @picture But you may need to customize more what the output shows. Let's assume you want to give the <img> and <picture> tag a special id here's what you would do: @{ var img = Kit.Image.Img(blogPost.Image); img.ImgTag.Id(\"mainImg\"); var picture = Kit.Image.Picture(blogPost.Image); picture.ImgTag.Id(\"mainImg\"); picture.PictureTag.Id(\"mainPic\"); } @* Now just show them *@ @img @picture The img and picture variables are IResponsiveImage and IResponsivePicture objects. The ImgTag and PictureTag properties are RazorBlade objects and can be customized using the RazorBlade fluid Tag API. In case you want even more control over your output, you can also piece it together yourself: @{ var img = Kit.Image.Img(blogPost.Image); var picture = Kit.Image.Picture(blogPost.Image); } @* Show the Image with some custom changes *@ @img.Id(\"imgId\").Style(\"width: 33%\") @* Show your own Image tag *@ <img src=\"@img.Url\" srcset=\"@img.SrcSet\" alt=\"some alt text\"> @* Show the picture with some custom changes on the <picture> *@ @picture.PictureTag.Id(\"picId\") @* Show the picture with some custom changes on the <picture> and <img> *@ @{ picture.PictureTag.Id(\"picId\"); picture.ImgTag.Style(\"width: 30%\"); } @picture @* Piece together your own responsive picture tag simple option *@ <picture> @picture.SourceTags @picture.ImgTag.Style(\"width: 30%\") </picture> @* Piece together your own responsive picture tag simple option *@ <picture> @picture.SourceTags <img src=\"@picture.Url\" style=\"width: 30%\"> </picture> @* Piece together your own responsive picture tag simple option *@ <picture> @foreach(var source in picSet.SourceTags){ @source.Sizes(\"some-sizes\") } <img src=\"@picture.Url\" style=\"width: 30%\"> </picture> TODO: document recipe system What you Need To Know The (new) API lies in the namespace ToSic.Sxc.Services - see ToSic.Sxc.Services The IImageService will do all the magic - see IImageService History Introduced in 2sxc 13.01"
  },
  "net-code/images/srcset.html": {
    "href": "net-code/images/srcset.html",
    "title": "Specify SrtSet on Responsive Images API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Specify SrtSet on Responsive Images API Both <img> as well as <source> tags can have a srcset attribute. Tip If you are new to responsive images, we suggest you read the MDN Guide to get familiar with this The Responsive Images API generates these automatically for you. In many cases, the configuration for this comes from the settings - like from Settings.Images.Content. But often you may want to configure it yourself - either by reconfiguring the Settings in the Admin-UI, or by supplying in in the code. Concept The way the generator works is that you give it the rules you want based on 4 options: An exact width in pixels (usually with the w parameter in srcsets) A multiple based on the device pixel density (usually with the x parameter) A smaller size based an a multiple (like half the original if it's half the size) The fallback / default picture Examples 1000w, 800w, 600w, 400w Generate these four widths as exact pixel sizes 1x, 1.5x, 2x Generate these three sizes for screen pixel densities 1*, 0.75*, 0.5*, 0.25* Generate exact pixel sizes based on the initial size, so if the initial image was 1200px, it is the same as 1200w, 800w, 600w, 400w d Generate a default line (without any w or x specifier) A lot is auto-detected, so if you want to, you can leave away the w and x and * in almost all cases. So this is valid too (see below for auto-detection rules): 1000, 800, 600, 400 1, 1.5, 2 1*, 0.75, 0.5, 0.25 1/1, 1/2, 1/3, 1/4 (empty string) - defaults to d In addition to the standard factor you can also set what size should be used exactly - otherwise it's auto-calculated: 1x=1200, 1.5x=1800, 2x=2400, 2.5x=2400, 3x=2400 1000=1000, 1600=1200 1x=1200:600, 1.5x=1800:600, 2x=2400:600 - height can also be set SrcSet Parameter Specs It is always one or more values, separated by a comma , Each value has a number like 1, 1.5, 1200 or a fraction like 1/2 or 1:2 - or empty for d (default) Each value can have a specifier like w, x, * or d - or it's auto detected It can be followed by an = to specify exact resizing rules After the = it can have a width After that it can have a : followed by the resize height Auto Detected Types w, x, * and d These are the rules if the type is not specified: If the number is smaller than 1 it must be a multiplier of the original size, so * is assumed If the number is written as a fraction like 2/3 or 4:3 it is assumed to be a multiplier * If the number is greater than 1 and less than 10 a pixel density is assumed x If the number is 10 or greater than width is assumed w If nothing (not even a number) is specified, default d is assumed History Introduced in 2sxc 13.01"
  },
  "net-code/index.html": {
    "href": "net-code/index.html",
    "title": "C#, Razor & Dynamic Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "C#, Razor & Dynamic Code When you implement solutions using 2sxc, most of your server-side code will be written in C#. you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } C# Files in 2sxc Apps You will create many dynamic .cs or .cshtml files in the App folder: Razor components and shared Razor views WebApi Controllers (*Controller.cs files in the api folder) Shared code (*.cs files in any folder) Tip These files are in your App folder as Dynamic Code and have three core features: The source code can be changed at any time Changes are immediately live without restarting the CMS Cool APIs \uD83D\uDE0E help you work with dynamic data (Entities) Quick Example The variable person in the following Razor template is a Dynamic Entity - meaning that it can have different properties depending on the configuration. In this case it seems to have FirstName, LastName and Gender. <div @Edit.Toolbar(person)> @person.FirstName @person.LastName - @Text.First(person.Gender, \"unknown\") </div> The code first creates a div tag which would show a hover-toolbar (to admins only) for editing the person. It then shows the names and the gender - which if not determined will show as unknown. Note This kind of code is easy understand for people who know HTML. It's also very easy to customize if you need a different output - since it's basically HTML and placeholders. What's Where This documentation contains the following sections Dynamic Data Everything you need to understand how data, especially dynamic data, works in 2sxc. Dynamic Code The shared API on all Dynamic Code - Razor, WebApi or other. Razor The APIs special to Razor templates Web API Everything you need to know to create/customize Web API Controllers External API Guides you to access 2sxc-instances on the server from the Theme, WebForms or other MVC components Important APIs when Working with Content-Items/Data TODO: this must be moved elsewhere DataSource and DataStream, the core concept for data read/processing/delivery List of all DataSource Objects how to create custom data sources"
  },
  "net-code/koi/index.html": {
    "href": "net-code/koi/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Koi Library"
  },
  "net-code/lib/index.html": {
    "href": "net-code/lib/index.html",
    "title": "2sic Library (ToSic.Lib) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sic Library (ToSic.Lib) The innermost core of 2sic code is ToSic.Lib - a library of classes and methods which are used by all other parts of 2sxc. This is a very technical documentation meant for developers of 2sxc or other developers who want to understand the inner workings of 2sxc. The Lib has the following concerns Dependency Injection Logging Helpers History Introduced in 2sxc 15.0 (previously was part of ToSic.Eav)"
  },
  "net-code/lib/log/index.html": {
    "href": "net-code/lib/log/index.html",
    "title": "Logging in 2sxc / EAV | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Logging in 2sxc / EAV This should give you some minimal guidance into logging what your code does. The General Concept Most objects have a Log where the add notes what they are doing When objects create child-objects they link their logs so that we have a call hierarchy Most calls in the objects will declare that they opened a function, log that, and log the result or a comment With this we can easily see what the code did in the Insights. How to Use in Your Code We strongly suggest that you use the same concepts in your code. You'll have to look at the 2sxc/EAV source in Github to discover more. Use on Object Object Creation All objects which have a log, have a Log property which you can use to add notes. This is the most common way to log. Normally they will inherit from: ToSic.Lib.Services.ServiceBase This is for services which have a few dependencies. ToSic.Lib.Services.ServiceBase<Dependencies> This is for services which have a lot of dependencies. In this case you'll have to pass the dependencies to the base class. Dependencies usually inherit from ToSic.Lib.Services.ServiceDependencies. ToSic.Lib.Services.HelperBase This is for helpers which are not services and will usually be created in code (not from DI). You can also just create normal objects and implement ToSic.Lib.Logging.IHasLog. Note that if you're inheriting from ServiceBase<Dependencies> then the dependencies class should inherit from ToSic.Lib.Services.DependenciesBase. Log Linking For optimal log structures, they should be linked together. This helps to show the call hierarchy in the Insights. This is fully automated, if you adhere to the conventions. It works as follows: Any object inheriting from ServiceBase should call ConnectServices in the constructor. TODO: EXAMPLE Any object inheriting from ServiceBase<Dependencies> should pass the dependencies into the base constructor. The dependencies are then available on a Deps property. For this to work, the Dependencies should inherit from ServiceDependencies and in the constructor call ConnectServices. Logging Basic Messages You can log messages with the following methods (they are kept very short to keep the code compact): Log.A - add a message Log.W - add a warning Log.E - add an error All of these methods have a first string parameter containing the message to add. They also all have an optional parameter called timer. If this is set to true using timer: true then the log will also contain the time it took to execute the method. Exceptions You can log exceptions with the following methods: Log.Ex - add an exception Log Properties Properties use getters and setters. To log these, you must consider a few aspects: do you want to log every single get/set? Or just the first one? do you want to log both get/set or just one of them? To do this, you have 3 tools at your disposal: Getter(() => result) - this will log the result of the getter Setter(() => result) - this will log the result of the setter Create a GetOnce<T> helper and on the get include the Log - this will only log the initial creation / get of the result Log Methods, Functions, Properties TODO: History Introduced in 2sxc 9.6 Added 2sxc Insights (server-side) v9.31 Major enhancements in v10.22 Moved to ToSic.Lib.Logging in v15.0"
  },
  "net-code/log/index.html": {
    "href": "net-code/log/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Logging in 2sxc / EAV"
  },
  "net-code/platform-api/dnn/dependency-injection.html": {
    "href": "net-code/platform-api/dnn/dependency-injection.html",
    "title": "Dependency Injection in Dnn Skins and Modules | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dependency Injection in Dnn Skins and Modules Since Dnn 9.4, Dependency Injection is built in. It's still fairly basic, so there are some hoops to jump through, but for now it's the recommended way to work with this. Tip Andrew Hoefling wrote a comprehensive guide how to use Dependency Injection in Dnn. Important You need Dnn 9.4+ for these examples to work. 2sxc 13 will only support this form of providing services outside of 2sxc, so if you need this, make sure you upgrade. What works, and what doesn't All 2sxc services can be accessed via DI from Dnn code that support DI - such as themes and modules 2sxc has a full API to provide rendered Blocks, Services and Data to Dnn code Some - but only a few - of Dnn Services are available on DI How Can I Get Dnn Objects using Dependency Injection? As of Dnn 9.10 the answer is mostly no \uD83D\uDE36. Dnn is simply not there yet. Work-in-progress. The documentation is almost non-existant, so if you want to try using Dnn objects, you'll need to dig through Dnn code to get this to fly. History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/platform-api/dnn/index.html": {
    "href": "net-code/platform-api/dnn/index.html",
    "title": "Dnn Platform API Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dnn Platform API Guide This section is about special topics / APIs when programming with 2sxc in DNN. \uD83D\uDC49\uD83C\uDFFD For the general platform topics such as installation, see the Dnn Platform Guide. Sometimes you want to leverage 2sxc to create a solution, provide data input etc. but want to output or re-use the data in your own Module, Skin, Script or something else. This is easy to do. Important We massively improved this in 2sxc 13 which integrates with Dnn 9 Dependency Injection. These examples require Dnn 9.5+ and 2sxc 14+ Dnn Platform API Basics In general, everything in 2sxc is the same for all platforms. For Dnn it's important to realize that its based on some older Frameworks .net Framework 4.7.2 as of DNN 9.6.1, or .net Framework 4.8 for the latest DNN Razor uses the fairly old MVC 3 C# is also an older version, we believe ca. 6.0. For example, you cannot use var x = x?.y?.z because it's not supported in this version. Dependency Injection is still fairly new in DNN not all DNN services are available in dependency injection not all DNN controls can use dependency injection certain uses of dependency injection cause some surprises With this in mind, let's see how we can solve some common challenges. Use Dnn Objects and Services in 2sxc General user, site (portal) and similar information Just use the CmsContext objects - eg. CmsContext.User or CmsContext.Site This is the same across platforms, so code written like this will also run on Oqtane Access really specific DNN objects Use the normal DNN API which is not dependency injection based. For most objects you will use the old static API to get the Current objects. For example, to get the current portal, use PortalSettings.Current Some objects can also be retrieved through Dependency Injection, using GetService<ISomeDnnType>() In general we recommend against using DNN specific objects this, because your work can then not be transported to another platform. Get DNN SQL Data Use standard DNN APIs You can also use Visual Query to retrieve data from DNN tables Use 2sxc Objects and Services in Dnn Skins and Modules \uD83D\uDC49\uD83C\uDFFD See Guide to using 2sxc in Dnn Skins and Modules History 2sxc v1 was for Dnn 4 in 2012 2sxc v14 requires Dnn 9.6.1 or newer and is fully integrated in the DNN Dependency injection, so DNN can get 2sxc services and vice versa. History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/platform-api/dnn/modules-extended.html": {
    "href": "net-code/platform-api/dnn/modules-extended.html",
    "title": "Use 2sxc Services in Dnn Modules - Extended | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use 2sxc Services in Dnn Modules - Extended This is some additional information regarding the use of 2sxc Services in Dnn Modules. \uD83D\uDC49\uD83C\uDFFD Normally you don't need this, you need Use 2sxc Data, Services or Output in Dnn Themes/Skins and Modules Important to Understand: Dnn Modules inherit from the PortalModuleBase This has a property called DependencyProvider This is a .net Standard 2 IServiceProvider The naming is a bit unfortunate, since normally we talk of ServiceProvider and this is called DependencyProvider but otherwise it works the same. Get Service Provider on a Module This just shows the standard way of getting the service provider. It's harder and not recommended. Modules have a property called DependencyProvider which is actually the IServiceProvider of the current scope. To get a 2sxc Service with this, you could write code like this using ToSic.Sxc.Services; var jsonSvc = (IJsonService)DependencyProvider.GetService(typeof(IJsonService)); var json = jsonSvc.ToJson(someObject); This is a bit clunky, so usually we'll add the namespace Microsoft.Extensions.DependencyInjection and write this: Che general way to get the service provider is: using Microsoft.Extensions.DependencyInjection; using ToSic.Sxc.Services; var jsonSvc = DependencyProvider.GetService<IJsonService>(); var json = jsonSvc.ToJson(someObject); Important: if you try to do this in a Dnn Skin/Theme it will fail, because the DependencyProvider object is missing."
  },
  "net-code/platform-api/dnn/obsolete-dnn.html": {
    "href": "net-code/platform-api/dnn/obsolete-dnn.html",
    "title": "Use 2sxc Instances or App-Data from External C# Code | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use 2sxc Instances or App-Data from External C# Code Warning This is obsolete documentation for older versions of 2sxc and not best practice. We left it here for old-timers who may still need to use this. Please use NetCode.External.Index instead. If you can in any way, do not use this, these APIs are deprecated. Sometimes you want to leverage 2sxc to create a solution, provide data input etc. but want to output or re-use the data in your own Module, Skin, Script or something else. This is easy to do. Simple Example Imagine this was your C# code in your WebForms Code-Behind: // the app id var appId = 42; // create a simple app object to then access data var appSimple = ToSic.Sxc.Dnn.Factory.App(appId); // example getting all data of content type Tag var tags = appSimple.Data[\"Tag\"]; // example accessing a query var tagsSorted = appSimple.Query[\"Tags sorted\"]; // Creating an entity var vals = new Dictionary<string, object>(); vals.Add(\"Tag\", \"test-tag\"); vals.Add(\"Label\", \"Test Tag\"); App.Data.Create(\"Tag\", vals); Example of Gaining Access to Links Managed in a simple 2sxc Content App Imagine you have a theme using DDR Menu with Razor Templates. The theme has a MegaMenu and you want to include one or more featured links that will change often and those links are easily managed in the Content App using the Links Content-Type with any of the default Views. Your C# code in your MegaMenu.cshtml file could get access to those Links like this: // the details you need to know // var appId = 2; // Content App is usually 2, but thanks to DynamicCode, we don't need this var tabId = 234; // this is the page with the Links View on it var modId = 678; // this is the module ID of the Links View // get the BlockBuilder var block = ToSic.Sxc.Dnn.Factory.CmsBlock(tabId, modId); // the get the DynamicCode instance (Code.DnnDynamicCodeRoot) of the block var dynCode = ToSic.Sxc.Dnn.Factory.DynamicCode(block); // if we were running \"inside\" 2sxc, we would just do this: // var links = AsList(Data[\"Default\"]); // but instead we use our magical DynamicCode instance like this var links = dynCode.AsList(dynCode.App.Data[\"Default\"]); <ul> foreach (var link in links) { <li> @link.EntityTitle, <a href=\"@link.Link\">@link.LinkText</a> </li> } </ul> Read also Dnn Factory API To dive deeper, you must check the blog post History Introduced in 2sxc 08.03"
  },
  "net-code/platform-api/dnn/register-service.html": {
    "href": "net-code/platform-api/dnn/register-service.html",
    "title": "Create and Register Custom Services in Dnn | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Create and Register Custom Services in Dnn If you are creating your own solutions and want to provide the services to DNN or 2sxc code, this is what you need to know. Note This requires Dnn 9.4+ You need to create a class that implement IDnnStartup like this using azing.Catalog.Permissions; using DotNetNuke.DependencyInjection; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.DependencyInjection.Extensions; namespace azing.Catalog { public class StartupAzing : IDnnStartup { // This is the new v13 mode, requires DNN 9.44+ public void ConfigureServices(IServiceCollection services) { services.TryAddTransient<AppPermissions>(); } } } History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/platform-api/dnn/theme-extended.html": {
    "href": "net-code/platform-api/dnn/theme-extended.html",
    "title": "Use 2sxc Services in Dnn Themes - Extended | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use 2sxc Services in Dnn Themes - Extended This is some additional information regarding the use of 2sxc Services in Dnn Themes. \uD83D\uDC49\uD83C\uDFFD Normally you don't need this, you need Use 2sxc Data, Services or Output in Dnn Themes/Skins and Modules Get Service Provider on a Theme / Skin This is unfortunately not prepared well - I guess at the time it was developed this wasn't seen as an important use case. Dnn has Dependency Injection prepared for each request Each Request has a separate Scope (to not mix services between requests) This scoped Service-Provider is cached on the HttpContext Dnn has a special extension method called GetScope() to work with this - see docs To get a 2sxc Service in a Skin, you can write code like this: Note that this is harder and not recommended. The general way to get the service provider is: <%@ Import Namespace=\"DotNetNuke.Common.Extensions\" %> <%@ Import Namespace=\"Microsoft.Extensions.DependencyInjection\" %> <%@ Import Namespace=\"ToSic.Sxc.Services\" %> <script runat=\"server\"> protected override void OnPreRender(EventArgs e) { base.OnPreRender(e); var sp = HttpContext.Current.GetScope().ServiceProvider; var renderService = sp.GetService<IRenderService>(); } </script> or another example using DotNetNuke.Common.Extensions; using System; using Microsoft.Extensions.DependencyInjection; using ToSic.Sxc.Services; var sp = HttpContext.Current.GetScope().ServiceProvider; var jsonSvc = sp.GetService<IJsonService>(); var json = jsonSvc.ToJson(someObject);"
  },
  "net-code/platform-api/dnn/themes-modules.html": {
    "href": "net-code/platform-api/dnn/themes-modules.html",
    "title": "Use 2sxc Data, Services or Output in Dnn Themes/Skins and Modules | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Use 2sxc Data, Services or Output in Dnn Themes/Skins and Modules Sometimes you want to render a 2sxc Block into a Theme or another Module - or just use 2sxc Data and services. In general this is a two step process: Get the current Service Provider (with the right Scope) from DNN or HttpContext and ask for the specific service you need Use the service Step 1: Get the Service Provider The service provider is the object which knows how to create all the services. It will retrieve any services that have been registered before - including all public 2sxc services. It's important to know about the scope of the service provider. Basically there is a global scope, which is doesn't know about the current page or module. Then there is a current scope which is the scope of the current page or module. So if you ask the global scope for a service, that service will not know about the current user permissions or what page the code is running on. Dnn creates an own scope for each page request, and places it on the HttpContext. The \"real\" way to get it is fairly difficult, so 2sxc provides a shortcut using this.GetScopedService<T> (docs). Here's an example how to get it in a Theme/Skin or Module: <%@ Import Namespace=\"ToSic.Sxc.Services\" %> <script runat=\"server\"> protected override void OnPreRender(EventArgs e) { base.OnPreRender(e); var renderService = this.GetScopedService<IRenderService>(); } </script> Note: if you want to know the hard way, it's documented here for themes and here for modules. Step 2: Do something with the Service Example 1: Render a Block This is the most common use-case: you want to render a 2sxc Block into a Theme or Module. <%@ Import Namespace=\"ToSic.Sxc.Services\" %> <script runat=\"server\"> public dynamic blockHtml; protected override void OnPreRender(EventArgs e) { base.OnPreRender(e); int pageId = 42; int moduleId = 242; blockHtml = this.GetScopedService<ToSic.Sxc.Services.IRenderService>().Module(pageId, moduleId); } </script> <%= blockHtml %> What's important: The blockHtml variable is a dynamic object - this just makes it easier to code. You could specify the type ToSic.Sxc.Blocks.IBlock but that adds complexity. Internally the blockHtml could do a bit more, but that's not relevant for this scenario. Retrieving the blockHtml it inside the OnPreRender event is important, because it ensures that any side-effects such as adding JS/CSS to the page work. Example 2: Get data in a DNN Razor File Imagine you have a theme using DDR Menu with Razor Templates. The theme has a MegaMenu and you want to include one or more featured links that will change often and those links are easily managed in the Content App using the Links Content-Type with any of the default Views. Your C# code in your MegaMenu.cshtml file could get access to those Links like this: using ToSic.Sxc.Services; // the details you need to know // var appId = 2; // Content App is usually 2, but thanks to DynamicCode, we don't need this var tabId = 234; // this is the page with the Links View on it var modId = 678; // this is the module ID of the Links View // Get the Service for generating DynamicCode // We must use DnnExtensions.Get... instead of this.GetScopedService because we're in an external Razor var dynCodeSvc = DnnExtensions.GetScopedService<IDynamicCodeService>(); // the get the DynamicCode instance of the module var dynCode = dynCodeSvc.OfModule(tabId, modId); // Note: you could also do this: // var appId = 27; // var dynCode = dynCodeSvc.OfApp(appId); // if we were running \"inside\" 2sxc, we would just do this: // var links = AsList(Data[\"Default\"]); // but instead we use our magical DynamicCode instance like this var links = dynCode.AsList(dynCode.App.Data[\"Default\"]); <ul> foreach (var link in links) { <li> @link.EntityTitle, <a href=\"@link.Link\">@link.LinkText</a> </li> } </ul> Example 3: Create 2sxc Data The following example is written in c# to make it easier to read. Your code could differ depending on where you place it (.cs file, .ascx file, etc.) using ToSic.Sxc.Services; var dynCodeSvc = this.GetScopedService<IDynamicCodeService>(); // the app id var appId = 42; // create a simple app object to then access data var appSimple = dynCodeSvc.App(appId); // example getting all data of content type Tag var tags = appSimple.Data[\"Tag\"]; // example accessing a query var tagsSorted = appSimple.Query[\"Tags sorted\"]; // Creating an entity var vals = new Dictionary<string, object>(); vals.Add(\"Tag\", \"test-tag\"); vals.Add(\"Label\", \"Test Tag\"); App.Data.Create(\"Tag\", vals); History 2sxc v1 was for Dnn 4 in 2012 External use API for DNN Introduced in 2sxc 08.03 Old API archived for v13 - see old Dnn Factory Docs Created new IDynamicCodeService in v13 2sxc v14 requires Dnn 9.6.1 or newer and is fully integrated in the DNN Dependency injection, so DNN can get 2sxc services and vice versa. History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/platform-api/oqtane/dependency-injection.html": {
    "href": "net-code/platform-api/oqtane/dependency-injection.html",
    "title": "Dependency Injection in Oqtane | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Dependency Injection in Oqtane Oqtane has used Dependency Injection since day one, so it's much better integrated than with Dnn. How Can I Get Oqtane Objects using Dependency Injection? Oqtane uses the same Dependency Injection like 2sxc, so your Razor-Code can access all Oqtane objects using GetService<ISomeOqtaneInterface>(). Just be aware of the fact that Oqtanes architecture is very different from the classic setup, so many services documented in the Oqtane docs will actually behave as remote services, so they will internally call http-endpoints to perform their work. This makes many Oqtane Services a bit slower than you might expect. Can I Use Razor .net Core @inject in Oqtane? Yes you can, as the 2sxc DI is fully integrated with the Oqtane DI. So your Razor could also do this: @inject ICmsContext Context How can I get 2sxc Objects in Oqtane Blazor Controls? This is currently not possible, as most of 2sxc runs on the server, while the Blazor controls run in the client. We're working on this. History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/razor-blade/index.html": {
    "href": "net-code/razor-blade/index.html",
    "title": "RazorBlade Library | 2sxc 19 for Dnn and Oqtane",
    "keywords": "RazorBlade Library 2sxc includes RazorBlade - a very neat library of helper tools to get things done. It includes features such as: Text helpers to check if something has text, truncate/ellipsis text and more Tags helpers to strip HTML, make safe URLs and more Tag fluent API to create complex HTML using code HtmlPage helper to change the page title, add meta- and open-graph headers etc. Discover More in the RazorBlade Tutorials We have an rich series of RazorBlade tutorials. You should really check them out \uD83D\uDC4D. Example The following example is taken from the tutorials. It shows how to use @Text.Zip(...) to ensure that a string containing random white spaces is cleaned up. This is useful for counting visible characters or truncating text. @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @{ var samples = new string[] { \"This contains multi-spaces and \\t\\t\\t tabs\", \"This has \\n \\n line-breaks\" }; } <h2>Correct and incorrect Character Counts</h2> <table class=\"table table-hover\" width=\"100%\"> <!-- table header --> <tr> <th>Html output hides the problems</th> <th class=\"table-warning\">Whitespace output showing problems</th> <th>Length</th> <th class=\"table-success\">Output using Text.Zip(...)</th> <th>Zip Length</th> </tr> <!-- the real code --> @foreach(var s in samples) { <tr> <td>@s </td> <td class=\"table-warning\" style=\"white-space: pre-wrap;\">@s</td> <td>@s.Length </td> <td class=\"table-success\" style=\"white-space: pre-wrap;\">@Text.Zip(s)</td> <td>@Text.Zip(s).Length</td> </tr> } </table> Learn to Leverage RazorBlade Visit Razor-Blade.net Website Check out the RazorBlade Tutorials WolfExMachina tutorial for OpenGraph"
  },
  "net-code/razor/base-classes.html": {
    "href": "net-code/razor/base-classes.html",
    "title": "@inherits Base Classes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "@inherits Base Classes Every Razor template inherits from a base class - and depending on that the features in the template will change. Recommendation for v17+ These are the base classes you can inherit from as of v14 (we'll explain each in more detail below) Custom.Hybrid.RazorTyped - new in v16 Custom.Hybrid.RazorTyped<TModel> - new in v17.03 AppCode.Razor.AppRazor - new in v17.03 - requires that you have this class in your AppCode folder AppCode.Razor.AppRazor<TModel> - new in v17.03 - requires that you have this class in your AppCode folder AppCode.Razor.Anything - new in v17.03 - requires that you have this class in your AppCode folder Tip Using these base classes ensures that you have the latest, typed APIs. For older base classes and the differences, see Compare Razor @inherits"
  },
  "net-code/razor/blocks.html": {
    "href": "net-code/razor/blocks.html",
    "title": "Razor: Rendering Content-Blocks | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor: Rendering Content-Blocks When using Inner Content the linked content-blocks (apps or pieces of content) must be rendered into the template. Here's how to do it in Razor. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use There are two common use cases Virtual Panes at item level - in this case, the item has it's own pane for placing apps and content-blocks Very Rich Text - where you add content-blocks and apps in the WYSIWYG Item-Level Virtual Panes Here's a quick example which renders an area with all content-blocks: @ToSic.Sxc.Block.Render.All(Content, field: \"InnerContent\") This example creates the area for the content-blocks (important so that the UI appears for editors to add more blocks) and renders all existing content-blocks in the predefined order into that area. Here's a more manual example of doing the same thing, but done manually to demonstrate what happens and to allow myself to add more css-classes: <div class=\"some-class sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> If you care about doing it manually, read more about the Edit object. Very Rich Text / Inner-Content Here's an example how to merge content-blocks with a html-text which has placeholders for each content-block, allowing a mix of text/apps. @ToSic.Sxc.Blocks.Render.All(post, field: \"WysiwygContent\", merge: post.Body) There is a new parameter merge, where you fill in your WYSIWYG-field that contains the content-block(s). Here is a blog tutorial on implementing Very Rich Text. Read also Read more on Razor Edit.ContextAttributes Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Clean API and merge capabilitien in 8.9"
  },
  "net-code/razor/code-behind.html": {
    "href": "net-code/razor/code-behind.html",
    "title": "Razor Templates - Code-Behind | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor Templates - Code-Behind Warning The code-behind feature has been deprecated but will continue to work for older code. So it will only work if you inherit from ToSic.Sxc.Dnn.RazorComponent. If you use any of the newer v12 or v14 base classes, you should either use shared C# or partial views using @Html.Partial(\"_something.cshtml\"). 2sxc 11 introduces a new way to split out most of the C# code from the main template Razor file. We call this code-behind. Best watch the video to get the idea. You can also see a live demo in the Dnn Tutorials. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How Code Behind Works Just create another file with the identical name as your main Razor file, but with .code.cshtml as the extension. So you'll then have something like: _My Message.cshtml (the Razor file) Inherits ToSic.Sxc.Dnn.RazorComponent _My Message.code.cshtml (the new code ) The code file looks just like a normal razor file. Must inherit from ToSic.Sxc.Dnn.RazorComponentCode. Here's an example of such a _My Message.code.cshtml: @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public string Hello() { return \"Hello from inner code\"; } } @helper ShowDiv(string message) { <div>@message</div> } @helper AppName() { <div>App Name is: @App.Name</div> } This is automatically compiled for you and provided to the _My Message.cshtml on the object Code so you can write this code: @inherits ToSic.Sxc.Dnn.RazorComponent <h1>Demo Code Use</h1> <div @Edit.TagToolbar(Content)> Something in it: @Code.Hello() </div> @Code.ShowDiv(\"test helper!\") That's all there is to it \uD83D\uDE09 Tip Why would you do this? The main reason is to keep template-html separate from most of the code. This is common when designers like to modify the html but don't like all that programming stuff. Events on Code Behind Files The code-behind also has same methods/events which are automatically called. These methods can be overriden CustomizeData() This has the same effect as overriding CustomizeData in the template file CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) This has the same effect as overriding CustomizeSearch in the template file Tip Why would you use this? These methods could always be created in the main Razor file, but it looks daunting to have so much code there. A typical CustomizeSearch is very technical and feels scary to people who just want to change the look and feel. Important: Passing Around Anonymous Objects One of the advanced things you may want to do is have helper functions looking up multiple things, and returning a complex object like this example in the code-behind: @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public dynamic Hello() { return new { Title = \"title\", Message = \"msg\"}; } } Which is used like this @inherits ToSic.Sxc.Dnn.RazorComponent <h1>Demo Code Use</h1> <div @Edit.TagToolbar(Content)> @{ var hello = Code.Hello(); } Something in it: @hello.Title <br> </div> This works and is no big deal, but there are known cases where this breaks, usually with a message like somehing not found on object. The reason is bugs in the .net caching of compiled code, specifically if methods exists in various places with the same name. You can resolve this in 3 ways Restart iis (uncool) Rename the method (ok, bun not sexy) Return a typed object instead of untyped (recommended). In the above example, change to this: @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public class TitleAndMessage { public string Title; public string Message; } public dynamic Hello() { return new TitleAndMessage { Title = \"title\", Message = \"msg\"}; } } History Code-Behind Introduced in 2sxc 11.0 Code-Behind deprecated in 2sxc 12 because it's not compatible with Oqtane"
  },
  "net-code/razor/customizedata.html": {
    "href": "net-code/razor/customizedata.html",
    "title": "Event CustomizeData() on the Razor Page (Dnn ☢️ only) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Event CustomizeData() on the Razor Page (Dnn ☢️ only) Warning This is an older way to customize the Dnn search index. It is deprecated. Use the new mechanisms explained in Search Customizations This event is called by the view-engine before the rest of the script is parsed - and it's usually empty. It can be overriden to change/configure what data is delivered to the template or search-index. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @functions{ // Prepare the data - get all categories through the pipeline public override void CustomizeData() { // new features in 6.1 - the App DataSource CreateSource<App> and also the RelationshipFilter // Just add the items which have the relationship to the category in the URL var qsOfCat = CreateSource<RelationshipFilter>(App.Data[\"QandA\"]); qsOfCat.Relationship = \"Categories\"; qsOfCat.Filter = \"[QueryString:Category]\"; Data.In.Add(\"QandA\", qsOfCat[\"Default\"]); } } Since the code above is run before the rest of the template is executed, the Data object now has a stream called QandA which the rest of the template can access using Data[\"QandA\"]. Notes and Clarifications In general, you can override this event to prepare data. It has a few benefits like It's always called, even if the data is not templated - for example when it's streamed as JSON or when it's prepared for search indexing In the future, most data-preparations will be possible through a visual designer, but for now, this is the best way to go. Connection to Search index The CustomizeData event runs both when rendering the template as well as when the search is running. For further details you may want to read about InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeSearch - which let's you write code to alter how the data is processed in the search-index Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.1"
  },
  "net-code/razor/customizesearch.html": {
    "href": "net-code/razor/customizesearch.html",
    "title": "Event CustomizeSearch() on the Razor Page (Dnn ☢️ only) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Event CustomizeSearch() on the Razor Page (Dnn ☢️ only) Warning This is an older way to customize the Dnn search index. It is deprecated. Use the new mechanisms explained in Search Customizations This event is called by the view-engine after calling CustomizeData and before passing the Data object to the Dnn Search Indexer. You can override this event to change how data is presented to the search, for example by bundling items together, or by giving items different URLs so that search knows that they are to appear on a sub-page. Tip 2sxc 11 introduces Code-Behind. You can now place the CustomizeSearch(...) method in the code-behind file. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @using ToSic.Eav.Run; @using ToSic.Sxc.Dnn.Run; @using ToSic.Sxc.Search; @functions { // this method is optional - your code wouldn't need it, but it's in here to show how it would work together // the CustomizeData would be called first, and potentially modify what is in the Data-object public override void CustomizeData() { // Don't customize anything, nothing to customize in this case } /// <summary> /// Populate the search - ensure that each entity has an own url/page /// </summary> /// <param name=\"searchInfos\"></param> /// <param name=\"moduleInfo\"></param> /// <param name=\"startDate\"></param> public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) { foreach (var si in searchInfos[\"Default\"]) { // tell the search system what url it should use in the result si.QueryString = \"mid=\"+ (moduleInfo as DnnContainer).Id + \"&feature=\" + si.Entity.EntityId; } } } The code above will skip customizing any data (but often you would want that too), then CustomizeSearch modifies the list of search-items before they are indexed. How it works In general everything will work automatically. This is what happens: 2sxc will retrieve the data added to this module 2sxc will call the CustomizeData() event if the template has such an event. In this event, your code can add more data to the module as needed. Note that during the search index, no Request-variables exist. So your method will cause an error if it does something like var x = Request[\"Category\"]. In case of an error, the index will still continue to work, but your changes to the data will fail To help you with this, a new property called Purpose was added. It tells you if this view/template was created for displaying or for indexing. 2sxc will then use the data and create SearchItems, ready to index. Each entity will be turned into a SearchItem Each Content-Type will have an own list (so you can differentiate between all the SearchItems for the Categories and the SearchItems for the Questions) Multi-Language is handled correctly, so the English index will contain the English content, etc. 2sxc will then call a CustomizeSearch() event, so your code could provide changes. A common scenario is to say that each entity (say each question) has a different URL (say a details-page). So even though all entities belong to the module (and Dnn only knows of this one module), the module can say that each entity has an own details page. One this is done, the SearchItems are converted to official SearchDocument-objects and handed over to Dnn Read also Purpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.2 Added support for newer Dnn versions at a later time - not sure when"
  },
  "net-code/razor/edit.contextattributes.html": {
    "href": "net-code/razor/edit.contextattributes.html",
    "title": "ContextAttributes in Razor-Output | 2sxc 19 for Dnn and Oqtane",
    "keywords": "ContextAttributes in Razor-Output Technically the entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. These scripts need to know what Context they are in, meaning which Dnn-Module, which 2sxc-App, which Zone, permissions etc. By default, this context is already provided by the environment, but sometimes a new context must provide overrides. This is rare, but important, for example using Inner Content (Content Within Other Content). So the ContextAttributes will provide this information in some hidden html. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How it works The Edit.ContextAttributes(...) is always used inside an HTML-tag and will add some attributes with JSON. Any buttons or actions inside that tag will then find this information, and assume that it is has precendence over the global information. What do You need to do? By default, this context is already provided by the 2sxc-environment, but sometimes a new context must provide overrides. For example using Inner Content (Content Within Other Content). For this you need the Edit.ContextAttributes - see docs here. How to use This example shows the title and will add the standard editing-buttons for the Content item. Here's an Inner Content (Content Within Other Content) example: <div class=\"app-blog-text sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> In this example, the Edit.ContextAttributes will add some attributes with JSON, which will help the toolbars inside that loop to correctly edit those items, and not the main item around it. How it works The Edit.ContextAttributes(...) is always used inside an HTML-tag and will add some attributes with JSON. Any buttons or actions inside that tag will then find this information, and assume that it is has precendence over the global information. Using ContextAttributes These context-attributes enhance an HTML-tag, so that buttons inside that tag can be in a different context than the original context. Here's a common example: imagine you have a 2sxc-instance (a module showing 2sxc-data) and all the buttons there know the App-ID, the Zone, the Content-Type etc. Inside this module, you can have multiple items but they all still work well in the original context (all items are in the same app, so an edit-dialog will also know the AppId). Read also Inner Content (Content Within Other Content) Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4"
  },
  "net-code/razor/edit.enable.html": {
    "href": "net-code/razor/edit.enable.html",
    "title": "Method in C# Razor (Deprecated) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "@Edit.Enable Method in C# Razor (Deprecated) Warning This is deprecated but will continue to work for a very long time. For anything new, see Activate 2sxc JavaScript APIs on a Page Editing or adding data to a 2sxc app requires the UI to have some JS, CSS and context information. This is only loaded/included for editors/admin/super-users, and not available for users with limited permissions. If you want to enable this for more restricted users - for example when you want to use the 2sxc-form to let users add data - this must be enabled. That's what Edit.Enable(...) is for. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use This example shows how you enable the UI using Razor, which will allow public users to create data: <div> @Edit.Enable(api: true, forms: true, context: true, autoToolbar: false) </div> This example ensures that api: basic JS for editing are loaded, allowing you to then run javascript commands like $2sxc(...).run(...) forms: additional JS is loaded, enabling the standard form dialogs to open context: the html contains context-information about the app, so that the dialogs actually work - see also edit context the auto-toolbars are disabled (this would generate a default toolbar if no toolbar was specified) Usage Notes This command simply enables editing - but doesn't provide any permissions or show any buttons yet. Here are a few things you must know to get this to work: remember to set permissions to allow what you want to do (like create new draft items for public users) Edit.Enable uses named parameters, so you always have to use the api: true syntax the Edit.Enable won't output anything in the position it's added, because it controls the main wrapper you must also create a link or toolbar in your code for the public users, as they won't have a button to press otherwise Read also Tutorial app for Public Forms Blog Recipe for using Public Forms with 2sxc History Introduced in 2sxc 9.30"
  },
  "net-code/razor/edit.html": {
    "href": "net-code/razor/edit.html",
    "title": "Edit / Object in Razor / .net | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Edit / @Edit Object in Razor / .net The entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. Writing this JS would be complicated to say the least, so the Edit object provides the Razor-Template an intelligent, fast way to generate what's necessary. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use Here's a quick example of using the Edit object in a Razor template: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> <div>...</div> This example shows the title and will add the standard editing-buttons for the Content item. Here's an Inner Content (Content Within Other Content) example: <div class=\"app-blog-text sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> In this example, the Edit.ContextAttributes will add some attributes with JSON, which will help the toolbars inside that loop to correctly edit those items, and not the main item around it. What's In the Edit Object The Edit-object is always available in all Razor-templates. Read the API: IEditService. A short summary of what's inside Check or Enable Editing Mode Edit.Enable(...) allows you to enable editing functionality even if it's not available by user permissions, see more Edit.Enabled (boolean) Tells you if it's edit-mode or not, allowing your code to output other things if edit is enabled. Work with Toolbars Creates a Toolbar, see Razor Edit Toolbar. Edit.TagToolbar(...) attribute (2sxc 9.40+, recommended) it is used inside a tag like <div @Edit.TagToolbar(Content)> to create best-practice hover toolbars Edit.Toolbar(...) (2sxc 8.04+) is used like a tag (it generates an invisible <ul> tag) and is used for non-hover toolbars. Create HTML Attributes if in Edit Mode Edit.Attribute create any attribute on the condition that the user may edit the page, using Edit.Attribute(name, string|object) for use in things like <div class=\"...\" @Edit.Attribute(\"data-enable-edit\", \"true\") >...</div> Create Context-Attributes for the UI (advanced use cases) Edit.ContextAttributes(...) creates Context-Information for other edit-functionality. This is advanced, and currently only needed for Inner Content (Content Within Other Content)) - read about it on [Razor Edit.ContextAttributes](xref:Razor.ContextAttributes] Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.04 Enhanced with Enable(...) method in 9.30 Enhanced with TagToolbar(...) in 9.40"
  },
  "net-code/razor/edit.toolbar.html": {
    "href": "net-code/razor/edit.toolbar.html",
    "title": "and Methods in Razor / .net | 2sxc 19 for Dnn and Oqtane",
    "keywords": "@Edit.TagToolbar and @Edit.Toolbar Methods in Razor / .net 2sxc has a cool in-page toolbar system - here you'll find a conceptual overview around the toolbar. These toolbars are usually hover-buttons like this: Technically the entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. Writing this JS would be complicated to say the least, so the @Edit.TagToolbar(...) and @Edit.Toolbar(...) are your tools of choice for adding toolbars from Razor. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use Here's a quick example of using the Edit object in a Razor template: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> This example will output the item title in an h1 tag and add a hidden, appear-on-mouse-over toolbar with editing-buttons for the item named Content. Let's assume you're building the details-page of a news-app and you only want the edit/remove buttons, to improve the UI for your use case. Additionally, you want the mouse-hover to react on the whole article, not just oven the title. Here's how: Warning 2sxc 10.27 introduces a new, simpler API to customize the toolbar. So the instructions below are technically correct, but not recommended any more. Check out the much simpler toolbar customizations @* this will show an \"edit and remove\" button for the current item *@ <div @Edit.TagToolbar(Content, actions: \"edit,remove\")> <h1> @Content.Title </h1> @Html.Raw(Content.Body) </div> Here's a different example, how to create a toolbar with only one button, namely an add new item button to create a new BlogPost-item. @* this will show an \"add\" button if the current user is an editor *@ <h1 @Edit.TagToolbar(actions: \"new\", contentType: \"BlogPost\")> @Content.Title </h1> As you can see, the actions: \"new\" tells the toolbar to only show this one button, while the contentType: \"BlogPost\" says what content-type this new item should be. As this toolbar won't have buttons that modify an existing item, it doesn't need that parameter. How it works This command is part of the Edit object and used in Razor templates. It provides a simple API to generate in-page buttons if the current user is an editor. It also checks if edit should be enabled (based on security specs) and will then generate some HTML/JavaScript at that location. Common Tasks Here are a few snippets that you'll typically need, saving you from reading all the docs in common scenarios: Edit.Toolbar(employee) creates a default toolbar for the content-item employee with all default buttons like edit, change-view, more, etc. Edit.Toolbar(employee, actions: \"edit\") creates a toolbar for the item employee but only with the edit-button. Edit.Toolbar(employee, actions: \"edit,add,remove\") creates a toolbar with three buttons edit, add, remove Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\") creates a toolbar with one button, namely new which will open a new BlogPost form. @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Title = \"Hello\", Color = \"red\" } ) creates a toolbar with one button, namely new which will open a new BlogPost form, and prefills the Title and Color field. The Toolbar Actions Note: at the moment, the buttons are grouped into bundles like initial buttons list buttons template / view buttons app buttons The actions can be a combination of known button-names. Here's the current JavaScript catalog of commands: The following commands all require target to be set, or they only make sense in a List-setup - see also content and not as data. new open a dialog to create a new item, requires a target or a contentType parameter edit to edit the current item publish will optionally show the publish-button, but only if the current item is not published. add opens a dialog to create a new item just like new, but will add it below the current item in the content list remove will remove (not delete) this item from the content list moveup will move the item up one position in the content list movedown will move the item down one position in the content list sort will open the sort dialog of the content list replace will open a dialog to swap the current item in the content list Note: the command metadata - is a bit special, not supported in the actions parameter - use the complex toolbar: instead and read the instructions for the JS Commands. For many more commands you should check the JS Commands), which covers many more like app-import, layout, develop, contenttype, contentitems, app, zone, more etc. More About the Prefill Basically this is a .net object which will be serialized to JSON and used to prefill a new item. Usually you'll just create a new, anonymous object like new { Title = \"xyz\", Date = ... }. example @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Title = \"Hello\", Color = \"red\", Link = \"page:\" + Dnn.Tab.TabID } ) This example will prefill the title, the color and in the link field add a reference to the current page. Multiple Entities Prefil For this you must simply provide an array of strings, like this: @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Tags = new string[] {\"08387a10-1aac-494a-9eb5-1383e31490eb\",\"b498a694-047a-4e51-a285-50f9a64edda1\"} }) Styling the Toolbar As of now there are only limited stying functions: Floating the Toolbar This happens automatically, if a surrounding HTML-tag has a class \"sc-element\". more... What Really Happens with the toolbar As previously noted, the toolbar actually puts some html/js into the page, which the javascript $2sxc object will pick up and work with. Quite a lot happens on the client, and that will be documented some other day. Here just the short version: js runs, picks up Toolbars jc reviews DOM to see what context it's in (either the module-instance or an inner-content) js generates buttons if a button is clicked, an action-manager then executes the correct action on the correct item Older @Content.Toolbar Syntax Is Deprecated Note: there was an older @SomeContentItem.Toolbar syntax and this still works, but we ran into architecture issues, so we decided to place all advanced functions into the Edit.Toolbar(...) method. This is the way to go from now on, the old syntax will continue to work but is not recommended any more. Read also In-Page Edit Toolbars and Buttons Toolbar Settings Toolbar Button Definitions Demo App and further links FAQ with Categories More links: Description of the feature on 2sxc docs History .Toolbar() Introduced in 2sxc 8.04 .TagToolbar() introduced in 2sxc 9.40"
  },
  "net-code/razor/file-names.html": {
    "href": "net-code/razor/file-names.html",
    "title": "Razor File Names | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor File Names Topics Underscore Prefix Spaces Casing Partial Files Underscore Prefix No More Underscore in v15 Previously our recommendation was to stick to the conventions of prefixing Razor files with an underscore _. In 2sxc v15 we are changig this recommendation, to not use an undescore. It is simply not relevant and adds a technical feeling to it, which simply is not necessary. Tip Starting in 2sxc v15, the default for Razor files is not to use an underscore. Old Convention with Underscore There is an official convention to prefix all razor files with an underscore _. This would result in files such as _Default.cshtml. This is because IIS will not run any razor files with an underscore, so if a user (or an attacker) would try: https://yourdomain.com/_default.cshtml ...the code would not run. Basically IIS does not run any Razor files with a leading underscore. In addition to that, such files would not be added to the page-tree when creating menus in asp.net MVC. This makes sense in asp.net MVC. Underscore not Relevant for 2sxc In 2sxc the Razor files themselves cannot be accessed. DNN doesn't have a handler for .cshtml files Oqtane has the files in a protected location which is not publicly available All 2sxc Razor files inherit from a custom class, which makes them unusable if called directly Spaces in File Names You can use spaces in file names. All of the following are valid: I Like Spaces.cshtml IDontLikeSpaces.cshtml I-Would-Rather-use-dashes.cshtml Tip The 2sxc Recommendation for Razor files is to use spaces. We believe it makes the files/folders easier to skim in a code editor. Casing You can use any casing you prefer. All of the following are valid: My Razor File.cshtml myrazorfile.cshtml MyRazorFile.cshtml Tip The 2sxc Recommendation for Razor files is to start with upper case. If you do not use spaces in your file names, you should use PascalCase. Naming Partial Files Partial Razor files are called by other files to render parts. A common use case is a sub-template for a complex item in a list. You can name this anyhow you want. But we recommend that parts are named in a way that makes it obvious... ... that they are a part ... if they are shared, or just used by a single other Razor Tip The 2sxc Recommendation is to use the term Part for partial files. We suggest Part User Info.cshtml for parts which are used by many files We suggest [originalfile].part.cshtml for parts which are only used by a single file"
  },
  "net-code/razor/hybrid/index.html": {
    "href": "net-code/razor/hybrid/index.html",
    "title": "Hybrid Razor running on Dnn ☢️ and Oqtane \uD83E\uDE78 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Hybrid Razor running on Dnn ☢️ and Oqtane \uD83E\uDE78 Dnn and Oqtane have a few differences because of these important factors: Different underlying C# and .net frameworks and Razor-Engines Different platforms (Dnn is different from Oqtane) Important This is very advanced stuff and only relevant if you want to create Apps which run on both Dnn and Oqtane. For most of your apps this is not relevant 2sxc Philosophy - Stay out of the Way Our philosophy is to not reinvent the wheel so it's important that we let you use the .net APIs as they are designed. Se we don't plan on creating another API which to hide the differences, but let you understand them and easily handle everything as needed. Core Strategies for Hybrid Razor Templates If you follow these three rules you should be good to go: Inherit from Custom.Hybrid.Razor12 Use very common C# features and syntaxes which existed since C# 7.2 (so anything that runs in Dnn will also run in Oqtane) Use .net standard 2.0 APIs and avoid using System.Web Where necessary, use preprocessor directives as explained below Avoid old Razor Features The old razor had a few features which won't work in .net Core 5 / Oqtane: @helper directive Switch between Code variations in Razor In Oqtane 2 we recommended using #if NETCOREAPP switches in your Razor code. In Oqtane 3, this only works in .cs files. So the only way to switch between code variations in the latest Razor is to use normal @if(...) statements and place your platform specific code in sub-files. @if(CmsContext.Platform.Name == \"Oqtane) { // OqtaneStuff which doesn't trigger compile errors can be inline someVar = \"Oqtane\"; // Code which would trigger compile errors must be in a separate file @Html.Partial(\"OqtaneCode.cshtml\"); } else { // DnnStuff - same principles } The Preprocessor Directives in .cs files C# has special #if preprocessor statements which are evaluated during compilation. Using this you can define which code should be used in Dnn and Oqtane. #if NETCOREAPP // OqtaneStuff #else // DnnStuff #endif The following symbols are set when Api Controllers are compiled: Key True for Dnn True for Oqtane Comments NETCOREAPP ⛔ ✅ Only works in WebAPIs and code (.cs) OQTANE ⛔ ✅ Only works in WebAPIs and code (.cs) Important: These don't work in Razor on Oqtane 3+ because we cannot activate these in the compiler - so they only work in .cs files Different C# and .net Frameworks Part Dnn 7 Dnn 9 Oqtane C# Language ca. 7 ca. 7 C# 9 .net Framework 4.5.1 4.7.2 .net core 5 .net Standard 1.6 2.0 2.0 Any hybrid controller must limit itself to features in .net standard 1.6 or 2.0, depending on the platforms you want to support. Note that any 2sxc standard apps are meant to still run in Dnn 4.7.2, so we'll restrict our work to support .net standard 1.6. This means our examples are more limited than what you will be doing. Differences in the Platforms If you are creating hybrid controllers, we'll assume that you usually don't need to access properties of Dnn or Oqtane. If you do, you'll have to use the standard mechanisms provided by these. In Dnn - use global objects like PortalSettings.Current In Oqtane use Dependency Injection To avoid the code from causing trouble during compilation, wrap the necessary differences in #if NETCOREAPP ... #endif and #if !NETCOREAPP ... #endif blocks in C# To avoid the Razor from causing trouble during compilation, wrap the necessary differences in @if(CmsContext.Platform.Name == \"Oqtane\") { ... } blocks in Razor Limitations for @using Statements The Razor Compiler in Dnn & Oqtane behave a bit differently regarding preprocessor statements. So you cannot use them for @using ... statements. This WILL NOT WORK: @{#if unknown} @using DotNetNuke.Framework.JavaScriptLibraries; @{#endif} In Dnn it will work, but in Oqtane / .net 5 it will not result in an error, because the @using statements are handled in a way which doesn't result in them being skipped. If you only need the namespace on a single command, just use the full namespace in your command, like this: if(fancybox || scripts) { #if(CmsContext.Platform.Name == \"Dnn\") { // Put this line in a separate file to call from here // DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(DotNetNuke.Framework.JavaScriptLibraries.CommonJs.jQuery); } } If you have complex code, a simple trick is to place it in a separate file (so the Razor compiler won't complain) and then use CreateInstance(...) or Html.Partial(...) to call that if you are in the correct system. Set Page Properties and Headers for Hybrid Apps In Dnn you were able to use RazorBlade to set Title or add Headers. Since RazorBlade has a static implementation, this cannot work in Oqtane. To solve this we created the IPageService. Set Http Status Codes for Hybrid Apps In Dnn you could simply get the HttpContext and change the Response object. This uses a static implementation which dosen't work in Oqtane. To solve this we created the IPageService. Search Integration Previously in Dnn you could write some CustomizeSearch code in the Razor-file which we decided to deprecate in future. From now on please use the the feature described here. Note that as of now, Oqtane doesn't have a search indexer, so there it will simply have no effect, but your code will run on both platforms. History Introduced in 2sxc 12.00"
  },
  "net-code/razor/index.html": {
    "href": "net-code/razor/index.html",
    "title": "Razor Components / Templates | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Razor Components / Templates Razor Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. you are here (click to zoom) - discover the stack .context-box-process .process-razor { visibility: visible; } Here's an example: @inherits Custom.Hybrid.Razor12 <ul> @foreach(var person in AsList(App.Data[\"Persons\"])) { <li>@person.Name</li> } </ul> Razor Components/Templates are the most powerful templates in 2sxc since you can program anything you want using C#. They use the Asp.Net Razor engine and contain normal HTML intermixed with Razor placeholders like @Content.FirstName or longer code blocks usually marked with @{ ...}. The template files usually reside inside App root folder or sub folder. These always begin with an _ and end with .cshtml. Note The View Configuration determines which razor file is being loaded. If you are using Polymorphism then you may have multiple razor files with the same name in various folders, and Polymorph will decide which one will be shown. Get Started with Razor Templates Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Install some Apps from the App Catalog - almost all apps use Razor Learn the APIs using The Razor Tutorials using these docs The technical RazorComponent API We also suggest you look into the RazorBlade library which has a lot of neat helpers Read also Views Templates Token Templates Razor Tutorial Tips Tip To use the latest features of 2sxc 12+, make sure your razor file begins with the line @inherits Custom.Hybrid.Razor12 Otherwise your Razor templates is based on the default, older component code. History Introduced in 2sxc 1.0"
  },
  "net-code/razor/migrate-to-v10.html": {
    "href": "net-code/razor/migrate-to-v10.html",
    "title": "Migrating from the old Razor (before 10.20) to the new RazorComponent | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Migrating from the old Razor (before 10.20) to the new RazorComponent Warning These are old docs. If you migrate, you should migrate to Custom.Hybrid.Razor14 The RazorComponent was created in v10.20 to provide a newer, cleaner API. To not break existing code, old templates still work, but you must migrate a template to RazorComponent if you wish to use the new features. Here what you need to do:"
  },
  "net-code/razor/obsolete/index.html": {
    "href": "net-code/razor/obsolete/index.html",
    "title": "Obsolete, Old APIs in Razor | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Obsolete, Old APIs in Razor 2sxc has been around since 2012 and therefor has had various things which were redesigned and improved - sometimes making old implementations / APIs obsolete. We try very hard to ensure that old APIs still work - so most of the APIs you'll see here will actually continue to work, but you shouldn't use them as they fall into one of these categories: A better solution / API has been created Other new features are not compatible with the old implementation Older implementations may stop working some day Since you may still have code which uses these APIs you may want to fix something or migrate them to something newer. That's what this page is meant for. Data and Search Customization This section only applies to Dnn, as Oqtane doesn't have a search index built it yet. \uD83D\uDC49 Read about Search Customization to discover how it should be done today. Evolution of Customizing Search Let's begin with the Evolution of Customizing Search as it helps to understand how this feature developed. First Implementation in 2sxc 6 The initial versions of 2sxc didn't offer this feature, it was added in v6. At that time, the idea was that you would create special functions in your Razor files which contained the logic for customizing the results. The methods used were CustomizeData and CustomizeSearch. That mechanism still works and you'll find it in many older apps, but we strongly discourage it's use. Neutralizing Changes in 2sxc 10 In 2sxc v10 we created a new improved base class for Razor files called RazorComponent and used the opportunity to improve the signature of the API because the original implementation used some Dnn objects, and we anticipated that we would make this available for other platforms as well. This was a minor change. It still works today, but we discourage it's use. Code Behind in 2sxc 11 Razor Files were getting very technical if they had this code, and we decided there must be a better way to do this. We invented the concept of Code Behind and let developers place the logic there. This was a major improvement, but still not perfect. We discourage it's use. Separate Search-Customization in 2sxc 12 When we finally implemented 2sxc for Oqtane we realized that our concept still had weaknesses: Razor files containing search-customization code were confusing Token templates were not able to customize their search result Search customizations may vary between platforms (and some may not offer search at all) Having the code in the Razor-file actually caused problem when creating hybrid apps Often customize search was used for simply disabling search results - which was overkill and confusing If many Views needed the same customizations it was hard to share the code Because of this we decided to change the implementation completely. As of 2sxc v12 the search customization happens in a special code file which can be anywhere in your App. Your view is then configured to use that code. \uD83D\uDC49 Use the new mechanisms explained in Search Customizations"
  },
  "net-code/razor/organize-code.html": {
    "href": "net-code/razor/organize-code.html",
    "title": "How To Organize your Code in Razor | 2sxc 19 for Dnn and Oqtane",
    "keywords": "How To Organize your Code in Razor In simple scenarios you have some Razor files containing a bit of HTML and some code. As your solution grows, you'll want to organize your work better to ensure that you can maintain it. 2sxc offers various ways to do this: Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Recommended Methods v12+ Reuse a Partial View with @Html.Partial(...) v12+ Razor templates can include other razor files with more Razor code inside them, using Html.Partial(\"_Something.cshtml\"). This is a standard asp.net function to render another Razor file where you need it. You usually use it to make small component Razor files which might just show a button or something, and then call that file. You can find examples in the tutorials Share a .cs File as Library v10+ Sometimes you want to share C# code which isn't meant for HTML-output. For example, a security check. You can do this using CreateInstance(...). If you: need to share code with razor and Webapi don't need razor specific features like @helper You can create a .cs class file and share this across razor files AND WebAPI files. To use it, you need something like: @{ var helper = CreateInstance(\"_Helper.cs\"); } Tip The helper file should ideally inherit from Custom.Hybrid.Code14 (or similar base classes). in which case it will have have the same full APIs incl. the App and Content object just like the main file. \uD83D\uDC49\uD83C\uDFFC See examples in the tutorials Reuse a Template Delegate Function generating HTML v5+ Template Delegates are a very old Razor feature, but they are quite hard to use. They are similar to @helpers but work in both Oqtane and DNN. \uD83D\uDC49\uD83C\uDFFC See tutorial example. Older / Alternative Methods (DNN only) Reuse Snippets with @helper in Razor Razor has a @helper syntax which allows you to create fragments and re-use them. \uD83D\uDC49\uD83C\uDFFC Discover this in the tutorials. This will not work in Oqtane, as the newer Razor engines don't support this. Reuse a Partial View with @RenderPage() @RenderPage(...) does the same thing as @Html.Partial(...) (see above) but it will only work on DNN, not Oqtane. Share a .cshtml File as Library of Sub-Templates When you have a lot of components it may be easier to create a library of @helper commands. This library is just a normal .cshtml file - usually in a folder called shared or something, and you can then call these snippets and helpers from all your template files. To use it, you need something like: @{ var helper = GetCode(\"_Helper.cshtml\"); } ...older Razor API: @{ var helper = CreateInstance(\"_Helper.cshtml\"); } \uD83D\uDC49\uD83C\uDFFC See examples in the tutorials Razor Code-Behind If your Razor file is getting kind of large because of C# functions, best place it in a Razor Code-Behind. History RenderPage has always been part of Razor so part of 2sxc v2 CreateInstance for .cshtml was introduced ca. v6 CreateInstance for .cs was introduced in 2sxc v10.01 Code-Behind Introduced in 2sxc 11.0 Code-Behind deprecated in 2sxc 12 because it's not compatible with Oqtane"
  },
  "net-code/razor/purpose.html": {
    "href": "net-code/razor/purpose.html",
    "title": "Property Purpose on a Razor page | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Property Purpose on a Razor page Warning This is an older way to customize the Dnn search index. It is deprecated. Use the new mechanisms explained in Search Customizations To let your code know, if it's running to produce HTML or if it's running to fill the search-index. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use in most cases you'll use this within the CustomizeData event, in case you want to provide different data to the template than to the search. In most cases you'll also want to override CustomizeSearch. Note that it's of the type Purposes which is an enum containing WebView, IndexingForSearch, PublishData @using ToSic.Sxc.Blocks; @if(Purpose == Purposes.IndexingForSearch){ // code which should only run when indexing } Not run code, which can't run while indexing Sometimes you also have code which requires a user to be visiting a page - like a permission check. Since the indexer doesn't have an HTTP session or a user, this will fail. So you could do something like: @using ToSic.Sxc.Blocks; @if(Purpose != Purposes.IndexingForSearch){ // code which should only run when really viewing // like something if(userIsLoggedIn) { ... } } Demo App or further links Docs on 2sxc.org History 2sxc 10.20 - changed to Purpose from InstancePurpose - old code still works"
  },
  "net-code/razor/razor-component.html": {
    "href": "net-code/razor/razor-component.html",
    "title": "RazorComponent API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "RazorComponent API For current best-practices, all Razor templates should start with a line like @inherits Custom.Hybrid.Razor14 to make sure that it has all the new features. If you really need DNN features such as the .Dnn object use @inherits Custom.Dnn.Razor12. Warning If you don't specify this first line, your code will inherit from a different class, so many features won't work as documented. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. APIs in Razor Components / Templates Tip Most of these APIs can be seen live in action with source code in the Razor Tutorials Standard Dynamic Code API Razor templates / components have all the objects and APIs of Dynamic Code Additional Razor Component APIs In addition there are a few additional objects & commands which you will usually use, most of which are standard Razor APIs Edit Helper providing you with various edit-functionality like @Edit.TagToolbar(...) Code (deprecated) The object from the Code-Behind Common Standard Razor APIs and Keywords Html.Raw(string) Standard Razor API to output the HTML in a string instead of showing tags in the visible page Html.Partial(path, data) Standard Razor API - google it if you need it or read about splitting code in Razor The following keywords are normal in any Razor system, but it's good if you know them. Google them to learn more. @functions @helpers Customizing Data & Search Templates can tell the platform how search results should be treated. This is important for list-details scenarios. It's not documented well, but you can check examples in the Blog App. It needs these evens / properties: CustomizeData - is like a \"before-data-is-used\" of the page, used to change what data is delivered to the page - or to the search. Note that this is an older feature and many things this does can also be done using the VisualQuery designer. But sometimes you will need code, and this is the place to do it. CustomizeSearch Purpose - tells you if the code is running to render into html, or for another reason like populating the search index - so your code can adapt"
  },
  "net-code/razor/services/page-service-activate.html": {
    "href": "net-code/razor/services/page-service-activate.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Page Service to Activate Features & WebResources (JS, CSS, etc.)"
  },
  "net-code/razor/services/page-service.html": {
    "href": "net-code/razor/services/page-service.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Page Service to set Title, Headers and Activate Features"
  },
  "net-code/razor/typed/index.html": {
    "href": "net-code/razor/typed/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moving to Typed APIs in 2sxc 16+"
  },
  "net-code/search/index.html": {
    "href": "net-code/search/index.html",
    "title": "Customize the Search-Index Results (Dnn ☢️ only) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Customize the Search-Index Results (Dnn ☢️ only) Dnn has a built-in search engine which crawls all the modules asking them for data. You can easily modify how data in your modules appear in the Dnn search results. Tip Before you start, make sure you understand how the Search Index and Customizations work. Note This document applies to 2sxc 12.02+. As of 2sxc 12 we only recommend this new approach using the separate code file. Previous versions used another mechanism which is deprecated. If you need to know more, read the Obsolete Razor docs. Programming a Search Mapper Here's an example of a SearchMapper.cs: using System; using System.Collections.Generic; using System.Linq; using ToSic.Sxc.Context; using ToSic.Sxc.Search; /* Custom code which views use to customize how dnn search treats data of that view. It's meant for customizing the internal indexer of the platform, _not_ for Google Search. To use it, create a custom code (.cs) file which implements ICustomizeSearch interface. You can also inherit from a DynamicCode base class (like Code12) if you need more functionality. For more guidance on search customizations, see https://go.2sxc.org/customize-search */ public class SearchMapper : Custom.Hybrid.Code12, ICustomizeSearch { /// <summary> /// Populate the search /// </summary> /// <param name=\"searchInfos\">Dictionary containing the streams and items in the stream for this search.</param> /// <param name=\"moduleInfo\">Module information with which you can find out what page it's on etc.</param> /// <param name=\"beginDate\">Last time the indexer ran - because the data you will get is only what was modified since.</param> public void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) { // Set this to true if you want to see logs of this search in the insights // Only do this while developing, otherwise you'll flood the logs and never see the important parts Log.Preserve = false; foreach (var si in searchInfos[\"AllPosts\"]) { var entity = AsDynamic(si.Entity); si.Title = \"Title: \" + entity.Title; si.QueryString = \"details=\" + entity.UrlKey; } // Remove not needed streams var keys = searchInfos.Keys.ToList(); foreach (var key in keys) { if (key != \"AllPosts\") { searchInfos.Remove(key); } } } } Basics to get Right The File name can be anything you want, but the class name must match it. Your code can be a simple C# class, but we recommend it inherits from Custom.Hybrid.Code12 ...because you then also get more objects like App or CmsContext You can also inherit from Custom.Dnn.Code12 which would give you the Dnn object but we don't suggest it, because you should use the CmsContext where possible. Your class must implement ToSic.Sxc.Search.ICustomizeSearch to inform the compiler that it can help with search mapping You must then implement public void CustomizeSearch(...) as shown in the example Understanding Search-Mapping Your code will receive the data which would otherwise just be passed to the Dnn Indexer. You can then modify it as you want and make changes like: Remove streams from the dictionary streamInfos - thereby dropping entire sets of Entities Remove Entities in a specific stream Change properties like the Title Change properties like the QueryString - this is great on list views where data is indexed in the list, but the link in the search results should go to a details page. Develop Search Customizations To create your search indexing code you'll probably need to tweak and test a few times. Note that the 2sxc Blog App shows you a real-life example of Search-Customizations. So once you've configured a View to use a custom Search-Mapper your work will usually consist of doing the following Making some changes Going into the Dnn Admin and flushing the search-index Then run the indexer and wait till it's completed Check the results or debug issues using the Dnn Events-Log or 2sxc Insights (see below) Debugging Search Indexing Two tools will help you to debug issues 1. Dnn Events Log Really bad issues (like if your code cannot compile) will be logged in the Dnn Events. So if your code isn't even running, check that. 2. 2sxc Insights 2sxc Insights will help you see what's happening exactly in your code when you need it. Warning By default the search index will not log its work in the Insights, because it would flood the logs and you wouldn't find the occurances which you need. Because of this, logging is disabled by default, and your code can activate it using Log.Preserve = true; Remember to add a bunch of logging like Log.Add(\"Got to here\"); etc. to verify everything works step-by-step. Common Issues Already Indexed Data is not Reindexed Often when you're playing with indexing customizations you'll re-run the indexer and expect to see the changed results - but it's still what was there before. This is because each Entity has a modified timestamp and only changed entities will be re-indexed. This is great for performance, but challenging when making changes. \uD83D\uDC49 Remember to flush the Dnn Search Index before re-indexing to really see if your code worked. Search Index and Multilanguage (i18n) It's important to know that on multi-language sites, the module is indexed multiple times for each language. So just be aware of that. This event is called by the view-engine after calling CustomizeData and before passing the Data object to the Dnn Search Indexer. You can override this event to change how data is presented to the search, for example by bundling items together, or by giving items different URLs so that search knows that they are to appear on a sub-page. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @using ToSic.Eav.Run; @using ToSic.Sxc.Dnn.Run; @using ToSic.Sxc.Search; @functions { // this method is optional - your code wouldn't need it, but it's in here to show how it would work together // the CustomizeData would be called first, and potentially modify what is in the Data-object public override void CustomizeData() { // Don't customize anything, nothing to customize in this case } /// <summary> /// Populate the search - ensure that each entity has an own url/page /// </summary> /// <param name=\"searchInfos\"></param> /// <param name=\"moduleInfo\"></param> /// <param name=\"startDate\"></param> public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) { foreach (var si in searchInfos[\"Default\"]) { // tell the search system what url it should use in the result si.QueryString = \"mid=\"+ (moduleInfo as DnnContainer).Id + \"&feature=\" + si.Entity.EntityId; } } } The code above will skip customizing any data (but often you would want that too), then CustomizeSearch modifies the list of search-items before they are indexed. How it works In general everything will work automatically. This is what happens: 2sxc will retrieve the data added to this module 2sxc will call the CustomizeData() event if the template has such an event. In this event, your code can add more data to the module as needed. Note that during the search index, no Request-variables exist. So your method will cause an error if it does something like var x = Request[\"Category\"]. In case of an error, the index will still continue to work, but your changes to the data will fail To help you with this, a new property called Purpose was added. It tells you if this view/template was created for displaying or for indexing. 2sxc will then use the data and create SearchItems, ready to index. Each entity will be turned into a SearchItem Each Content-Type will have an own list (so you can differentiate between all the SearchItems for the Categories and the SearchItems for the Questions) Multi-Language is handled correctly, so the English index will contain the English content, etc. 2sxc will then call a CustomizeSearch() event, so your code could provide changes. A common scenario is to say that each entity (say each question) has a different URL (say a details-page). So even though all entities belong to the module (and Dnn only knows of this one module), the module can say that each entity has an own details page. One this is done, the SearchItems are converted to official SearchDocument-objects and handed over to Dnn Read also Purpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.2 Added support for newer Dnn versions at a later time - not sure when Easier standalone .cs implementation introduced in 2sxc 12"
  },
  "net-code/services/_history.html": {
    "href": "net-code/services/_history.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/services/custom.html": {
    "href": "net-code/services/custom.html",
    "title": "Create Custom C# Services | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Create Custom C# Services You can create Custom C# Services in DLLs for Dnn and Oqtane. you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } System Requirements Custom Services are compiled into a DLL They must register themselves at startup of the Application (Dnn, Oqtane) In DNN you must have at least Dnn 9.4 and 2sxc 13 In Oqtane any version of Oqtane and compatible 2sxc will do Constructor Requirements Any class / interface can be used as a Service, but there are some important requirements in regards to the Constructor: Your Service must have an empty constructor like MyService() ...or a constructor that only expects objects which themselves are known services, like MyService(ToSic.Sxc.Services.IConvertService converter) Register a Service in Dnn Dnn 9.4 introduces a new interface DotNetNuke.DependencyInjection.IDnnStartup. Use this to create a class which registers your services. Check out Andrew Hoeflings awesome tutorial. Register a Service in Oqtane Oqtane Server uses the interface Oqtane.Infrastructure.IServerStartup to register services (docs). Oqtane client uses the interface Oqtane.Service.IClientStartup for this (docs)."
  },
  "net-code/services/feature/index.html": {
    "href": "net-code/services/feature/index.html",
    "title": "Features Service | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Features Service 2sxc / EAV in 9.30+ has a features management. In certain cases it would be good if the razor-view could verify that the feature is enabled - for example to show a warning when it isn't enabled yet. This is what the Features API is for. How To Use This example is taken from Mobius Forms and the code can be found in the Mobius Github Repo. @{ // show warning if the save-attachments in web api isn't activated if(!Kit.Feature.IsEnabled(\"SaveInAdamApi\")) { <div class=\"alert alert-warning\"> Warning: file upload won't work yet, as it hasn't been enabled. </div> } // Show warning if any of the following features are not enabled if(!Kit.Feature.IsEnabled(\"PublicEditForm\", \"PublicUploadFiles\")) { <div class=\"alert alert-warning\"> Warning: Edit Form and file upload have not been enabled. </div> } } The code above checks if a feature is enabled, and if not, will show a message to the viewer that this must be enabled first. What you Need To Know The (new) API lies in the namespace ToSic.Sxc.Services - see IFeaturesService The IFeaturesService will do the checks for you ATM the public API has the following commands Enabled(string nameId) which checks if a feature is enabled based on the name Enabled(string nameId, nameId) use with more parameters Enabled(string nameId, nameId, nameId, ...) use with as many parameters a you want Enabled(string[] nameIds) use with string-array Finding Feature NameIds As of v13 we always recommend using the NameIds since they are easier to read. These features are currently managed: PasteImageFromClipboard - enables paste image from clipboard in the TinyMCE editor WysiwygPasteFormatted - enables paste formatted text in the TinyMCE editor PublicEditForm - enables the form to open up for non-editors (to use as input dialogs) - security will still be checked based on config, so it's safe PublicUploadFiles - allows public (non-editors) to upload files (types will still be checked), so it's safe SaveInAdamApi - enables the SaveInAdam API in the WebAPIs PermissionCheckUsers - enables you to set permissions for specific users (by default you can only set by standard roles like Admin, etc.) PermissionCheckGroups - enables you to set permissions for specific groups (by default you can only set by standard roles like Admin, etc.) WebFarmCache - enables the enterprise WebFarmCache (requires a license) Read also ... History Introduced in 2sxc 09.30 Moved from the static object Features to a proper Sxc Service in v13.01 Added nameId checks for more readable code in v13.01"
  },
  "net-code/services/index.html": {
    "href": "net-code/services/index.html",
    "title": "C# Services | 2sxc 19 for Dnn and Oqtane",
    "keywords": "C# Services Tip 2sxc has a rich set of Services which are Helpers to easily get things done. You can also create your own services as DLLs (v12+) or in your App (v17.03+). you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } ServiceKits (new in v14) V14 introduces the concept of ServiceKits. They give you access to all common services directly on the Kit object. Tip The service kit provides more than 10 commonly used services. Some popular services include: Toolbar Service to build toolbars for the editor Page Service to get/set page properties, run scripts, load resources and more More Services \uD83D\uDC49\uD83C\uDFFD See More Services How Services Work Technically a service is just a .net object which does stuff for you. They are provided through Dependency Injection. You can get Services in your C# code like this: using ToSic.Sxc.Services; var page = GetService<IPageService>(); Internally services may require additional information to work - like the current Page it's on etc. This happens almost by magic thanks to Dependency Injection. If this is new to you, you should read up on it. Integration with Dnn Services Dnn is still new to Dependency Injection. Because of this, there are some limitations if you want to get a Dnn service. For example: It requires that you use Dnn 9.4+ It also requires 2sxc v13 as that now fully integrations with the Dnn Service Provider Not all Dnn Objects exist as services. You'll need to browse Dnn code to figure this out. Integration with Oqtane Services Oqtane started as a .net Core project so Dependency Injection is in it's DNA. Anything Oqtane has can be requested as a Service, but there are some caveats: If you're writing Blazor code then most services only exist as a proxy, the real work happens on the backend If you're writing server-side code then most services are available, but the name / signature may be a bit different than the Blazor service Create your own Service \uD83D\uDC49 Check out Create Custom C# Services History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/services/koi/index.html": {
    "href": "net-code/services/koi/index.html",
    "title": "Koi Library | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Koi Library 2sxc includes Koi - a helper library to let components / modules know what CSS framework is used, and use that information to create templates which adjust to that CSS framework. Tip 2sxc has Polymorphism. It lets you place different editions of a Razor file in folders matching various CSS frameworks. This is easiest way to leverage Koi, and your code doesn't even need to know about it. Discover More in the Koi Tutorials We have an rich series of Koi tutorials. You should really check them out \uD83D\uDC4D. Example The following example will automatically include Bootstrap4 from a CDN if the theme doesn't already include it. @if(!Kit.Koi.Is(\"bs4\")) { <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> } Tip For more examples, check out the tutorial or various Apps which implement Koi, like the main Content App. Older Example (v12) This does the same, but assumes that Kit doesn't exist yes, so we must use GetService<..>(). @{ var pageCss = GetService<Connect.Koi.ICss>(); } @if(!pageCss.Is(\"bs4\")) { <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> } Old Example with Koi v1.0 (will only work in Dnn ☢️) @using Connect.Koi; @if(!Koi.Is(\"bs4\")) { <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> } Learn to Leverage Koi Visit Connect-Koi Website Check out the Koi Tutorials Install the default content-templates and discover how it's used there History Introduced in 2sxc v11 Upgrade to Koi 2.0 in 2sxc v12 Added to ServiceKit on Kit.Koi in 2sxc 14"
  },
  "net-code/services/more-services.html": {
    "href": "net-code/services/more-services.html",
    "title": "More Services | 2sxc 19 for Dnn and Oqtane",
    "keywords": "More Services Tip Almost all services which should be used are available on the Kit. Where to Find More Services As of 2sxc 13+ we publish all common services for your Razor / C# code on ToSic.Sxc.Services. This helps you figure out what's in the box - just go check it out. How To Get Services Technically a service is just a .net object which does stuff for you. They are provided through Dependency Injection. You can get Services in your C# code like this: using ToSic.Sxc.Services; var page = GetService<IPageService>(); Internally services may require additional information to work - like the current Page it's on etc. This happens almost by magic thanks to Dependency Injection. If this is new to you, you should read up on it."
  },
  "net-code/services/page/index.html": {
    "href": "net-code/services/page/index.html",
    "title": "Page Service to set Title, Headers and Activate Features | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Page Service to set Title, Headers and Activate Features In 2sxc 12.02 we introduced the IPageService which helps you to do things like Set the page Title, Keywords, Description or Base-Tag Add Meta-headers Add Icons or Icon-Sets Create JsonLD headers Activate page features like turnOn Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Concept A Razor template is standalone - the page requests that it's rendered, but there is no official way to also tell the page that the title should change or that certain headers must be set. We approached it in a futuristic way because we wanted to make sure that the code you write works in Dnn and Oqtane. So here's how it works Your code will get a IPageService object using `GetService<IPageService>() Your code can then tell it what you need - like SetTitle(...) or AddJsonLd(...) Once the Razor is done, the engine will forward these requests to the page and ensure it happens \uD83D\uDC49 Read about Dependency Injection \uD83D\uDC49 Read about the IPageService in the API docs Set Page Properties You can set these page properties SetTitle(newToPrefix) SetTitle(newTitle, placeholder) see docs SetDescription(newDescription) SetDescription(newDescription, placeholder) see docs SetKeywords(additionalKeywords) SetKeywords(additionalKeywords, placeholder) see docs SetBase(url) - see docs Note that SetTitle, SetDescription and SetKeywords will prepend or append whatever you give them to the existing value, unless you specify a placeholder - in which case that placeholder will be replaced. Set Http Response Codes In some cases an App may need to set the page to 404 - so that google doesn't index it. Do this using SetHttpStatus(statusCode, optionalmessage) - see docs Note: ATM this is Dnn ☢️ only, as Oqtane doesn't render each page at a time - so a status code wouldn't work there (yet). Add Icons and Icon-Sets like FavIcon Icons / FavIcons are minor enhancements to a page, but they serve more than just the icon in the browser tab. In many cases they may also have larger images used for tiles and more. Use these two commands to get them working: AddIcon - see docs to add a single icon AddIconSet - see docs to add a bundle of icons for various use cases in one step Add Custom Headers Custom headers may be important for JavaScripts running on your page or other special purposes. Set them using these methods: AddToHead(string) - see docs AddToHead(tag) - see docs AddMeta(name, content) - see docs Add JsonLD Headers (Schema.org) JsonLD is a powerful way to describe your page to other systems, especially web crawlers like Google. It uses conventions from schema.org. Use this to add custom JsonLD headers: AddJsonLd(jsonString) - see docs AddJsonLd(jsonObject) - see docs Add OpenGraph Headers OpenGraph is a standard to describe your page for Facebook, Twitter and other more social-style systems. It adds meta headers using og: prefixes. Use these commands to add such headers: AddOpenGraph(propertyName, content) - see docs Activate Page Features \uD83D\uDC49 See Page Service to Activate Features & WebResources (JS, CSS, etc.) Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Activate JavaScript with TurnOn (new v15) TurnOn is a simple JavaScript helper which allows to you turn on / boot a script when everything it needs has been loaded. You can do this by creating HTML manually, but in v15 we added a simple helper which makes it easier. TurnOn(runCommand) - see docs TurnOn(runCommand, require: object) - see docs TurnOn(runCommand, data: object) - see docs TurnOn(runCommand, require: object, data: object) - see docs TurnOn(turnOnSpecs) - see docs History Introduced in 2sxc 12.02 to replace the previous static implementation using RazorBlade Enhanced in 12.05"
  },
  "net-code/services/page/page-service-activate.html": {
    "href": "net-code/services/page/page-service-activate.html",
    "title": "Page Service to Activate Features & WebResources (JS, CSS, etc.) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Page Service to Activate Features & WebResources (JS, CSS, etc.) The PageService helps Razor templates to activate features and load predefined JS/CSS (WebResources). An important aspect of Razor solutions is ensuring that the page has helper materials like jQuery etc. This gets especially complex in scenarios like Oqtane, where the page doesn't really reload and therefor may already have some scripts / styles loaded, but it's hard to guess. For this we have developed a helper called turnOn and the PageService is able to activate this feature (and more in future). Tip Using the IPageService.Activate(...) ensures that all apps use the same resources, and that these are only loaded once per page. Discover More in the Razor Tutorials We have an rich series of Razor tutorials. You should really check them out \uD83D\uDC4D. Difference between features and WebResources** Features are some system-specific JS/CSS (like jQuery or turnOn) WebResources are JS/CSS which are configured in Settings, so you can use the preset WebResources or define your own at the App, Site or Installation. Examples are fancybox4, Bootstrap5 etc. Activate Page Features A simple example: Kit.Page.Activate(\"jQuery\"); // Activate jQuery Kit.Page.Activate(\"turnOn\"); // Activate turnOn Kit.Page.Activate(\"jQuery\", \"turnOn\", \"2sxc.JsCore\"); // Activate many This will ensure that jQuery and turnOn are available on the page. Note that it will only be activated once, even if the code would accidentally activate it multiple times. Features you can activate as of v12.02 jQuery - activate jQuery if you need it - recommended for Dnn, required for Oqtane 2.2+ note: we really want to discourage the use of jQuery - so avoid if possible turnOn - the JavaScript turnOn Activation system 2sxc.JsCore - the 2sxc standard JS APIs. Replaces @Edit.Enable(js: true) new in v13 2sxc.JsCms - 2sxc JS APIs to run commands for edit, etc. Replaces @Edit.Enable(api: true) new in v13 Includes 2sxc.JsCore 2sxc.Toolbars - allow edit-toolbars on the page. Replaces @Edit.Enable(js: true, api: true, styles: true) new in v13 Includes 2sic.JsCms and 2sic.JsCore 2sxc.ToolbarsAuto - auto-show edit-toolbars on the page. Replaces @Edit.Enable(js: true, api: true, styles: true, autoToolbar: true) new in v14 Includes 2sxc.Toolbars, 2sic.JsCms and 2sic.JsCore Cms.Wysiwyg - activate special CSS for content made in the rich WYSIWYG editor WIP in v15.01 Usually auto-activated by CmsService.Show(some-wysiwyg-field) Network.EncryptBody new v18.04 - provide a PKI public key for forms to encrypt the POST body. Note: The system will auto-cascade features - so if you activate a feature which needs other features, these are automatically activated as well. Features that are explicitly not implemented jQueryUI is often used in ASP.net but it's really old and hasn't had updates since 2016 knockoutJS is often used in ASP.net but it's also barely alive, so it's not meant to be activatable in modern systems like the ones usually built with 2sxc Activate WebResources Any WebResources registered in the settings can be activated. Here's an example: Kit.Image.Activate(\"Bootstrap5\"); // Activate Bootstrap5 from a CDN Kit.Image.Activate(\"fancybox4\"); // Activate fancybox4 from a CDN Kit.Image.Activate(\"fancybox3\", \"FontAwesome5\"); // Activate the older fancybox + FontAwesome5 You can define your own WebResources in the Settings, or check out the list of pre-defined WebResources. History Introduced in 2sxc 12.02 to replace the previous static implementation using RazorBlade Activating WebResources added in 2sxc 12.04"
  },
  "net-code/services/service-kits.html": {
    "href": "net-code/services/service-kits.html",
    "title": "C# ServiceKits (v14) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "C# ServiceKits (v14) you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } ServiceKits help you get a Service with fewer lines of code. The Kit is provided on the Kit property. For example, you may need to call the IPageService Activate. With the v14 API it looks like this: @Kit.Page.Activate(\"turnOn\") The Kit Property The Kit property is available on all of your code which inherits from any one of these: Custom.Hybrid.Api14 for Web APIs Custom.Hybrid.Code14 for custom code Custom.Hybrid.Razor14 for Razor The Kit in all ...14 base classes will always be a ServiceKit14. They are... lazy so they are only created if ever needed created and preserved so multiple access to the service won't cause any overhead versioned so that we can continue to enhance the APIs without breaking existing Razor Services in the ServiceKit This will depend on the ServiceKit you will use. In v14, the Kit will then always be a ServiceKit14. You can read about the included servicen in those docs. History of Dependency Injection in 2sxc 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Integrated with Oqtane DI in v12 (May. 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021) Created ServiceKits for v14 (June 2022) Added ServiceKitLight for custom DataSources in 2sxc 15 Added ServiceKit16 for 2sxc 16"
  },
  "net-code/services/toolbar-builder/data-filter.html": {
    "href": "net-code/services/toolbar-builder/data-filter.html",
    "title": "Toolbar Builder Guide – Filter Parameter | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide – Filter Parameter Important The examples below explain how to use the filter: parameter. Starting in v15.07+ we recommend using the Tweak API instead. The Filter reduces the amount of items shown in a Data-List. It is given to the data command using the filter parameter which is an optional parameter and must be named. filter Parameters The filter can contain multiple filters to filter a list of entities in the admin-UI. You could for example only show all items containing the word something. But the most common case is to restrict entities shown to these having a child-relationship with something else. Example You may have a list of Books and only wish to show all of the books by the Author by the name of Daniel Mettler. You could try to filter by the name, but that's not reliable, so you would usually want to filter by the unique ID of Daniel Mettler. Ways to Set the Filter The following examples assume you're calling .Data on the IToolbarBuilder from the IToolbarService. So typically it would be something like this in front of each line: @Kit.Toolbar.Default().Data(\"Books\", filter: ...); Basic syntax which worked ca. v14.07 // Simple relationship: Author has entity with ID 52 Data(..., filter: \"Author=52\"); // Simple relationship: Author has entity with ID 52 OR 302 Data(..., filter: \"Author=[52,302]\"); // Two filters (AND, so both must match) Data(..., filter: \"Author=52&Publisher=9306\"); // The same as a object Data(..., filter: new { Author = 52, Publisher = 9306 }); Advanced, simpler options requiring v14.07.05 // Values with Arrays automatically get converted Data(..., filter: new { Author = new int[] { 52 } }); Data(..., filter: new { Author = new int[] { 52, 58, 29 } }); // Filter conditions pointing to an Entity var someAuthor = App.Data[\"Author\"].First(); Data(..., filter: new { Author = someAuthor }); // Multiple Authors Data(..., filter: new { Author = new object[] { someAuthor, someAuthor } }); // IEnumerable of Authors var lotsOfAuthors = AsList(App.Data[\"Author\"]).Select(a => a.LastName == \"Mettler\"); Data(..., filter: new { Author = lotsOfAuthors }); See also the JS toolbar docs list of all common UI parameters can be found here"
  },
  "net-code/services/toolbar-builder/index.html": {
    "href": "net-code/services/toolbar-builder/index.html",
    "title": "Toolbar Builder Guide | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide These docs should help with various aspects of the Toolbar Builder. Basics Just for context: usually you will use the IToolbarService to get a IToolbarBuilder. You will typically do something like this: var customTlb = Kit.Toolbar.Empty().Edit(Content); <div @customTlb> </div> Almost all commands will return a new toolbar builder with the modified configuration. This means you can chain the commands as you need them. It also means that each object is immutable. To understand this, check out this example: @{ var tlbGeneral = Kit.Toolbar.Empty().Edit(Content); // Create another toolbar which builds upon the original // This will not modify the first tlbGeneral object var tlbItem = tlbGeneral.MoveUp().MoveDown(); } @foreach(var post in App.Data[\"BlogPosts\"]) { <!-- this will show the toolbar, but never change the inner configuration --> <li @tlbItem.For(post)> ... </li> }"
  },
  "net-code/services/toolbar-builder/operation.html": {
    "href": "net-code/services/toolbar-builder/operation.html",
    "title": "Toolbar Builder Guide – Operation | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide – Operation The Operation determines what exactly should happen to a button. In most cases, the default is to add another button, but you may also want to remove it, or do something more custom. The operation is an optional parameter and must be named. Add a Button In most cases the default is to add a button to the toolbar. In such cases you don't need to specify add manually. In cases where the default is Auto-Add (see below) you can force-add it by setting the operation to add. For example, an app-resources button .AppResources() is to admin the app language resources. It would only appear if the user has elevated permissions. But you may want to make this visible to other editors as well, use the operation add. Verb: \"add\" Shorthand: \"+\" Auto-Add if Conditions are Met This is similar to add above, except that it won't force-add the button. This means internal conditions will be checked, before adding the button. Verb: \"auto\" Shorthand: \"±\" Remove a Button In cases where you have a pre-configured toolbar such as the default toolbar on .Default() you may want to remove just a few buttons. Example: Kit.Toolbar.Default().Layout(\"-\") will be missing the change-layout button Verb: \"remove\" Shorthand: \"-\" Modify a Button In cases where you have a pre-configured toolbar such as the default toolbar on .Default() you may want to modify just a few buttons. Example: Kit.Toolbar.Default().Add(\"%\", prefill: new { Title = \"new item\" }) will have a prefilled title. Verb: \"modify\" Shorthand: \"%\" See also the JS toolbar docs"
  },
  "net-code/services/toolbar-builder/parameters.html": {
    "href": "net-code/services/toolbar-builder/parameters.html",
    "title": "Toolbar Builder Guide – Parameters | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide – Parameters Important The examples below explain how to use the parameters: parameter. Starting in v15.07+ we recommend using the Tweak API instead. The Parameters are used in the command. Parameters can be specified globally for the entire toolbar, or just for a specific button. The parameters is an optional parameter and must be named. Parameters for the Entire Toolbar Parameters can be set globally for the toolbar, or specific for each button. To set it globally, you have these options: On the first creation of the object - eg. Kit.Toolbar.Default(item, parameters: \"contentType=BlogPost\") When setting global parameters eg. Kit.Toolbar.Default().Parameters(prefill: \"contentType=BlogPost\") If your code does more than one of these, the last value will be the one used. Parameters for One Specific Button Many methods accept an optional parameters. Is that case the button would have their own parameters. So you could do something like this // Normal toolbar for Content, but also has an edit-button for the header var tlb = Kit.Toolbar.Default(Content).New(parameters: \"contentType=BlogPost\"); Parameters as String or Object There are two ways you can specify parameters. Either as a string - like this: parameters: \"contentType=BlogPost&something=other\" Or as an object (since v14.04) - like this: parameters: new { contentType = \"BlogPost\", something = \"other\" } How Prefill works with Parameters Internally two infos prefill and parameters are merged. So technically you could also set prefill on the parameters, but we believe it's easier to read if each is set explicitly. See also the JS toolbar docs"
  },
  "net-code/services/toolbar-builder/prefill.html": {
    "href": "net-code/services/toolbar-builder/prefill.html",
    "title": "Toolbar Builder Guide – Prefill | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide – Prefill Important The examples below explain how to use the prefill: parameter. Starting in v15.07+ we recommend using the Tweak API instead. The Prefill is used to prefill fields in the edit-UI. Prefill can be specified globally for the entire toolbar, or just for a specific button. It is given to the commands using the prefill parameter which is an optional parameter and must be named. Prefill for the Entire Toolbar Prefills can be set globally for the toolbar, or specific for each button. To set it globally, you have these options: On the first creation of the object - eg. Kit.Toolbar.Default(item, prefill: \"Title=new item\") When setting global parameters eg. Kit.Toolbar.Default().Parameters(prefill: \"Title=new item\") If your code does more than one of these, the last value will be the one used. Prefill for One Specific Button Many methods accept an optional prefill. Is that case the button would have their own prefill. So you could do something like this // Normal toolbar for Content, but also has an edit-button for the header var tlb = Kit.Toolbar.Default(Content).New(prefill: \"Title=Special New Title\"); Prefill as String or Object There are two ways you can specify prefill. Either as a string - like this: prefill: \"Title=New Title&PublishDate=2022-07-04\" Or as an object (since v14.04) - like this: prefill: new { Title = \"New Title\", PublishDate = Date.ToString(\"yyyy-MM-dd\") } How Prefill works with Parameters Internally two infos prefill and parameters are merged. So technically you could also set prefill on the parameters, but we believe it's easier to read if each is set explicitly. See also the JS toolbar docs"
  },
  "net-code/services/toolbar-builder/target.html": {
    "href": "net-code/services/toolbar-builder/target.html",
    "title": "Toolbar Builder Guide – Target | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide – Target The Target determines for what thing the button will affect. This thing is usually an Entity or a DynamicEntity. Targets can be set... ...for the entire toolbar, so that all buttons would affect the same target ...for each button what target it will be for ...both - in which case button-target takes precedence if set The target is usually the first parameter on every command, and does not need to be named. Entity-Like Targets Targets for most commands are entity-like, meaning they can be an Entity or a Dynamic Entity. Target for the Entire Toolbar Targets can be set globally for the toolbar, or specific for each button. To set it globally, you have these options: On the first creation of the object - eg. Kit.Toolbar.Default(item) At any time using For(...) eg. Kit.Toolbar.Default().For(item) When setting global parameters eg. Kit.Toolbar.Default().Parameters(item, prefill: \"Title=new item\") If using .AsTag() you can also do .AsTag(item) If your code does more than one of these, the last value will be the one used. Target for One Specific Button Many methods accept an optional target. Is that case the button would be specifically for the item in the target, and not for the main item of the toolbar. So you could do something like this // Normal toolbar for Content, but also has an edit-button for the header var tlb = Kit.Toolbar.Default(Content).Edit(Header, ui: \"color=red\"); Tip In many cases you will only set it for the toolbar, and not for the item. Setting the target for the item is important if the toolbar shows buttons to operate on different objects."
  },
  "net-code/services/toolbar-builder/tweak-buttons.html": {
    "href": "net-code/services/toolbar-builder/tweak-buttons.html",
    "title": "Toolbar Builder Guide – Tweak API for Buttons new 15.07 | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide – Tweak API for Buttons new 15.07 Buttons can be tweaked to change their look and behavior. Previously, this was done using parameters such as ui, parameters, prefill etc. Now, you can use the tweak API to do the same thing. Tip Using the tweak API is the recommended way to tweak buttons. It gives you compile time checking so it's less error-prone. Example // Old way without tweak Kit.Toolbar.Default().Add(ui: \"color=green\", parameters: new { app = 2, zone = 3 }); // New way with tweak - one example Kit.Toolbar.Default().Add(tweak: b => b.Color(\"green\").Parameters(new { app = 2, zone = 3 })); // Or another example Kit.Toolbar.Default().Add(tweak: b => b.Color(\"green\").Parameters(\"app\", 2).Parameters(\"zone\", 3)); How it Works Almost every command on the IToolbarBuilder has a tweak parameter. This parameter is a function which takes a ITweakButton and returns a new one. The ITweakButton itself has a functional API which allows you to chain multiple tweaks. This means when you do this: Kit.Toolbar.Default().Add(tweak: b => b.Color(\"green\").Parameters(\"id\", 93030))); ...it says Take the button b Set the color to green Add the parameter id with the value 93030 Each command returns a fresh ITweakButton with the changes applied using the immutable pattern. So the final result is returned by the function and used by the toolbar builder. Why a New API? The new method achieves the same purpose as the old, and the old way will continue to work indefinitely. But the advantages of the new API are: It's easier to document so it's also easier to discover the possibilities you have It's easier to use because it's more type-safe and less error-prone It's easier to extend - for example with the new note feature added in v15.07 It's safer, for example the API will remove # characters in colors, which would otherwise cause problems API Docs Tweak API See also the JS toolbar docs Important to Know You cannot mix the tweak API with the previous parameters. So if you use tweak on a button, you cannot also use ui or parameters etc. The tweak API is a fluid API, so you can chain multiple tweaks together. The tweak API is immutable, so every step returns a new object. The tweak API is functional. Issues / Challenges The tweak API uses lambda expressions. This can cause problems with dynamic objects which are very common in Razor. If you don't know about dynamics you should briefly google it. Basically the following code will cause issues: // Note that Content is a dynamic object Kit.Toolbar.Default(Content).New(tweak: b => b.Color(\"pink,black\")) This will result in a message like this: ...error CS1978: Cannot use an expression of type 'lambda expression' as an argument to a dynamically dispatched operation at... This means: because the initial part Kit.Toolbar.Default(Content) contains a dynamic parameter (Content), the compiler treats what comes after that as dynamic as well. So the following .New(...) is also treated as dynamic. This is usually not a problem, but the compiler will complain that the inner lambda b => b.Color(\"pink,black\") can't be reliably compiled, since it could be anything. For now, the best workaround is to do one of the following: Tell the compiler that Content is an object Kit.Toolbar.Default(Content as object).New(tweak: b => b.Color(\"pink,black\")) Place the dynamic parameter at the end Kit.Toolbar.Default().New(tweak: b => b.Color(\"pink,black\")).For(Content) This is not ideal, and we're striving for improvements in future releases. History Added in v15.07 ShortLink: https://go.2sxc.org/tweak-buttons"
  },
  "net-code/services/toolbar-builder/ui.html": {
    "href": "net-code/services/toolbar-builder/ui.html",
    "title": "Toolbar Builder Guide – UI | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Toolbar Builder Guide – UI Important The examples below explain how to use the ui: parameter. Starting in v15.07+ we recommend using the Tweak API instead. The UI determines how buttons are shown. It is given to the commands using the ui parameter which is an optional parameter and must be named. UI Settings for the Entire Toolbar UI settings can be set globally for the toolbar, or specific for each button. To set it globally, you have these options: On the first creation of the object - eg. Kit.Toolbar.Default(item, ui: \"color=red,white\") When setting global parameters eg. Kit.Toolbar.Default().Parameters(ui: \"color=red,white\") If your code does more than one of these, the last value will be the one used. UI Settings for One Specific Button Many methods accept an optional ui. Is that case the button would have their own UI settings. So you could do something like this // Normal toolbar for Content, but also has an edit-button for the header var tlb = Kit.Toolbar.Default(Content).New(ui: \"color=blue,white\"); UI as String, Object or Combinations Thereof There are two ways you can specify ui. Either as a string - like this: ui: \"color=red&classes=extra-glow\" Or as an object (since v14.04) - like this: ui: new { color = \"red\", classes = \"extra-glow\" } Or as a combination of strings and objects (v14.07.05+): ui: new object[] { \"color=red\", new { classes = \"extra-glow\" } } Complex Strings will be Made Safe with Base64 (v14.07.05+) Tip This feature is mainly used for the icon property, which could contain an SVG string. If you use an object which has complex string (which wouldn't survive a URL) then it will be made safe. So you can do this: // https://fonts.google.com/icons?icon.query=sticky+note var iconNote = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"48\\\" width=\\\"48\\\"><path d=\\\"M9 39h20V29h10V9H9v30Zm0 3q-1.25 0-2.125-.875T6 39V9q0-1.25.875-2.125T9 6h30q1.25 0 2.125.875T42 9v21L30 42Zm6-15v-3h8.5v3Zm0-8v-3h18v3ZM9 39V9v30Z\\\"/></svg>\"; var tlb = Kit.Toolbar.Default().Edit(ui: new { Icon = iconNote }) Note that this auto-conversion only happens on objects handed to the ui property and not to strings. See also the JS toolbar docs list of all common UI parameters can be found here"
  },
  "net-code/typed-code/data/index.html": {
    "href": "net-code/typed-code/data/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Typed Data aka ITypedItem"
  },
  "net-code/typed-code/data/mocking.html": {
    "href": "net-code/typed-code/data/mocking.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Mocking Typed Data"
  },
  "net-code/typed-code/data/models.html": {
    "href": "net-code/typed-code/data/models.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Strictly Typed Data Models Guide (new v17.02)"
  },
  "net-code/typed-code/data/typed-data-equality.html": {
    "href": "net-code/typed-code/data/typed-data-equality.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to ITypedItem Equality in 2sxc 16+"
  },
  "net-code/typed-code/index.html": {
    "href": "net-code/typed-code/index.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Typed APIs in 2sxc 16+"
  },
  "net-code/typed-code/migrate.html": {
    "href": "net-code/typed-code/migrate.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Migration TODO"
  },
  "net-code/typed-code/naming.html": {
    "href": "net-code/typed-code/naming.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Typed API Naming Conventions"
  },
  "net-code/web-api/auto-convert-entities.html": {
    "href": "net-code/web-api/auto-convert-entities.html",
    "title": "Custom C# Web API - Auto Convert Entities | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Web API - Auto Convert Entities Background: Entities are Complex Objects Internally all 2sxc data is stored as IEntity objects. These are fairly complex, as they do caching and support multi-language values. Because of this, any WebApi that wants to return it must convert it to a simple object. Previously you had to do this manually, but \uD83C\uDD95 v16 it's done automatically if you use the [JsonFormatter] attribute. New Implementation (v16+) using ToSic.Sxc.WebApi; // For the [JsonFormatter] (see below) ... [HttpGet] [JsonFormatter] // this will auto-convert Entities to JSON public dynamic PersonsAuto() { return App.Data[\"Persons\"]; } ... Note that by default, it uses camelCase for all properties, which is the modern standard. But you can change that as needed, read about it Custom C# Web API - JSON Format. Old Implementation (before v16) Before 2sxc 16, this had to be done manually, ca. like this: using ToSic.Eav.DataFormats.EavLight; // For Auto-Conversion ... [HttpGet] // [HttpGet] says we're listening to GET requests public dynamic PersonsAuto() { // 2sxclint:disable:v14-no-getservice var json = GetService<IConvertToEavLight>(); return json.Convert(App.Data[\"Persons\"]); } ... Recommended Reading Web API Tutorials JsonFormatterAttribute History New JsonFormatter introduced in 2sxc 16.00"
  },
  "net-code/web-api/custom-web-api-base-class.html": {
    "href": "net-code/web-api/custom-web-api-base-class.html",
    "title": "Custom C# Web API Base Classes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Web API Base Classes Any WebAPI controller in ASP.net inherits from a base class. This is a typical code you may see as an example: [AllowAnonymous] public class BasicController : Custom.Hybrid.Api14 // <-- This is the Base Class { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } In these docs we want to explain what the base class is for, and what you should use. Why Inherit from a Base Class A WebAPI controller does a lot of magic in the background so your code can stay small and simple. In classic ASP.net you would inherit from a class called ApiController (namespace System.Web.Http). In classic Dnn you inherit from a base class DnnApiController (namespace DotNetNuke.Web.Api) which also inherits the ApiController. Tip Each additional layer adds functionality which will be available to your code. For example if you inherit from ApiController you can use objects such as Request and User in your code. If you inherit from DnnApiController your code can also use PortalSettings or ModuleInfo. Recommended Base Class in 2sxc 14+ You can use any base class available in 2sxc. But by inheriting the latest from Custom.Hybrid.Api14 docs your code will have access to many more objects like these: App Data Content CmsContext You also get many helper commands like these AsDynamic(...) AsEntity(...) AsList(...) SaveInAdam(...) Tip As of 2sxc 14 we always recommend that your APIs inherit from Custom.Hybrid.Api14 Avoid using SxcApiController and Others In previous versions of 2sxc the recommended base class was ToSic.SexyContent.WebApi.SxcApiController. For compatibility reasons this still works, but we strongly urge you to switch over to the new ToSic.Sxc.Dnn.ApiController as the old base class may become deprecated. Caution We strongly recommend that you switch over to the new base class Custom.Hybrid.Api14. But be aware that some of the APIs have changed a bit, so switching will take a few minutes. You will probably see compile errors which tell you what to fix. Why Hybrid Base Classes 2sxc v12 was made multi-platform to support both Dnn and Oqtane. By using any Custom.Hybrid.* base classes you can write code which will work on both platforms. Since we belive that moving between platforms will soon be important, it's best to start now. Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api) The ToSic.Sxc.Dnn.ApiController was introduced in 2sxc 10.25 Internal Docs: Api Controller Inheritance Warning This is internal documentation for the 2sxc core developers. You don't need this part. Internal Docs: Dnn API Controller Inheritance Basis for everything: System.Web.Http.ApiController DotNetNuke.Web.Api.DnnApiController \uD83E\uDD77\uD83C\uDFFD ToSic.Sxc.Dnn.WebApi.DnnApiControllerWithFixes<TRealController> internal base for everything but without context of module/block \uD83D\uDD39 changes serialization (remove XML v3+ to default to Newtonsoft) \uD83D\uDD39 add System.Text.Json in v14.10+ to replace Newtonsoft \uD83D\uDD39 Adds logging to insights \uD83D\uDD39 Base class for Real controller concept \uD83E\uDD77\uD83C\uDFFD various internal API Controllers which don't need the context \uD83E\uDD77\uD83C\uDFFD ToSic.Sxc.WebApi.SxcApiControllerBase<TRealController> internal \uD83D\uDD39 Adds DNN Logging Exceptions \uD83D\uDD39 Add basic context of Block (Module) information \uD83E\uDD77\uD83C\uDFFD various internal API Controllers which need the context \uD83E\uDD77\uD83C\uDFFD ToSic.Sxc.WebApi.DynamicApiController internal non-generic base class for all others \uD83D\uDD39 Adds empty contstructor to allow simple inheritance \uD83D\uDD39 Provides DynamicCode object and better context (block/module) Based on that these public base classes were made: ⭐\uD83D\uDC80 ToSic.SexyContent.WebApi.SxcApiController public, very old/deprecated oldest base class, should not be used any more \uD83D\uDD39 had some exotic propecties such as List which contained Content/Presentation pairs ⭐\uD83D\uDC80 ToSic.Sxc.Dnn.ApiController public, old/deprecated was the recommended base class for v10 and v11 \uD83E\uDD77\uD83C\uDFFD ToSic.Sxc.WebApi.ApiCoreShim internal adds a lot of .net core API commands to the controller ⭐\uD83D\uDC80 Custom.Hybrid.Api12 public, old/deprecated ⭐\uD83D\uDC80 Custom.Dnn.Api12 public, old/deprecated Custom.Hybrid.Advanced.Api14<TModel, TServiceKit> internal like Api12, but without the Convert object ⭐\uD83C\uDF1F Custom.Hybrid.Api14 public, recommended ❓ Custom.Hybrid.Api15 WIP ⚡ will use System.Text.Json for javascript serialization"
  },
  "net-code/web-api/custom-web-api-dotnet-api.html": {
    "href": "net-code/web-api/custom-web-api-dotnet-api.html",
    "title": "C# APIs in ApiController | 2sxc 19 for Dnn and Oqtane",
    "keywords": "C# APIs in ApiController The following gives you an overview to the APIs you get when you inherit from ToSic.Sxc.Dnn.ApiController. APIs in Razor Components / Templates Tip Most of these APIs can be seen live in action with source code in the Web API Tutorials Standard Dynamic Code API Razor templates / components have all the objects and APIs of Dynamic Code The .net Code Docs for ApiController. Common Standard ASP.net Controller APIs and Keywords Request Standard object in ASP.net giving you http-request information. Special Object / Commands in ApiController The ApiController provides additional commands productive: SaveInAdam(...) new in 9.30 History A first base controller (not recommended any more) was added v6.05 The ToSic.Sxc.Dnn.ApiController was introduced in 2sxc v10.25"
  },
  "net-code/web-api/custom-web-api-dotnet-saveinadam.html": {
    "href": "net-code/web-api/custom-web-api-dotnet-saveinadam.html",
    "title": "SaveInAdam(...) Command in ApiController | 2sxc 19 for Dnn and Oqtane",
    "keywords": "SaveInAdam(...) Command in ApiController The SaveInAdam command helps your WebApi to upload files so they are in an ADAM container of an item. The API is documented here and on this page we'll explain how to use it. How to use Here's a simple example, taken from mobius forms SaveInAdam(stream: dataStream, fileName: fileNameInForm, contentType: \"Advertisement\", guid: guid, field: \"Images\"); Here's what the parameters are: stream contains a stream of bytes with the file fileName contain the file name contentType is the content-type of the entity we're saving to guid is the entity-guid which receives this item field is the field we're saving to Example The following example is also from mobius forms and assumes that the html form encoded the data in JavaScript for sending to the WebApi: // Save files to Adam var files = ((Newtonsoft.Json.Linq.JArray)contactFormRequest[\"Files\"]) .ToObject<IEnumerable<Dictionary<string, string>>>(); foreach(var file in files) { var data = Convert.FromBase64String((file[\"Encoded\"]).Split(',')[1]); SaveInAdam(stream: new MemoryStream(data), fileName: file[\"Name\"], contentType: type.Name, guid: guid, field: file[\"Field\"]); } Notes and Clarifications all parameters (stream, fileName, ...) must be named by convention the uploaded files are placed in the container of the field... ...and not added as a link to the file, so you will usually use library fields the field must be a field of type hyperlink, library or wysiwyg, other fields cannot receive files Difference in Field-Library and Field-Link-Default Note that the form has two different ways the field can behave. In hyperlink-Library mode nothing is really stored in the field name, the UI will simply load all the files in a folder that belong to that field. SaveInAdam will simply add files to this folder, so the most common way to use it is that the entity will have a link-library field to browse one or more files uploaded. If you really only want 1 file to be uploaded, and want to put it into the field as if it's linked directly, then choose a hyperlink-default field. SaveInAdam will give you a IFile object which has an Id. Use that to create a file:72 kind of link and add it to data you just created. Read also, Demo App and further links You should find some code examples in these apps C# API Documentation of SaveInAdam Mobius Forms v2 in App Catalog Mobius Forms v2 on Github Blog Recipe for uploading into ADAM in your WebAPI History Introduced in 2sxc 9.30"
  },
  "net-code/web-api/custom-web-api-files.html": {
    "href": "net-code/web-api/custom-web-api-files.html",
    "title": "Custom C# Web API File Structure | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Web API File Structure Default Setup without Editions All your WebAPIs are C# files saved in the special folder called api. The folder must be in root of your 2sxc app, and the files have to end with ...Controller.cs (this is a convention in ASP.net). File: [app-folder]/api/[Your]Controller.cs Url: [api-root]/app/auto/api/[Your] Example File: /Portals/0/2sxc/DemoApp/api/PersonController.cs Url: GET: /api/2sxc/auto/app/auto/api/Person/List Read more about url schema in the URLs for 2sxc WebAPI and REST APIs Advanced Setup with Editions Tip New in 2sxc 9.35+: you can now also create api folders as_subfolders to run the api in multiple editions. This is the polymorph feature. It let's you have the same api-controller in multiple editions, where the end-user is using live and you're doing open-heart-surgery in the background on a new edition like staging. File: [app-folder]/[edition]/api/YourController.cs Url: [api-root]/app/auto/[edition]/api/[Your] Example File: /Portals/0/2sxc/DemoApp/staging/api/PersonController.cs Url: GET: /api/2sxc/auto/app/auto/staging/api/Person/List Read more about url schema in the URLs for 2sxc WebAPI and REST APIs Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "net-code/web-api/custom-web-api-security.html": {
    "href": "net-code/web-api/custom-web-api-security.html",
    "title": "Security & Permissions in Custom WebAPIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Security & Permissions in Custom WebAPIs Important This page explains how security is configured in custom WebAPI controllers. But there is much more to security, so please read Security for 2sxc WebAPI and REST APIs as well. Custom WebAPI Security is configured using Attributes. These attributes can be placed on the class (in which case they apply to all actions/methods of that class) or on a specific method (in which case it only applies to that method). This example will NOT respond to Anonymous requests from outside: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } This example from the dnn web api tutorials will: using System.Web.Http; [AllowAnonymous] // define that all commands can be accessed without a login public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } And this example as well: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [AllowAnonymous] // only his command can be accessed without a login public string Hello() { return \"Hello from the basic controller in /api\"; } } Common Security Attributes for Custom WebAPI Controllers The exact set of attributes varies a bit on Dnn and Oqtane, but we're working on a unified set. As of now, these attributes are common in Dnn. You can apply all to both classes and methods: [AllowAnonymous] This allows non-identified users to use this endpoint. requires using System.Web.Http; [SupportedModules(\"2sxc,2sxc-app\")] This says to only respond to requests if they originate from a 2sxc module or a 2sxc-app Module. Note that this will only work if the Module Context is known. requires using DotNetNuke.Web.Api; [ValidateAntiForgeryToken] Verifies that the RequestVerificationToken in the header is valid. These requests will be blocked if the Anti-Forgery-Token is missing, invalid or is meant for another user. Note: this means such requests can only be called from a JS on a Dnn page requires DotNetNuke.Web.Api; [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] In place of the SecurityAccessLevel.Admin you can also use SecurityAccessLevel.Anonymous or other values. Note that this will only work if the Module Context is known. requires using DotNetNuke.Web.Api; Common Other Attributes (HttpGet, HttpPost, HttpDelete) These attributes [HttpGet], [HttpPost] and [HttpDelete] are not really security attributes, but because they often lead to problems we figured we should mention them. Adding these to your method means that your method will listen to the Verbs mentioned, and only to these verbs. So a method like this: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [HttpDelete] public string Hello() { return \"Hello from the basic controller in /api\"; } } ...will only respond to GET and DELETE requests, but not to POST. Using Multiple Attributes You can use many attributes on the same class or method like this: [HttpGet] [ValidateAntiForgeryToken] [SupportedModules(\"2sxc,2sxc-app\")] [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] { return \"Hello from the basic controller in /api\"; } In most cases it will do exactly what you expect - and each condition must be met for the command to process. Common Mistakes Combining HttpGet with ValidateAntiForgeryToken Warning Combining [HttpGet] and [ValidateAntiForgeryToken] will fail, as GET requests cannot add custom headers. Deny Access at Class level and Allowing at Method Level Warning Class level attributes are handled first, and if these result in denying the request then method-level attributes won't be checked. Using Context-Requiring-Attributes for External Access Warning Certain tags like [DnnModuleAuthorize(...)] or [SupportedModules(...)] require a context. If you plan to use the API from outside of the site (like from a mobile app) then those requests will not have the context, and fail. Using ValidateAntiForgeryToken for External Access Warning Classes/methods decorated with [ValidateAntiForgeryToken] will require the token, which is only available for calls made by JavaScript on the page itself. If you plan to use the API from outside of the site (like from a mobile app) then those requests will fail. Read also DotNet WebApi Security for 2sxc WebAPI and REST APIs - understanding Security for all Web API calls Context for 2sxc WebAPI and REST APIs - every request has a context, it's best you read up on that Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History These security features have been part of Dnn since ca. Dnn 6.0"
  },
  "net-code/web-api/hybrid/index.html": {
    "href": "net-code/web-api/hybrid/index.html",
    "title": "Custom C# Web API: Hybrid Dnn & Oqtane APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Web API: Hybrid Dnn & Oqtane APIs Dnn and Oqtane have a few differences because of these important factors: Different underlying C# and .net frameworks Different platforms (Dnn is different from Oqtane) Different security attributes for each platform Important This is very advanced stuff and only relevant if you want to create Apps which run on both Dnn and Oqtane. For most of your apps this is not relevant 2sxc Philosophy - Stay out of the Way Our philosophy is to not reinvent the wheel so it's important that we let you use the .net APIs as they are designed. Se we don't plan on creating another API which to hide the differences, but let you understand them and easily handle everything as needed. Core Strategies for Hybrid WebAPIs If you follow these three rules you should be good to go: Inherit from Custom.Hybrid.Api12 Use very common C# features and syntaxes which existed since C# 7.2 (so anything that runs in Dnn will also run in Oqtane) Use .net standard 2.0 APIs and avoid using System.Web Where necessary, use preprocessor directives as explained below The Preprocessor Directives C# has special #if preprocessor statements which are evaluated during compilation. Using this you can define which code should be used in Dnn and Oqtane. Here's an example: // Add namespaces to enable security in Oqtane & Dnn despite the differences #if OQTANE using Microsoft.AspNetCore.Authorization; // .net core [AllowAnonymous] & [Authorize] using Microsoft.AspNetCore.Mvc; // .net core [HttpGet] / [HttpPost] etc. using Oqtane.Shared; // Oqtane role names #else using System.Web.Http; // .net 4.5 [AllowAnonymous] / [HttpGet] using DotNetNuke.Web.Api; // [DnnModuleAuthorize] using DotNetNuke.Security; // SecurityAccessLevel.Xyz #endif // All commands can be accessed without security checks public class HybridController : ToSic.Custom.Api12 { [AllowAnonymous] // Works in Oqtane and Dnn [HttpGet] // Works in Oqtane and Dnn public string Hello() { return \"Hello from the basic controller in /api\"; } #if OQTANE [Authorize(Roles = RoleNames.Everyone)] #else [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Anonymous)] #endif [HttpGet] public int Square(int number) { return number * number; } } The following symbols are set when Api Controllers are compiled: Key True for Dnn True for Oqtane Comments NETCOREAPP ⛔ ✅ Only works in WebAPIs and code (.cs) OQTANE ⛔ ✅ Only works in WebAPIs and code (.cs) Important: These don't work in Razor on Oqtane 3+ because we cannot activate these in the compiler - so they only work in .cs files Use like this: #if OQTANE ... #endif #if OQTANE ... #else ... #endif #if !OQTANE ... #endif #if !OQTANE ... #else ... #endif You can't use #if Dnn ... #endif because of limitations in the dynamic C# compiler of Dnn. Just use #if !OQTANE ... #endif. Different C# and .net Frameworks Part Dnn 7 Dnn 9 Oqtane C# Language ca. 7 ca. 7 C# 9 .net Framework 4.5.1 4.7.2 .net core 5 .net Standard 1.6 2.0 2.0 Any hybrid controller must limit itself to features in .net standard 1.6 or 2.0, depending on the platforms you want to support. Note that any 2sxc standard apps are meant to still run in Dnn 4.7.2, so we'll restrict our work to support .net standard 1.6. This means our examples are more limited than what you will be doing. Differences in the Platforms If you are creating hybrid controllers, we'll assume that you usually don't need to access properties of Dnn or Oqtane. If you do, you'll have to use the standard mechanisms provided by these. In Dnn - use global objects like PortalSettings.Current In Oqtane use Dependency Injection To avoid the code from causing trouble during compilation, wrap the necessary differences in #if OQTANE ... #endif and #if !OQTANE ... #endif blocks Security Attribute Differences All APIs need to have the correct attributes to mark the security requirements. // Oqtane way [Authorize(Roles = RoleNames.Admin)] // Dnn way [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] The Attributes come from these namespaces: Dnn: DotNetNuke.Web.Api [DnnModuleAuthorize] - the most common security attribute [DnnAuthorize] - for special cases, we're not sure if it's ever used. my understanding is that it's for protecting an endpoint that will be accessed by users, but not from a module on the page, so the module-context would be missing. note that it's very different from the DnnModuleAuthorize [SupportedModules] - to limit access to an API from specific modules. You probabably won't ever use this. Oqtane: Microsoft.AspNetCore.Authorization [Authorize] - standard Authorize of .net core The list of possible values come from these namespaces/enums/constants: Dnn: DotNetNuke.Security.SecurityAccessLevel Example: #todoc Oqtane Core Roles Oqtane.Shared.RoleNames Example: [Authorize(Roles = RoleNames.Host)] Multiple: [Authorize(Roles = RoleNames.Host, RoleNames.Admin)] Oqtane Common Permissions: Oqtane.Shared.PolicyNames Example: [Authorize(Policy = PolicyNames.ViewPage)] Multiple: [Authorize(Policy = PolicyNames.ViewPage, PolicyNames.ViewFolder)] Permissions of this using DnnModuleAuthorize or Authorize Target Permission DnnAuthorize DnnModuleAuthorize Oqtane Authorize System Admin ? SecurityAccessLevel.Host RoleNames.Host Site Admin ? SecurityAccessLevel.Admin RoleNames.Admin Registered users ? ? RoleNames.Registered Anybody ? Anonymous RoleNames.Everyone Module Editor ? SecurityAccessLevel.Edit PolicyNames.EditModule PolicyNames.EditPage Module Viewer ? SecurityAccessLevel.View PolicyNames.ViewModule PolicyNames.ViewPage Module Permissions Manager ? SecurityAccessLevel.ViewPermissions RoleNames.Admin Module ControlPanel ? SecurityAccessLevel.ControlPanel RoleNames.Admin Module SkinObjects ? ? SecurityAccessLevel.SkinObject RoleNames.Admin ValidateAntiForgeryToken Differences Comparison Purpose Attribute Dnn Namespace Oqtane/.net Core Namespace Enforce Anti-Forgery [ValidateAntiForgeryToken] DotNetNuke.Web.Api Microsoft.AspNetCore.Mvc Skip Enforcing on a method even if Class enforces it [IgnoreAntiforgeryToken] (doesn't exist) Microsoft.AspNetCore.Mvc Auto Enforce on unsafe calls (POST, etc.) [AutoValidateAntiforgeryToken] (doesn't exist) Microsoft.AspNetCore.Mvc Sidenote: in the .net core implementation the attributes can also accept an order parameter which defaults to 1000. We believe you should never change this :) but it does allow for other security configurations than were possible in Dnn. HTTP Verbs like GET, POST All APIs need to have attributes like [HttpGet] and [HttpPost]. The main difference you need to be aware of is that they must come from a different namespace. Use the #if ... statements as shown in the example above. API Result JSON Output Standard Implementations: In Dnn WebApis all data is automatically converted to JSON. This was an early design decision of 2sxc and works great for most cases, but some edge cases (like responding with XML) is more difficult this way. In Oqtane (.net core 5) the default is more sophisticated. The methods return objects or values. In advanced cases they will return an ActionResult or ContentResult. The default encoding is as follows: Simple values like strings are returned just as-is Complex objects are serialized - by default as json So for anything more complex the behavior is often identical, but for simple values it's different unless you specify explicitly what you want: Value Type Dnn 2sxc API Oqtane Apis Comments 27 int 27 27 identical \"Hello World\" string \"Hello World\" Hello World Note missing quotes in Oqtane which makes this non-json [\"a\", \"b\"] string[] [\"a\", \"b\"] [\"a\", \"b\"] identical The most important difference is that by default, strings are not converted to JSON If you need to return a simple string and must ensure it's JSON on both platforms, add this attribute to your class or method: [Produces(\"application/json\")] This is in the namespace using Microsoft.AspNetCore.Mvc which you usually already have. Since Dnn won't know it, you will probably wrap it in an #if OQTANE like this: #if OQTANE [Produces(\"application/json\")] #endif History Introduced in 2sxc 12.00"
  },
  "net-code/web-api/index.html": {
    "href": "net-code/web-api/index.html",
    "title": "2sxc Custom C# Web APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Custom C# Web APIs You can easily create custom C# WebAPIs, and then access them from JavaScript or anywhere. What these endpoints do is completely up to you. you are here (click to zoom) - discover the stack .context-box-process .process-web-api { visibility: visible; } Access Endpoints with JavaScript You can find a good example on live tutorials or in the Mobius Forms App. Calling these is as follows: .../app/auto/api/[YourName] when accessing a WebApi of the current app (from a dnn-page with this module), as then 2sxc uses auto-detect .../app/[app-folder]/api/[YourName] when using this endpoint from external, as auto-detect can't work then. Most WebApi Actions will require additional parameters. Just add them as url-parameters like ?param1=This&param2=That Discover More in the Web API Tutorials We have an rich series of Web API tutorials. You should really check them out \uD83D\uDC4D. Basic Example A file in your app in the api folder called BooksController.cs could look like the following: using DotNetNuke.Security; using DotNetNuke.Web.Api; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Web.Http; public class BooksController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Anonymous)] [ValidateAntiForgeryToken] public object Persons() { return new ToSic.Sxc.Conversion.DataToDictionary(Edit.Enabled) .Convert(App.Data[\"Persons\"]); } } The custom controller BooksController must have the same name as the file and extends the ApiController controller. It has a method returning all items of the Persons data type. The method is decorated with several attributes: [HttGet] defines that the method must be invoked with HTTP GET [DnnModuleAuthorize(AccessLevel = ...)] defines the permission an invoker must have [ValidateAntiForgeryToken] ensures that a security token from the cookies is validated before the mehod is invoked The custom controller can be called with JavaScript like this: @inherits Custom.Hybrid.Razor14 @{ // Tell the page that we need the 2sxc Js APIs Kit.Page.Activate(\"2sxc.JsCore\"); } <!-- the button which loads everything --> <button type=\"button\" class=\"btn btn-primary\" onclick=\"getPersons(this)\"> Get Persons Custom </button> <script> // this script does the API call and then shows the result function getPersons(moduleContext) { $2sxc(moduleContext) .webApi.get('app/auto/api/books/persons') .then(function (results) { alert('Found ' + results.length + ' persons. \\n' + 'The first one is \"' + results[0].FirstName + ' ' + results[0].LastName + '\"\\n\\n' + 'The raw JSON: \\n' + JSON.stringify(results) ); }); } </script> The $2sxc API ensures that the GET request is send to the correct url /DesktopModules/2sxc/API/app/auto/api/Books/Persons. You can also read more about the sxc Controller. The Awesomeness of these API Controllers First and foremost, these API controllers let you run your code as you wish. But there's a lot more that make this the ideal choice for your code: Fast Development without ever Restarting 2sxc Web API Controllers are stored in your app as pure source code, and you can edit them at runtime. They will be compiled on the fly and don't require Dnn to restart. The built in source-code editor in 2sxc lets you make simple changes through your browser. And if you want more power then just open it in Visual Studio or Visual Studio Code. Simple Distribution and Tweaking 2sxc Apps can easily be exported and imported to other solutions. What's also typical is that new copies of the App may need some modifications to better suit the new needs. Since the C# files are included as source you can easily adapt the controllers to your needs. All 2sxc Objects Initialized Much of the productivity with 2sxc comes with the fact that so much is already done. When you create custom 2sxc Web APIs you automatically get everything like App and Data objects prepared for the context your code is running in. Notes Instead of App.Data[\"MyData\"] you can fetch data from another data source provided by 2sxc (for exmple from the App.Query[\"MyQueryData\"]) Sxc.Serializer.Prepare(...) converts the object returned by App.Data[\"MyData\"].List to a dynamic and serializable object Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "net-code/web-api/issue-http-response-message.html": {
    "href": "net-code/web-api/issue-http-response-message.html",
    "title": "Common Issue: Missing HttpResponseMessage | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Common Issue: Missing HttpResponseMessage The WebApi sometimes needs to return an HttpResponseMessage, for example to trigger redirects. In some cases you simply cannot get the code to run, with an error similar to this 2sxc Api Controller Finder: Error while selecting / compiling a controller for the request. Pls check the event-log and the code. See the inner exception for more details.\", \"ExceptionMessage\": \"[Some-Path]\\Portals\\0\\2sxc\\[Some-App]\\api\\InstallController.cs(23): error CS0012: The type 'System.Net.Http.HttpRequestMessage' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\", \"ExceptionType\": \"System.Web.HttpCompileException\", \"StackTrace\": \" at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResult(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetCompiledAssembly(String virtualPath) at ToSic.SexyContent.WebApi.AppApiControllerSelector.SelectController(HttpRequestMessage request) in C:\\Projects\\2SexyContent\\Web\\DesktopModules\\ToSIC_SexyContent\\Sxc WebApi\\AppApiControllerSelector.cs:line 77 The reason is that the compiler has a hard time figuring out where to locate this class. We believe it's because Dnn has gone through various .net versions and that makes these things a bit harder. The solution is to tell the Compiler that you're using System.Net.Http in the desired version. Add the add tag to the web.config in the location below: <configuration> <system.web> <compilation> <assemblies> <add assembly=\"System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /> ... Note: you shouldn't add the whole block - it should just show you where it must go History Reported in 2017"
  },
  "net-code/web-api/json-format.html": {
    "href": "net-code/web-api/json-format.html",
    "title": "Custom C# Web API - JSON Format | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Web API - JSON Format Background: JSON Format in WebApi Requests Today most JavaScript clients use JSON to communicate with the server. This is a very simple format, which is easy to read and write. It's also very easy to parse in JavaScript, which is why it's so popular. In the old days, Microsoft used XML for this, but it's much more complex and difficult to read and write. When 2sxc was created, JSON was already the standard, so we never used XML. But at that time, the json plugin Newtonsoft was the de-facto standard, so we used that. But nowadays System.Text.Json is the de-facto standard. This means that by default this is what is being used: On DNN on all base classes up until Custom.Hybrid.Api14 Newtonsoft is used for serialization On Oqtane all base classes use the new .net core serializer How to Go Modern In 2sxc 16 we introduced a new attribute called [JsonFormatter] - see JsonFormatterAttribute. When it's applied to: a WebApi Controller class a specific method of that class then it will use the new .net core serializer. It has the following effects: It can auto-convert IEntity objects as well as lists/arrays of IEntity objects By default it will use camelCase for all properties, which is the modern standard. Tip Remember that this applies to both POST data from the client, as well as response data. Example using ToSic.Sxc.WebApi; // For the [JsonFormatter] (see below) [AllowAnonymous] [JsonFormatter] public class Api14AttController : Custom.Hybrid.Api14 { [HttpGet] public object GetEntity() { return (App.Data.List.First()); } [HttpGet] public object GetEntities() { return App.Data.List; } } Effects on the POST Data Tip POST data is parsed case-insensitive, so it doesn't matter if the client sends camelCase or PascalCase - it will be parsed correctly. There are 2 important effects to keep in mind: Most JSON in the POST will be the same no matter which serializer is used Only exotic data such as binary files will be different Effects on Response Data Tip Response data is usually read by JavaScript, which is case sensitive. The main impact on Response Data is the client should expect camelCase instead of PascalCase. This can be configured if you want it differently, like this: [HttpGet] [JsonFormatter(Casing = Casing.Preserve)] // auto-convert but preserve casing public dynamic PersonsAutoPreserveCasing() { return App.Data[\"Persons\"]; } It will also auto-convert Entities for you, which used to be very difficult. See Custom C# Web API - Auto Convert Entities Recommended Reading Web API Tutorials JsonFormatterAttribute History New JsonFormatter introduced in 2sxc 16.00"
  },
  "web-api/content-rest-web-api.html": {
    "href": "web-api/content-rest-web-api.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Data REST and CRUD Web API"
  },
  "web-api/custom.html": {
    "href": "web-api/custom.html",
    "title": "2sxc Custom C# Web APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Custom C# Web APIs You can create fully custom C# Web APIs in an App. Since this is C# focused, it's documented here: 2sxc Custom C# Web APIs"
  },
  "web-api/custom/custom-web-api-base-class.html": {
    "href": "web-api/custom/custom-web-api-base-class.html",
    "title": "Custom C# Web API Base Classes | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Web API Base Classes Moved to Custom C# Web API Base Classes"
  },
  "web-api/custom/custom-web-api-dotnet-api.html": {
    "href": "web-api/custom/custom-web-api-dotnet-api.html",
    "title": "C# APIs in ApiController | 2sxc 19 for Dnn and Oqtane",
    "keywords": "C# APIs in ApiController Moved to C# APIs in ApiController"
  },
  "web-api/custom/custom-web-api-dotnet-saveinadam.html": {
    "href": "web-api/custom/custom-web-api-dotnet-saveinadam.html",
    "title": "SaveInAdam(...) Command in ApiController | 2sxc 19 for Dnn and Oqtane",
    "keywords": "SaveInAdam(...) Command in ApiController Moved to SaveInAdam(...) Command in ApiController"
  },
  "web-api/custom/custom-web-api-files.html": {
    "href": "web-api/custom/custom-web-api-files.html",
    "title": "Custom C# Web API File Structure | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Custom C# Web API File Structure Moved to Custom C# Web API File Structure"
  },
  "web-api/custom/custom-web-api-security.html": {
    "href": "web-api/custom/custom-web-api-security.html",
    "title": "Security & Permissions in Custom WebAPIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Security & Permissions in Custom WebAPIs Moved to Security & Permissions in Custom WebAPIs"
  },
  "web-api/custom/index.html": {
    "href": "web-api/custom/index.html",
    "title": "2sxc Custom C# Web APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "2sxc Custom C# Web APIs Moved to 2sxc Custom C# Web APIs"
  },
  "web-api/custom/issue-http-response-message.html": {
    "href": "web-api/custom/issue-http-response-message.html",
    "title": "Common Issue: Missing HttpResponseMessage | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Common Issue: Missing HttpResponseMessage Moved to Common Issue: Missing HttpResponseMessage"
  },
  "web-api/data-rest-web-api.html": {
    "href": "web-api/data-rest-web-api.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Data REST and CRUD Web API"
  },
  "web-api/data/index.html": {
    "href": "web-api/data/index.html",
    "title": "Data REST and CRUD Web API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Data REST and CRUD Web API you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-headless { visibility: visible; } 2sxc provides a full set of REST endpoints for CRUD (Create, Read, Update, Delete) operations like: Read a list of all items/entities Read a single item/entity Create an item/entity Create an item/entity which is metadata for something Update an item/entity Delete an item/entity Tip Starting in 2sxc 11.10+ the admin-UI has [built-in help](xref:WebApi.Help.AdminUiContentRest) to get started. These UIs also show sample code and everything. So you probably don't need to read the stuff here and just go ahead with that. Tip Starting with 2sxc v13, the data-api is .../app/.../data/TYPENAME. In previous versions, it's .../app/.../content/TYPENAME. JSON Data Format Read JSON Data Format used in WebAPI calls (technical) to understand the data format. Read Data-Items/Entities Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as SystemAdmin, so security is not an issue): [root-path]/app/auto/data/BlogPost ...then your JS would receive a JSON with all BlogPost items. Reading [root-path]/app/auto/data/BlogPost/1050 would give you exactly one BlogPost item (with the id 1050) Tip To figure out the exact path and the [root-path] part, best read about it in the admin-ui or work your way into the URLs for 2sxc WebAPI and REST APIs Create Data-Items/Entities Doing an http POST to this [root-path]/app/auto/data/BlogPost with a POST body of { \"Title\": \"changed title\"} would let you create the item. You will get a return message containing ID, GUID etc. of the new item. If your POST package also contains a EntityGuid then this will be used as the GUID for the new item. Update Data-Items/Entities Doing an http POST to this [root-path]/app/auto/data/BlogPost/1050 with a POST body of { \"Title\": \"changed title\"} would let you update the item 1050. Delete Data-Items/Entities Doing an http DELETE to this [root-path]/app/auto/data/BlogPost/1050 would delete the item 1050. JavaScript Helpers The $2sxc and the sxc Controller make it really easy to use this. Best to get familiar with them. About Security / Permissions Warning You are usually developing as a super-user, in which case these endpoints automatically work. If you want normal users to do certain things like create items, you need to configure the permissions. To use these endpoints for normal users, you would need to enable the permissions and then you can access them using the REST URLs. reading data requires read-permissions on that content-type writing data requires write-permissions or a content-type or on a specific item (owner-permissions) Use this Checklist to get started: Recommended Reading General WebApi Specs URL Schema History Introduced Data-REST API in 2sxc 5.x but on a .../content... endpoint Added in-admin help to access it in 11.10 Improved url to data to be .../data/... instead of the previous .../content/... in v13"
  },
  "web-api/headless/index.html": {
    "href": "web-api/headless/index.html",
    "title": "Headless WebAPIs in 2sxc | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Headless WebAPIs in 2sxc you are here (click to zoom) - discover the stack .context-box-summary .process-headless { visibility: visible; } Using a CMS like 2sxc as Headless means that the data can be used elsewhere both for showing and editing as needed. 2sxc provides 3 different WebAPIs for this: Built-in Content WebAPIs which are REST endpoints for CRUD (Create, Read, Update, Delete) operations Built-in Query WebAPIs which are read-only APIs to query data using VisualQuery Custom C# WebAPI controllers which you create to do anything you want We always recommend that you first experiment with the tutorials before you do anything else: Discover More in the Web API Tutorials We have an rich series of Web API tutorials. You should really check them out \uD83D\uDC4D. Fine-Tune Serialization of Headless Data If you use Queries you can now fine-tune how the data will be serialized. Read more about this. Read Also 2sxc Web API Various blogs posted on this topic (just google it) History Introduced Content-REST API in 2sxc 5.x More added in v7.1 Added in-admin help to access it in 11.10"
  },
  "web-api/help-admin-ui-content-rest.html": {
    "href": "web-api/help-admin-ui-content-rest.html",
    "title": "Built-in WebApi Help in the Admin-Dialogs (new in v11.10) | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Built-in WebApi Help in the Admin-Dialogs (new in v11.10) In 2sxc 11.10 we added dialogs in the Admin-UI so it's easier to figure out the endpoints. These UIs also show sample code and everything. Tip In 2sxc 11.10 this dialog was introduced for the Data section, and we'll add similar sections for Query and WebApi. History Introduced in 2sxc 11.10"
  },
  "web-api/index.html": {
    "href": "web-api/index.html",
    "title": "2sxc Web API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } 2sxc Web API 2sxc has a fully featured WebApi for use in JavaScript or as Headless CMS. So you can call HTTP GET to an endpoint like app/News/data/NewsItems/ and get a list of news items. You can also create / modify data using REST, access Queries and work with your custom Web-APIs - across all 2sxc platforms (Dnn / Oqtane / Custom) and with the security you need. Simple Example Here's an example JavaScript which would run in a 2sxc News-App on a Dnn page: // Get news as a promise var allNewsPromise = sxc.webApi.get('app/auto/data/News/'); // now log to console allNewsPromise.then(data => console.log(data)); This example has some magic happening in the background. Specifically 3 important things happen on the client before sending: The real URL which is requested is a bit longer, but the webApi takes care of that. The server needs to know what App and Module the script is calling from. This Context information is also added by the webApi. To add security, a crypto-token is added which will prove that the JavaScript requesting this is running on the page. This is also added by webApi. When the server receives the request, it too does important stuff. First it will use the URL and Context information to figure out what Site, Language and App should be accessed. The server will do some security checks to see if this request should be answered. Then it returns the data in a simple JSON format Get Started Step 1: Decide which Endpoint you need This checklist should help you decide: Getting Started Your 1-2-3 steps for using data endpoints are: Decide which endpoint you need Create / Publish the endpoint For standard endpoints, set the permissions as you need them For custom endpoints, write the C# code Write the code to read the data (typically in JavaScript) Conventions Used REST means that there is a url convention to access data like .../blogposts/25 REST also specifies that an HTTP GET is for reading, HTTP POST is for writing, etc. All the APIs use JSON for sending/receiving data. This is the default schema. Demo App and further links You should find some code examples in this demo App REST and WebApi Tutorial Razor Web API tutorials Recommended Reading Data CRUD API DotNet WebApi Concepts: Polymorphisms History Introduced Content-REST API in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "web-api/query-rest-web-api.html": {
    "href": "web-api/query-rest-web-api.html",
    "title": "| 2sxc 19 for Dnn and Oqtane",
    "keywords": "Moved to Query REST Web API"
  },
  "web-api/query/index.html": {
    "href": "web-api/query/index.html",
    "title": "Query REST Web API | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Query REST Web API you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-headless { visibility: visible; } Every VisualQuery you create has a REST URL. If you set the permissions, you can then read from the Query through REST. You can also pass query-parameters in the URL. Queries are Read APIs. Standard Query Calls The Query endpoint can be accessed on .../app/auto/query/[your-query-name] when you're accessing a query of the current App (from a dnn-page with this module), as then 2sxc uses auto-detect .../app/[app-folder]/query/[your-query-name] using this endpoint from external (other module, other page, other website) as then auto-detect can't work. \uD83D\uDC49 read more about different URLs depending on how you access it Read Only Certain Streams A query may have many streams that your client may not necessarily need. To limit the results to only specific streams, add the stream name to the url, like this: .../app/auto/query/[your-query-name]/Default HTTP GET only Note that Query endpoints only support the http-verb GET. Naming Recommendations As the query-name is used in the path it's best-practice to use query-names without spaces and special characters. You can get it to work even with such specials, but we recommend you don't do that for simplicity. POST with GUID filter (WIP) In 2sxc 11.20 we're experimenting with a post-access to the query which will allow you to also specify GUIDs to filter. This is not final yet. Setting Security Querying a query requires read-permissions on that query. History Introduced Content-REST API in 2sxc 5.x Queries introduced ca. 2sxc 6 Query-API enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api) Option to provide GUIDs to limit what is returned 2sxc 11.20 WIP"
  },
  "web-api/specs/url-schema.html": {
    "href": "web-api/specs/url-schema.html",
    "title": "URLs for 2sxc WebAPI and REST APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "URLs for 2sxc WebAPI and REST APIs you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } The URL Schema describes how the paths look to access WebAPIs. When using $2sxc JS or other helpers like dnn-sxc-angular most if this is automatic. So this information is most useful if you are doing something very custom or accessing 2sxc APIs from externally (like mobile apps). Finding the right URLs in the Admin-Dialogs Tip Starting in 2sxc 11.10+ the admin-UI has [built-in help](xref:WebApi.Help.AdminUiContentRest) to get started. These UIs also show sample code and everything. So you probably don't need to read the stuff here and just go ahead with that. Tip In 2sxc 11.10 this dialog was introduced for the Data section, and we'll add similar sections for Query and WebApi. So the remaining information on this page is really only for those who really want to dive in deep. Note about Platform and Version Differences The exact schema for the url varies depending on the platform you're using. So Dnn 7 is different from Dnn 9, and Oqtane is different again. Also older versions of 2sxc had URLs which still work today but are not recommended any more, because they were not well structured. In 2sxc 11.10+ we introduced REST-API help dialogs in the Admin-UI, so from now on you 2sxc will tell you what URLs you can use. So the information you find here is valid, but you probably don't need it URL Schema Specifications (Advanced) One of the most confusing aspects when using the REST API or custom WebApis is finding the right URL to talk to the API. Read this to help you understand what's going on and get started quickly. Every 2sxc REST URL is built with the following parts: [root]/app/[app-identity]/[app-part]/[specifics] The root is determined by Dnn and changes a bit by Dnn version, portal, and language configuration. more The app-identity says what app we're addressing. It's often auto for auto-detection, but when auto-detection isn't available, it's the app-folder name. more the app-part determines if we're accessing data, query or api of the app. The specifics is a path part describing what exactly what we're accessing and varies depending on the API. Part 1: The Root Path The Root in Dnn 9+ In Dnn 9 the root was shortened to: [site-root-with-language]/api/2sxc/... Note The old root from Dnn 7 and 8 still work in Dnn 9 for compatibility. The Root in Dnn 7 and 8 Dnn 7 & 8: [site-root-with-language]/desktopmodules/2sxc/api/... Warning An easy thing to overlook is that in Dnn 7 and 8 it was 2sxc/api but in Dnn 9 it's api/2sxc The Root in Oqtane This is still WIP, but most likely it's [domain]/[site-id-number]/api/2sxc/... Part 2: The App-Identity When to use or not-use Auto-Detection auto The App-identity can be either the word auto to use auto-detection, or the app-folder-name if you can't use auto-detection. Tip Whenever you're working in Dnn and accessing the endpoint from a module that contains the same App, then you should use auto-detection. Warning Auto-Detection relies on Dnn mechanisms to detect the Context (usually sending the PageId and ModuleId in HTTP-headers). 2sxc uses these headers to figure out what App you're using. If something fails in auto-detection, you're probably not using the normal Dnn conventions for making REST calls. Warning When calling an endpoint from another website or a mobile App, you cannot use auto but must specify the app-folder name. Or you can provide Context by adding ?PageId=...&ModuleId=... to the url. Tip If you're not using auto-detection, then the root path must be absolutely correct. Here's why: If you have multiple portals then each portal could have other apps, or sometimes even the same app (like a Blog app). In this case, the root-path says what portal is being used, which in turn is important to get the correct app. App-Identity Examples To access an API (in this example the data) from JS code in the same app you can rely on auto-detection of the app, like this: .../app/auto/data/... To access the same Glossary-App from elsewhere, like from the skin (for example, to highlight all words to which your glossary-app has definitions), from another app, or from another website, you would specify the folder name as auto-detection won't work. Like this: .../app/Glossary/data/... This applies to all endpoints like data, query, api. Part 3: App-Part Data, Query or Web-Api Part 3a: App-Part Data Tip Starting with 2sxc v13, the data-api is .../app/.../data/TYPENAME. In previous versions, it's .../app/.../content/TYPENAME. If your part is data then you're using the normal content/entity REST API. It supports all common HTTP verbs. In this case you have the following possibilities after data/: .../data/[YourContentType] HTTP GET will retrieve all items of this type .../data/[your-content-type]/[item-id] where item-id is the number or the GUID HTTP GET will get one item HTTP POST is used to create an item or update it HTTP DELETE will delete the item Warning This requires that permissions are configured to allow it. The permissions are very powerful so make sure you understand them. Tip You can also configure permissions in ways that allow users to only create draft items (which would then require an admin to publish it) Data Example Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as host, so security is not an issue): [root-path]/app/auto/data/BlogPost ...then your JS would receive a JSON with all BlogPost items. More examples: Reading [root-path]/app/auto/data/BlogPost/1050 would give you exactly one BlogPost item (with the id 1050) HTTP POST to [root-path]/app/auto/data/BlogPost/1050 with a POST body of { \"Title\": \"changed title\"} would let you update the item 1050. Part 3b: App-Part Query The Query endpoint can be accessed on .../query/[your-query-name]. Note that Query endpoints only support the HTTP-verb GET, since it's read-only. Warning This requires that permissions are configured to allow it. The permissions are very powerful so make sure you understand them. Tip Make sure you give your queries simple names without spaces if you intend to use them in REST calls. Tip Queries can also expect url-parameters if they are configured to do this. So if you query has an ID-filter which expects a token [QueryString:id] you can also call your query like .../app/auto/query/GetWithId?id=27 Query Example Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as host, so security is not an issue): [root-path]/app/auto/query/BlogPostsByAuthor?Author=Daniel%20Mettler This would run the pre-defined query and return the Blog Posts of the author Daniel Mettler. Part 3c: App-Part Custom C# Web Api Custom WebAPI use one of these schemas .../api/[controller-name]/[action-or-more-params] .../[edition]/api/[controller-name]/[action-or-more-params] Your C# code determines what HTTP-verbs will work (GET, POST, etc.). Your code is also responsible for determining what permissions are used, like Anonymous etc. The [edition] is relevant if you're using Polymorphism. So if you don't specify an edition, the controller is expected to be in the [AppFolder]\\api but if you do use polymorphism the controller must be in [AppFolder]\\[edition]\\api. Read also DotNet WebApi Concepts: Polymorphisms Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "web-api/specs/webapi-context.html": {
    "href": "web-api/specs/webapi-context.html",
    "title": "Context for 2sxc WebAPI and REST APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Context for 2sxc WebAPI and REST APIs you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } Whenever the server receives an HTTP request it must determine what it's for to figure out what to do. Tip The Context contains default information about the request incl. the site/app it's for, what languages to use etc. In most cases the client will include the necessary information automatically. The following section is helpful if... ...you need to manually include the context, like when you're request originates from outside of the ecosystem ...you need to override some context information, like when your JS is on a German site but want to get the English data In these docs we explain what each part of the context does, where it's from, what it's for and how to optionally override it. 1. The Site / Portal Context (required) Since our platforms (Dnn/Oqtane) could have multiple sites in the same installation, the first thing that must be determined is what site this request is for. How the Site is Automatically Detected In Dnn a site is always identified by the root path to the site, as it's configured in Dnn. Examples: https://www.2sxc.org is site 0 https://2sic.org is site 0 https://2sxc.org/en is site 0 https://2sxc.org/de is site 0 https://2sxc.org/dnn-tutorials/ is site 24 In Oqtane a site is always identified through a number in the route (the domain is ignored). Examples: .../1/api/... is site 1 .../2/api/... is site 2 What is Affected by the Site Context The Site context is important for various additional pieces of context: The languages available (can be different on each site) The primary language (configured per site) The current language (can only be one of the available languages or primary) The app (see below, apps are installed on sites) Providing an Own Value or Overriding the Default Just call the other endpoint with the correct URL. 2. Current Language The current language is necessary for read operations to determine what values to actually use. In case of a no-language or single-language site it's not important. How the Current Language is Automatically Detected In Dnn the current language is part of the url, as configured in the site, so it's dependent on the Site Context. Here some examples: 2sxc.org/en would be configured to be en-US 2sxc.org/de would be configured to be de-DE de.2sxc.org would be configured to be de-DE In Oqtane the convention isn't clear yet (WIP) What is Affected by the Current Language All read operations in the API and internally will try to access values meant for that language. Return values will also prefer that language (if translations exist). Providing an Own Value or Overriding the Current Language The most common way to use another language is to use the appropriate url which matches that language. Another way to do it is to include a parameter in the request like ?language=en. Warning Setting the ?language=xxx parameter in Dnn has a suprising performance penalty of ca. 200-300ms. So if you can, prefer to just use the correct initial path. 3. Page and Module Context (optional) Whenever the API call is used on a Dnn or Oqtane page, the HTTP call will usually include this information in the request to assist in auto-detecting the App Context. How the Page and Module are Automatically Detected The standard implementation is that API-Calls include special HTTP headers with these IDs. These headers are used: PageId (number) ModuleId (number) Note For historical reasons, Dnn includes a TabId which contains the same value as PageId. The backend will treat these as the same header. We changed this to PageId in v11 and for future stability please use PageId. What is Affected by the Page and Module Context The primary use for the Page/Module Context is figuring out what App Context to use. So if the Module 2472 on Page 51 on Portal 7 is a Blog App then, then the App Context will be this Blog App. The second use is providing data for this Module Instance. So if a module has content or data assigned to it (like a Category List showing 3 selected Categories), then this data will be available automatically. The third important use is for permission detection: if the current user has certain permissions on this page/module, then these permissions also apply to the current API request. If the Page/Module context is missing, then only default permissions apply. The final and obvious use is that certain backend APIs will know these values, so that objects like CmsContext.Page.Id have these values for the scripts to use. See also ICmsContext Providing an Own Value or Overriding the Default Page/Module The default calls on the 2sxc JS API including dnn-sxc-angular will automatically set these headers if it can. If you have a reason to include alternate values, just make sure that you change the headers either by modifying the request before it's sent, or by using another http-caller like jQuery. 4. App Context (required) All WebAPI operations happen inside an App. They are either Content/Query REST calls (so they apply to the app) or custom WebApis (which are in the app-folder) - so the App must always be known. How the App Context is Automatically Detected The App Context requires that the Site Context is already known. Then there are two ways for the App Context to be detected: If the Page Context and Module Context are known, then this automatically leads to the app to be used, as it's the app on that module. Note: In rare cases the page and module are set, but the app has not been selected yet. This edge case only affects internal APIs of 2sxc, not the normal use we discuss here If Page/Module are not known or not provided, then the app is chosen based on the App-Name in the url. This is the default mechanism used when calling endpoints from other pages or mobile apps. If both the Page/Module Context and the App-Name are provided, then the App-Name is prioritized. If it is about the same App, then the full context (with Page/Module) is used, allowing more permissions to work. If neither Page/Module nor App Context are known, then the request will fail. What is Affected by the App Context The App Context will be used for almost everything, including these aspects: The data and configuration used (App.Data etc.) The path to code (like custom WebApi Controllers) Permissions on the App or Content-Types Providing an Own Value or Overriding the Default App Context To access another app you will usually supply another App-Name in the url for the API-Call. In rare cases you may also provide other Page and Module Context headers, but this is usually not a good idea. 5. Current User (required) All operations happen in the context of a user, either Anonymous or the Current User Identity. How the Current User is Automatically Detected The current user is always provided by the environment (Dnn or Oqtane). If no user is identified, the platform always tells 2sxc that the user is Anonymous. What is Affected by the Current User Read / Write permissions (either directly or indirectly if a user is in a group with permissions) Read-Draft permissions (admins may also see data which isn't published yet) Identity used when saving data Providing an Own Value or Overriding the Default App Context The user is fixed to being the real user logged in (or Anonymous). So if you need to execute something in another identity, make sure your system logs into Dnn/Oqtane using the built-in mechanisms (like JWT) and then perform the request using that authentication. 6. Other: Edition (optional) This only applies to custom WebAPI controllers. Custom WebAPI controllers are usually stored in the folder [App-Root]/api. You can also place them in subfolders like [App-Root]/live/api in which case live would be an edition. This allows you to have multiple editions of the same controller for staging, testing and more. As it's not really context information, it's only mentioned here. To find out more, read about the URL Schema and about Polymorphisms. 6. Other: RequestVerificationToken (maybe optional) Dnn and Oqtane have a security system to ensure that requests are coming from the page itself and that they are using the right login. This is not really context, so the full mechanism is explained in [Security][xref:WebApi.Specs.Security]. Read also URL Schema Concepts: Polymorphisms You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "web-api/specs/webapi-security.html": {
    "href": "web-api/specs/webapi-security.html",
    "title": "Security for 2sxc WebAPI and REST APIs | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Security for 2sxc WebAPI and REST APIs you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } All WebAPI calls in Dnn, Oqtane and 2sxc have some security features. In the basic use cases it's straightforward: the current user may do some things, and that should be allowed. These docs should help you understand where these things are configured and what to change if you need adjustments. Request Security Each request contains information needed for the backend to determine if this request should be answered or not. In Dnn and Oqtane this is the User Identity and the RequestVerificationToken. User Identity By default, the user is logged in using normal web conventions and from then on the user will have an encrypted cookie identifying this person. In advanced scenarios you may also use JWT aka Json Web Tokens. This is useful in mobile app scenarios and scenarios where the client application is remote (like a web-server or a SPA). Consult the docs of Dnn or Oqtane to find out how to use this. You could also use custom login systems like OAuth, but in these cases you will really need to figure out how to implement it in Dnn or Oqtane. Anti Forgery Token: RequestVerificationToken ASP.net has a feature to prevent XSS (Cross Site Scripting / Cross-Site Request Forgery). To make this possible, pages viewed by a user have some hidden key included which is encrypted to include identity-information for this user. It is included in all HTTP requests except for GET requests. If an endpoint is secured to check for this using [ValidateAntiForgeryToken], then only requests containing this header will be processed. Tip Not all endpoints require this, but many do. It's commonly enforced on admin-endpoints and on any endpoint which are not expected to be used from outside of the site. It's best practice to require this where possible. Warning GET requests don't include this header, so don't enforce checking this in the backend for GET endpoints. When you use standard 2sxc JS WebAPI calls, the RequestVerificationToken is automatically included in the request. If you use your own JS API stack or plain vanilla browser implementations, make sure you add it. REST Content and Query Endpoint Security The built-in Content and Query endpoints use configuration based security. Prerequisites: Platform Permissions are OK Just to be aware of the obvious: if the platform (Dnn/Oqtane) don't allow access to the endpoints for whatever reason, then even the built-in endpoints won't do anything. Default Security Configuration: Nothing is allowed Both Content and Query are by default only available to admins and super-users. To make these available to other users (incl. Anonymous) this must be configured. Opening Security Configuration These are the places you can configure to open security: On an App you can give general permissions that apply to all content types. This is usually not recommended. On a Query you can configure read permissions for specific users or user groups. On a Content-Type (the schema that says what fields exist) you can configure many permissions incl. read and write. You can even configure more exotic permissions like: Anonymous users can create data, but they are set to draft and not visible Registered users can create data and only edit data which they created Note Permissions are all locked by default, and adding permissions will only open up permissions. There are no deny-permissions. Warning Some permissions like If the user has View permissions, allow Read require a Module Context since that's required to detect if the condition View Permissions is met. Custom WebAPI Permissions This is documented separately in Security & Permissions in Custom WebAPIs Read also DotNet WebApi Context for 2sxc WebAPI and REST APIs - every request has a context, it's best you read up on that Concepts: Polymorphisms Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "xref.html": {
    "href": "xref.html",
    "title": "Find and Redirect | 2sxc 19 for Dnn and Oqtane",
    "keywords": "Find and Redirect This page will redirect you to the correct page based on an XREF documentation reference. Looking for: loading... Target is: loading target... Auto redirect in 1 second unless you press escape or XREF not found... cancelled Internal Notes / Information Tip This is the old page, use /find from now on History Introduced ca. 2022 handling inbound links, using the go.2sxc.org/xref17 shortlink Improved 2025-02-15 with the nicer go.2sxc.org/find shortlink; also changing it to /find so remove this..."
  }
}